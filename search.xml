<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Linux（1-目录文件操作）</title>
    <url>/blog/2024/11/17/%E8%BF%90%E7%BB%B4/Linux/Linux%EF%BC%881-%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%EF%BC%89/</url>
    <content><![CDATA[<h2 id="Linux-系统目录结构图">Linux 系统目录结构图</h2>
<p><img src="1.jpg" alt=""></p>
<ol>
<li>/root：该目录为系统管理员的用户主目录</li>
<li>/bin（Binary）：存放着最经常使用的命令</li>
<li>/boot：存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件</li>
<li>/dev（Device）：存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的</li>
<li>/ect：存放所有的系统管理所需要的配置文件和子目录</li>
<li>/home：用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账户命名的</li>
<li>/var：存放着在不断扩充着的东西，习惯将那些经常被修改的目录放在这个目录下，包括各种日志文件</li>
<li>/lib：存放着系统最基本的动态连接共享库，其作用类似于 Windows 的 DLL 文件，几乎所有的应用程序都需要用到这些共享库</li>
<li>/usr：用户的很多应用程序和文件都放在这个目录下，类似于 Windows 下的 program files 目录</li>
<li>/usr/bin：系统用户使用的应用程序</li>
<li>/usr/sbin：超级用户使用的比较高级的管理程序和系统守护程序</li>
<li>/usr/src：内核源代码默认的放置目录</li>
<li>/media：Linux 系统会自动识别一些设备，例如 U 盘、光驱等，当识别后，Linux 会把识别的设备挂载到这个目录下</li>
<li>/opt：给主机额外安装软件所摆放的目录</li>
<li>/proc：一个虚拟的目录，是系统内存的映射，可以通过直接访问这个目录来获取系统信息</li>
<li>/sbin（s 指 Super User）：存放的是系统管理员使用的系统管理程序</li>
<li>/srv：存放一些服务启动之后需要提取的数据</li>
<li>/tmp：用来存放一些临时文件</li>
</ol>
<h2 id="目录操作命令">目录操作命令</h2>
<h3 id="cd：目录切换">cd：目录切换</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd / ：切换到根目录</span><br><span class="line">cd /usr：切换到根目录下的usr目录</span><br><span class="line">cd ..：切换到上一级目录</span><br><span class="line">cd ~：切换到home目录</span><br><span class="line">cd -：切换到上次访问的目录</span><br></pre></td></tr></table></figure>
<h3 id="ls：目录查看">ls：目录查看</h3>
<ol>
<li>-l：以长格式查看文件和目录</li>
<li>-o：作用同-l，显示除用户组外的详细信息</li>
<li>-a：查看当前目录下的所有目录和文件（包括隐藏的文件）</li>
<li>-R：遇到目录要进行递归展开（继续列出目录下面的文件和内容）</li>
<li>-d：只列出目录，不列出其他内容</li>
<li>-S/-t：按大小/时间排序</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls：查看当前目录下的所有目录和文件</span><br><span class="line">ls -a：查看当前目录下的所有目录和文件（包括隐藏的文件）</span><br><span class="line">ls -l 或 ll：列表查看当前目录下的所有目录和文件（列表查看，显示更多信息）</span><br><span class="line">ls /dir：查看指定目录下的所有目录和文件，如：ls /usr</span><br></pre></td></tr></table></figure>
<h3 id="mkdir：创建目录">mkdir：创建目录</h3>
<ol>
<li>-m（mode）：配置文件的权限，不需要看默认权限 (umask) 的脸色</li>
<li>-p（parents）：直接将所需要的目录（包含上一级目录）递归创建起来</li>
<li>-v（verbose）：为每一个创建的目录打印一个信息</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir aaa：在当前目录下创建一个名为aaa的目录</span><br><span class="line">mkdir /usr/aaa：在指定目录usr（已存在）下创建一个名为aaa的目录</span><br><span class="line">mkdir -p test2/test3：递归创建多个目录</span><br><span class="line">mkdir -v test6：创建目录打印输出信息</span><br><span class="line">mkdir -m=r-- test1：创建一个test1目录，同时目录所有者、用户组和其他用户针对该目录赋予只读权限</span><br><span class="line">mkdir -m=777 test1：创建一个test1目录，同时目录所有者、用户组和其他用户针对该目录赋予所有权限</span><br></pre></td></tr></table></figure>
<h3 id="rm：删除目录">rm：删除目录</h3>
<ol>
<li>-r 或-R：递归处理，将指定目录下的所有文件与子目录一并处理</li>
<li>-f：强制删除文件或目录</li>
<li>-i：删除已有文件或目录之前先询问用户</li>
<li>-v：打印操作的信息</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">删除文件：</span><br><span class="line">rm a.txt：删除当前目录下的a文件</span><br><span class="line">rm -f a.txt：删除当前目录的的a文件（不询问）</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除目录：</span></span><br><span class="line">rm -r aaa：递归删除当前目录下的aaa目录</span><br><span class="line">rm -rf aaa：递归删除当前目录下的aaa目录（不询问）</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">全部删除：</span></span><br><span class="line">rm -rf * ：将当前目录下的所有目录和文件全部删除</span><br><span class="line">rm -rf /* ：【自杀命令！慎用！慎用！慎用！】将根目录下的所有文件全部删除，删库跑路</span><br></pre></td></tr></table></figure>
<h3 id="mv：目录修改">mv：目录修改</h3>
<ol>
<li>-b：当文件存在时，覆盖前为其创建一个备份</li>
<li>-f：force 强制，如果目标文件已经存在，不会询问而直接覆盖</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">重命名目录：mv 当前目录 新目录</span><br><span class="line">mv aaa bbb</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重命名文件</span></span><br><span class="line">mv a.txt b.txt</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">剪切目录：<span class="built_in">mv</span> 目录名称 目录的新位置</span></span><br><span class="line">mv /usr/tmp/aaa /usr</span><br></pre></td></tr></table></figure>
<h3 id="cp：目录复制">cp：目录复制</h3>
<ol>
<li>-r：代表递归</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">贝目录</span><br><span class="line">cp -r /usr/tmp/aaa /usr</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">拷贝文件</span></span><br><span class="line">cp a.txt b.txt</span><br></pre></td></tr></table></figure>
<h3 id="pwd：查看当前目录">pwd：查看当前目录</h3>
<h2 id="文件操作命令">文件操作命令</h2>
<h3 id="touch：新建文件">touch：新建文件</h3>
<p>语法：touch 文件名</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">touch a.txt</span><br></pre></td></tr></table></figure>
<h3 id="rm：删除文件">rm：删除文件</h3>
<p>语法：rm -rf 文件名</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf a.txt</span><br></pre></td></tr></table></figure>
<h3 id="vi-或-vim：修改文件">vi 或 vim：修改文件</h3>
<h4 id="切换插入模式">切换插入模式</h4>
<ol>
<li>i：切换到输入模式，在光标当前位置开始输入文本</li>
<li>a：进入插入模式，在光标下一个位置开始输入文本</li>
<li>o：在当前行的下方插入一个新行，并进入插入模式</li>
<li>O：在当前行的上方插入一个新行，并进入插入模式</li>
</ol>
<h4 id="切换末行模式">切换末行模式</h4>
<ol>
<li>:：切换到底线命令模式，以在最底一行输入命令</li>
<li>: w：保存文件</li>
<li>: q：退出 vim 编辑器</li>
<li>: wq：保存并退出编辑</li>
<li>: q!：强制退出 vim 编辑器，不保存修改</li>
</ol>
<h4 id="删除、复制和粘贴">删除、复制和粘贴</h4>
<ol>
<li>x：删除当前光标所在处的字符</li>
<li>D：删除从光标到行尾的所有内容</li>
<li>dd：删除光标所在的一行</li>
<li>ndd：删除光标所在的向下 n 行</li>
<li>yy：复制光标所在的一行</li>
<li>nyy：复制光标所在的向下 n 行</li>
<li>p：粘贴剪贴板内容到光标下方</li>
<li>P：粘贴剪贴板内容到光标上方</li>
<li>r：替换光标下的字符</li>
<li>R：进入替换模式，替换当前光标后的内容，直到按 Esc 退出</li>
</ol>
<h4 id="查找和替换">查找和替换</h4>
<ol>
<li>/字符串：向下寻找一个名为字符串的字符串</li>
<li>?字符串：向上寻找一个名为字符串的字符串</li>
<li>n：重复上一次搜索，向下查找下一个匹配</li>
<li>N：重复上一次搜索，向上查找上一个匹配</li>
<li>:%s/old/new/g：将整个文件中的 old 替换为 new</li>
<li>:%s/old/new/gc：替换前进行确认</li>
</ol>
<h4 id="撤销和恢复">撤销和恢复</h4>
<ol>
<li>u：撤销上一次操作</li>
<li>Ctrl+r：重做上一次的操作</li>
</ol>
<p><img src="2.png" alt=""></p>
<p>命令行模式下的常用命令：</p>
<ol>
<li>shift+z+z：保存并退出快捷键</li>
<li>shift+g：光标跳到最后一行快捷键</li>
<li>set  noreadonly：修改 readonly 形式</li>
</ol>
<h3 id="查看文件">查看文件</h3>
<h4 id="cat：第一行开始显示">cat：第一行开始显示</h4>
<p>格式：cat [options] 文件名</p>
<ol>
<li>-b：列出行号，仅针对非空白行做行号显示，空白行不标行号</li>
<li>-n：列出行号，连同空白行也会有行号</li>
<li>-s：将连续的空行压缩为单个空行</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat a.txt</span><br><span class="line">cat file1.txt file2.txt # 将多个文件的内容合并并显示</span><br><span class="line">cat -n myfile.txt # 显示文件内容并包括行号</span><br><span class="line">cat -s myfile.txt # 压缩空行</span><br></pre></td></tr></table></figure>
<h4 id="more：百分比显示">more：百分比显示</h4>
<p>格式：more [options] 文件名</p>
<ol>
<li>空白键：向下翻一页</li>
<li>Enter：向下翻一行</li>
<li>b：往回翻页</li>
<li>q：退出查看</li>
<li>-数字 n：查看 n 行</li>
<li>+数字 n：从第 n 行开始看</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">more a.txt</span><br></pre></td></tr></table></figure>
<h4 id="less：翻页查看">less：翻页查看</h4>
<p>格式：less [options] 文件名</p>
<ol>
<li>上下键：上下翻页</li>
<li>/字符串：代表在这个显示的内容中，向下搜寻 [字符串] 这个关键字</li>
<li>?字符串：代表在这个显示的内容中，向上搜寻 [字符串] 这个关键字</li>
</ol>
<ul>
<li>n：向下找下一个</li>
<li>N：向上找上一个</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">less a.txt</span><br></pre></td></tr></table></figure>
<h4 id="tail：取出文件后面几行">tail：取出文件后面几行</h4>
<p>格式：tail [options] 文件名</p>
<ol>
<li>-f：实时打印文件内容</li>
<li>-n 数字 m：显示文件最后 m 行内容</li>
<li>-c 数字 m：显示文件最后 m 个字符</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">显示文件的最后 10 行</span><br><span class="line">tail myfile.txt</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示文件的最后 20 行</span></span><br><span class="line">tail -n 20 myfile.txt</span><br><span class="line">tail -20 myfile.txt</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">实时追踪查看日志文件的新内容</span></span><br><span class="line">tail -f /var/log/syslog</span><br><span class="line">tail -20f /var/log/syslog</span><br></pre></td></tr></table></figure>
<h4 id="head：取出文件前面几行">head：取出文件前面几行</h4>
<p>格式：head [options] 文件名</p>
<ol>
<li>-n 数字 m：显示文件前 m 行内容</li>
<li>-c 数字 m：显示文件前 m 个字符</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">显示文件的前 10 行</span><br><span class="line">head myfile.txt</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示文件的前 5 行</span></span><br><span class="line">head -5 myfile.txt</span><br><span class="line">head -n 5 myfile.txt</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示文件的前 20 字节</span></span><br><span class="line">head -c 20 myfile.txt</span><br></pre></td></tr></table></figure>
<h2 id="查找命令">查找命令</h2>
<h3 id="grep：过滤查找">grep：过滤查找</h3>
<p>语法：grep [options] pattern [file…]</p>
<ol>
<li>-n：显示匹配行及行号</li>
<li>-i：忽略字母大小写</li>
<li>-w：只匹配整个单词，而不是字符串的一部分（如匹配’magic’，而不是’magical’）</li>
<li>-l：列出匹配文件内容的文件名</li>
<li>-c：统计匹配成功的行数</li>
<li>–color：匹配到的关键词会高亮显示</li>
<li>-r：递归的搜索目录</li>
<li>-v：排除对应的字符串</li>
<li>-o：只显示匹配的字符串</li>
<li>-a（after）：打印搜索的字符串后 n 行的数据</li>
<li>-b（before）：打印搜索的字符串前 n 行的数据</li>
<li>-c（both）：打印搜索的字符串前后 n 行的数据</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep -l &#x27;oldboy&#x27; /oldboy/*</span><br><span class="line">grep -i &#x27;OLDBOY&#x27; /oldboy/oldboy.txt</span><br><span class="line">grep -n &#x27;man&#x27; /oldboy/oldboy.txt</span><br><span class="line"></span><br><span class="line">grep -r &quot;ramesh&quot; * # 使用-r 参数来实现递归的搜索目录</span><br><span class="line">grep -c &quot;pattern&quot; filename # 计算出命中匹配的总行数：6</span><br><span class="line">grep -iw &quot;is&quot; demo_file # 只会完整的匹配 is 这个单词</span><br><span class="line">grep -A 3 -i &quot;example&quot; demo_text # After 连着打印“example” 单词后的 2 行，共 3 行</span><br><span class="line">grep -B 3 -i &quot;example&quot; demo_text # Before 连着打印“example” 单词前的 2 行，共 3 行</span><br><span class="line">grep -C 3 -i &quot;example&quot; demo_text # Both 连着打印“example” 单词前后的 2 行，共 5 行</span><br><span class="line">grep -v &quot;go&quot; demo_text  # 显示哪些不包含 go 子串的行</span><br><span class="line">grep -v -e &quot;pattern1&quot; -e &quot;pattern2&quot; filename # 显示不符合 pattern1 和 pattern2 的结果的数据</span><br><span class="line">grep -o &quot;is.*line&quot; demo_file  # 只显示 is 和 line 之间的字符串，而不是一行</span><br></pre></td></tr></table></figure>
<p><strong>管道符结合</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">查找指定 ssh 服务进程 </span><br><span class="line">ps -ef | grep sshd</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查找指定服务进程，排除 gerp 身</span> </span><br><span class="line">ps -ef | grep sshd | grep -v grep</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查找指定进程个数</span></span><br><span class="line">ps -ef | grep sshd -c</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示文件行数</span></span><br><span class="line">cat b.txt | grep -n b.txt</span><br></pre></td></tr></table></figure>
<h3 id="find：目录查找">find：目录查找</h3>
<p>find 默认搜索当前目录及其子目录，并且不过滤任何结果（返回所有文件）</p>
<p>语法：find 目录 参数 文件名称</p>
<p>参数：</p>
<ol>
<li>-name &lt;查询方式&gt;：按照指定的文件名查找模式查找文件</li>
<li>-user &lt;用户名&gt;：查找属于指定用户名所有文件</li>
<li>-group &lt;用户组&gt;：按文件所属组查找文件</li>
<li>-size &lt;文件大小&gt;：按照指定的文件大小查找文件</li>
<li>-type &lt;文件类型&gt;：按文件类型查找，可以是 f（普通文件）、d（目录）、l（符号链接）等</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find /usr/tmp -name &#x27;a*&#x27;：查找/usr/tmp目录下的所有以a开头的目录或文件</span><br><span class="line">find /usr/tmp -user &#x27;root&#x27;：查找/usr/tmp目录下的所有以a开头的目录或文件</span><br><span class="line">find . -type f：将当前目录及其子目录中的所有文件列出</span><br><span class="line">find /home -size +1M：查找 /home 目录下大于 1MB 的文件</span><br><span class="line"></span><br><span class="line">find . -name &quot;*.log&quot; -ls：在当前目录查找以.log结尾的文件，并显示详细信息</span><br><span class="line">find /root/ -perm 600：查找/root/目录下权限为600的文件</span><br><span class="line">find . -type f -name &quot;*.log&quot;：查找当前目录以.log结尾的普通文件</span><br><span class="line">find . -type d | sort：查找当前所有目录并排序</span><br><span class="line">find . -size +100M：查找当前目录大于100M的文件</span><br></pre></td></tr></table></figure>
<ol>
<li>-iname：按照文件名搜索，不区分文件名大小</li>
<li>-size [±] 大小：按照指定大小搜索文件</li>
<li>-atime [±] 时间：按照文件访问时间搜索</li>
<li>-mtime [±] 时间：按照文件数据修改时间搜索</li>
<li>-ctime [±] 时间：按照文件状态修改时间搜索</li>
<li>-perm 权限模式：查找文件权限刚好等于“权限模式”的文件</li>
<li>-perm -权限模式：查找文件权限全部包含“权限模式”的文件</li>
<li>-perm +权限模式：查找文件权限包含“权限模式”的任意一个权限的文件</li>
</ol>
<h3 id="locate">locate</h3>
<p>格式：locate [选项] [参数]</p>
<ol>
<li>-A：显示匹配所有模式的文件，可使用多个匹配值选择要查找的文件</li>
<li>-b：只能匹配文件名，有绝对路径的情况下不进行匹配</li>
<li>-c：只显示文件数量</li>
<li>-i：匹配不区分大小写的文件</li>
</ol>
<p>locate 指令无需遍历整个文件系统，查询速度较快，因为是去搜索一个数据库（/var/lib/mlocate/mlocate.db），可以很快速的搜寻某个路径，默认每天自动更新一次，所以使用 locate 命令查不到最新变动过的文件，为了避免这种情况，可以在使用 locate 之前，先使用 updatedb 命令，手动更新数据库。由于 locate 指令基于数据库进行查询，所以第一次运行前，必须使用 updatedb 指令创建 locate 数据库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">updatedb</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">搜索 etc 目录下所有以 sh 开头的文件</span></span><br><span class="line">locate /etc/sh</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查找和 <span class="built_in">pwd</span> 相关的所有文件</span></span><br><span class="line">locate pwd</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查找包含 pass 和 txt 都有的文件</span></span><br><span class="line">locate -A &quot;pass&quot; &quot;txt&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">匹配不区分大小写的文件</span></span><br><span class="line">locate -i &quot;testdir&quot;</span><br></pre></td></tr></table></figure>
<p>与 find 的区别：</p>
<ol>
<li>locate 命令查找文件在数据库中查找，查找的速度非常快，几乎是马上列出结果；而 find 命令查找时则是直接查找硬盘上的文件，查找的速度相应的非常慢</li>
<li>locate 需要先 updatedb 才能找到文件；而 find 不需要</li>
</ol>
<h3 id="whereis">whereis</h3>
<p>whereis 命令是定位可执行文件、源代码文件、帮助文件在文件系统中的位置，这些文件的属性应属于原始代码、二进制文件或帮助文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">whereis ls：将和ls文件相关的文件都查找出来</span><br></pre></td></tr></table></figure>
<h3 id="which：环境变量">which：环境变量</h3>
<p>which 命令的作用是在 PATH 变量指定的路径中，搜索某个系统命令的位置，并且返回第一个搜索结果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">which pwd	#查找 pwd 命令所在路径</span><br><span class="line">which java	#查找 path 中 java 的路径</span><br></pre></td></tr></table></figure>
<h2 id="压缩文件操作">压缩文件操作</h2>
<ol>
<li>Linux 中的打包文件：aa.tar</li>
<li>Linux 中的压缩文件：bb.gz</li>
<li>Linux 中打包并压缩的文件：.tar.gz</li>
<li>Linux 中的打包文件一般是以.tar 结尾的，压缩的命令一般是以.gz 结尾的。</li>
</ol>
<p>一般情况下打包和压缩是一起进行的，打包并压缩后的文件的后缀名一般.tar.gz。</p>
<h3 id="tar">tar</h3>
<ol>
<li>压缩命令：tar [-zcvf] 打包压缩后的文件名 要打包的文件</li>
<li>解压命令：tar [-zxvf] 压缩文件</li>
</ol>
<ul>
<li>z：调用 gzip 命令进行压缩和解压</li>
<li>c：打包文件</li>
<li>v：显示运行过程</li>
<li>f：指定文件名</li>
<li>x：代表解压</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -cvf test.tar abd.txt bcd.txt</span><br><span class="line">tar -xvf test.tar </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">压缩文件 file1 和目录 dir2 到 test.tar.gz</span></span><br><span class="line">tar -zcvf test.tar.gz file1 dir2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打包并压缩/usr/tmp 下的所有文件</span></span><br><span class="line">tar -zcvf test.tar.gz *</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压 test.tar.gz（将 c 换成 x 即可），解压到当前目录下</span></span><br><span class="line">tar -zxvf test.tar.gz</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将/usr/tmp 下的 ab.tar 解压到根目录/usr 下</span></span><br><span class="line">tar -zxvf test.tar.gz -C /usr</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出压缩文件的内容</span></span><br><span class="line">tar -ztvf test.tar.gz </span><br></pre></td></tr></table></figure>
<h3 id="rar">rar</h3>
<h3 id="gzip-gunzip">gzip/gunzip</h3>
<ol>
<li>gzip 文件：压缩文件（不会保留原有的文件）</li>
</ol>
<ul>
<li>-c：将压缩数据输出到标准输出中，可以用于保留源文件</li>
<li>-r：把目录下的所有文件都压缩，而不是把这个目录压缩（不能打包）</li>
</ul>
<ol start="2">
<li>gunzip 文件.gz：解压缩文件</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gzip abc.txt </span><br><span class="line">gzip -c bcd.txt &gt; bcd.txt.gz</span><br><span class="line">gzip -r aaaa/</span><br></pre></td></tr></table></figure>
<h3 id="zip-unzip">zip/unzip</h3>
<ol>
<li>zip [选项] 文件.zip 要压缩的文件：压缩文件和目录</li>
</ol>
<ul>
<li>-r：递归压缩，即压缩目录</li>
</ul>
<ol start="2">
<li>unzip [选项] 文件.zip：解压缩文件</li>
</ol>
<ul>
<li>-d &lt;目录&gt;：指定解压后文件的存放目录（如果不指定 -d 参数，默认解压到当前目录下）</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">压缩文件</span><br><span class="line">zip -r test.zip file</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压文件</span></span><br><span class="line">unzip test.zip</span><br><span class="line">unzip -d /home/hepingfly/abc/ mytxt.zip </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux（2-用户权限管理）</title>
    <url>/blog/2024/12/01/%E8%BF%90%E7%BB%B4/Linux/Linux%EF%BC%882-%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%EF%BC%89/</url>
    <content><![CDATA[<h2 id="用户和组">用户和组</h2>
<h3 id="用户账号">用户账号</h3>
<ol>
<li>超级用户：root用户是Linux操作系统中默认的超级用户账号，对本主机拥有最高的权限。系统中超级用户是唯一的。</li>
<li>普通用户：由root用户或其他管理员用户创建，拥有的权限会受到限制，一般只在用户自己的宿主目录中拥有完整权限。</li>
<li>程序用户：在安装Linux操作系统及部分应用程序时，会添加一些特定的低权限用户账号，这些用户一般不允许登录到系统，仅用于维持系统或某个程序的正常运行，如bin、daemon、ftp、mail等。</li>
</ol>
<h3 id="组账号">组账号</h3>
<ol>
<li>基本组（私有组）：基本组账号只有一个，一般为创建用户时指定的组。在/etc/passwd文件中第4字段记录的即为该用户的基本组GID号。</li>
<li>附加组（公共组）：用户除了基本组以外，额外添加指定的组。</li>
</ol>
<ul>
<li>UID：用户标识号</li>
<li>GID：组标识号</li>
</ul>
<h3 id="相关文件">相关文件</h3>
<ol>
<li>/etc/passwd：文件用户的配置文件，保存用户名称、宿主目录、登录Shell 等基本信息</li>
<li>/etc/group：文件组的配置文件，记录Linux包含的组的信息</li>
<li>/etc/shadow：文件口令的配置文件，保存用户的密码、账号有效期等信息</li>
<li>/etc/gshadow：组密码及其相关属性</li>
</ol>
<h3 id="文件属性">文件属性</h3>
<h4 id="rwx">rwx</h4>
<ol>
<li>读取r：允许查看文件内容、显示目录列表</li>
<li>写入w：允许修改文件内容，允许在目录中新建、移动、删除文件或子目录</li>
<li>可执行x：允许运行程序、切换目录</li>
</ol>
<p>注意：三个权限的位置不会改变，如果没有权限，就会出现-代替，如果rwx任意位置变为-则代表不可读或不可写或不可执行文件。</p>
<table>
<thead>
<tr>
<th>权限</th>
<th>读</th>
<th>写</th>
<th>执行</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>字符</td>
<td>r</td>
<td>w</td>
<td>x</td>
<td>-</td>
</tr>
<tr>
<td>数字</td>
<td>4</td>
<td>2</td>
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table>
<h4 id="查看文件-目录的权限和归属">查看文件/目录的权限和归属</h4>
<table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>d</td>
<td>目录</td>
</tr>
<tr>
<td>-</td>
<td>文件</td>
</tr>
<tr>
<td>l</td>
<td>链接文档（link file）</td>
</tr>
<tr>
<td>b</td>
<td>装置文件里面的可供储存的接口设备（可随机存取装置）</td>
</tr>
<tr>
<td>c</td>
<td>装置文件里面的串行端口设备</td>
</tr>
</tbody>
</table>
<ol>
<li>第一段（3位）：代表拥有者的权限</li>
<li>第二段（3位）：代表拥有者所在的组，组员的权限</li>
<li>第三段（3位）：代表的是其他用户的权限</li>
</ol>
<p>每个文件的属性由左边第一部分的10个字符来确定</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>文件类型</th>
<th>属主权限</th>
<th>属组权限</th>
<th>其他用户权限</th>
</tr>
</thead>
<tbody>
<tr>
<td>位置</td>
<td>0</td>
<td>123</td>
<td>456</td>
<td>789</td>
</tr>
</tbody>
</table>
<h2 id="用户管理">用户管理</h2>
<h3 id="查看用户信息">查看用户信息</h3>
<ol>
<li>whoami：查看当前用户</li>
<li>who：打印当前登录用户</li>
</ol>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-a</td>
<td>打印全面信息</td>
</tr>
<tr>
<td>-b</td>
<td>打印系统最近启动时间</td>
</tr>
<tr>
<td>-d</td>
<td>打印死掉的进程</td>
</tr>
<tr>
<td>-l</td>
<td>打印系统登录进程</td>
</tr>
<tr>
<td>-H</td>
<td>带有列标题打印用户名，登录终端和登录时间</td>
</tr>
<tr>
<td>-t</td>
<td>打印系统上次锁定时间</td>
</tr>
<tr>
<td>-u</td>
<td>打印已登录用户列表</td>
</tr>
</tbody>
</table>
<h3 id="exit：退出登录账户">exit：退出登录账户</h3>
<h3 id="useradd：添加用户">useradd：添加用户</h3>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-u</td>
<td>指定用户的 UID 号，要求该 UID 号码未被其他用户使用。</td>
</tr>
<tr>
<td>-d</td>
<td>指定用户的宿主目录位置（当与-M 一起使用时，不生效）。</td>
</tr>
<tr>
<td>-e</td>
<td>指定用户的账户失效时间，可使用 YYYY-MM-DD 的日期格式。</td>
</tr>
<tr>
<td>-g</td>
<td>指定用户的基本组名（或使用 GID 号），对应的组名必须已存在。</td>
</tr>
<tr>
<td>-G</td>
<td>指定用户的附加组名（或使用 GID 号），对应的组名必须已存在。</td>
</tr>
<tr>
<td>-m</td>
<td>用户目录不存在时自动创建</td>
</tr>
<tr>
<td>-M</td>
<td>不建立宿主目录。</td>
</tr>
<tr>
<td>-s</td>
<td>指定用户的登录 Shell，（比如/bin/bash为可登陆系统，/sbin/nologin和/bin/false为禁止用户登陆系统）。</td>
</tr>
<tr>
<td>-r</td>
<td>建立系统账号</td>
</tr>
<tr>
<td>-c</td>
<td>添加备注文字</td>
</tr>
</tbody>
</table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">useradd -m liyou1：创建用户名，并且创建与用户名相同的目录与用户组</span><br><span class="line">useradd -d /home/liyou -m liyou2：指定用户目录</span><br><span class="line">useradd -g ftp liyou3：指定用户组</span><br><span class="line">useradd -p 123 liyou4：指定用户密码</span><br></pre></td></tr></table></figure>
<h3 id="userdel：删除用户">userdel：删除用户</h3>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-r</td>
<td>将该用户的宿主目录一并删除</td>
</tr>
</tbody>
</table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">userdel liyou：删除用户，但不删除其家目录及文件</span><br><span class="line">userdel -r liyou：删除用户，并将其家目录及文件一并删除</span><br><span class="line">userdel -f liyou：强制删除用户</span><br></pre></td></tr></table></figure>
<h3 id="usermod：修改用户账号">usermod：修改用户账号</h3>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-u</td>
<td>修改用户的 UID 号。</td>
</tr>
<tr>
<td>-d</td>
<td>修改用户的宿主目录位置。</td>
</tr>
<tr>
<td>-e</td>
<td>修改用户的账户失效时间，可使用 YYYY-MM-DD 的日期格式。</td>
</tr>
<tr>
<td>-g</td>
<td>修改用户的基本组名（或使用 GID 号）。</td>
</tr>
<tr>
<td>-G</td>
<td>修改用户的附加组名（或使用 GID 号）。</td>
</tr>
<tr>
<td>-s</td>
<td>指定用户的登录 Shell。</td>
</tr>
<tr>
<td>-l</td>
<td>更改用户账号的登录名称</td>
</tr>
<tr>
<td>-L</td>
<td>锁定用户账户</td>
</tr>
<tr>
<td>-U</td>
<td>解锁用户账户</td>
</tr>
</tbody>
</table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">usermod -d /home/liyou liyou：更改登录目录</span><br><span class="line">usermod -u 777 liyou：改变用户的uid</span><br><span class="line">usermod -l liyou liyou1：修改用户名liyou1为liyou</span><br><span class="line">usermod -L liyou：锁定密码</span><br><span class="line">usermod -U liyou：解锁密码</span><br></pre></td></tr></table></figure>
<h3 id="passwd：设置用户密码">passwd：设置用户密码</h3>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-d</td>
<td>清空指定用户的密码，仅使用用户名即可登录系统。</td>
</tr>
<tr>
<td>-l</td>
<td>锁定用户密码，无法被用户自行修改，锁定的用户账号将无法再登录系统。</td>
</tr>
<tr>
<td>-u</td>
<td>解开已锁定用户密码，允许用户自行修改（-u解锁时，如果没有密码会提示，需要使用-f强制解锁）</td>
</tr>
<tr>
<td>-e</td>
<td>密码立即过期，下次登录强制修改密码</td>
</tr>
<tr>
<td>-k</td>
<td>保留即将过期的用户在期满后仍能使用</td>
</tr>
<tr>
<td>-S</td>
<td>查看用户账户的状态（是否被锁定）。</td>
</tr>
</tbody>
</table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">passwd：设置当前用户密码</span><br><span class="line">passwd liyou1：设置用户密码</span><br><span class="line">passwd -l liyou1：锁定密码不允许用户修改</span><br><span class="line">passwd -u liyou1：解除锁定密码，允许用户修改</span><br><span class="line">passwd -e liyou1：下次登录强制改密码</span><br><span class="line">passwd -d liyou1：移除用户密码</span><br></pre></td></tr></table></figure>
<h3 id="sudo：用超级用户的权限执行命令">sudo：用超级用户的权限执行命令</h3>
<p>sudo是为所有想使用root权限的普通用户设计的，可以让普通用户具有临时使用root权限的权利，只需输入自己账户的密码即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入<span class="built_in">sudo</span>配置文件命令</span></span><br><span class="line">vi /etc/sudoer或者visudo</span><br></pre></td></tr></table></figure>
<h3 id="su：切换用户">su：切换用户</h3>
<p>su用于用户之间的切换，但是切换前的用户依然保持登录状态。如果是root向普通或虚拟用户切换不需要密码，反之普通用户切换到其它任何用户都需要密码验证。</p>
<p>不足：如果某个用户需要使用root权限、则必须要把root密码告诉此用户。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su test：切换到test用户，但是路径还是/root目录</span><br><span class="line">su - test ：切换到test用户，路径变成了/home/test</span><br><span class="line">su：切换到root用户，但是路径还是原来的路径</span><br><span class="line">su - ：切换到root用户，并且路径是/root</span><br><span class="line">exit、logout：退出返回之前的用户</span><br></pre></td></tr></table></figure>
<h2 id="用户组管理">用户组管理</h2>
<h3 id="groupadd：添加组">groupadd：添加组</h3>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-g</td>
<td>指定新建工作组的id</td>
</tr>
<tr>
<td>-r</td>
<td>创建系统工作组，系统工作组的组ID小于500</td>
</tr>
<tr>
<td>-K</td>
<td>覆盖配置文件“/ect/login.defs”</td>
</tr>
<tr>
<td>-o</td>
<td>允许添加组ID号不唯一的工作组</td>
</tr>
</tbody>
</table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">groupadd usergroup1：创建用户组</span><br><span class="line">groupadd -g 8563 usergroup1：创建用户组，指定工作组id</span><br><span class="line">groupadd -r usergroup1：使用-r创建系统工作组</span><br></pre></td></tr></table></figure>
<h3 id="groupdel：删除用户组">groupdel：删除用户组</h3>
<p>给出的组名必须存在，若改群组中仍包括某些用户，则必须先删除这些用户后，方能删除群组</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">groupdel usergroup1：删除用户组</span><br></pre></td></tr></table></figure>
<h3 id="gpasswd：设置用户的用户组">gpasswd：设置用户的用户组</h3>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-a</td>
<td>添加用户到组</td>
</tr>
<tr>
<td>-d</td>
<td>从组删除用户</td>
</tr>
<tr>
<td>-A</td>
<td>指定管理员</td>
</tr>
<tr>
<td>-M</td>
<td>定义组成员列表，以逗号分隔</td>
</tr>
<tr>
<td>-r</td>
<td>删除密码</td>
</tr>
<tr>
<td>-R</td>
<td>限制用户登入组，只有组中的成员才可以用newgrp加入该组</td>
</tr>
</tbody>
</table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gpasswd -a liyou usergroup1：添加用户到组</span><br><span class="line">gpasswd -d liyou usergroup1：移除用户出组</span><br></pre></td></tr></table></figure>
<h3 id="groupmod：更改用户组">groupmod：更改用户组</h3>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-g</td>
<td>设置欲使用的群组识别码</td>
</tr>
<tr>
<td>-o</td>
<td>重复使用群组识别码</td>
</tr>
<tr>
<td>-n</td>
<td>设置欲使用的群组名称</td>
</tr>
</tbody>
</table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">groupmod -g 222 usergroup1：更改组ID</span><br><span class="line">groudmod -n usergroup1 usergroup2：更改组名</span><br></pre></td></tr></table></figure>
<h3 id="groups：查询用户所属的组">groups：查询用户所属的组</h3>
<p>格式：groups  [用户名]</p>
<h2 id="权限修改">权限修改</h2>
<h3 id="chmod：修改文件或目录权限">chmod：修改文件或目录权限</h3>
<ol>
<li>u（user）：所有者</li>
<li>g（group）：所有组</li>
<li>o（other）：其他人</li>
<li>a（all）：所有人</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod u=rwx,g=rx,o=x 文件目录名</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">表示给所有者读、写、执行权限 ，给所有组读和执行权限，给其他人执行权限</span></span><br><span class="line">chmod o+w 文件目录名</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">表示给其他人添加写的权限</span></span><br><span class="line">chmod a-x 文件目录名</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">表示给所有人去除执行的权限</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1、给abc文件的所有者读写执行的权限，给所有组读执行权限，给其他组读执行权限</span></span><br><span class="line">chmod u=rwx,g=rx,o=rx abc</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2、给abc文件的所有者除去执行的权限，增加所有组写的权限</span></span><br><span class="line">chmod u-x,g+w abc</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">3、给abc文件的所有用户添加读的权限</span></span><br><span class="line">chmod a+r abc</span><br></pre></td></tr></table></figure>
<p>**规则 **</p>
<ol>
<li>r=4：二进制 100</li>
<li>w=2：二进制 010</li>
<li>x=1：二进制 001</li>
</ol>
<p>rwx=4+2+1=7</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod u=rwx,g=rx,o=x 文件目录名</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">相当于<span class="built_in">chmod</span> 751 文件目录名</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将/home/abc.txt文件的权限修改成rwxr-xr-x，使用数字的方式实现</span></span><br><span class="line">chmod 755 /home/abc.txt</span><br></pre></td></tr></table></figure>
<h3 id="chown：修改文件所有者">chown：修改文件所有者</h3>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-R</td>
<td>递归修改指定目录下所有子项的权限</td>
</tr>
</tbody>
</table>
<p>格式：</p>
<ol>
<li>chown newowner file：改变文件的所有者</li>
<li>chown newowner:newgroup file：改变用户的所有者和所有组</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将/home/abc.txt文件的所有者修改成tom</span></span><br><span class="line">chown tom abc.txt</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将/home/kkk目录下所有的文件和目录的所有者都修改成tom</span></span><br><span class="line">chown -R tom kkk/</span><br></pre></td></tr></table></figure>
<h3 id="chgrp：修改文件所在组">chgrp：修改文件所在组</h3>
<p>格式：chgrp newgroup file：改变文件的所有组</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将/home/abc.txt文件的所在组修改成bandit(土匪)</span></span><br><span class="line">chgrp bandit /home/abc.txt</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将/home/kkk 目录下所有的文件和目录的所在组都修改成bandit(土匪)</span></span><br><span class="line">chgrp -R bandit /home/kkk</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Stream流</title>
    <url>/blog/2024/10/20/%E5%90%8E%E7%AB%AF/%E5%B7%A5%E4%BD%9C%E6%8A%80%E5%B7%A7/Stream%E6%B5%81/</url>
    <content><![CDATA[<span id="more"></span>
<h2 id="生成流">生成流</h2>
<h3 id="通过集合生成">通过集合生成</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// list 列表转换为 Stream</span></span><br><span class="line">List&lt;String&gt; strList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">strList.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">strList.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line"><span class="type">Stream</span> <span class="variable">stream3</span> <span class="operator">=</span> list.stream();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set 集合转换为 Stream</span></span><br><span class="line">Set&lt;String&gt; strSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">strSet.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">strSet.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line"><span class="type">Stream</span> <span class="variable">stream4</span> <span class="operator">=</span> strSet.stream();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Map 集合转换为 Stream</span></span><br><span class="line">Map&lt;String,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;a&quot;</span>, <span class="number">100</span>);</span><br><span class="line">map.put(<span class="string">&quot;b&quot;</span>, <span class="number">200</span>);</span><br><span class="line"><span class="type">Stream</span> <span class="variable">stream5</span> <span class="operator">=</span> map.entrySet().stream();</span><br></pre></td></tr></table></figure>
<h3 id="通过数组生成">通过数组生成</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] intArr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="type">IntStream</span> <span class="variable">stream</span> <span class="operator">=</span> Arrays.stream(intArr);</span><br></pre></td></tr></table></figure>
<p>该方法生成的流是数值流（IntStream）而不是Stream，使用数值流可以避免计算过程中拆箱装箱，提高性能</p>
<h3 id="通过值生成">通过值生成</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure>
<p>通过Stream的of方法生成流，通过Stream的empty方法可以生成一个空流</p>
<h3 id="通过文件生成">通过文件生成</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; lines = Files.lines(Paths.get(<span class="string">&quot;data.txt&quot;</span>), Charset.defaultCharset());</span><br></pre></td></tr></table></figure>
<p>通过Files.line方法得到一个流，并且得到的每个流是给定文件中的一行</p>
<h3 id="通过函数生成">通过函数生成</h3>
<ol>
<li>iterate</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream = Stream.iterate(<span class="number">0</span>, n -&gt; n + <span class="number">2</span>).limit(<span class="number">5</span>);</span><br></pre></td></tr></table></figure>
<p>iterate方法接受两个参数，第一个为初始值，第二个为进行的函数操作，因为iterate生成的流为无限流，通过limit方法对流进行了截断，只生成5个偶数</p>
<ol start="2">
<li>generate</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Double&gt; stream = Stream.generate(Math::random).limit(<span class="number">5</span>);</span><br></pre></td></tr></table></figure>
<p>generate方法接受一个参数，方法参数类型为Supplier，由他为流提供值，generate生成的流也是无限流，因此通过limit对流进行了截断</p>
<h2 id="中间操作">中间操作</h2>
<h3 id="filter条件筛选">filter条件筛选</h3>
<p>返回结果生成新的流中只包含满足筛选条件的数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">Stream&lt;Integer&gt; stream = integerList.stream().filter(i -&gt; i &gt; <span class="number">3</span>);</span><br></pre></td></tr></table></figure>
<h3 id="distinct去除重复元素">distinct去除重复元素</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">Stream&lt;Integer&gt; stream = integerList.stream().distinct();</span><br></pre></td></tr></table></figure>
<h3 id="limit返回指定流个数">limit返回指定流个数</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>); </span><br><span class="line">Stream&lt;Integer&gt; stream = integerList.stream().limit(<span class="number">3</span>);</span><br></pre></td></tr></table></figure>
<p>通过limit方法指定返回流的个数，limit的参数值必须&gt;=0，否则将会抛出异常</p>
<h3 id="skip跳过流中的元素">skip跳过流中的元素</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">Stream&lt;Integer&gt; stream = integerList.stream().skip(<span class="number">2</span>);</span><br></pre></td></tr></table></figure>
<p>通过skip方法跳过流中的元素，skip的参数值必须&gt;=0，否则将会抛出异常</p>
<h3 id="map流映射">map流映射</h3>
<p>流映射就是将接受的元素映射成另外一个元素，通过map方法可以完成映射</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; stringList = Arrays.asList(<span class="string">&quot;Java 8&quot;</span>, <span class="string">&quot;Lambdas&quot;</span>,  <span class="string">&quot;In&quot;</span>, <span class="string">&quot;Action&quot;</span>);</span><br><span class="line">Stream&lt;Integer&gt; stream = stringList.stream().map(String::length);</span><br></pre></td></tr></table></figure>
<ol>
<li>当出现相同的key时，解决方法：取前面value的值，或者取后面放入的value值，则覆盖先前的value值</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Long, String&gt; map = userList.stream()</span><br><span class="line">        .collect(Collectors.toMap(User::getId, User::getUsername, (v1, v2) -&gt; v1));</span><br><span class="line">Map&lt;Long, String&gt; map = userList.stream()</span><br><span class="line">        .collect(Collectors.toMap(User::getId, User::getUsername, (v1, v2) -&gt; v2));</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>对相同key值的数据进行合并</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 处理itemList 合并相同物料累加数量</span></span><br><span class="line">Map&lt;Long, Integer&gt; map = itemList.stream().collect(Collectors.toMap(StocksComponentsItem::getStocksId, StocksComponentsItem::getCount, (e1, e2) -&gt; e1 + e2));       </span><br></pre></td></tr></table></figure>
<ol start="3">
<li>获取treeMap，根据key值进行排序</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Long, String&gt; treeMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">TreeMap&lt;Long, String&gt; map = treeMap.entrySet().stream()</span><br><span class="line">.collect(Collectors.toMap(entry -&gt; entry.getKey(), entry -&gt; entry.getValue(), </span><br><span class="line">                          (v1, v2) -&gt; v1, TreeMap::<span class="keyword">new</span>));</span><br></pre></td></tr></table></figure>
<p><strong>常用方法</strong></p>
<ul>
<li>mapToDouble</li>
<li>mapToInt</li>
<li>mapToLong</li>
</ul>
<h3 id="flatMap流转换">flatMap流转换</h3>
<p>扁平化映射，将多个stream连接成一个stream，这个操作是针对类似多维数组的，比如集合里面包含集合，相当于降维作用</p>
<p>例如：如果想要从List<StdCls>中取出学生列表，需要取出每个班级的学生List，再for循环调用List.addAll()方法把所有班级的学生List到一个新的总和List中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StdCls</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String clsNo;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; studentList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用map映射后会变成List&lt;List<Student>&gt;，若使用flatMap会进行扁平化处理，从而将List嵌套List用stream合并成一个List</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; nameList = stdClsList.stream()</span><br><span class="line">                        .map(StdCls::getStudentList)</span><br><span class="line">                        .flatMap(Collection::stream) <span class="comment">// 多个集合List合并</span></span><br><span class="line">                        .map(Student::getName).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>
<h3 id="sorted排序">sorted排序</h3>
<p>将流中的元素按照自然排序方式进行排序。</p>
<ol>
<li>sorted()：自然排序，流中元素需实现Comparable接口</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;ff&quot;</span>, <span class="string">&quot;dd&quot;</span>);</span><br><span class="line"><span class="comment">//String 类自身已实现Compareable接口</span></span><br><span class="line">list.stream().sorted().forEach(System.out::println);<span class="comment">// aa dd ff</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>sorted(Comparator com)：定制排序，自定义Comparator排序器</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;aa&quot;</span>, <span class="number">10</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;bb&quot;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;aa&quot;</span>, <span class="number">30</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;dd&quot;</span>, <span class="number">40</span>);</span><br><span class="line">List&lt;Student&gt; studentList = Arrays.asList(s1, s2, s3, s4);</span><br><span class="line">  </span><br><span class="line"><span class="comment">//自定义排序：先按姓名升序，姓名相同则按年龄升序</span></span><br><span class="line">studentList.stream().sorted(</span><br><span class="line">    (o1, o2) -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (o1.getName().equals(o2.getName())) &#123;</span><br><span class="line">        	<span class="keyword">return</span> o1.getAge() - o2.getAge();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        	<span class="keyword">return</span> o1.getName().compareTo(o2.getName());</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">).forEach(System.out::println);　</span><br></pre></td></tr></table></figure>
<h3 id="peek消费">peek消费</h3>
<p>对流中每个元素执行操作，并返回一个新的流，返回的流还是包含原来流中的元素。</p>
<p>如同于map，能得到流中的每一个元素，但map接收的是一个Function表达式，有返回值；而peek接收的是Consumer表达式，没有返回值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;aa&quot;</span>, <span class="number">10</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;bb&quot;</span>, <span class="number">20</span>);</span><br><span class="line">List&lt;Student&gt; studentList = Arrays.asList(s1, s2);</span><br><span class="line">  </span><br><span class="line">studentList.stream().peek(o -&gt; o.setAge(<span class="number">100</span>)).forEach(System.out::println);</span><br><span class="line">  </span><br><span class="line"><span class="comment">//结果：</span></span><br><span class="line">Student&#123;name=<span class="string">&#x27;aa&#x27;</span>, age=<span class="number">100</span>&#125;</span><br><span class="line">Student&#123;name=<span class="string">&#x27;bb&#x27;</span>, age=<span class="number">100</span>&#125;</span><br></pre></td></tr></table></figure>
<h3 id="concat流合并">concat流合并</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//创建一个集合，存储多个字符串元素 </span></span><br><span class="line">    ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    list.add(<span class="string">&quot;心如音&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;流老蛋&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;王值&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;李尔&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;张新敏&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;张天坤&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需求1：取前4个数据组成一个流 </span></span><br><span class="line">    Stream&lt;String&gt; s1 = list.stream().limit(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需求2：跳过2个数据组成一个流 </span></span><br><span class="line">    Stream&lt;String&gt; s2 = list.stream().skip(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需求3：合并需求1和需求2得到的流，并把结果在控制台输出 </span></span><br><span class="line">    Stream.concat(s1,s2).forEach(System.out::println); </span><br><span class="line"></span><br><span class="line">    <span class="comment">//需求4：合并需求1和需求2得到的流，并把结果在控制台输出，要求字符串元素不能重复 </span></span><br><span class="line">    Stream.concat(s1,s2).distinct().forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="终端操作">终端操作</h2>
<h3 id="match元素匹配">match元素匹配</h3>
<ol>
<li>allMatch匹配所有</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">if</span> (integerList.stream().allMatch(i -&gt; i &gt; <span class="number">3</span>)) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;值都大于3&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>anyMatch匹配其中一个</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">if</span> (integerList.stream().anyMatch(i -&gt; i &gt; <span class="number">3</span>)) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;存在大于3的值&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>noneMatch全部不匹配</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">if</span> (integerList.stream().noneMatch(i -&gt; i &gt; <span class="number">3</span>)) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;值都小于3&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="count统计流中元素个数">count统计流中元素个数</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="type">Long</span> <span class="variable">result</span> <span class="operator">=</span> integerList.stream().count();</span><br></pre></td></tr></table></figure>
<h3 id="find查找">find查找</h3>
<ol>
<li>findFirst：查找第一个</li>
<li>findAny：随机查找一个</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">Optional&lt;Integer&gt; result = integerList.stream().filter(i -&gt; i &gt; <span class="number">3</span>).findFirst();</span><br><span class="line">Optional&lt;Integer&gt; result = integerList.stream().filter(i -&gt; i &gt; <span class="number">3</span>).findAny();</span><br></pre></td></tr></table></figure>
<h3 id="min、max获取流中最小最大值">min、max获取流中最小最大值</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;Integer&gt; min = menu.stream().map(Dish::getCalories).min(Integer::compareTo);</span><br><span class="line">Optional&lt;Integer&gt; max = menu.stream().map(Dish::getCalories).max(Integer::compareTo);</span><br><span class="line"></span><br><span class="line"><span class="type">OptionalInt</span> <span class="variable">min</span> <span class="operator">=</span> menu.stream().mapToInt(Dish::getCalories).min();</span><br><span class="line"><span class="type">OptionalInt</span> <span class="variable">max</span> <span class="operator">=</span> menu.stream().mapToInt(Dish::getCalories).max();</span><br></pre></td></tr></table></figure>
<h3 id="reduce元素组合">reduce元素组合</h3>
<p>把 Stream 元素组合起来。它提供一个起始值（种子），然后依照运算规则（BinaryOperator），和前面 Stream 的第一个、第二个、第 n 个元素组合。从这个意义上说，字符串拼接、数值的 sum、min、max、average 都是特殊的 reduce</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// reduce()：字符串拼接</span></span><br><span class="line"><span class="type">String</span> <span class="variable">reduceStr1</span> <span class="operator">=</span> Stream.of(<span class="string">&quot;ma&quot;</span>, <span class="string">&quot;zhi&quot;</span>, <span class="string">&quot;chu&quot;</span>).reduce(<span class="string">&quot;&quot;</span>, String::concat);</span><br><span class="line"><span class="type">String</span> <span class="variable">reduceStr2</span> <span class="operator">=</span> Stream.of(<span class="string">&quot;ma&quot;</span>, <span class="string">&quot;zhi&quot;</span>, <span class="string">&quot;chu&quot;</span>).reduce(<span class="string">&quot;&quot;</span>, (x,y)-&gt;x+y);</span><br><span class="line">System.out.println(reduceStr1);</span><br><span class="line">System.out.println(reduceStr2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// reduce()：求和，identity(起始值)为0</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">total1</span> <span class="operator">=</span> Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>).reduce(<span class="number">0</span>, Integer::sum);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">total2</span> <span class="operator">=</span> Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>).reduce(<span class="number">0</span>, (x, y) -&gt; x +y);</span><br><span class="line">System.out.println(total1);</span><br><span class="line">System.out.println(total2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求和，sumValue = 10, 无起始值</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">total3</span> <span class="operator">=</span> Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>).reduce(Integer::sum).get();</span><br><span class="line">System.out.println(total3);</span><br><span class="line"></span><br><span class="line"><span class="comment">// reduce()：求最小值</span></span><br><span class="line"><span class="type">double</span> <span class="variable">minValue</span> <span class="operator">=</span> Stream.of(-<span class="number">1.1</span>, <span class="number">8.8</span>, -<span class="number">2.2</span>, -<span class="number">6.6</span>).reduce(Double.MAX_VALUE, Double::min);</span><br><span class="line">System.out.println(minValue);</span><br><span class="line"></span><br><span class="line">Optional&lt;Integer&gt; min = menu.stream().map(Dish::getCalories).reduce(Integer::min);</span><br><span class="line">Optional&lt;Integer&gt; max = menu.stream().map(Dish::getCalories).reduce(Integer::max);</span><br></pre></td></tr></table></figure>
<h3 id="求值">求值</h3>
<ol>
<li>summingInt：求和</li>
<li>sum：求和</li>
<li>averagingInt：求平均值</li>
<li>summarizingInt：同时求总和、平均值、最大值、最小值</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> menu.stream().collect(Collectors.summingInt(Dish::getCalories));</span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> menu.stream().map(Dish::getCalories).reduce(<span class="number">0</span>, Integer::sum);</span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> menu.stream().mapToInt(Dish::getCalories).sum();</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="variable">average</span> <span class="operator">=</span> menu.stream().collect(Collectors.averagingInt(Dish::getCalories));</span><br><span class="line"></span><br><span class="line"><span class="type">IntSummaryStatistics</span> <span class="variable">intSummaryStatistics</span> <span class="operator">=</span> menu.stream().collect(Collectors.summarizingInt(Dish::getCalories));</span><br><span class="line"><span class="type">double</span> <span class="variable">average</span> <span class="operator">=</span> intSummaryStatistics.getAverage();  <span class="comment">//获取平均值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> intSummaryStatistics.getMin();  <span class="comment">//获取最小值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> intSummaryStatistics.getMax();  <span class="comment">//获取最大值</span></span><br><span class="line"><span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> intSummaryStatistics.getSum();  <span class="comment">//获取总和</span></span><br></pre></td></tr></table></figure>
<h3 id="foreach元素遍历">foreach元素遍历</h3>
<p>遍历流中的每一个元素，按照指定的方法执行，执行顺序不一定按照流的顺序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">integerList.stream().forEach(System.out::println);</span><br><span class="line"><span class="comment">// foreach:遍历流中每一个元素,执行顺序不一定按照流的顺序，.parallel()表示创建一个并行流</span></span><br><span class="line">Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>).parallel().forEach(System.out::println);</span><br></pre></td></tr></table></figure>
<h3 id="toArray返回数组">toArray返回数组</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// toArray()：将流中的元素放入到一个数组中</span></span><br><span class="line">String[] strings = Stream.of(<span class="string">&quot;ma&quot;</span>, <span class="string">&quot;zhi&quot;</span>, <span class="string">&quot;chu&quot;</span>).toArray(String[]::<span class="keyword">new</span>);</span><br><span class="line">System.out.println(Arrays.toString(strings));</span><br></pre></td></tr></table></figure>
<h3 id="collect返回集合">collect返回集合</h3>
<h4 id="minBy-maxBy获取最小、最大值">minBy/maxBy获取最小、最大值</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;Integer&gt; min = menu.stream().map(Dish::getCalories).collect(Collectors.minBy(Integer::compareTo));</span><br><span class="line">Optional&lt;Integer&gt; max = menu.stream().map(Dish::getCalories).collect(Collectors.maxBy(Integer::compareTo));</span><br></pre></td></tr></table></figure>
<h4 id="toMap获取属性映射">toMap获取属性映射</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; strings = menu.stream().map(Dish::getName).collect(Collectors.toList());</span><br><span class="line">Set&lt;String&gt; sets = menu.stream().map(Dish::getName).collect(Collectors.toSet());</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取属性和对象本身</span></span><br><span class="line">Map&lt;Integer, House&gt; houseMap = houses.stream().collect(Collectors.toMap(House::getOwnerid, o -&gt; o));</span><br><span class="line">Map&lt;Integer, House&gt; houseMap1 = houses.stream().collect(Collectors.toMap(House::getOwnerid,  Function.identity()));</span><br><span class="line"><span class="comment">//出现重复id时，取前面value的值，获取取后面放入的value值，则覆盖先前的value值</span></span><br><span class="line">houses.stream().collect(Collectors.toMap(House::getOwnerid, House::getHousename,(v1,v2)-&gt;v2));</span><br><span class="line">houses.stream().collect(Collectors.toMap(House::getOwnerid, House::getHousename,(v1,v2)-&gt;v1));</span><br></pre></td></tr></table></figure>
<h4 id="counting统计元素个数">counting统计元素个数</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="type">Long</span> <span class="variable">result</span> <span class="operator">=</span> integerList.stream().count();</span><br><span class="line"><span class="type">Long</span> <span class="variable">result</span> <span class="operator">=</span> integerList.stream().collect(Collectors.counting());</span><br></pre></td></tr></table></figure>
<h4 id="joining拼接流中的元素">joining拼接流中的元素</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> menu.stream().map(Dish::getName).collect(Collectors.joining(<span class="string">&quot;, &quot;</span>));</span><br></pre></td></tr></table></figure>
<p>默认如果不通过map方法进行映射处理拼接的toString方法返回的字符串，joining的方法参数为元素的分界符，如果不指定生成的字符串将是一串的</p>
<h4 id="groupingBy元素分组">groupingBy元素分组</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Type, List&lt;Dish&gt;&gt; result = dishList.stream().collect(Collectors.groupingBy(Dish::getType));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分组再分组</span></span><br><span class="line">Map&lt;String, Map&lt;Integer, List&lt;Dish&gt;&gt;&gt; result = menu.stream().collect(Collectors.groupingBy(Dish::getName,</span><br><span class="line">                Collectors.groupingBy(Dish::getCalories)));</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 源数据</span></span><br><span class="line">ArrayList&lt;GateScanCodeRecord&gt; objects = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">objects.add(<span class="keyword">new</span> <span class="title class_">GateScanCodeRecord</span>().setMonth(<span class="string">&quot;2020-07&quot;</span>).setDay(<span class="string">&quot;2020-07-12&quot;</span>));</span><br><span class="line">objects.add(<span class="keyword">new</span> <span class="title class_">GateScanCodeRecord</span>().setMonth(<span class="string">&quot;2020-06&quot;</span>).setDay(<span class="string">&quot;2020-06-14&quot;</span>));</span><br><span class="line">objects.add(<span class="keyword">new</span> <span class="title class_">GateScanCodeRecord</span>().setMonth(<span class="string">&quot;2020-06&quot;</span>).setDay(<span class="string">&quot;2020-06-12&quot;</span>));</span><br><span class="line">objects.add(<span class="keyword">new</span> <span class="title class_">GateScanCodeRecord</span>().setMonth(<span class="string">&quot;2020-05&quot;</span>).setDay(<span class="string">&quot;2020-05-17&quot;</span>));</span><br><span class="line">objects.add(<span class="keyword">new</span> <span class="title class_">GateScanCodeRecord</span>().setMonth(<span class="string">&quot;2020-05&quot;</span>).setDay(<span class="string">&quot;2020-05-12&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分组有序</span></span><br><span class="line">TreeMap&lt;String, List&lt;GateScanCodeRecord&gt;&gt; collect2 = objects.parallelStream().collect(Collectors.groupingBy(GateScanCodeRecord::getMonth, TreeMap::<span class="keyword">new</span>, Collectors.toList()));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义分组有序</span></span><br><span class="line">TreeMap&lt;String, List&lt;GateScanCodeRecord&gt;&gt; collect3 =</span><br><span class="line">            objects.parallelStream().collect(Collectors.groupingBy(GateScanCodeRecord::getMonth,</span><br><span class="line">            () -&gt; <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;((o1, o2) -&gt; Math.toIntExact(Long.parseLong(o2.replaceAll(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>)) - Long.parseLong(o1.replaceAll(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>)))),</span><br><span class="line">            Collectors.toList()));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两层排序(按月分组排序,月下的数据按天分组并排序)</span></span><br><span class="line">TreeMap&lt;String, TreeMap&lt;String, List&lt;GateScanCodeRecord&gt;&gt;&gt; collect = objects.stream()</span><br><span class="line">            .collect(Collectors.groupingBy(GateScanCodeRecord::getMonth,</span><br><span class="line">             () -&gt; <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;((o1, o2) -&gt; Math.toIntExact(Long.parseLong(o2.replaceAll(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>)) - Long.parseLong(o1.replaceAll(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>)))),</span><br><span class="line">             Collectors.groupingBy(GateScanCodeRecord::getDay,</span><br><span class="line">             () -&gt; <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;((o1, o2) -&gt; Math.toIntExact(Long.parseLong(o2.replaceAll(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>)) - Long.parseLong(o1.replaceAll(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>)))),</span><br><span class="line">             Collectors.toList()))</span><br><span class="line">            );</span><br></pre></td></tr></table></figure>
<h4 id="partitioningBy元素分区">partitioningBy元素分区</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Boolean, List&lt;Dish&gt;&gt; result = menu.stream().collect(Collectors.partitioningBy(Dish::isVegetarian));</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line">Map&lt;Boolean, List&lt;Dish&gt;&gt; result = menu.stream().collect(Collectors.groupingBy(Dish::isVegetarian));</span><br><span class="line"></span><br><span class="line">List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">Map&lt;Boolean, List&lt;Integer&gt;&gt; result = integerList.stream().collect(Collectors.partitioningBy(i -&gt; i &lt; <span class="number">3</span>));</span><br></pre></td></tr></table></figure>
<h4 id="mapping获取属性映射集合">mapping获取属性映射集合</h4>
<p>对分组之后的对象集合转换为对象的某个属性的集合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    List&lt;Person&gt; personList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 四个参与测试的小伙伴</span></span><br><span class="line">    <span class="type">Person</span> <span class="variable">tom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;tom&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">11</span>);</span><br><span class="line">    <span class="type">Person</span> <span class="variable">amy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;amy&quot;</span>, <span class="string">&quot;女&quot;</span>, <span class="number">13</span>);</span><br><span class="line">    <span class="type">Person</span> <span class="variable">ali</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;ali&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">12</span>);</span><br><span class="line">    <span class="type">Person</span> <span class="variable">daming</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;daming&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">13</span>);</span><br><span class="line">    personList.add(tom);</span><br><span class="line">    personList.add(amy);</span><br><span class="line">    personList.add(ali);</span><br><span class="line">    personList.add(daming);</span><br><span class="line">    <span class="comment">// 对小伙伴按照性别age进行分组</span></span><br><span class="line">    Map&lt;String, Set&lt;String&gt;&gt; resultMap = personList.stream().collect(Collectors.groupingBy(Person::getSex, Collectors.mapping(Person::getName, Collectors.toSet())));</span><br><span class="line">    System.out.println(resultMap.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Optional">Optional</h2>
<ol>
<li>Optional.of(T value)：通过一个非null的value来构造一个Optional，返回的Optional包含了value这个值，对于该方法，传入的参数一定不能为null，否则会抛出NullPointerException</li>
<li>Optional.ofNullable(T value)：与of的区别在于，传入的参数可以为null，进行三目运算，判断传入的参数是否为null，如果为null的话，返回的就是Optional.empty()</li>
<li>Optional.empty()：用来构造一个空的Optional，即该Optional中不包含值</li>
</ol>
<h3 id="ifPresent">ifPresent</h3>
<p>如果Optional中有值，则对该值调用consumer.accept，否则什么也不做</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;User&gt; user = Optional.ofNullable(getUserById(id));</span><br><span class="line">user.ifPresent(u -&gt; System.out.println(<span class="string">&quot;Username is: &quot;</span> + u.getUsername()));</span><br></pre></td></tr></table></figure>
<h3 id="orElse">orElse</h3>
<p>如果Optional中有值则将其返回，否则返回orElse方法传入的参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> T <span class="title function_">orElse</span><span class="params">(T other)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value != <span class="literal">null</span> ? value : other;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> Optional</span><br><span class="line">        .ofNullable(getUserById(id))</span><br><span class="line">        .orElse(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">0</span>, <span class="string">&quot;Unknown&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;Username is: &quot;</span> + user.getUsername());</span><br></pre></td></tr></table></figure>
<h3 id="orElseGet">orElseGet</h3>
<p>与orElse方法的区别在于：orElseGet方法传入的参数为一个Supplier接口的实现，当Optional中有值的时候，返回值；当Optional中没有值的时候，返回从该Supplier获得的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> T <span class="title function_">orElseGet</span><span class="params">(Supplier&lt;? extends T&gt; ither)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value != <span class="literal">null</span> ? value : other.get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> Optional.ofNullable(getUserById(id))</span><br><span class="line">                    .orElseGet(() -&gt; <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">0</span>, <span class="string">&quot;Unknown&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;Username is: &quot;</span> + user.getUsername());</span><br></pre></td></tr></table></figure>
<h3 id="orElseThrow">orElseThrow</h3>
<p>与orElse方法的区别在于：orElseThrow方法当Optional中有值的时候，返回值；没有值的时候会抛出异常，抛出的异常由传入的exceptionSupplier提供</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;X <span class="keyword">extends</span> <span class="title class_">Throwable</span>&gt; T <span class="title function_">orElseThrow</span><span class="params">(Supplier&lt;? extends X&gt; exceptionSupplier)</span> <span class="keyword">throws</span> X &#123;</span><br><span class="line">    <span class="keyword">if</span> (value != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> exceptionSupplier.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> Optional.ofNullable(getUserById(id))</span><br><span class="line">        .orElseThrow(() -&gt; <span class="keyword">new</span> <span class="title class_">EntityNotFoundException</span>(<span class="string">&quot;id 为 &quot;</span> + id + <span class="string">&quot; 的用户没有找到&quot;</span>));</span><br></pre></td></tr></table></figure>
<h3 id="map">map</h3>
<p>如果当前Optional为Optional.empty，则依旧返回Optional.empty；否则返回一个新的Optional，该Optional包含的是：函数mapper在以value作为输入时的输出值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;U&gt; Optional&lt;U&gt; <span class="title function_">map</span><span class="params">(Function&lt;? <span class="built_in">super</span> T, ? extends U&gt; mapper)</span> &#123;</span><br><span class="line">    Objects.requireNonNull(mapper);</span><br><span class="line">    <span class="keyword">if</span> (!isPresent())&#123;</span><br><span class="line">        <span class="keyword">return</span> empty();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(mapper.apply(value));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;String&gt; username = Optional</span><br><span class="line">        .ofNullable(getUserById(id))</span><br><span class="line">        .map(user -&gt; user.getUsername())</span><br><span class="line">        .map(name -&gt; name.toLowerCase())</span><br><span class="line">        .map(name -&gt; name.replace(<span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27; &#x27;</span>));</span><br><span class="line">        </span><br><span class="line">System.out.println(<span class="string">&quot;Username is: &quot;</span> + username.orElse(<span class="string">&quot;Unknown&quot;</span>));</span><br></pre></td></tr></table></figure>
<h3 id="flatMap">flatMap</h3>
<p>与map方法的区别在于，map方法参数中的函数mapper输出的是值，然后map方法会使用Optional.ofNullable将其包装为Optional，而flatMap要求参数中的函数mapper输出的就是Optional</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;U&gt; Optional&lt;U&gt; <span class="title function_">flatMap</span><span class="params">(Function&lt;? <span class="built_in">super</span> T, Optional&lt;U&gt;&gt; mapper)</span> &#123;</span><br><span class="line">    Objects.requireNonNull(mapper);</span><br><span class="line">    <span class="keyword">if</span> (!isPresent())&#123;</span><br><span class="line">        <span class="keyword">return</span> empty();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.requireNonNull(mapper.apply(value));</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;String&gt; username = Optional</span><br><span class="line">        .ofNullable(getUserById(id))</span><br><span class="line">        .flatMap(user -&gt; Optional.of(user.getUsername()))</span><br><span class="line">        .flatMap(name -&gt; Optional.of(name.toLowerCase()));</span><br><span class="line">        </span><br><span class="line">System.out.println(<span class="string">&quot;Username is: &quot;</span> + username.orElse(<span class="string">&quot;Unknown&quot;</span>));</span><br></pre></td></tr></table></figure>
<h3 id="filter">filter</h3>
<p>filter方法接受一个Predicate来对Optional中包含的值进行过滤，如果包含的值满足条件，那么还是返回这个Optional，否则返回Optional.empty</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Optional&lt;T&gt; <span class="title function_">filter</span><span class="params">(Predicate&lt;? <span class="built_in">super</span> T&gt; predicate)</span> &#123;</span><br><span class="line">    Objects.requireNonNull(predicate);</span><br><span class="line">    <span class="keyword">if</span>(!isPresent()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> predicate.test(value) ? <span class="built_in">this</span> : empty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;String&gt; username = Optional</span><br><span class="line">        .ofNullable(getUserById(id))</span><br><span class="line">        .filter(user -&gt; user.getId() &lt; <span class="number">10</span>)</span><br><span class="line">        .map(user -&gt; user.getUsername());</span><br><span class="line">        </span><br><span class="line">System.out.println(<span class="string">&quot;Username is: &quot;</span> + username.orElse(<span class="string">&quot;Unknown&quot;</span>));</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Stream流</tag>
      </tags>
  </entry>
  <entry>
    <title>定时任务工具类（Cron Util）</title>
    <url>/blog/2024/11/19/%E5%90%8E%E7%AB%AF/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/Cron%20Util/</url>
    <content><![CDATA[<h2 id="依赖">依赖</h2>
<p>cron-utils的github地址：<a href="https://github.com/jmrozanec/cron-utils">https://github.com/jmrozanec/cron-utils</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.cronutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cron-utils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="基本使用">基本使用</h2>
<h3 id="定义cron表达式的支持范围">定义cron表达式的支持范围</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建cron定义，自定义cron表达式支持的范围</span></span><br><span class="line"><span class="type">CronDefinition</span> <span class="variable">cronDefinition</span> <span class="operator">=</span></span><br><span class="line">    CronDefinitionBuilder.defineCron()</span><br><span class="line">        .withSeconds().and()</span><br><span class="line">        .withMinutes().and()</span><br><span class="line">        .withHours().and()</span><br><span class="line">        .withDayOfMonth()</span><br><span class="line">            .supportsHash().supportsL().supportsW().and()</span><br><span class="line">        .withMonth().and()</span><br><span class="line">        .withDayOfWeek()</span><br><span class="line">            .withIntMapping(<span class="number">7</span>, <span class="number">0</span>) </span><br><span class="line">            .supportsHash().supportsL().supportsW().and()</span><br><span class="line">        .withYear().optional().and()</span><br><span class="line">        .instance();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入要生成的cron表达式类型获取cron定义</span></span><br><span class="line">cronDefinition = CronDefinitionBuilder.instanceDefinitionFor(CronType.QUARTZ);</span><br></pre></td></tr></table></figure>
<p>支持定时任务的类型：</p>
<ol>
<li>CRON4J</li>
<li>QUARTZ</li>
<li>UNIX</li>
<li>SPRING</li>
<li>SPRING53</li>
</ol>
<h3 id="生成cron表达式">生成cron表达式</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.cronutils.model.field.expression.FieldExpressionFactory.*;</span><br><span class="line"></span><br><span class="line"><span class="type">Cron</span> <span class="variable">cron</span> <span class="operator">=</span> CronBuilder.cron(CronDefinitionBuilder.instanceDefinitionFor(CronType.QUARTZ))</span><br><span class="line">    .withYear(always())</span><br><span class="line">    .withDoM(between(SpecialChar.L, <span class="number">3</span>))</span><br><span class="line">    .withMonth(always())</span><br><span class="line">    .withDoW(questionMark())</span><br><span class="line">    .withHour(always())</span><br><span class="line">    .withMinute(always())</span><br><span class="line">    .withSecond(on(<span class="number">0</span>))</span><br><span class="line">    .instance();</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">cronAsString</span> <span class="operator">=</span> cron.asString(); <span class="comment">// 0 * * L-3 * ? *</span></span><br></pre></td></tr></table></figure>
<p>各方法对应cron表达式关系：</p>
<ol>
<li>always：表示*</li>
<li>questionMark：表示?</li>
<li>on：表示具体值</li>
<li>between：表示-，例如，between(0,5)表示0-5</li>
<li>and：表示,，例如，and(on(1),on(5))表示0,5</li>
<li>every：表示/，例如，every(on(2),3)表示2/3</li>
</ol>
<h3 id="获取cron表达式描述">获取cron表达式描述</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建cron描述器</span></span><br><span class="line">        <span class="type">CronDescriptor</span> <span class="variable">descriptor</span> <span class="operator">=</span> CronDescriptor.instance();</span><br><span class="line">        <span class="comment">// 创建cron定义</span></span><br><span class="line">        <span class="type">CronDefinition</span> <span class="variable">cronDefinition</span> <span class="operator">=</span> CronDefinitionBuilder.instanceDefinitionFor(QUARTZ);</span><br><span class="line">        <span class="comment">// 创建cron解析器</span></span><br><span class="line">        <span class="type">CronParser</span> <span class="variable">cronParser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CronParser</span>(cronDefinition);</span><br><span class="line">        <span class="type">String</span> <span class="variable">describe</span> <span class="operator">=</span> descriptor.describe(cronParser.parse(<span class="string">&quot;0 0 12 ? * 6&quot;</span>));</span><br><span class="line">        System.out.println(describe);</span><br><span class="line">        describe = descriptor.describe(cronParser.parse(<span class="string">&quot;*/45 * * * * ?&quot;</span>));</span><br><span class="line">        System.out.println(describe);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置语言</span></span><br><span class="line">		descriptor = CronDescriptor.instance(Locale.CHINESE);</span><br><span class="line">        describe = descriptor.describe(cronParser.parse(<span class="string">&quot;0 0 12 ? * 6&quot;</span>));</span><br><span class="line">        System.out.println(describe);</span><br><span class="line">        describe = descriptor.describe(cronParser.parse(<span class="string">&quot;*/45 * * * * ?&quot;</span>));</span><br><span class="line">        System.out.println(describe);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 运行结果：</span></span><br><span class="line">at <span class="number">12</span>:<span class="number">00</span> at Friday day</span><br><span class="line">every <span class="number">45</span> seconds</span><br><span class="line">在 <span class="number">12</span>:<span class="number">00</span> 在 星期五 天</span><br><span class="line">每 <span class="number">45</span> 秒</span><br></pre></td></tr></table></figure>
<h3 id="校验cron表达式的正确性">校验cron表达式的正确性</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">CronDefinition</span> <span class="variable">cronDefinition</span> <span class="operator">=</span> CronDefinitionBuilder.instanceDefinitionFor(QUARTZ);</span><br><span class="line">        <span class="type">CronParser</span> <span class="variable">cronParser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CronParser</span>(cronDefinition);</span><br><span class="line">        <span class="type">Cron</span> <span class="variable">cron</span> <span class="operator">=</span> cronParser.parse(<span class="string">&quot;0 0 12 ? * 6&quot;</span>);</span><br><span class="line">        <span class="comment">// 校验cron表达式</span></span><br><span class="line">        cron.validate();</span><br><span class="line">        cron = cronParser.parse(<span class="string">&quot;0 0 12 ? * ?&quot;</span>);</span><br><span class="line">        cron.validate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="工具类">工具类</h2>
<h3 id="WeekEnum">WeekEnum</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">WeekEnum</span> &#123;</span><br><span class="line"></span><br><span class="line">    SUNDAY(<span class="number">1</span>, <span class="string">&quot;星期天&quot;</span>),</span><br><span class="line">    MONDAY(<span class="number">2</span>, <span class="string">&quot;星期一&quot;</span>),</span><br><span class="line">    TUESDAY(<span class="number">3</span>, <span class="string">&quot;星期二&quot;</span>),</span><br><span class="line">    WEDNESDAY(<span class="number">4</span>, <span class="string">&quot;星期三&quot;</span>),</span><br><span class="line">    THURSDAY(<span class="number">5</span>, <span class="string">&quot;星期四&quot;</span>),</span><br><span class="line">    FRIDAY(<span class="number">6</span>, <span class="string">&quot;星期五&quot;</span>),</span><br><span class="line">    SATURDAY(<span class="number">7</span>, <span class="string">&quot;星期六&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="CycleTypeEnum">CycleTypeEnum</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">CycleTypeEnum</span> &#123;</span><br><span class="line"></span><br><span class="line">    MINUTE(<span class="number">1</span>, <span class="string">&quot;分钟&quot;</span>),</span><br><span class="line">    HOUR(<span class="number">2</span>, <span class="string">&quot;小时&quot;</span>),</span><br><span class="line">    DAY(<span class="number">3</span>, <span class="string">&quot;日&quot;</span>),</span><br><span class="line">    WEEK(<span class="number">4</span>, <span class="string">&quot;周&quot;</span>),</span><br><span class="line">    MONTH(<span class="number">5</span>, <span class="string">&quot;月&quot;</span>),</span><br><span class="line">    QUARTER(<span class="number">6</span>, <span class="string">&quot;季度&quot;</span>),</span><br><span class="line">    YEAR(<span class="number">7</span>, <span class="string">&quot;年&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="RepeatRuleEnum">RepeatRuleEnum</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">RepeatRuleEnum</span> &#123;</span><br><span class="line"></span><br><span class="line">    WEEK(<span class="number">1</span>, <span class="string">&quot;周&quot;</span>),</span><br><span class="line">    DATE(<span class="number">2</span>, <span class="string">&quot;日期&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="CronDto">CronDto</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CronDto</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 周期类型 minute:分钟 hour: 小时; day: 天; week: 周; month: 月; quarter: 季; year: 年</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer cycleType;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime executionTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定一周哪几天</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; weekDays;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定一个月哪几天</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; monthDays;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定一年哪几月</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; quartzMonths;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一周的星期几</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer dayOfWeek;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第几周</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer week;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重复规则：周 天</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer repeatRule;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="CronUtils">CronUtils</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CronUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 星期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;Integer&gt; WEEKS = Arrays.stream(WeekEnum.values()).map(WeekEnum::getCode).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createCron</span><span class="params">(CronDto cronDto)</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">cycleType</span> <span class="operator">=</span> cronDto.getCycleType();</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">executionTime</span> <span class="operator">=</span> cronDto.getExecutionTime();</span><br><span class="line">        <span class="type">CronBuilder</span> <span class="variable">cronBuilder</span> <span class="operator">=</span> CronBuilder.cron(CronDefinitionBuilder.instanceDefinitionFor(CronType.QUARTZ));</span><br><span class="line">        <span class="comment">// 每分钟一次</span></span><br><span class="line">        <span class="keyword">if</span> (Objects.equals(CycleTypeEnum.MINUTE.getCode(), cycleType)) &#123;</span><br><span class="line">            <span class="keyword">return</span> getSecondCron(cronBuilder, executionTime);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 每小时一次</span></span><br><span class="line">        <span class="keyword">if</span> (Objects.equals(CycleTypeEnum.HOUR.getCode(), cycleType)) &#123;</span><br><span class="line">            <span class="keyword">return</span> getMinuteCron(cronBuilder, executionTime);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 每日一次</span></span><br><span class="line">        <span class="keyword">if</span> (Objects.equals(CycleTypeEnum.DAY.getCode(), cycleType)) &#123;</span><br><span class="line">            <span class="keyword">return</span> getDayCron(cronBuilder, executionTime);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 每周一次</span></span><br><span class="line">        <span class="keyword">if</span> (Objects.equals(CycleTypeEnum.WEEK.getCode(), cycleType)) &#123;</span><br><span class="line">            <span class="keyword">return</span> getWeekCron(cronDto, cronBuilder, executionTime);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 每月一次</span></span><br><span class="line">        <span class="keyword">if</span> (Objects.equals(CycleTypeEnum.MONTH.getCode(), cycleType)) &#123;</span><br><span class="line">            <span class="keyword">return</span> getMonthCron(cronDto, cronBuilder, executionTime);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 每季度一次</span></span><br><span class="line">        <span class="keyword">if</span> (Objects.equals(CycleTypeEnum.QUARTER.getCode(), cycleType)) &#123;</span><br><span class="line">            <span class="keyword">return</span> getQuarterCron(cronDto, cronBuilder, executionTime);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 每年一次</span></span><br><span class="line">        <span class="keyword">if</span> (Objects.equals(CycleTypeEnum.YEAR.getCode(), cycleType)) &#123;</span><br><span class="line">            <span class="keyword">return</span> getYearCron(cronBuilder, executionTime);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getYearCron</span><span class="params">(CronBuilder cronBuilder, LocalDateTime executionTime)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cronBuilder.withSecond(on(executionTime.getSecond()))</span><br><span class="line">                .withMinute(on(executionTime.getMinute()))</span><br><span class="line">                .withHour(on(executionTime.getHour()))</span><br><span class="line">                .withDoM(on(executionTime.getDayOfMonth()))</span><br><span class="line">                .withMonth(on(executionTime.getMonthValue()))</span><br><span class="line">                .withDoW(questionMark())</span><br><span class="line">                .instance()</span><br><span class="line">                .asString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getQuarterCron</span><span class="params">(CronDto cronDto, CronBuilder cronBuilder, LocalDateTime executionTime)</span> &#123;</span><br><span class="line">        List&lt;FieldExpression&gt; flist = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        cronDto.getQuartzMonths().forEach(e -&gt; flist.add(FieldExpressionFactory.on(e)));</span><br><span class="line">        <span class="keyword">return</span> cronBuilder.withSecond(on(executionTime.getSecond()))</span><br><span class="line">                .withMinute(on(executionTime.getMinute()))</span><br><span class="line">                .withHour(on(executionTime.getHour()))</span><br><span class="line">                .withDoM(questionMark())</span><br><span class="line">                .withMonth(and(flist))</span><br><span class="line">                .withDoW(on(WEEKS.get(cronDto.getDayOfWeek()), SpecialChar.HASH, cronDto.getWeek()))</span><br><span class="line">                .instance()</span><br><span class="line">                .asString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getMonthCron</span><span class="params">(CronDto cronDto, CronBuilder cronBuilder, LocalDateTime executionTime)</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">repeatRule</span> <span class="operator">=</span> cronDto.getRepeatRule();</span><br><span class="line">        <span class="comment">// 按周</span></span><br><span class="line">        <span class="keyword">if</span> (Objects.equals(RepeatRuleEnum.WEEK.getCode(), repeatRule)) &#123;</span><br><span class="line">            List&lt;FieldExpression&gt; weekDays = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">if</span> (!CollectionUtils.isEmpty(cronDto.getWeekDays())) &#123;</span><br><span class="line">                cronDto.getWeekDays().forEach(e -&gt; weekDays.add(FieldExpressionFactory.on(WEEKS.get(cronDto.getDayOfWeek()),</span><br><span class="line">                        SpecialChar.HASH, e)));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> cronBuilder.withSecond(on(executionTime.getSecond()))</span><br><span class="line">                    .withMinute(on(executionTime.getMinute()))</span><br><span class="line">                    .withHour(on(executionTime.getHour()))</span><br><span class="line">                    .withDoM(questionMark())</span><br><span class="line">                    .withMonth(always())</span><br><span class="line">                    .withDoW(CollectionUtils.isEmpty(weekDays) ? on(WEEKS.get(cronDto.getDayOfWeek()), SpecialChar.HASH,</span><br><span class="line">                            cronDto.getWeek()) : and(weekDays))</span><br><span class="line">                    .instance()</span><br><span class="line">                    .asString();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 按天</span></span><br><span class="line">        <span class="keyword">if</span> (Objects.equals(RepeatRuleEnum.DATE.getCode(), repeatRule)) &#123;</span><br><span class="line">            List&lt;FieldExpression&gt; monthDays = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            cronDto.getMonthDays().forEach(e -&gt; monthDays.add(FieldExpressionFactory.on(e)));</span><br><span class="line">            <span class="keyword">return</span> cronBuilder.withSecond(on(executionTime.getSecond()))</span><br><span class="line">                    .withMinute(on(executionTime.getMinute()))</span><br><span class="line">                    .withHour(on(executionTime.getHour()))</span><br><span class="line">                    .withDoM(and(monthDays))</span><br><span class="line">                    .withMonth(always())</span><br><span class="line">                    .withDoW(questionMark())</span><br><span class="line">                    .instance()</span><br><span class="line">                    .asString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getWeekCron</span><span class="params">(CronDto cronDto, CronBuilder cronBuilder, LocalDateTime executionTime)</span> &#123;</span><br><span class="line">        List&lt;FieldExpression&gt; weekDays = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        cronDto.getWeekDays().forEach(e -&gt; weekDays.add(FieldExpressionFactory.on(e)));</span><br><span class="line">        <span class="keyword">return</span> cronBuilder.withSecond(on(executionTime.getSecond()))</span><br><span class="line">                .withMinute(on(executionTime.getMinute()))</span><br><span class="line">                .withHour(on(executionTime.getHour()))</span><br><span class="line">                .withDoM(questionMark())</span><br><span class="line">                .withMonth(always())</span><br><span class="line">                .withDoW(and(weekDays))</span><br><span class="line">                .instance()</span><br><span class="line">                .asString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getDayCron</span><span class="params">(CronBuilder cronBuilder, LocalDateTime executionTime)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cronBuilder.withSecond(on(executionTime.getSecond()))</span><br><span class="line">                .withMinute(on(executionTime.getMinute()))</span><br><span class="line">                .withHour(on(executionTime.getHour()))</span><br><span class="line">                .withDoM(always())</span><br><span class="line">                .withMonth(always())</span><br><span class="line">                .withDoW(questionMark())</span><br><span class="line">                .instance()</span><br><span class="line">                .asString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getMinuteCron</span><span class="params">(CronBuilder cronBuilder, LocalDateTime executionTime)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cronBuilder.withSecond(on(executionTime.getSecond()))</span><br><span class="line">                .withMinute(on(executionTime.getMinute()))</span><br><span class="line">                .withHour(always())</span><br><span class="line">                .withDoM(always())</span><br><span class="line">                .withMonth(always())</span><br><span class="line">                .withDoW(questionMark())</span><br><span class="line">                .instance()</span><br><span class="line">                .asString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getSecondCron</span><span class="params">(CronBuilder cronBuilder, LocalDateTime executionTime)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cronBuilder.withSecond(on(executionTime.getSecond()))</span><br><span class="line">                .withMinute(always())</span><br><span class="line">                .withHour(always())</span><br><span class="line">                .withDoM(always())</span><br><span class="line">                .withMonth(always())</span><br><span class="line">                .withDoW(questionMark())</span><br><span class="line">                .instance()</span><br><span class="line">                .asString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="测试">测试</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">CronDto</span> <span class="variable">cronDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CronDto</span>();</span><br><span class="line">        cronDto.setCycleType(<span class="number">1</span>);</span><br><span class="line">        cronDto.setExecutionTime(LocalDateTime.now());</span><br><span class="line">        <span class="type">String</span> <span class="variable">cron</span> <span class="operator">=</span> createCron(cronDto);</span><br><span class="line">        System.out.println(cron);</span><br><span class="line"></span><br><span class="line">        cronDto.setCycleType(<span class="number">2</span>);</span><br><span class="line">        cron = createCron(cronDto);</span><br><span class="line">        System.out.println(cron);</span><br><span class="line"></span><br><span class="line">        cronDto.setCycleType(<span class="number">3</span>);</span><br><span class="line">        cron = createCron(cronDto);</span><br><span class="line">        System.out.println(cron);</span><br><span class="line"></span><br><span class="line">        cronDto.setCycleType(<span class="number">4</span>);</span><br><span class="line">        cronDto.setWeekDays(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">        cron = createCron(cronDto);</span><br><span class="line">        System.out.println(cron);</span><br><span class="line"></span><br><span class="line">        cronDto.setCycleType(<span class="number">5</span>);</span><br><span class="line">        cronDto.setRepeatRule(<span class="number">1</span>);</span><br><span class="line">        cronDto.setDayOfWeek(<span class="number">1</span>);</span><br><span class="line">        cron = createCron(cronDto);</span><br><span class="line">        System.out.println(cron);</span><br><span class="line"></span><br><span class="line">        cronDto.setCycleType(<span class="number">5</span>);</span><br><span class="line">        cronDto.setRepeatRule(<span class="number">1</span>);</span><br><span class="line">        cronDto.setWeek(<span class="number">1</span>);</span><br><span class="line">        cronDto.setDayOfWeek(<span class="number">1</span>);</span><br><span class="line">        cronDto.setWeekDays(<span class="literal">null</span>);</span><br><span class="line">        cron = createCron(cronDto);</span><br><span class="line">        System.out.println(cron);</span><br><span class="line"></span><br><span class="line">        cronDto.setCycleType(<span class="number">5</span>);</span><br><span class="line">        cronDto.setRepeatRule(<span class="number">2</span>);</span><br><span class="line">        cronDto.setMonthDays(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">        cron = createCron(cronDto);</span><br><span class="line">        System.out.println(cron);</span><br><span class="line"></span><br><span class="line">        cronDto.setCycleType(<span class="number">6</span>);</span><br><span class="line">        cronDto.setQuartzMonths(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">        cron = createCron(cronDto);</span><br><span class="line">        System.out.println(cron);</span><br><span class="line"></span><br><span class="line">        cronDto.setCycleType(<span class="number">7</span>);</span><br><span class="line">        cron = createCron(cronDto);</span><br><span class="line">        System.out.println(cron);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 运行结果：</span></span><br><span class="line"><span class="number">14</span> * * * * ?</span><br><span class="line"><span class="number">14</span> <span class="number">28</span> * * * ?</span><br><span class="line"><span class="number">14</span> <span class="number">28</span> <span class="number">9</span> * * ?</span><br><span class="line"><span class="number">14</span> <span class="number">28</span> <span class="number">9</span> ? * <span class="number">1</span>,<span class="number">2</span></span><br><span class="line"><span class="number">14</span> <span class="number">28</span> <span class="number">9</span> ? * <span class="number">2</span>#<span class="number">1</span>,<span class="number">2</span>#<span class="number">2</span></span><br><span class="line"><span class="number">14</span> <span class="number">28</span> <span class="number">9</span> ? * <span class="number">2</span>#<span class="number">1</span></span><br><span class="line"><span class="number">14</span> <span class="number">28</span> <span class="number">9</span> <span class="number">1</span>,<span class="number">2</span> * ?</span><br><span class="line"><span class="number">14</span> <span class="number">28</span> <span class="number">9</span> ? <span class="number">1</span>,<span class="number">2</span> <span class="number">2</span>#<span class="number">1</span></span><br><span class="line"><span class="number">14</span> <span class="number">28</span> <span class="number">9</span> <span class="number">19</span> <span class="number">11</span> ?</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>定时任务</tag>
        <tag>Cron Util</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot Task</title>
    <url>/blog/2024/11/08/%E5%90%8E%E7%AB%AF/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/SpringBoot%20Task/</url>
    <content><![CDATA[<h2 id="参数详解">参数详解</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.ANNOTATION_TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Repeatable(Schedules.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Scheduled &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">CRON_DISABLED</span> <span class="operator">=</span> <span class="string">&quot;-&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    String <span class="title function_">cron</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    String <span class="title function_">zone</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">long</span> <span class="title function_">fixedDelay</span><span class="params">()</span> <span class="keyword">default</span> -<span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    String <span class="title function_">fixedDelayString</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">long</span> <span class="title function_">fixedRate</span><span class="params">()</span> <span class="keyword">default</span> -<span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    String <span class="title function_">fixedRateString</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">long</span> <span class="title function_">initialDelay</span><span class="params">()</span> <span class="keyword">default</span> -<span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    String <span class="title function_">initialDelayString</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="fixedDelay">fixedDelay</h3>
<p>它的间隔时间是根据上次任务结束的时候开始计时的，只要盯紧上一次任务执行结束的时间即可，跟任务逻辑的执行时间无关，两个任务的间隔时间是固定的</p>
<p><img src="1.png" alt=""></p>
<h3 id="fixedDelayString">fixedDelayString</h3>
<p>与 fixedDalay 一样，不同的是使用的是 String 字符串，支持占位符方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Scheduled(fixedDelayString = &quot;$&#123;time.fixedDelay&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Execute at &quot;</span> + System.currentTimeMillis());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="fixedRate">fixedRate</h3>
<p>在理想情况下，下一次开始和上一次开始之间的时间间隔是一定的，但是默认情况下 SpringBoot 定时任务是单线程执行的。当下一轮的任务满足时间策略后任务就会加入队列，即当本次任务开始执行时下一次任务的时间就已经确定了，由于本次任务的“超时”执行，下一次任务的等待时间就会被压缩甚至阻塞</p>
<p><img src="2.png" alt=""></p>
<h3 id="fixedRateString">fixedRateString</h3>
<p>与 fixedRate 一样，不同的是使用的是 String 字符串，支持占位符方式</p>
<h3 id="initialDelay">initialDelay</h3>
<p>这个参数只能配合 fixedDelay 或 fixedRate 使用。如：@Scheduled(initialDelay = 10000, fixedRate = 15000)，意思是在容器启动后，延迟 10 秒再执行一次定时器，以后每 15 秒再执行一次该定时器</p>
<h3 id="initialDelayString">initialDelayString</h3>
<p>与 initialDelay 一样，不同的是使用的是 String 字符串，支持占位符方式</p>
<h3 id="cron-表达式">cron 表达式</h3>
<p>语法格式：</p>
<ol>
<li>
<p>秒 分 小时 月份中的日期 月份 星期中的日期 年份</p>
</li>
<li>
<p>秒 分 小时 月份中的日期 月份 星期中的日期</p>
</li>
</ol>
<table>
<thead>
<tr>
<th>字段</th>
<th>值</th>
<th>特殊字符</th>
</tr>
</thead>
<tbody>
<tr>
<td>秒（Seconds）</td>
<td>0~59 的整数</td>
<td>, - * /</td>
</tr>
<tr>
<td>分（Minutes）</td>
<td>0~59 的整数</td>
<td>, - * /</td>
</tr>
<tr>
<td>小时（Hours）</td>
<td>0~23 的整数</td>
<td>, - * /</td>
</tr>
<tr>
<td>日期（DayofMonth）</td>
<td>1~31 的整数（需要看月的天数）</td>
<td>, - * ? / L W C</td>
</tr>
<tr>
<td>月份（Month）</td>
<td>1~12 的整数</td>
<td>, - * /</td>
</tr>
<tr>
<td>星期（DayOfWeek）</td>
<td>1~7 的整数</td>
<td>, - * ? / L W C</td>
</tr>
<tr>
<td>年（Year）（可选）</td>
<td>1970~2099</td>
<td>, - * /</td>
</tr>
</tbody>
</table>
<ol>
<li>
<p>*：表示匹配该域的任意值。</p>
<p>例如：在 Minutes 域使用*，即表示每分钟都会触发事件</p>
</li>
<li>
<p>?：只能用在 DayofMonth 和 DayofWeek 两个域，它也匹配域的任意值，但实际不会，因为 DayofMonth 和 DayofWeek 会相互影响。</p>
<p>例如：在每月的 20 日触发任务，不管 20 日是星期几，只能使用如下写法：13 13 15 20 * ?，其中最后一位只能用?，而不能使用*，如果使用*表示不管星期几都会触发</p>
</li>
<li>
<p>-：表示范围。</p>
<p>例如：在 Minutes 域使用 5-20，表示从 5 到 20 分钟每分钟触发一次</p>
</li>
<li>
<p>/：表示起始时间开始触发，然后每隔固定时间触发一次。</p>
<p>例如：在 Minutes 域使用 5/20，则意味着从第 5 分钟开始，每隔 20 分钟触发一次</p>
</li>
<li>
<p>,：表示列出枚举值。</p>
<p>例如：在 Minutes 域使用 5,20，则意味着在 5 和 20 分都会触发一次</p>
</li>
<li>
<p>L：表示最后，只能出现在 DayofWeek 和 DayofMonth 域。</p>
<p>例如：在 DayofWeek 域使用 5L，意味着在最后的一个星期四触发</p>
</li>
<li>
<p>W：表示有效工作日（周一到周五），只能出现在 DayofMonth 域，系统将在离指定日期的最近的有效工作日触发事件。</p>
<p>例如：在 DayofMonth 使用 5W，如果 5 日是星期六，则将在最近的工作日（星期五，即 4 日触发）；如果 5 日是星期天，则在 6 日（星期一）触发；如果 5 日在星期一到星期五中的一天，则就在 5 日触发。注意：W 的最近寻找不会跨过月份</p>
</li>
<li>
<p>LW：这两个字符可以连用，表示在某个月最后一个工作日，即最后一个星期五</p>
</li>
<li>
<p>#：用于确定每个月第 n 个星期 x（x#n），只能出现在 DayofMonth 域。</p>
<p>例如：4#2 表示第 2 个星期三</p>
</li>
</ol>
<p><strong>常用表达式参考</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;*/5 * * * * ?&quot;</span>       # 每隔<span class="number">5</span>秒执行一次</span><br><span class="line"><span class="string">&quot;0 */1 * * * ?&quot;</span>       # 每隔<span class="number">1</span>分钟执行一次</span><br><span class="line"><span class="string">&quot;0 0 23 * * ?&quot;</span>        # 每天<span class="number">23</span>点执行一次</span><br><span class="line"><span class="string">&quot;0 0 1 * * ?&quot;</span>         # 每天凌晨<span class="number">1</span>点执行一次</span><br><span class="line"><span class="string">&quot;0 0 1 1 * ?&quot;</span>         # 每月<span class="number">1</span>号凌晨<span class="number">1</span>点执行一次</span><br><span class="line"><span class="string">&quot;0 0 23 L * ?&quot;</span>        # 每月最后一天<span class="number">23</span>点执行一次</span><br><span class="line"><span class="string">&quot;0 0 1 ? * L&quot;</span>         # 每周星期天凌晨<span class="number">1</span>点实行一次：</span><br><span class="line"><span class="string">&quot;0 26,29,33 * * * ?&quot;</span>  # 在<span class="number">26</span>分、<span class="number">29</span>分、<span class="number">33</span>分执行一次</span><br><span class="line"><span class="string">&quot;0 0 0,3,8,21 * * ?&quot;</span>  # 每天的<span class="number">0</span>点、<span class="number">3</span>点、<span class="number">8</span>点、<span class="number">21</span>点执行一次</span><br><span class="line"><span class="string">&quot;0 0 10,14,16 * * ?&quot;</span>  # 每天上午<span class="number">10</span>点，下午<span class="number">2</span>点，<span class="number">4</span>点</span><br><span class="line"><span class="string">&quot;0 0/30 9-17 * * ?&quot;</span>   # 朝九晚五工作时间内每半小时</span><br><span class="line"><span class="string">&quot;0 0 12 ? * WED&quot;</span>      # 表示每个星期三中午<span class="number">12</span>点</span><br><span class="line"><span class="string">&quot;0 0 12 * * ?&quot;</span>        # 每天中午<span class="number">12</span>点触发</span><br><span class="line"><span class="string">&quot;0 15 10 ? * *&quot;</span>       # 每天上午<span class="number">10</span>:<span class="number">15</span>触发</span><br><span class="line"><span class="string">&quot;0 15 10 * * ?&quot;</span>       # 每天上午<span class="number">10</span>:<span class="number">15</span>触发</span><br><span class="line"><span class="string">&quot;0 15 10 * * ? *&quot;</span>     # 每天上午<span class="number">10</span>:<span class="number">15</span>触发</span><br><span class="line"><span class="string">&quot;0 15 10 * * ?&quot;</span>       # <span class="number">2005</span><span class="string">&quot; 2005年的每天上午10:15触发</span></span><br><span class="line"><span class="string">&quot;</span><span class="number">0</span> * <span class="number">14</span> * * ?<span class="string">&quot;        # 在每天下午2点到下午2:59期间的每1分钟触发</span></span><br><span class="line"><span class="string">&quot;</span><span class="number">0</span> <span class="number">0</span>/<span class="number">5</span> <span class="number">14</span> * * ?<span class="string">&quot;      # 在每天下午2点到下午2:55期间的每5分钟触发</span></span><br><span class="line"><span class="string">&quot;</span><span class="number">0</span> <span class="number">0</span>/<span class="number">5</span> <span class="number">14</span>,<span class="number">18</span> * * ?<span class="string">&quot;   # 在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发</span></span><br><span class="line"><span class="string">&quot;</span><span class="number">0</span> <span class="number">0</span>-<span class="number">5</span> <span class="number">14</span> * * ?<span class="string">&quot;      # 在每天下午2点到下午2:05期间的每1分钟触发</span></span><br><span class="line"><span class="string">&quot;</span><span class="number">0</span> <span class="number">10</span>,<span class="number">44</span> <span class="number">14</span> ? <span class="number">3</span> WED<span class="string">&quot;  # 每年三月的星期三的下午2:10和2:44触发</span></span><br><span class="line"><span class="string">&quot;</span><span class="number">0</span> <span class="number">15</span> <span class="number">10</span> ? * MON-FRI<span class="string">&quot; # 周一至周五的上午10:15触发</span></span><br><span class="line"><span class="string">&quot;</span><span class="number">0</span> <span class="number">15</span> <span class="number">10</span> <span class="number">15</span> * ?<span class="string">&quot;      # 每月15日上午10:15触发</span></span><br><span class="line"><span class="string">&quot;</span><span class="number">0</span> <span class="number">15</span> <span class="number">10</span> L * ?<span class="string">&quot;       # 每月最后一日的上午10:15触发</span></span><br><span class="line"><span class="string">&quot;</span><span class="number">0</span> <span class="number">15</span> <span class="number">10</span> ? * <span class="number">6L</span><span class="string">&quot;      # 每月的最后一个星期五上午10:15触发</span></span><br><span class="line"><span class="string">&quot;</span><span class="number">0</span> <span class="number">15</span> <span class="number">10</span> ? * <span class="number">6</span>#<span class="number">3</span><span class="string">&quot;     # 每月的第三个星期五上午10:15触发</span></span><br><span class="line"><span class="string">&quot;</span><span class="number">0</span> <span class="number">15</span> <span class="number">10</span> ? * <span class="number">6L</span> <span class="number">2002</span>-<span class="number">2005</span><span class="string">&quot; # 2002年至2005年的每月的最后一个星期五上午10:15触发</span></span><br></pre></td></tr></table></figure>
<h2 id="基本使用">基本使用</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// 开启定时任务开关</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringtaskApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringtaskApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskService01</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Scheduled(fixedDelay = 1000)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task01</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;fixedDelay....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Scheduled(fixedRate = 1000)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task02</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;fixedRate....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Scheduled(initialDelay = 10000,fixedDelay = 1000)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task03</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;initialDelay&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;1 * * * * *&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task04</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;cron&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="定时任务配置">定时任务配置</h2>
<p>@EnableScheduling 注解引入了 ScheduledAnnotationBeanPostProcessor 其 setScheduler(Object scheduler) 有以下的注释：</p>
<p>如果 TaskScheduler 或者 ScheduledExecutorService 没有定义为该方法的参数，该方法将在 Spring IoC 中寻找唯一的 TaskScheduler 或者名称为 taskScheduler 的 Bean 作为参数，当然你按照查找 TaskScheduler 的方法找一个 ScheduledExecutorService 也可以。要是都找不到那么只能使用本地单线程调度器了</p>
<p><img src="5.png" alt=""></p>
<p><img src="3.png" alt=""></p>
<h3 id="执行器">执行器</h3>
<p>SpringBoot 内默认自动配置 TaskExecutor 任务执行器线程池，主要用于执行单次任务</p>
<h4 id="自动配置条件">自动配置条件</h4>
<ol>
<li>当类路径下存在 ThreadPoolTaskExecutor 类</li>
<li>当 Spring 容器中不存在 Executor 的 bean</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 仅在类 ThreadPoolTaskExecutor 存在于 classpath 时才应用</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(ThreadPoolTaskExecutor.class)</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(TaskExecutionProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskExecutionAutoConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">APPLICATION_TASK_EXECUTOR_BEAN_NAME</span> <span class="operator">=</span> <span class="string">&quot;applicationTaskExecutor&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="keyword">public</span> TaskExecutorBuilder <span class="title function_">taskExecutorBuilder</span><span class="params">(TaskExecutionProperties properties,</span></span><br><span class="line"><span class="params">            ObjectProvider&lt;TaskExecutorCustomizer&gt; taskExecutorCustomizers,</span></span><br><span class="line"><span class="params">            ObjectProvider&lt;TaskDecorator&gt; taskDecorator)</span> &#123;</span><br><span class="line">        TaskExecutionProperties.<span class="type">Pool</span> <span class="variable">pool</span> <span class="operator">=</span> properties.getPool();</span><br><span class="line">        <span class="type">TaskExecutorBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TaskExecutorBuilder</span>();</span><br><span class="line">        builder = builder.queueCapacity(pool.getQueueCapacity());</span><br><span class="line">        builder = builder.corePoolSize(pool.getCoreSize());</span><br><span class="line">        builder = builder.maxPoolSize(pool.getMaxSize());</span><br><span class="line">        builder = builder.allowCoreThreadTimeOut(pool.isAllowCoreThreadTimeout());</span><br><span class="line">        builder = builder.keepAlive(pool.getKeepAlive());</span><br><span class="line">        <span class="type">Shutdown</span> <span class="variable">shutdown</span> <span class="operator">=</span> properties.getShutdown();</span><br><span class="line">        builder = builder.awaitTermination(shutdown.isAwaitTermination());</span><br><span class="line">        builder = builder.awaitTerminationPeriod(shutdown.getAwaitTerminationPeriod());</span><br><span class="line">        builder = builder.threadNamePrefix(properties.getThreadNamePrefix());</span><br><span class="line">        builder = builder.customizers(taskExecutorCustomizers.orderedStream()::iterator);</span><br><span class="line">        builder = builder.taskDecorator(taskDecorator.getIfUnique());</span><br><span class="line">        <span class="keyword">return</span> builder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Lazy</span></span><br><span class="line">    <span class="meta">@Bean(name = &#123; APPLICATION_TASK_EXECUTOR_BEAN_NAME,</span></span><br><span class="line"><span class="meta">            AsyncAnnotationBeanPostProcessor.DEFAULT_TASK_EXECUTOR_BEAN_NAME &#125;)</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean(Executor.class)</span></span><br><span class="line">    <span class="keyword">public</span> ThreadPoolTaskExecutor <span class="title function_">applicationTaskExecutor</span><span class="params">(TaskExecutorBuilder builder)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> builder.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="线程池配置">线程池配置</h4>
<p>TaskExecutionProperties 默认值：</p>
<ol>
<li>线程名称前缀：threadNamePrefix = “task-”</li>
<li>核心线程数：coreSize = 8</li>
<li>最大线程数：maxSize = Integer.MAX_VALUE</li>
<li>非核心线程存活时长：keepAlive = Duration.ofSeconds(60)</li>
</ol>
<h3 id="调度器">调度器</h3>
<p>SpringBoot 内默认自动配置 TaskScheduler 任务调度器线程池，主要用于执行周期性任务</p>
<h4 id="自动配置条件-2">自动配置条件</h4>
<ol>
<li>当类路径下存在 ThreadPoolTaskScheduler 类</li>
<li>当 Spring 容器中不存在 SchedulingConfigurer 、 TaskScheduler 、ScheduledExecutorService 的 bean</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnClass(ThreadPoolTaskScheduler.class)</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(TaskSchedulingProperties.class)</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(TaskExecutionAutoConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskSchedulingAutoConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnBean(name = TaskManagementConfigUtils.SCHEDULED_ANNOTATION_PROCESSOR_BEAN_NAME)</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean(&#123; SchedulingConfigurer.class, TaskScheduler.class, ScheduledExecutorService.class &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> ThreadPoolTaskScheduler <span class="title function_">taskScheduler</span><span class="params">(TaskSchedulerBuilder builder)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> builder.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="keyword">public</span> TaskSchedulerBuilder <span class="title function_">taskSchedulerBuilder</span><span class="params">(TaskSchedulingProperties properties,</span></span><br><span class="line"><span class="params">            ObjectProvider&lt;TaskSchedulerCustomizer&gt; taskSchedulerCustomizers)</span> &#123;</span><br><span class="line">        <span class="type">TaskSchedulerBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TaskSchedulerBuilder</span>();</span><br><span class="line">        builder = builder.poolSize(properties.getPool().getSize());</span><br><span class="line">        <span class="type">Shutdown</span> <span class="variable">shutdown</span> <span class="operator">=</span> properties.getShutdown();</span><br><span class="line">        builder = builder.awaitTermination(shutdown.isAwaitTermination());</span><br><span class="line">        builder = builder.awaitTerminationPeriod(shutdown.getAwaitTerminationPeriod());</span><br><span class="line">        builder = builder.threadNamePrefix(properties.getThreadNamePrefix());</span><br><span class="line">        builder = builder.customizers(taskSchedulerCustomizers);</span><br><span class="line">        <span class="keyword">return</span> builder;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>当 Spring 容器中存在名字叫 org.springframework.context.annotation.internalScheduledAnnotationProcessor （需要配置 @EnableScheduling 注解将会注入这个名字的 bean）</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Import(SchedulingConfiguration.class)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableScheduling &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Role(BeanDefinition.ROLE_INFRASTRUCTURE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SchedulingConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = TaskManagementConfigUtils.SCHEDULED_ANNOTATION_PROCESSOR_BEAN_NAME)</span></span><br><span class="line">    <span class="meta">@Role(BeanDefinition.ROLE_INFRASTRUCTURE)</span></span><br><span class="line">    <span class="keyword">public</span> ScheduledAnnotationBeanPostProcessor <span class="title function_">scheduledAnnotationProcessor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ScheduledAnnotationBeanPostProcessor</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="线程池配置-2">线程池配置</h4>
<p>TaskSchedulingProperties 默认配置值：</p>
<ol>
<li>线程名称前缀：threadNamePrefix = “scheduling-”</li>
<li>线程数：size = 1</li>
</ol>
<p>该配置的自定义配置以 spring.task.scheduling 开头。同时它需要在任务执行器配置 TaskExecutionAutoConfiguration 配置后才生效。我们只需要在中对其配置属性 spring.task.execution 相关属性配置即可。</p>
<p>注意：定义任务默认用的是 TaskSchedulingAutoConfiguration 实例化的 Bean（applicationTaskExecutor、taskScheduler）</p>
<h3 id="Properties-配置">Properties 配置</h3>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">######任务调度线程池######</span></span><br><span class="line"><span class="comment"># 任务调度线程池大小 默认 1 建议根据任务加大</span></span><br><span class="line"><span class="attr">spring.task.scheduling.pool.size</span>=<span class="string">1</span></span><br><span class="line"><span class="comment"># 调度线程名称前缀 默认 scheduling-</span></span><br><span class="line"><span class="attr">spring.task.scheduling.thread-name-prefix</span>=<span class="string">scheduling-</span></span><br><span class="line"><span class="comment"># 线程池关闭时等待所有任务完成</span></span><br><span class="line"><span class="attr">spring.task.scheduling.shutdown.await-termination</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 调度线程关闭前最大等待时间，确保最后一定关闭</span></span><br><span class="line"><span class="attr">spring.task.scheduling.shutdown.await-termination-period</span>=<span class="string">60</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">######任务执行线程池配置######</span></span><br><span class="line"><span class="comment"># 是否允许核心线程超时。这样可以动态增加和缩小线程池</span></span><br><span class="line"><span class="attr">spring.task.execution.pool.allow-core-thread-timeout</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#  核心线程池大小 默认 8</span></span><br><span class="line"><span class="attr">spring.task.execution.pool.core-size</span>=<span class="string">8</span></span><br><span class="line"><span class="comment"># 线程空闲等待时间 默认 60s</span></span><br><span class="line"><span class="attr">spring.task.execution.pool.keep-alive</span>=<span class="string">60s</span></span><br><span class="line"><span class="comment"># 线程池最大数  根据任务定制</span></span><br><span class="line"><span class="attr">spring.task.execution.pool.max-size</span>=<span class="string">16</span></span><br><span class="line"><span class="comment">#  线程池 队列容量大小</span></span><br><span class="line"><span class="attr">spring.task.execution.pool.queue-capacity</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># 线程池关闭时等待所有任务完成</span></span><br><span class="line"><span class="attr">spring.task.execution.shutdown.await-termination</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 执行线程关闭前最大等待时间，确保最后一定关闭</span></span><br><span class="line"><span class="attr">spring.task.execution.shutdown.await-termination-period</span>=<span class="string">60</span></span><br><span class="line"><span class="comment"># 线程名称前缀</span></span><br><span class="line"><span class="attr">spring.task.execution.thread-name-prefix</span>=<span class="string">task-</span></span><br></pre></td></tr></table></figure>
<h4 id="TaskSchedulingAutoConfiguration-源码">TaskSchedulingAutoConfiguration 源码</h4>
<p>当 Spring Boot 应用程序中没有定义自定义的线程池 bean 时，Spring Boot 应用程序会根据自动配置类注入一个名为 applicationTaskExecutor 或 taskExecutor 的线程池对象，它的配置是在 TaskExecutionProperties 类中完成的，这个类使用 spring.task.execution 前缀进行配置，包含了很多线程池相关细节的配置选项，当我们容器中存在自定义线程池时，applicationTaskExecutor 或 taskExecutor 的线程池对象是不会被创建的。</p>
<h4 id="Async-注解相关配置">@Async 注解相关配置</h4>
<p>使用@Async 注解没有指定 value 属性时，项目启动的时候会有这样的提示：“在上下文中找到多个 TaskExecutor bean，并且没有一个名为’ taskExecutor’。将其中一个标记为 primary 或将其命名为’taskExecutor’（可能作为别名），以便将其用于异步处理”</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 标记为 Primary，即主要的线程</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="keyword">public</span> ThreadPoolTaskExecutor <span class="title function_">threadPoolTaskExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line">    executor.setThreadNamePrefix(<span class="string">&quot;my-free-style-&quot;</span>);</span><br><span class="line">    executor.setMaxPoolSize(maxPoolSize);</span><br><span class="line">    executor.setCorePoolSize(corePoolSize);</span><br><span class="line">    executor.setQueueCapacity(queueCapacity);</span><br><span class="line">    executor.setKeepAliveSeconds(keepAliveSeconds);</span><br><span class="line">    <span class="comment">// 线程池对拒绝任务(无线程可用)的处理策略</span></span><br><span class="line">    executor.setRejectedExecutionHandler(<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());</span><br><span class="line">    <span class="keyword">return</span> executor;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 直接起别名为 taskExecutor</span></span><br><span class="line"><span class="meta">@Bean(name = &quot;taskExecutor&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ThreadPoolTaskExecutor <span class="title function_">threadPoolTaskExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line">    executor.setThreadNamePrefix(<span class="string">&quot;my-free-style-&quot;</span>);</span><br><span class="line">    executor.setMaxPoolSize(maxPoolSize);</span><br><span class="line">    executor.setCorePoolSize(corePoolSize);</span><br><span class="line">    executor.setQueueCapacity(queueCapacity);</span><br><span class="line">    executor.setKeepAliveSeconds(keepAliveSeconds);</span><br><span class="line">    <span class="comment">// 线程池对拒绝任务(无线程可用)的处理策略</span></span><br><span class="line">    executor.setRejectedExecutionHandler(<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());</span><br><span class="line">    <span class="keyword">return</span> executor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="任务阻塞">任务阻塞</h2>
<h3 id="出现原因">出现原因</h3>
<p>Spring 中@EnableScheduling 和@Scheduled 标注的定时任务默认单线程同步执行，多个任务时，一个任务执行完毕以后才能执行下一个任务，可能会有阻塞现象发生（如果希望并发运行，需要配置线程池）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringbootTaskApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringbootTaskApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleTask1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;*/2 * * * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;我是task1，我需要执行 10s 钟的时间，我的线程的 id == &gt; &#123;&#125;，时间 == &gt;&#123;&#125;&quot;</span>, Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">        log.info(<span class="string">&quot;我是task1 ending ,我的线程的 id == &gt; &#123;&#125; , 时间 == &gt; &#123;&#125;&quot;</span>, Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;*/4 * * * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task2</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;我是task2，我需要执行 2s 钟的时间，我的线程的 id == &gt; &#123;&#125;，时间 == &gt;&#123;&#125;&quot;</span>, Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        log.info(<span class="string">&quot;我是task2 ending ,我的线程的 id == &gt; &#123;&#125; , 时间 == &gt; &#123;&#125;&quot;</span>,Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line">我是task1，我需要执行 10s 钟的时间，我的线程的 id == &gt; <span class="number">95</span>，时间 == &gt;Fri Feb <span class="number">01</span> <span class="number">15</span>:<span class="number">16</span>:<span class="number">52</span> CST <span class="number">2019</span></span><br><span class="line">我是task1 ending ,我的线程的 id == &gt; <span class="number">95</span> , 时间 == &gt; Fri Feb <span class="number">01</span> <span class="number">15</span>:<span class="number">17</span>:<span class="number">02</span> CST <span class="number">2019</span></span><br><span class="line">我是task2，我需要执行 2s 钟的时间，我的线程的 id == &gt; <span class="number">95</span>，时间 == &gt;Fri Feb <span class="number">01</span> <span class="number">15</span>:<span class="number">17</span>:<span class="number">02</span> CST <span class="number">2019</span></span><br><span class="line">task2 ending ,我的线程的 id == &gt; <span class="number">95</span> , 时间 == &gt; Fri Feb <span class="number">01</span> <span class="number">15</span>:<span class="number">17</span>:<span class="number">04</span> CST <span class="number">2019</span></span><br><span class="line">我是task1，我需要执行 10s 钟的时间，我的线程的 id == &gt; <span class="number">95</span>，时间 == &gt;Fri Feb <span class="number">01</span> <span class="number">15</span>:<span class="number">17</span>:<span class="number">04</span> CST <span class="number">2019</span></span><br><span class="line">task1 ending ,我的线程的 id == &gt; <span class="number">95</span> , 时间 == &gt; Fri Feb <span class="number">01</span> <span class="number">15</span>:<span class="number">17</span>:<span class="number">14</span> CST <span class="number">2019</span></span><br></pre></td></tr></table></figure>
<p>可以看出，从 task1 任务运行时，等到 4s 时，task2 任务没有执行，而是等到 task1 任务执行结束后才执行</p>
<h3 id="解决方法">解决方法</h3>
<h4 id="使用-Async-异步执行任务">使用@Async 异步执行任务</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringbootTaskApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringbootTaskApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>使用默认线程池配置</li>
</ol>
<p>@Async默认的线程池配置是Bean名称为taskExecutor的类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleTask2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;*/2 * * * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;我是task1，我需要执行 10s 钟的时间，我的线程的 id == &gt; &#123;&#125;，时间 == &gt;&#123;&#125;&quot;</span>, Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">        log.info(<span class="string">&quot;我是task1 ending ,我的线程的 id == &gt; &#123;&#125; , 时间 == &gt; &#123;&#125;&quot;</span>, Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;*/4 * * * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task2</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;我是task2，我需要执行 2s 钟的时间，我的线程的 id == &gt; &#123;&#125;，时间 == &gt;&#123;&#125;&quot;</span>, Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        log.info(<span class="string">&quot;我是task2 ending ,我的线程的 id == &gt; &#123;&#125; , 时间 == &gt; &#123;&#125;&quot;</span>,Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>自定义线程池配置</li>
</ol>
<p>通过指定Bean名称来决定使用哪个线程池，用户可以自定义线程池配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleTask3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async(&quot;myPoolTaskExecutor&quot;)</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;*/2 * * * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;我是task1，我需要执行 10s 钟的时间，我的线程的 id == &gt; &#123;&#125;，时间 == &gt;&#123;&#125;&quot;</span>, Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">        log.info(<span class="string">&quot;我是task1 ending ,我的线程的 id == &gt; &#123;&#125; , 时间 == &gt; &#123;&#125;&quot;</span>, Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async(&quot;myPoolTaskExecutor&quot;)</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;*/4 * * * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task2</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;我是task2，我需要执行 2s 钟的时间，我的线程的 id == &gt; &#123;&#125;，时间 == &gt;&#123;&#125;&quot;</span>, Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        log.info(<span class="string">&quot;我是task2 ending ,我的线程的 id == &gt; &#123;&#125; , 时间 == &gt; &#123;&#125;&quot;</span>,Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 创建自定义线程池，提供异步调用时使用</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;myPoolTaskExecutor&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ThreadPoolTaskExecutor <span class="title function_">getMyPoolTaskExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">taskExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line">        <span class="comment">//核心线程数</span></span><br><span class="line">        taskExecutor.setCorePoolSize(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//线程池维护线程的最大数量, 只有在缓冲队列满了之后才会申请超过核心线程数的线程</span></span><br><span class="line">        taskExecutor.setMaxPoolSize(<span class="number">100</span>);</span><br><span class="line">        <span class="comment">//缓存队列</span></span><br><span class="line">        taskExecutor.setQueueCapacity(<span class="number">50</span>);</span><br><span class="line">        <span class="comment">//许的空闲时间, 当超过了核心线程出之外的线程在空闲时间到达之后会被销毁</span></span><br><span class="line">        taskExecutor.setKeepAliveSeconds(<span class="number">200</span>);</span><br><span class="line">        <span class="comment">//异步方法内部线程名称</span></span><br><span class="line">        taskExecutor.setThreadNamePrefix(<span class="string">&quot;poolTestThread-&quot;</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 当线程池的任务缓存队列已满并且线程池中的线程数目达到 maximumPoolSize，如果还有任务到来就会采取任务拒绝策略</span></span><br><span class="line"><span class="comment">         * 通常有以下四种策略：</span></span><br><span class="line"><span class="comment">         * ThreadPoolExecutor.AbortPolicy: 丢弃任务并抛出 RejectedExecutionException 异常。</span></span><br><span class="line"><span class="comment">         * ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常。</span></span><br><span class="line"><span class="comment">         * ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）</span></span><br><span class="line"><span class="comment">         * ThreadPoolExecutor.CallerRunsPolicy：重试添加当前的任务，自动重复调用 execute() 方法，直到成功</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 拒绝策略</span></span><br><span class="line">        taskExecutor.setRejectedExecutionHandler(<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());</span><br><span class="line">        taskExecutor.initialize();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;@Async 业务处理线程配置成功，核心线程池：[&#123;&#125;]，最大线程池：[&#123;&#125;]，队列容量：[&#123;&#125;]，线程名称前缀：[&#123;&#125;]&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> taskExecutor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>执行结果</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//运行结果：</span></span><br><span class="line">我是task2，我需要执行 2s 钟的时间，我的线程的 id == &gt; <span class="number">116</span>，时间 == &gt;Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">32</span> CST <span class="number">2019</span></span><br><span class="line">我是task1，我需要执行 10s 钟的时间，我的线程的 id == &gt; <span class="number">117</span>，时间 == &gt;Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">32</span> CST <span class="number">2019</span></span><br><span class="line">我是task1，我需要执行 10s 钟的时间，我的线程的 id == &gt; <span class="number">124</span>，时间 == &gt;Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">34</span> CST <span class="number">2019</span></span><br><span class="line">task2 ending ,我的线程的 id == &gt; <span class="number">116</span> , 时间 == &gt; Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">34</span> CST <span class="number">2019</span></span><br><span class="line">我是task1，我需要执行 10s 钟的时间，我的线程的 id == &gt; <span class="number">125</span>，时间 == &gt;Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">36</span> CST <span class="number">2019</span></span><br><span class="line">我是task2，我需要执行 2s 钟的时间，我的线程的 id == &gt; <span class="number">126</span>，时间 == &gt;Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">36</span> CST <span class="number">2019</span></span><br><span class="line">我是task1，我需要执行 10s 钟的时间，我的线程的 id == &gt; <span class="number">127</span>，时间 == &gt;Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">38</span> CST <span class="number">2019</span></span><br><span class="line">task2 ending ,我的线程的 id == &gt; <span class="number">126</span> , 时间 == &gt; Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">38</span> CST <span class="number">2019</span></span><br><span class="line">我是task2，我需要执行 2s 钟的时间，我的线程的 id == &gt; <span class="number">128</span>，时间 == &gt;Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">40</span> CST <span class="number">2019</span></span><br><span class="line">我是task1，我需要执行 10s 钟的时间，我的线程的 id == &gt; <span class="number">129</span>，时间 == &gt;Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">40</span> CST <span class="number">2019</span></span><br></pre></td></tr></table></figure>
<p>从日志可知：task1 和 task2 的确是并行执行的，因为开始的时间节点是一样的。</p>
<p>存在问题：当 task1 第一次任务执行时间过长时，此时 task1 又到了其第二次执行任务的调度时间，这时会并行执行两个任务</p>
<h4 id="实现-SchedulingConfigurer-接口">实现 SchedulingConfigurer 接口</h4>
<p>使用@Async 会导致第一次任务执行时间过长，从而第二次任务和第一次任务并发执行</p>
<p>解决方法：实现 SchedulingConfigurer 接口，这样自动装配中 TaskSchedulingAutoConfiguration 的 taskScheduler 就不会被实例化，替换原来的线程池配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleConfig</span> <span class="keyword">implements</span> <span class="title class_">SchedulingConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureTasks</span><span class="params">(ScheduledTaskRegistrar taskRegistrar)</span> &#123;</span><br><span class="line">        taskRegistrar.setScheduler(taskExecutor());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@Bean</span></span><br><span class="line">     <span class="keyword">public</span> Executor <span class="title function_">taskExecutor</span><span class="params">()</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> Executors.newScheduledThreadPool(<span class="number">10</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleTask4</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;*/2 * * * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;我是task1，我需要执行 10s 钟的时间，我的线程的 id == &gt; &#123;&#125;，时间 == &gt;&#123;&#125;&quot;</span>, Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">        log.info(<span class="string">&quot;我是task1 ending ,我的线程的 id == &gt; &#123;&#125; , 时间 == &gt; &#123;&#125;&quot;</span>, Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;*/4 * * * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task2</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;我是task2，我需要执行 2s 钟的时间，我的线程的 id == &gt; &#123;&#125;，时间 == &gt;&#123;&#125;&quot;</span>, Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        log.info(<span class="string">&quot;我是task2 ending ,我的线程的 id == &gt; &#123;&#125; , 时间 == &gt; &#123;&#125;&quot;</span>,Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>执行结果</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//执行结果：</span></span><br><span class="line">我是task2，我需要执行 2s 钟的时间，我的线程的 id == &gt; <span class="number">95</span>，时间 == &gt;Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">28</span>:<span class="number">16</span> CST <span class="number">2019</span></span><br><span class="line">我是task1，我需要执行 10s 钟的时间，我的线程的 id == &gt; <span class="number">96</span>，时间 == &gt;Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">28</span>:<span class="number">16</span> CST <span class="number">2019</span></span><br><span class="line">task2 ending ,我的线程的 id == &gt; <span class="number">95</span> , 时间 == &gt; Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">28</span>:<span class="number">18</span> CST <span class="number">2019</span></span><br><span class="line">我是task2，我需要执行 2s 钟的时间，我的线程的 id == &gt; <span class="number">95</span>，时间 == &gt;Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">28</span>:<span class="number">20</span> CST <span class="number">2019</span></span><br><span class="line">task2 ending ,我的线程的 id == &gt; <span class="number">95</span> , 时间 == &gt; Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">28</span>:<span class="number">22</span> CST <span class="number">2019</span></span><br><span class="line">我是task2，我需要执行 2s 钟的时间，我的线程的 id == &gt; <span class="number">121</span>，时间 == &gt;Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">28</span>:<span class="number">24</span> CST <span class="number">2019</span></span><br><span class="line">task1 ending ,我的线程的 id == &gt; <span class="number">96</span> , 时间 == &gt; Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">28</span>:<span class="number">26</span> CST <span class="number">2019</span></span><br><span class="line">task2 ending ,我的线程的 id == &gt; <span class="number">121</span> , 时间 == &gt; Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">28</span>:<span class="number">26</span> CST <span class="number">2019</span></span><br><span class="line">我是task1，我需要执行 10s 钟的时间，我的线程的 id == &gt; <span class="number">95</span>，时间 == &gt;Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">28</span>:<span class="number">28</span> CST <span class="number">2019</span></span><br><span class="line">我是task2，我需要执行 2s 钟的时间，我的线程的 id == &gt; <span class="number">122</span>，时间 == &gt;Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">28</span>:<span class="number">28</span> CST <span class="number">2019</span></span><br></pre></td></tr></table></figure>
<p>注意：此时每次定时任务执行的 traceId 是一致的，无法很好地追踪每次定时任务的情况，修改如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleConfig</span> <span class="keyword">implements</span> <span class="title class_">SchedulingConfigurer</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureTasks</span><span class="params">(ScheduledTaskRegistrar taskRegistrar)</span> &#123;</span><br><span class="line">        <span class="comment">// taskRegistrar.setScheduler(taskExecutor());  </span></span><br><span class="line">        <span class="type">ThreadPoolTaskScheduler</span> <span class="variable">taskScheduler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskScheduler</span>();</span><br><span class="line">		taskScheduler.setPoolSize(<span class="number">10</span>);</span><br><span class="line">		taskScheduler.initialize();</span><br><span class="line">        taskRegistrar.setScheduler(taskScheduler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 缺点：可能每次定时任务产生的 traceId 是一致的</span></span><br><span class="line">    <span class="comment">// @Bean</span></span><br><span class="line">    <span class="comment">// public Executor taskExecutor()&#123;</span></span><br><span class="line">    <span class="comment">//     return Executors.newScheduledThreadPool(10);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Properties-配置-2">Properties 配置</h4>
<p>修改默认的线程池配置，适当将调度线程池的配置修改，支持多任务并发执行</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">######任务调度线程池######</span></span><br><span class="line"><span class="comment"># 任务调度线程池大小 默认 1 建议根据任务加大</span></span><br><span class="line"><span class="attr">spring.task.scheduling.pool.size</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># 调度线程名称前缀 默认 scheduling-</span></span><br><span class="line"><span class="attr">spring.task.scheduling.thread-name-prefix</span>=<span class="string">scheduling-</span></span><br><span class="line"><span class="comment"># 线程池关闭时等待所有任务完成</span></span><br><span class="line"><span class="attr">spring.task.scheduling.shutdown.await-termination</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 调度线程关闭前最大等待时间，确保最后一定关闭</span></span><br><span class="line"><span class="attr">spring.task.scheduling.shutdown.await-termination-period</span>=<span class="string">60</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">######任务执行线程池配置######</span></span><br><span class="line"><span class="comment"># 是否允许核心线程超时。这样可以动态增加和缩小线程池</span></span><br><span class="line"><span class="attr">spring.task.execution.pool.allow-core-thread-timeout</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 核心线程池大小 默认 8</span></span><br><span class="line"><span class="attr">spring.task.execution.pool.core-size</span>=<span class="string">8</span></span><br><span class="line"><span class="comment"># 线程空闲等待时间 默认 60s</span></span><br><span class="line"><span class="attr">spring.task.execution.pool.keep-alive</span>=<span class="string">60s</span></span><br><span class="line"><span class="comment"># 线程池最大数 根据任务定制</span></span><br><span class="line"><span class="attr">spring.task.execution.pool.max-size</span>=<span class="string">16</span></span><br><span class="line"><span class="comment"># 线程池队列容量大小</span></span><br><span class="line"><span class="attr">spring.task.execution.pool.queue-capacity</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># 线程池关闭时等待所有任务完成</span></span><br><span class="line"><span class="attr">spring.task.execution.shutdown.await-termination</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 执行线程关闭前最大等待时间，确保最后一定关闭</span></span><br><span class="line"><span class="attr">spring.task.execution.shutdown.await-termination-period</span>=<span class="string">60</span></span><br><span class="line"><span class="comment"># 线程名称前缀</span></span><br><span class="line"><span class="attr">spring.task.execution.thread-name-prefix</span>=<span class="string">task-</span></span><br></pre></td></tr></table></figure>
<h2 id="缺点">缺点</h2>
<ol>
<li>不支持集群配置，在分布式环境下会出现多个任务并发执行的情况</li>
</ol>
<p>解决方法：通过分布式锁的方式预防任务并发执行的情况</p>
<ol start="2">
<li>不支持指定的时间范围执行任务（例如在9点到11点间执行任务，其他时间段不执行）</li>
<li>不支持分片执行任务</li>
</ol>
<h2 id="动态定时任务实现">动态定时任务实现</h2>
<h3 id="出现问题">出现问题</h3>
<p>用实现 SpringBoot + @Scheduled 实现了定时任务。但是也存在很多问题：</p>
<p>通常，@Scheduled 注解的所有属性只在 Spring Context 启动时解析和初始化一次。因此，当在 Spring 中使用 @Scheduled 注解时，无法在运行时更改 fixedDelay 或 fixedRate 值。</p>
<ol>
<li>在一个线程内执行，那么任务多了就可能被阻塞，导致任务延迟执行。</li>
<li>每次修改执行频率都要改代码，重启服务。</li>
<li>无法提供定时任务的启用、暂停、修改接口。</li>
</ol>
<p>实现方法：参考 ScheduledTaskRegistrar 源码提供的方法</p>
<h3 id="简单案例">简单案例</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `sys_task` (</span><br><span class="line">  `id` bigint(21) NOT NULL AUTO_INCREMENT COMMENT &#x27;主键&#x27;,</span><br><span class="line">  `task_uuid` varchar(50) DEFAULT NULL COMMENT &#x27;任务UUID&#x27;,</span><br><span class="line">  `task_name` varchar(50) DEFAULT NULL COMMENT &#x27;任务名称&#x27;,</span><br><span class="line">  `task_cron` varchar(50) DEFAULT NULL COMMENT &#x27;任务定时表达式&#x27;,</span><br><span class="line">  `class_name` varchar(100) DEFAULT NULL COMMENT &#x27;任务类&#x27;,</span><br><span class="line">  `method_name` varchar(100) DEFAULT NULL COMMENT &#x27;任务方法&#x27;,</span><br><span class="line">  `task_type` int(1) DEFAULT NULL COMMENT &#x27;任务类型&#x27;,</span><br><span class="line">  `remark` varchar(250) DEFAULT NULL,</span><br><span class="line">  `del_flag` int(1) DEFAULT &#x27;1&#x27;,</span><br><span class="line">  `create_user` varchar(50) DEFAULT NULL,</span><br><span class="line">  `create_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP,</span><br><span class="line">  `update_user` varchar(50) DEFAULT NULL,</span><br><span class="line">  `update_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduledConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ScheduledTaskRegistrar <span class="title function_">taskRegistrar</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ScheduledTaskRegistrar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleTask5</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;我是task1，我的线程的 id == &gt; &#123;&#125;，时间 == &gt;&#123;&#125;&quot;</span>, Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">        log.info(<span class="string">&quot;我是task1 ending ,我的线程的 id == &gt; &#123;&#125; , 时间 == &gt; &#123;&#125;&quot;</span>, Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysTask</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 主键</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 任务 UUID</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String taskUuid;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 任务名称</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String taskName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 任务定时表达式</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String taskCron;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 任务类</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String className;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 任务方法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String methodName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 任务类型</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> Integer taskType;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 备注</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String remark;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer delFlag;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建人</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String createUser;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改人</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String updateUser;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CronServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">CronService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, ScheduledTask&gt; scheduledTaskMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ScheduledTaskRegistrar taskRegistrar;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(SysTask sysTask)</span> &#123;</span><br><span class="line">        <span class="type">CronTask</span> <span class="variable">cronTask</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CronTask</span>(getRunnable(sysTask), sysTask.getTaskCron());</span><br><span class="line">        <span class="type">ScheduledTask</span> <span class="variable">scheduledTask</span> <span class="operator">=</span> taskRegistrar.scheduleCronTask(cronTask);</span><br><span class="line">        <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">        scheduledTaskMap.put(uuid, scheduledTask);</span><br><span class="line">        log.info(<span class="string">&quot;添加任务成功, uuid == &gt; &#123;&#125;, 任务名称 == &gt; &#123;&#125;, 任务表达式 == &gt; &#123;&#125;&quot;</span>, uuid, sysTask.getTaskName(), sysTask.getTaskCron());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Runnable <span class="title function_">getRunnable</span><span class="params">(SysTask sysTask)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> () -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Class&lt;?&gt; aClass = Class.forName(sysTask.getClassName());</span><br><span class="line">                Constructor&lt;?&gt; constructor = aClass.getConstructor();</span><br><span class="line">                <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor.newInstance();</span><br><span class="line">                <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> aClass.getMethod(sysTask.getMethodName());</span><br><span class="line">                method.invoke(o);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String uuid)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ScheduledTask</span> <span class="variable">scheduledTask</span> <span class="operator">=</span> scheduledTaskMap.get(uuid);</span><br><span class="line">            scheduledTask.cancel();</span><br><span class="line">            scheduledTaskMap.remove(uuid);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(SysTask sysTask)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.delete(sysTask.getTaskUuid());</span><br><span class="line">        <span class="built_in">this</span>.add(sysTask);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/cron&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CronController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> CronService cronService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> SysTask sysTask)</span> &#123;</span><br><span class="line">        cronService.add(sysTask);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/delete&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">delete</span><span class="params">(String uuid)</span> &#123;</span><br><span class="line">        cronService.delete(uuid);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/update&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> SysTask sysTask)</span> &#123;</span><br><span class="line">        cronService.update(sysTask);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>定时任务</tag>
        <tag>SpringBoot Task</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL（1-常用命令）</title>
    <url>/blog/2024/11/10/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL%EF%BC%881-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%EF%BC%89/</url>
    <content><![CDATA[<h2 id="DDL（定义数据库、表结构）">DDL（定义数据库、表结构）</h2>
<h3 id="操作数据库">操作数据库</h3>
<h4 id="创建数据库">创建数据库</h4>
<ol>
<li>创建数据库：create database 数据库名称;</li>
<li>创建数据库，判断是否存在：create database if not exists 数据库名称;</li>
<li>创建数据库，判断是否存在，并指定字符集：create database 数据库名称 character set 字符集;</li>
</ol>
<h4 id="查询数据库">查询数据库</h4>
<ol>
<li>查询所有数据库的名称：show databases;</li>
<li>查询某个数据库的字符集：show create database 数据库名称;</li>
</ol>
<h4 id="修改数据库">修改数据库</h4>
<p>修改数据库的字符集：alter database 数据库名称 character set 字符集;</p>
<h4 id="删除数据库">删除数据库</h4>
<ol>
<li>删除数据库：drop  database 数据库名称;</li>
<li>判断数据库是否存在，存在则删除：drop database if exists 数据库名称;</li>
</ol>
<h4 id="使用数据库">使用数据库</h4>
<ol>
<li>查询当前正在使用的数据库名称：select database();</li>
<li>使用数据库：use 数据库名称;</li>
</ol>
<h3 id="操作表">操作表</h3>
<h4 id="创建表">创建表</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">	列名1  数据类型1，</span><br><span class="line">	列名2  数据类型2，</span><br><span class="line">	........</span><br><span class="line">	列名n  数据类型n </span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>注意：最后一列不需要加逗号</p>
<h4 id="复制表">复制表</h4>
<ol>
<li>只复制表结构：create table 表名 like 被复制的表名;</li>
<li>复制表结构及数据：create table 表名 select *  from 被复制的表名;</li>
</ol>
<h4 id="查询表">查询表</h4>
<ol>
<li>查询某个数据库中所有的表名称：show tables;</li>
<li>查询表结构：desc 表名;</li>
<li>查看建表语句：show create table 表名;</li>
</ol>
<h4 id="修改表">修改表</h4>
<ol>
<li>修改表名：alter table 表名 rename to 新表名;</li>
<li>修改表的字符集：alter table 表名 character set 字符集名称;</li>
<li>添加一列：alter table 表名 add 列名 数据类型;</li>
<li>修改列名称和类型：</li>
</ol>
<ul>
<li>alter table 表名 change 列名 新列名 新数据类型;</li>
<li>alter table 表名 modify 列名 新数据类型;</li>
</ul>
<ol start="5">
<li>删除列：alter table 表名 drop 列名;</li>
</ol>
<h4 id="删除表">删除表</h4>
<ol>
<li>删除表：drop table 表名;</li>
<li>如果存在表，则删除：drop table if exists 表名;</li>
</ol>
<h3 id="约束">约束</h3>
<h4 id="主键约束（primary-key）">主键约束（primary key）</h4>
<ol>
<li>创建表时添加约束</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table 表名 (</span><br><span class="line">	字段名 数据类型 primary key,</span><br><span class="line">	......</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>
<p>创建表完后删除约束：alter table 表名 drop primary key;</p>
</li>
<li>
<p>创建表完后添加约束</p>
</li>
</ol>
<ul>
<li>
<p>alter table 表名 add primary key(字段名);</p>
</li>
<li>
<p>alter table 表名 modify 字段名 数据类型 primary key;</p>
</li>
<li>
<p>alter table 表名 change 旧字段名 新字段名 数据类型 primary key;</p>
</li>
<li>
<p>alter table 表名 add constraint 约束名称 primary key(字段名);</p>
</li>
</ul>
<p><strong>注意</strong></p>
<ol>
<li>非空且唯一（等于唯一约束+非空约束），一张表只能有一个字段为主键</li>
<li>表需有该字段才能添加约束，有自动增长时需先删除自动增长，然后才能删除主键，否则会报错</li>
</ol>
<h4 id="自动增长（auto-increment）">自动增长（auto_increment）</h4>
<p>如果某一列是数值类型的，使用 auto_increment 可以来实现自动增长</p>
<ol>
<li>创建表时添加自动增长</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">	字段名 数据类型 primary key auto_increment,</span><br><span class="line">	......</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>创建表完后删除自动增长</li>
</ol>
<ul>
<li>
<p>alter table 表名 modify 字段名 数据类型;</p>
</li>
<li>
<p>alter table 表名 change 旧字段名 新字段名 数据类型;</p>
</li>
</ul>
<ol start="3">
<li>创建表完后添加自动增长</li>
</ol>
<ul>
<li>
<p>alter table 表名 modify 字段名 数据类型 auto_increment;</p>
</li>
<li>
<p>alter table 表名 change 旧字段名 新字段名 数据类型 auto_increment;</p>
</li>
</ul>
<p><strong>注意</strong></p>
<ol>
<li>一张表只能有一个自增列，并且该列必须定义了约束</li>
<li>必须为主键才可以设置为递增，并且只能在数字类型中使用，否则会报错</li>
</ol>
<h4 id="非空约束（not-null）">非空约束（not null）</h4>
<ol>
<li>创建表时添加约束</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">	字段名 数据类型 not null,</span><br><span class="line">	.......</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>创建表完后删除约束</li>
</ol>
<ul>
<li>
<p>alter table 表名 modify 字段名 数据类型;</p>
</li>
<li>
<p>alter table 表名 change 旧字段名 新字段名 数据类型;</p>
</li>
</ul>
<ol start="3">
<li>创建表完后添加约束</li>
</ol>
<ul>
<li>
<p>alter table 表名 modify 字段名 数据类型 not null;</p>
</li>
<li>
<p>alter table 表名 change 旧字段名 新字段名 数据类型 not null;</p>
</li>
</ul>
<h4 id="默认值约束（default）">默认值约束（default）</h4>
<ol>
<li>创建表时添加约束</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">	字段名 数据类型 default 值,</span><br><span class="line">	......</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>创建表完后删除约束</li>
</ol>
<ul>
<li>
<p>alter table 表名 modify 字段名 数据类型;</p>
</li>
<li>
<p>alter table 表名 change 旧字段名 新字段名 数据类型;</p>
</li>
</ul>
<ol start="3">
<li>创建表完后添加约束</li>
</ol>
<ul>
<li>
<p>alter table 表名  modify 字段名 数据类型 default 值;</p>
</li>
<li>
<p>alter table 表名  change 旧字段名 新字段名 数据类型 default 值;</p>
</li>
</ul>
<h4 id="唯一约束（unique）">唯一约束（unique）</h4>
<ol>
<li>创建表时添加约束</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">	字段名 数据类型 unique,</span><br><span class="line">	......</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>
<p>创建表完后删除约束：alter table 表名 drop index 字段名;</p>
</li>
<li>
<p>创建表完后添加约束</p>
</li>
</ol>
<ul>
<li>
<p>alter table 表名 add unique(字段名);</p>
</li>
<li>
<p>alter table 表名 add unique key(字段名);</p>
</li>
<li>
<p>alter table 表名 add constraint 约束名 unique(字段名);</p>
</li>
<li>
<p>alter table 表名 add constraint 约束名 unique key(字段名);</p>
</li>
<li>
<p>alter table 表名 modify 字段名 数据类型 unique;</p>
</li>
<li>
<p>alter table 表名 change 旧字段名 新字段名 数据类型 unique;</p>
</li>
</ul>
<p><strong>注意</strong></p>
<p>唯一约束可以有 null 值，null 值只能有一个</p>
<h4 id="外键约束（foreign-key）">外键约束（foreign key）</h4>
<p>foreign  key：让表与表之间产生联系，保证数据的正确性</p>
<ol>
<li>创建表时添加约束</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">	......,</span><br><span class="line">	外键列,</span><br><span class="line">	constraint 外键名称(自定义) foreign key(外键列名称) references 主表名称(主表列名称)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>
<p>创建表完后删除约束：alter table 表名 drop foreign key 外键名称;</p>
</li>
<li>
<p>创建表完后添加约束：alter table 表名 add constraint 外键名称(自定义) foreign key (外键列名称) references 主表名称(主表列名称);</p>
</li>
<li>
<p>级联操作：alter table 表名 add constraint 外键名称 foreign key (外键字段名称) references 主表名称(主表列名称) on update cascade on delete cascade;</p>
</li>
</ol>
<ul>
<li>级联更新：on update cascade</li>
<li>级联删除：on delete cascade</li>
</ul>
<p><strong>注意</strong></p>
<p>从表的外键关联的必须是主表的主键，且主键和外键的类型必须一致</p>
<h3 id="索引">索引</h3>
<h4 id="创建索引">创建索引</h4>
<ol>
<li>创建表的时候创建索引</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#唯一索引</span><br><span class="line">CREATE TABLE t1(</span><br><span class="line">  id INT NOT NULL,</span><br><span class="line">  name CHAR(30) NOT NULL,</span><br><span class="line">  UNIQUE INDEX UniqIdx(id)</span><br><span class="line">);</span><br><span class="line">#普通索引</span><br><span class="line">CREATE TABLE t1(</span><br><span class="line">  id INT NOT NULL,</span><br><span class="line">  name CHAR(30) NOT NULL,</span><br><span class="line">  INDEX UniqIdx(id)</span><br><span class="line">);</span><br><span class="line">#全文索引</span><br><span class="line">CREATE TABLE t1(</span><br><span class="line">  id INT NOT NULL,</span><br><span class="line">  name TEXT NOT NULL,</span><br><span class="line">  FULLTEXT INDEX UniqIdx(id)</span><br><span class="line">);</span><br><span class="line">#多列索引</span><br><span class="line">CREATE TABLE t1(</span><br><span class="line">  id INT NOT NULL,</span><br><span class="line">  name TEXT NOT NULL,</span><br><span class="line">  key INDEX UniqIdx(id,name)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>在已存在的表上建立索引</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#在已存在的表上建立索引</span><br><span class="line">ALTER TABLE mytable ADD UNIQUE INDEX UniqIdx(id);</span><br><span class="line">ALTER TABLE mytable ADD INDEX index_name(name(10),city,age);</span><br><span class="line">ALTER TABLE mytable ADD FULLTEXT INDEX UniqIdx(id);</span><br><span class="line">ALTER TABLE mytable ADD INDEX UniqIdx(id);</span><br><span class="line">#组合索引，相当于分别建立了下面三组索引：</span><br><span class="line">username,city,age</span><br><span class="line">username,city</span><br><span class="line">username</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#只能增加普通索引INDEX和UNIQUE INDEX索引这两种，不能创建PRIMARY KEY索引</span><br><span class="line">CREATE INDEX index_name ON mytable(username);</span><br><span class="line">CREATE UNIQUE INDEX index_name ON mytable(username);</span><br><span class="line">CREATE FULLTEXT INDEX index_name ON mytable(username);</span><br><span class="line">CREATE INDEX index_name ON mytable(username,password);</span><br></pre></td></tr></table></figure>
<h4 id="查看索引">查看索引</h4>
<ol>
<li>查看表的索引：show index from 表名;</li>
<li>指定数据库查看表的索引：show index from 表名 from 数据库名;</li>
</ol>
<h4 id="删除索引">删除索引</h4>
<ol>
<li>删除表的索引：drop index 索引名 on 表名;</li>
<li>删除表的索引：alter table 表名 drop index 索引名;</li>
</ol>
<h2 id="DML（增删改表中数据）">DML（增删改表中数据）</h2>
<h3 id="添加数据">添加数据</h3>
<ol>
<li>指定列名添加数据：insert into 表名(列名 1, 列名 2,…列名 n) values (值 1, 值 2,…值 n);</li>
<li>给所有列添加值：insert into 表名 values (值 1, 值 2,…值 n);</li>
<li>从表 2 查询向表 1 添加数据：insert into 表名 1(列名 1, 列名 2,…列名 n) select 字段 1, 字段 2,…字段 n from 表名 2;</li>
</ol>
<p><strong>注意</strong></p>
<ol>
<li>列名和值要一一对应</li>
<li>除了数字类型，其他类型需要使用引号（单双引号）都可以</li>
</ol>
<h3 id="删除数据">删除数据</h3>
<ol>
<li>删除符合条件的数据：delete from 表名 where 条件;</li>
<li>删除所有数据：delete from 表名;</li>
<li>删除表结构和数据：truncate table 表名;（不可以加条件语句）</li>
</ol>
<h3 id="修改数据">修改数据</h3>
<ol>
<li>更新符合条件的数据：update 表名 set 列名 1 = 值 1, 列名 2 = 值 2, …  where 条件;</li>
<li>更新所有数据：update 表名 set 列名 1 = 值 1, 列名 2 = 值 2, …</li>
</ol>
<h2 id="DQL（查询表中的数据）">DQL（查询表中的数据）</h2>
<h3 id="语法结构">语法结构</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select 字段列表</span><br><span class="line">from 表名列表</span><br><span class="line">where 条件列表</span><br><span class="line">group by 分组列表</span><br><span class="line">having 分组之后的条件</span><br><span class="line">order by 排序方式</span><br><span class="line">limit 分页限定</span><br></pre></td></tr></table></figure>
<p>注意：执行顺序如下</p>
<ol>
<li>from</li>
<li>where</li>
<li>group by</li>
<li>having</li>
<li>select</li>
<li>order by</li>
<li>limit</li>
</ol>
<h3 id="基础查询">基础查询</h3>
<h4 id="多字段查询">多字段查询</h4>
<ol>
<li>查询指定字段数据：select 字段名 1, 字段名 2 …  from 表名;</li>
<li>查询所有数据：select * from 表名;</li>
</ol>
<h4 id="去除重复值（distinct）">去除重复值（distinct）</h4>
<ol>
<li>select distinct 字段名 1, 字段名 2 …  from 表名;</li>
<li>select distinct 字段名 1, distinct 字段名 2 …  from 表名;</li>
</ol>
<h4 id="计算列（ifnull）">计算列（ifnull）</h4>
<p>select 字段名 1, 字段名 2 …  字段名 1+字段名 2  from  表名;（一般只会进行数值型的计算）</p>
<p><strong>注意</strong></p>
<p>ifnull(表达式 1, 表达式 2)：null 参与的运算，计算结果都为 null，所以要使用 ifnull</p>
<ul>
<li>表达式 1：哪个字段需要判断是否为 null</li>
<li>表达式 2：如果该字段为 null 后的替换值</li>
</ul>
<h4 id="起别名（as）">起别名（as）</h4>
<ol>
<li>select  字段名 1 as 别名, 字段名 2 …  from 表名 as 别名;（注意：as 也可以省略）</li>
<li>select  字段名 1 别名, 字段名 2 …  from 表名 别名;</li>
</ol>
<h3 id="条件查询">条件查询</h3>
<p>运算符：</p>
<ol>
<li>
<p>&gt;、&lt;、&lt;=、&gt; =、=、&lt;&gt; 表示不等于</p>
</li>
<li>
<p>BETWEEN…AND</p>
</li>
<li>
<p>LIKE：模糊查询（占位符如下）</p>
</li>
</ol>
<ul>
<li>_：单个任意字符</li>
<li>%：任意字符</li>
<li>[]：用来指定一个字符集，它必须匹配指定位置（通配符的位置）的一个字符，可以用前缀字符^来否定</li>
</ul>
<ol start="4">
<li>IS  NULL</li>
<li>and 或&amp;&amp;</li>
<li>or 或||</li>
<li>not 或！</li>
<li>IN( 集合 )</li>
</ol>
<h3 id="排序查询">排序查询</h3>
<p>order by 字段 1 排序方式 1, …字段 n  排序方式 n</p>
<p>排序方式：</p>
<ol>
<li>ASC：升序，默认的</li>
<li>DESC：降序</li>
</ol>
<h3 id="聚合函数">聚合函数</h3>
<ol>
<li>count（计算个数）</li>
<li>max（计算最大值）</li>
<li>min（计算最小值）</li>
<li>sum（计算和）</li>
<li>avg（计算平均值）</li>
</ol>
<p>注意：聚合函数的计算，要排除 null 值时，可以使用下面解决方法</p>
<ol>
<li>选择不包含非空的列进行计算</li>
<li>IFNULL 函数</li>
</ol>
<h3 id="分组查询">分组查询</h3>
<p>group by 字段 1, 字段 2…</p>
<p>注意：</p>
<ol>
<li>分组之后查询的字段必须是：分组字段、聚合函数</li>
<li>where 和 having 的区别：</li>
</ol>
<ul>
<li>where 在分组之前进行限定，如果不满足条件，则不参与分组</li>
<li>where 后不可以跟聚合函数</li>
<li>having 在分组之后进行限定，如果不满足条件，则不会被查询出来</li>
<li>having 可以进行聚合函数的判断</li>
</ul>
<h3 id="分页查询">分页查询</h3>
<p>limit  开始的索引, 每页查询的条数</p>
<p>公式：开始的索引 =（当前的页码-1）* 每页显示的条数</p>
<h3 id="多表查询">多表查询</h3>
<h4 id="自然连接">自然连接</h4>
<p>select  …  from 表名 1 natural join 表名 2</p>
<p>注意：自然连接是一种特殊的等值连接，他要求两个关系表中进行连接的必须是相同的属性列（名字相同），无须添加连接条件，并且在结果中消除重复的属性列</p>
<h4 id="内连接查询">内连接查询</h4>
<ol>
<li>隐式内连接（使用 where 条件消除无用数据）</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select 别名.字段名,.....</span><br><span class="line">from 表名 别名,......</span><br><span class="line">where 别名.字段名=别名.字段名,.....;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>显式内连接</li>
</ol>
<p>select 字段列表 from 表名 1 inner(可选)  join 表名 2 on 条件;</p>
<h4 id="外连接查询">外连接查询</h4>
<ol>
<li>全外连接（看两边表）</li>
</ol>
<p>select 字段列表 from 表名 1 full outer(可选)  join 表 2 on 条件;</p>
<ol start="2">
<li>左外连接（看左边表）：查询的是左表所有数据以及其交集部分</li>
</ol>
<p>select 字段列表 from 表名 1 left outer(可选)  join  表 2 on 条件;</p>
<p>注意：若在左表的某行在右表中没有匹配的行，则在相关联的结果集行中右表的所有选择列均为空值</p>
<ol start="3">
<li>右外连接（看右边表）：查询的是右表所有数据以及其交集部分</li>
</ol>
<p>select 字段列表 from 表名 1 right outer(可选)  join 表 2 on 条件;</p>
<p>注意：若在右表的某行在左表中没有匹配的行，则在相关联的结果集行中左表的所有选择列均为空值</p>
<h4 id="子查询">子查询</h4>
<ol>
<li>子查询的结果是单行单列的</li>
</ol>
<p>子查询可以作为条件，使用运算符去判断，运算符：&gt;、&lt;、&gt; =、&lt;=、=</p>
<ol start="2">
<li>子查询的结果是多行单列的</li>
</ol>
<p>子查询可以作为条件，使用运算符 in 来判断</p>
<ol start="3">
<li>子查询的结果是多行多列的</li>
</ol>
<p>子查询可以作为一张虚拟表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">例子：查询工资最高的员工信息</span><br><span class="line">select * from emp where emp.&#x27;salary&#x27;=(select max(salary) from emp);</span><br></pre></td></tr></table></figure>
<h2 id="DCL（用户和权限管理）">DCL（用户和权限管理）</h2>
<h3 id="用户管理">用户管理</h3>
<h4 id="添加用户">添加用户</h4>
<p>create user ‘用户名’@‘主机名’ identified by ‘密码’;</p>
<h4 id="删除用户">删除用户</h4>
<p>drop user ‘用户名’@‘主机名’;</p>
<h4 id="修改用户密码">修改用户密码</h4>
<ol>
<li>update user set password = password(‘新密码’) where user =‘用户名’;</li>
<li>set password for ‘用户名’@‘主机名’= password(‘新密码’);</li>
</ol>
<p><strong>MySQL 中忘记了 root 用户的密码时</strong></p>
<ol>
<li>停止 MySQL 服务（需要管理员运行 cmd）：net  stop  mysql</li>
<li>使用无验证方式启动 MySQL 服务：mysqld  --skip-grant-tables</li>
<li>打开新的 cmd 窗口，直接输入 mysql 命令，敲回车，就可以登录成功</li>
<li>use  mysql;</li>
<li>update  user  set  password = password( ‘新密码’ )  where  user = ‘root’;</li>
<li>关闭两个窗口；</li>
<li>打开任务管理器，手动结束 mysqld.exe 的进程</li>
<li>启动 mysql 服务</li>
<li>使用新密码登录</li>
</ol>
<h4 id="查询用户">查询用户</h4>
<ol>
<li>切换到 MySQL 数据库：use mysql;</li>
<li>查询 user 表：select *  from user;</li>
</ol>
<h3 id="权限管理">权限管理</h3>
<h4 id="查询权限">查询权限</h4>
<p>show grants for ‘用户名’@‘主机名’;</p>
<h4 id="授予权限">授予权限</h4>
<p>grant 权限列表 on 数据库名.表名 to ‘用户名’@‘主机名’;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">例子：给张三用户授予所有权限，在任意数据库任意表上</span><br><span class="line">grant all on *.* to &#x27;zhangsan&#x27;@&#x27;localhost&#x27;;</span><br></pre></td></tr></table></figure>
<h4 id="撤销权限">撤销权限</h4>
<p>revoke 权限列表 on 数据库名.表名 from ‘用户名’@‘主机名’;</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot Async异步调用</title>
    <url>/blog/2024/11/22/%E5%90%8E%E7%AB%AF/%E5%BC%82%E6%AD%A5%E5%A4%9A%E7%BA%BF%E7%A8%8B/SpringBoot%20Async%E5%BC%82%E6%AD%A5%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[<h2 id="基本使用">基本使用</h2>
<h3 id="异步调用">异步调用</h3>
<p>在使用@Async 之前，我们需要确保已经启用了 Spring 的异步任务执行功能，这通常通过在配置类上添加@EnableAsync 注解来完成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// 开启异步调用</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Async01Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Async01Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>未使用@Async</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Task1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doTaskOne</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;start 任务1....&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        Thread.sleep(random.nextInt(<span class="number">10000</span>));</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;任务1耗时：&quot;</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doTaskTwo</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;start 任务2....&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        Thread.sleep(random.nextInt(<span class="number">10000</span>));</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;任务2耗时：&quot;</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doTaskThree</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;start 任务3....&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        Thread.sleep(random.nextInt(<span class="number">10000</span>));</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;任务3耗时：&quot;</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>使用@Async</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Task2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doTaskOne</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;start 任务1...&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        Thread.sleep(random.nextInt(<span class="number">10000</span>));</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;任务1，耗时&quot;</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doTaskTwo</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;start 任务2...&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        Thread.sleep(random.nextInt(<span class="number">10000</span>));</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;任务2，耗时&quot;</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doTaskThree</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;start 任务3...&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        Thread.sleep(random.nextInt(<span class="number">10000</span>));</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;任务3，耗时&quot;</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>使用两个方法进行比较</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Async01ApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Task1 task1;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Task2 task2;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        task1.doTaskOne();</span><br><span class="line">        task1.doTaskTwo();</span><br><span class="line">        task1.doTaskThree();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        task2.doTaskOne();</span><br><span class="line">        task2.doTaskTwo();</span><br><span class="line">        task2.doTaskThree();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>未使用@Async 执行结果</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">start 任务<span class="number">1.</span>...</span><br><span class="line">任务<span class="number">1</span>耗时：<span class="number">1498</span></span><br><span class="line">start 任务<span class="number">2.</span>...</span><br><span class="line">任务<span class="number">2</span>耗时：<span class="number">1967</span></span><br><span class="line">start 任务<span class="number">3.</span>...</span><br><span class="line">任务<span class="number">3</span>耗时：<span class="number">9994</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>使用@Async 执行结果</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">start 任务<span class="number">1.</span>..</span><br><span class="line">start 任务<span class="number">3.</span>..</span><br><span class="line">start 任务<span class="number">2.</span>..</span><br><span class="line">任务<span class="number">2</span>，耗时<span class="number">664</span></span><br><span class="line">任务<span class="number">1</span>，耗时<span class="number">2378</span></span><br><span class="line">任务<span class="number">3</span>，耗时<span class="number">4973</span></span><br></pre></td></tr></table></figure>
<p>可以看出，未使用@Async 时所有任务是串行执行的，只能等上一个任务执行完毕才能执行下一个，而使用@Async 后任务是并发执行的</p>
<h3 id="异步返回结果">异步返回结果</h3>
<p>注意：被@Async 标注的方法必须是 void 类型的，且不能有返回值，除非返回类型是 Future，这样可以通过 Future 获取异步操作的结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncTask</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="keyword">public</span> Future&lt;String&gt; <span class="title function_">asyncTask2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;asyncTask2 start.....&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AsyncResult</span>&lt;String&gt;(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AsyncTask asyncTask;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">    Future&lt;String&gt; future = asyncTask.asyncTask2();</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="comment">//判断是否执行完毕</span></span><br><span class="line">        <span class="keyword">if</span> (future.isDone()) &#123;</span><br><span class="line">            System.out.println(future.get());</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="异常处理">异常处理</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncExceptionHandler</span> <span class="keyword">implements</span> <span class="title class_">AsyncUncaughtExceptionHandler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(AsyncExceptionHandler.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 异常捕获</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleUncaughtException</span><span class="params">(Throwable ex, Method method, Object... params)</span> &#123;</span><br><span class="line">        logger.error(<span class="string">&quot;@Async调用异常，出现异常的方法：&#123;&#125;，参数：&#123;&#125;，异常信息：&#123;&#125;&quot;</span>, method.getDeclaringClass().getName() + <span class="string">&quot;.&quot;</span></span><br><span class="line">                + method.getName(), JSON.toJSONString(params), ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncConfig</span> <span class="keyword">extends</span> <span class="title class_">AsyncConfigurerSupport</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AsyncExceptionHandler asyncExceptionHandler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将异常处理类注入容器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> AsyncUncaughtExceptionHandler <span class="title function_">getAsyncUncaughtExceptionHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> asyncExceptionHandler;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Task3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doTaskOne</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;start 任务1...&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        Thread.sleep(random.nextInt(<span class="number">10000</span>));</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;任务1，耗时&quot;</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Task3 task3;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    task3.doTaskOne();</span><br><span class="line">    TimeUnit.SECONDS.sleep(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 执行结果：</span></span><br><span class="line">start 任务<span class="number">1.</span>..</span><br><span class="line"><span class="number">2024</span>-<span class="number">11</span>-<span class="number">22</span> 09:<span class="number">12</span>:<span class="number">45.828</span> ERROR <span class="number">20716</span> --- [         task-<span class="number">1</span>] c.e.a.d.config.AsyncExceptionHandler     : <span class="meta">@Async</span>调用异常，出现异常的方法：com.example.async.demos.config.Task3.doTaskOne，参数：[]，异常信息：/ by zero</span><br></pre></td></tr></table></figure>
<h2 id="线程池配置">线程池配置</h2>
<h3 id="默认线程池">默认线程池</h3>
<p>SpringBoot 从 2.1 开始使用的是 ThreadPoolTaskExecutor 线程池，之前使用的是 SimpleAsyncTaskExecutor，查看 AsyncExecutionInterceptor 源码中的 getDefaultExecutor 方法，会先去找名称为 taskExecutor 的 Bean，如果找不到才使用 SimpleAsyncTaskExecutor</p>
<p>注意：名称为 taskExecutor 的 Bean 在 TaskExecutionAutoConfiguration 会被实例化</p>
<p><img src="1.png" alt=""></p>
<p><img src="2.png" alt=""></p>
<p><img src="3.png" alt=""></p>
<ol>
<li>ThreadPoolTaskExecutor</li>
</ol>
<p>此线程池的默认参数（由 SpringBoot 配置 TaskExecutionProperties），核心线程数 8，队列容量不限，最大线程数不限。如果业务逻辑需要执行的时间比较长，或者由于代码缺陷导致核心线程不能被释放，那么队列中的任务会越来越多且不会被执行。因此使用@Async 必须配置自定义线程池，或者修改默认线程池参数</p>
<ol start="2">
<li>SimpleAsyncTaskExecutor</li>
</ol>
<p>此线程池会一直创建新的线程，失去了线程池的优势，不推荐使用，若系统中不断地创建线程，最终会导致系统占用内存过高，引发 OutOfMemoryError 错误。</p>
<p>针对线程创建问题，SimpleAsyncTaskExecutor 提供了限流机制，查看 ConcurrencyThrottleSupport 源码中的 beforeAccess 方法，通过 concurrencyLimit 属性来控制开关，当 concurrencyLimit &gt;= 0 时开启限流机制，默认关闭限流机制即 concurrencyLimit =-1，当关闭情况下，会不断创建新的线程来处理任务。基于默认配置，SimpleAsyncTaskExecutor 并不是严格意义的线程池，达不到线程复用的功能</p>
<p><img src="4.png" alt=""></p>
<p><img src="5.png" alt=""></p>
<h3 id="线程池修改">线程池修改</h3>
<h4 id="配置文件修改">配置文件修改</h4>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#核心线程数</span></span><br><span class="line"><span class="attr">spring.task.execution.pool.core-size</span>=<span class="string">200</span></span><br><span class="line"><span class="comment">#最大线程数</span></span><br><span class="line"><span class="attr">spring.task.execution.pool.max-size</span>=<span class="string">1000</span></span><br><span class="line"><span class="comment">#空闲线程保留时间</span></span><br><span class="line"><span class="attr">spring.task.execution.pool.keep-alive</span>=<span class="string">3s</span></span><br><span class="line"><span class="comment">#队列容量</span></span><br><span class="line"><span class="attr">spring.task.execution.pool.queue-capacity</span>=<span class="string">1000</span></span><br><span class="line"><span class="comment">#线程名称前缀</span></span><br><span class="line"><span class="attr">spring.task.execution.thread-name-prefix</span>=<span class="string">test-thread-</span></span><br></pre></td></tr></table></figure>
<p>@Async 异步方法默认使用 Spring 创建 ThreadPoolTaskExecutor（参考 TaskExecutionAutoConfiguration）</p>
<ol>
<li>默认核心线程数：8</li>
<li>最大线程数：Integet.MAX_VALUE</li>
<li>队列使用：LinkedBlockingQueue</li>
<li>容量是：Integet.MAX_VALUE</li>
<li>空闲线程保留时间：60s</li>
<li>线程池拒绝策略：AbortPolicy</li>
</ol>
<h4 id="自定义线程池">自定义线程池</h4>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">task.pool.corePoolSize</span>=<span class="string">20</span></span><br><span class="line"><span class="attr">task.pool.maxPoolSize</span>=<span class="string">40</span></span><br><span class="line"><span class="attr">task.pool.keepAliveSeconds</span>=<span class="string">300</span></span><br><span class="line"><span class="attr">task.pool.queueCapacity</span>=<span class="string">50</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Async02Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Async02Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;task.pool&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskThreadPoolConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> corePoolSize;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> maxPoolSize;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> keepAliveSeconds;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> queueCapacity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskExecutePool</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TaskThreadPoolConfig config;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Executor <span class="title function_">myTaskAsyncPool</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line">        <span class="comment">//核心线程池大小</span></span><br><span class="line">        executor.setCorePoolSize(config.getCorePoolSize());</span><br><span class="line">        <span class="comment">//最大线程数</span></span><br><span class="line">        executor.setMaxPoolSize(config.getMaxPoolSize());</span><br><span class="line">        <span class="comment">//队列容量</span></span><br><span class="line">        executor.setQueueCapacity(config.getQueueCapacity());</span><br><span class="line">        <span class="comment">//活跃时间</span></span><br><span class="line">        executor.setKeepAliveSeconds(config.getKeepAliveSeconds());</span><br><span class="line">        <span class="comment">//线程名字前缀</span></span><br><span class="line">        executor.setThreadNamePrefix(<span class="string">&quot;myExecutor-&quot;</span>);</span><br><span class="line">        <span class="comment">//setRejectedExecutionHandler：当 pool 已经达到 max size 的时候，如何处理新任务</span></span><br><span class="line">        <span class="comment">//CallerRunsPolicy: 不在新线程中执行任务，而是由调用者所在的线程来执行</span></span><br><span class="line">        executor.setRejectedExecutionHandler(<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//用来设置线程池关闭的时候等待所有任务都完成再继续销毁其他的 Bean，这样这些异步任务的销毁就会先于 Redis 线程池的销毁</span></span><br><span class="line">        executor.setWaitForTasksToCompleteOnShutdown(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//用来设置线程池中任务的等待时间，如果超过这个时间还没有销毁就强制销毁，以确保应用最后能够被关闭，而不是阻塞住</span></span><br><span class="line">        executor.setAwaitTerminationSeconds(<span class="number">60</span>);</span><br><span class="line">        <span class="comment">//线程初始化</span></span><br><span class="line">        executor.initialize();</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过指定@Async 中的值去找对应的 Bean，从而获取自定义的线程池</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncTask</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(AsyncTask.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//myTaskAsynPool 即配置线程池的方法名，此处如果不写自定义线程池的方法名，会使用默认的线程池</span></span><br><span class="line">    <span class="meta">@Async(&quot;myTaskAsyncPool&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doTask1</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;task:&quot;</span> + i + <span class="string">&quot; start&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Async02ApplicationTests</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AsyncTask asyncTask;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            asyncTask.doTask1(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="实现接口-AsyncConfigurer">实现接口 AsyncConfigurer</h4>
<p>AsyncConfigurer 接口是 Spring 框架用于全局配置异步执行器（即线程池）的核心接口。当我们的 Spring 应用需要统一管理所有异步任务的执行环境时，可以选择实现此接口</p>
<p>使用@EnableAsync 后会导入 AsyncConfigurationSelector 类，根据代理类型返回对应的类（默认为 PROXY，即 ProxyAsyncConfiguration 类），ProxyAsyncConfiguration 会实例化 AsyncAnnotationBeanPostProcessor，并注入对应的实现 AsyncConfigurer 接口的类</p>
<p><img src="6.png" alt=""></p>
<p><img src="7.png" alt=""></p>
<p><img src="8.png" alt=""></p>
<p><img src="9.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AsyncConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">default</span> Executor <span class="title function_">getAsyncExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">default</span> AsyncUncaughtExceptionHandler <span class="title function_">getAsyncUncaughtExceptionHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>getAsyncExecutor()：用于实现自定义线程池，控制并发数</li>
</ol>
<ul>
<li>在 getAsyncExecutor()中创建线程池的时候，必须使用 executor.initialize()，不然在调用时会报线程池未初始化的异常</li>
<li>如果使用 threadPoolTaskExecutor()来定义 bean，则不需要初始化</li>
</ul>
<ol start="2">
<li>getAsyncUncaughtExceptionHandler()：用于处理异步方法的异常</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NativeAsyncTaskExecutePool</span> <span class="keyword">implements</span> <span class="title class_">AsyncConfigurer</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TaskThreadPoolConfig config;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Executor <span class="title function_">getAsyncExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line">        <span class="comment">//核心线程池大小</span></span><br><span class="line">        executor.setCorePoolSize(config.getCorePoolSize());</span><br><span class="line">        <span class="comment">//最大线程数</span></span><br><span class="line">        executor.setMaxPoolSize(config.getMaxPoolSize());</span><br><span class="line">        <span class="comment">//队列容量</span></span><br><span class="line">        executor.setQueueCapacity(config.getQueueCapacity());</span><br><span class="line">        <span class="comment">//活跃时间</span></span><br><span class="line">        executor.setKeepAliveSeconds(config.getKeepAliveSeconds());</span><br><span class="line">        <span class="comment">//线程名字前缀</span></span><br><span class="line">        executor.setThreadNamePrefix(<span class="string">&quot;MyExecutor-&quot;</span>);</span><br><span class="line">        <span class="comment">//CallerRunsPolicy：不在新线程中执行任务，而是由调用者所在的线程来执行</span></span><br><span class="line">        executor.setRejectedExecutionHandler(<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());</span><br><span class="line">        <span class="comment">//线程初始化</span></span><br><span class="line">        executor.initialize();</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Bean</span></span><br><span class="line"><span class="comment">//    public ThreadPoolTaskExecutor threadPoolTaskExecutor()&#123;</span></span><br><span class="line"><span class="comment">//        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();</span></span><br><span class="line"><span class="comment">//        executor.setCorePoolSize(10);</span></span><br><span class="line"><span class="comment">//        executor.setMaxPoolSize(100);</span></span><br><span class="line"><span class="comment">//        executor.setQueueCapacity(100);</span></span><br><span class="line"><span class="comment">//        return executor;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步任务中异常处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> AsyncUncaughtExceptionHandler <span class="title function_">getAsyncUncaughtExceptionHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AsyncUncaughtExceptionHandler</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleUncaughtException</span><span class="params">(Throwable ex, Method method, Object... params)</span> &#123;</span><br><span class="line">                log.error(<span class="string">&quot;@Async调用异常，出现异常的方法：&#123;&#125;，参数：&#123;&#125;，异常信息：&#123;&#125;&quot;</span>, method.getDeclaringClass().getName() + <span class="string">&quot;.&quot;</span></span><br><span class="line">                        + method.getName(), JSON.toJSONString(params), ex.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="继承-AsyncConfigurerSupport">继承 AsyncConfigurerSupport</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncConfigurerSupport</span> <span class="keyword">implements</span> <span class="title class_">AsyncConfigurer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AsyncConfigurerSupport</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Executor <span class="title function_">getAsyncExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">public</span> AsyncUncaughtExceptionHandler <span class="title function_">getAsyncUncaughtExceptionHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Async-注意点">@Async 注意点</h2>
<h3 id="失效情况">失效情况</h3>
<ol>
<li>异步方法使用 static 修饰</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">async</span><span class="params">(String value)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;async:&#123;&#125;&quot;</span>, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这时@Async 的异步功能会失效，因为这种情况 idea 会直接报错：<code>Methods annotated with '@Async' must be overridable</code> 。<br>
使用@Async 注解声明的方法，必须是能被重写的，很显然 static 修饰的方法，是类的静态方法，是不允许被重写的。因此这种情况下，@Async 注解的异步功能会失效。</p>
<ol start="2">
<li>方法用 final 修饰</li>
</ol>
<p>在 Java 种 final 关键字，是一个非常特别的存在。</p>
<ul>
<li>用 final 修饰的类，没法被继承。</li>
<li>用 final 修饰的方法，没法被重写。</li>
<li>用 final 修饰的变量，没法被修改。</li>
</ul>
<p>如果 final 使用不当，也会导致@Async 注解的异步功能失效，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        async(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">async</span><span class="params">(String value)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;async:&#123;&#125;&quot;</span>, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种情况下 idea 也会直接报错：<code>Methods annotated with '@Async' must be overridable</code> 。</p>
<p>因为使用 final 关键字修饰的方法，是没法被子类重写的。因此这种情况下，@Async 注解的异步功能会失效。</p>
<ol start="3">
<li>
<p>异步类没有使用@Component 注解导致 Spring 无法扫描到异步类</p>
</li>
<li>
<p>需要在启动类上添加@EnableAsync 注解</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>异步方法在同一个类中调用</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        async(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">async</span><span class="params">(String value)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;async:&#123;&#125;&quot;</span>, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>方法不是 public</li>
</ol>
<p>private 修饰的方法，只能在 UserService 类的对象中使用。而@Async 注解的异步功能，需要使用 Spring 的 AOP 生成 UserService 类的代理对象，该代理对象没法访问 UserService 类的 private 方法，因此会出现@Async 注解失效的问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">async</span><span class="params">(String value)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;async:&#123;&#125;&quot;</span>, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="7">
<li>方法返回值错误</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">async</span><span class="params">(String value)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;async:&#123;&#125;&quot;</span>, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 AsyncExecutionInterceptor 类的 invoke()方法，会调用它的父类 AsyncExecutionAspectSupport 中的 doSubmit 方法，该方法时异步功能的核心代码，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">protected</span> Object <span class="title function_">doSubmit</span><span class="params">(Callable&lt;Object&gt; task, AsyncTaskExecutor executor, Class&lt;?&gt; returnType)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (CompletableFuture.class.isAssignableFrom(returnType)) &#123;</span><br><span class="line">        <span class="keyword">return</span> CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> task.call();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CompletionException</span>(ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, executor);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ListenableFuture.class.isAssignableFrom(returnType)) &#123;</span><br><span class="line">        <span class="keyword">return</span> ((AsyncListenableTaskExecutor) executor).submitListenable(task);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (Future.class.isAssignableFrom(returnType)) &#123;</span><br><span class="line">        <span class="keyword">return</span> executor.submit(task);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        executor.submit(task);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从上面看出，@Async 注解的异步方法的返回值，要么是 Future，要么是 null。<br>
因此，在实际项目中，如果想要使用 <code>@Async</code> 注解的异步功能，相关方法的返回值必须是 void 或者 Future</p>
<h3 id="事务使用">事务使用</h3>
<p>在 Async 方法上标注@Transactional 是没用的，在 Async 方法中调用的方法上添加@Transactional 有效</p>
<h3 id="异常情况">异常情况</h3>
<ol>
<li>异步方法中抛出的异常不能直接捕获，因为调用者将无法获取到异常。建议使用 Future 或 CompletableFuture 来捕获异步方法的异常并进行处理</li>
<li>异步方法的执行是非阻塞的，它们可能以任意顺序完成。如果需要按照特定的顺序处理结果，可以使用 CompletableFuture 的 thenApply 方法或者使用@Async 的 order 属性来指定顺序</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>异步多线程</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Easyexcel（1-注解使用）</title>
    <url>/blog/2024/10/26/%E5%90%8E%E7%AB%AF/excel/easyexcel/Easyexcel%EF%BC%881-%E6%B3%A8%E8%A7%A3%E4%BD%BF%E7%94%A8%EF%BC%89/</url>
    <content><![CDATA[<h2 id="版本依赖">版本依赖</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easyexcel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="ExcelProperty">@ExcelProperty</h2>
<p>指定当前字段对应excel中的那一列，可以根据名字或者Index去匹配，当然也可以不写。</p>
<ol>
<li>value：指定写入的列头，如果不指定则使用成员变量的名字作为列头；如果要设置复杂的头，可以为value指定多个值</li>
<li>order：优先级高于value，会根据order的顺序来匹配实体和excel中数据的顺序</li>
<li>index：优先级高于value和order，指定写到第几列，如果不指定则根据成员变量位置排序；默认第一个字段就是index=0</li>
<li>converter：指定当前字段用什么转换器，默认会自动选择。可以用来设置类型转换器，需要实现Converter接口</li>
</ol>
<h3 id="value">value</h3>
<h4 id="指定属性名">指定属性名</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;test1&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">            response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">            user.setUserId(<span class="number">123</span>);</span><br><span class="line">            user.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">            user.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">            user.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">            user.setCreateTime(<span class="number">13213L</span>);</span><br><span class="line">            EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                    .sheet(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">                    .doWrite(Arrays.asList(user));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="1.png" alt=""></p>
<p>默认情况下，使用类的属性名作为Excel的列表，当然也可以使用@ExcelProperty 注解来重新指定属性名称。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="2.png" alt=""></p>
<h4 id="表头合并">表头合并</h4>
<p>value在写的时候，如果指定了多个值，会自动进行合并</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &#123;&quot;用户基本信息&quot;, &quot;姓名&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &#123;&quot;用户基本信息&quot;, &quot;手机&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &#123;&quot;用户基本信息&quot;, &quot;邮箱&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="3.png" alt=""></p>
<h3 id="index">index</h3>
<h4 id="指定位置">指定位置</h4>
<p>@ExcelProperty注解有两个属性index和order，如果不指定则按照属性在类中的排列顺序来。index是指定该属性在Excel中列的下标，下标从0开始</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;, index = 2)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;, index = 1)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="5.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;, index = 2)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;, index = 1)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;, index = 10)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;, index = 12)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="6.png" alt=""></p>
<h3 id="order">order</h3>
<h4 id="指定顺序">指定顺序</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;, order = 11)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;, order = 10)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="7.png" alt=""></p>
<p>order的默认值为Integer.MAX_VALUE，通过效果我们可以得出结论：order值越小，越排在前面</p>
<p>注意：</p>
<ol>
<li>优先级：index &gt; order &gt; 默认配置</li>
<li>index相当于绝对位置，下标从0开始</li>
<li>order相当于相对位置，值越小的排在越前面</li>
</ol>
<h3 id="convert">convert</h3>
<h4 id="自定义转换器">自定义转换器</h4>
<p>在读写EXCEL时，有时候需要我们进行数据类型转换，例如我们这里的创建时间，在实体对象中是Long类型，但是这样直接导出到Excel中不太直观。我们需要转换成yyyy-MM-dd HH:mm:ss 格式，此时我们就可以用到转换器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateTimeConverter</span> <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;Long&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">DateTimeFormatter</span> <span class="variable">dateTimeFormatter</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 支持导入的Java类型</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; supportJavaTypeKey() &#123;</span><br><span class="line">        <span class="keyword">return</span> Long.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 支持导出的Excel类型</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> CellDataTypeEnum <span class="title function_">supportExcelTypeKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> CellDataTypeEnum.STRING;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转换为Java</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">convertToJavaData</span><span class="params">(ReadCellData&lt;?&gt; cellData, ExcelContentProperty contentProperty, GlobalConfiguration globalConfiguration)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转换为Excel</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> WriteCellData&lt;?&gt; convertToExcelData(Long value, ExcelContentProperty contentProperty, GlobalConfiguration globalConfiguration) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WriteCellData</span>(CellDataTypeEnum.STRING, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> LocalDateTime.ofInstant(Instant.ofEpochMilli(value), ZoneId.systemDefault());</span><br><span class="line">        <span class="type">String</span> <span class="variable">dateStr</span> <span class="operator">=</span> localDateTime.format(dateTimeFormatter);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WriteCellData</span>(dateStr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;, order = 11)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;, order = 10)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;, converter = DateTimeConverter.class)</span></span><br><span class="line">    <span class="keyword">private</span> Long createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="8.png" alt=""></p>
<h4 id="枚举转换">枚举转换</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Excel 性别转换器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenderConverter</span> <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;Integer&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; supportJavaTypeKey() &#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> CellDataTypeEnum <span class="title function_">supportExcelTypeKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> CellDataTypeEnum.STRING;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">convertToJavaData</span><span class="params">(ReadConverterContext&lt;?&gt; context)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> GenderEnum.convert(context.getReadCellData().getStringValue()).getValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> WriteCellData&lt;?&gt; convertToExcelData(WriteConverterContext&lt;Integer&gt; context) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WriteCellData</span>&lt;&gt;(GenderEnum.convert(context.getValue()).getDescription());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 性别枚举</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">GenderEnum</span> &#123;</span><br><span class="line"></span><br><span class="line">    UNKNOWN(<span class="number">0</span>, <span class="string">&quot;未知&quot;</span>),</span><br><span class="line"></span><br><span class="line">    MALE(<span class="number">1</span>, <span class="string">&quot;男性&quot;</span>),</span><br><span class="line"></span><br><span class="line">    FEMALE(<span class="number">2</span>, <span class="string">&quot;女性&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Integer value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> GenderEnum <span class="title function_">convert</span><span class="params">(Integer value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Stream.of(values())</span><br><span class="line">                .filter(bean -&gt; bean.value.equals(value))</span><br><span class="line">                .findAny()</span><br><span class="line">                .orElse(UNKNOWN);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> GenderEnum <span class="title function_">convert</span><span class="params">(String description)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Stream.of(values())</span><br><span class="line">                .filter(bean -&gt; bean.description.equals(description))</span><br><span class="line">                .findAny()</span><br><span class="line">                .orElse(UNKNOWN);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ExcelIgnore">@ExcelIgnore</h2>
<p>默认所有字段都会和excel去匹配，加了这个注解会忽略该字段</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;)</span></span><br><span class="line">    <span class="meta">@ExcelIgnore</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;, converter = DateTimeConverter.class)</span></span><br><span class="line">    <span class="meta">@ExcelIgnore</span></span><br><span class="line">    <span class="keyword">private</span> Long createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="9.png" alt=""></p>
<h2 id="ExcelIgnoreUnannotated">@ExcelIgnoreUnannotated</h2>
<p>不标注该注解时，默认类中所有成员变量都会参与读写，无论是否在成员变量上加了@ExcelProperty 的注解。标注该注解后，类中的成员变量如果没有标注 @ExcelProperty 注解将不会参与读写。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExcelIgnoreUnannotated</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="10.png" alt=""></p>
<h2 id="ColumnWidth">@ColumnWidth</h2>
<p>用于设置表格列的宽度</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ColumnWidth(200)</span></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;, converter = DateTimeConverter.class)</span></span><br><span class="line">    <span class="keyword">private</span> Long createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="11.png" alt=""></p>
<h2 id="ContentRowHeight">@ContentRowHeight</h2>
<p>标注在类上，指定内容行高</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ContentRowHeight(value = 50)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;, converter = DateTimeConverter.class)</span></span><br><span class="line">    <span class="keyword">private</span> Long createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="12.png" alt=""></p>
<h2 id="HeadRowHeight">@HeadRowHeight</h2>
<p>标注在类上，指定列头行高</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@HeadRowHeight(80)</span></span><br><span class="line"><span class="meta">@ContentRowHeight(value = 50)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;, converter = DateTimeConverter.class)</span></span><br><span class="line">    <span class="keyword">private</span> Long createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="13.png" alt=""></p>
<h2 id="ContentStyle">@ContentStyle</h2>
<p>用于设置内容格式注解</p>
<ol>
<li>dataFormat：日期格式</li>
<li>hidden：设置单元格使用此样式隐藏</li>
<li>locked：设置单元格使用此样式锁定</li>
<li>quotePrefix：在单元格前面增加`符号，数字或公式将以字符串形式展示</li>
<li>horizontalAlignment：设置是否水平居中</li>
<li>wrapped：设置文本是否应换行。将此标志设置为true通过在多行上显示使单元格中的所有内容可见</li>
<li>verticalAlignment：设置是否垂直居中</li>
<li>rotation：设置单元格中文本旋转角度。03版本的Excel旋转角度区间为-90°90°，07版本的Excel旋转角度区间为0°180°</li>
<li>indent：设置单元格中缩进文本的空格数</li>
<li>borderLeft：设置左边框的样式</li>
<li>borderRight：设置右边框样式</li>
<li>borderTop：设置上边框样式</li>
<li>borderBottom：设置下边框样式</li>
<li>leftBorderColor：设置左边框颜色</li>
<li>rightBorderColor：设置右边框颜色</li>
<li>topBorderColor：设置上边框颜色</li>
<li>bottomBorderColor：设置下边框颜色</li>
<li>fillPatternType：设置填充类型</li>
<li>fillBackgroundColor：设置背景色</li>
<li>fillForegroundColor：设置前景色</li>
<li>shrinkToFit：设置自动单元格自动大小</li>
</ol>
<h2 id="ContentFontStyle">@ContentFontStyle</h2>
<p>用于设置单元格内容字体格式的注解</p>
<ol>
<li>fontName：字体名称</li>
<li>fontHeightInPoints：字体高度</li>
<li>italic：是否斜体</li>
<li>strikeout：是否设置删除水平线</li>
<li>color：字体颜色</li>
<li>typeOffset：偏移量</li>
<li>underline：下划线</li>
<li>bold：是否加粗</li>
<li>charset：编码格式</li>
</ol>
<h2 id="HeadStyle">@HeadStyle</h2>
<p>用于设置标题样式</p>
<ol>
<li>dataFormat：日期格式</li>
<li>hidden：设置单元格使用此样式隐藏</li>
<li>locked：设置单元格使用此样式锁定</li>
<li>quotePrefix：在单元格前面增加`符号，数字或公式将以字符串形式展示</li>
<li>horizontalAlignment：设置是否水平居中</li>
<li>wrapped：设置文本是否应换行。将此标志设置为true通过在多行上显示使单元格中的所有内容可见</li>
<li>verticalAlignment：设置是否垂直居中</li>
<li>rotation：设置单元格中文本旋转角度。03版本的Excel旋转角度区间为-90°90°，07版本的Excel旋转角度区间为0°180°</li>
<li>indent：设置单元格中缩进文本的空格数</li>
<li>borderLeft：设置左边框的样式</li>
<li>borderRight：设置右边框样式</li>
<li>borderTop：设置上边框样式</li>
<li>borderBottom：设置下边框样式</li>
<li>leftBorderColor：设置左边框颜色</li>
<li>rightBorderColor：设置右边框颜色</li>
<li>topBorderColor：设置上边框颜色</li>
<li>bottomBorderColor：设置下边框颜色</li>
<li>fillPatternType：设置填充类型</li>
<li>fillBackgroundColor：设置背景色</li>
<li>fillForegroundColor：设置前景色</li>
<li>shrinkToFit：设置自动单元格自动大小</li>
</ol>
<h2 id="HeadFontStyle">@HeadFontStyle</h2>
<p>用于定制标题字体格式</p>
<ol>
<li>fontName：设置字体名称</li>
<li>fontHeightInPoints：设置字体高度</li>
<li>italic：设置字体是否斜体</li>
<li>strikeout：是否设置删除线</li>
<li>color：设置字体颜色</li>
<li>typeOffset：设置偏移量</li>
<li>underline：设置下划线</li>
<li>charset：设置字体编码</li>
<li>bold：设置字体是否加粗</li>
</ol>
<h2 id="ContentLoopMerge">@ContentLoopMerge</h2>
<p>用于设置合并单元格的注解，作用于字段上</p>
<ol>
<li>eachRow：合并列</li>
<li>columnExtend：合并行</li>
</ol>
<h2 id="OnceAbsoluteMerge">@OnceAbsoluteMerge</h2>
<p>用于指定位置的单元格合并，作用于类上</p>
<ol>
<li>firstRowIndex：第一行下标</li>
<li>lastRowIndex：最后一行下标</li>
<li>firstColumnIndex：第一列下标</li>
<li>lastColumnIndex：最后一列下标</li>
</ol>
<h2 id="DateTimeFormat">@DateTimeFormat</h2>
<p>日期转换，读取Excel文件时用String去接收excel日期格式的数据会调用这个注解。里面的value参照java.text.SimpleDateFormat</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DateTimeFormat(&quot;yyyy-MM-dd&quot;)</span></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="NumberFormat">@NumberFormat</h2>
<p>数字转换，用String去接收excel数字格式的数据会调用这个注解。里面的value参照java.text.DecimalFormat</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>EasyExcel</tag>
      </tags>
  </entry>
  <entry>
    <title>Easyexcel（2-文件读取）</title>
    <url>/blog/2024/10/27/%E5%90%8E%E7%AB%AF/excel/easyexcel/Easyexcel%EF%BC%882-%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%EF%BC%89/</url>
    <content><![CDATA[<h2 id="同步读取">同步读取</h2>
<h3 id="读取单个Sheet">读取单个Sheet</h3>
<ol>
<li>通过sheet方法指定对应的Sheet名称或下标读取文件信息</li>
<li>通过doReadSync方法实现同步读取</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserExcel</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelIgnore</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(index = 0, value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(index = 1, value = &quot;年龄&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DateTimeFormat(value = &quot;yyyy-MM-dd&quot;)</span></span><br><span class="line">    <span class="meta">@ExcelProperty(index = 2, value = &quot;出生日期&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test02Controller</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传单个文件, 同步读取excel文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/uploadFile&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">uploadFile</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> file.getInputStream()) &#123;</span><br><span class="line">            List&lt;UserExcel&gt; userExcelList = EasyExcel.read(in)</span><br><span class="line">                    <span class="comment">// 读取第一个sheet</span></span><br><span class="line">                    .sheet(<span class="number">0</span>)</span><br><span class="line">                    <span class="comment">// 如果第一行才是标题，第二行是数据，从第二行开始读取</span></span><br><span class="line">                    .headRowNumber(<span class="number">1</span>)</span><br><span class="line">                    .head(UserExcel.class)</span><br><span class="line">                    .doReadSync();</span><br><span class="line">            <span class="keyword">for</span> (UserExcel userExcel : userExcelList) &#123;</span><br><span class="line">                System.out.println(userExcel);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="读取多个Sheet（同一个对象）">读取多个Sheet（同一个对象）</h3>
<p>使用doReadAllSync方法读取所有Sheet，适用于每个Sheet的对象都一致的情况</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/uploadFile2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">uploadFile2</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> file.getInputStream()) &#123;</span><br><span class="line">        List&lt;UserExcel&gt; userExcelList = EasyExcel.read(in)</span><br><span class="line">                <span class="comment">// 如果第一行才是标题，第二行是数据，从第二行开始读取</span></span><br><span class="line">                .headRowNumber(<span class="number">1</span>)</span><br><span class="line">                .head(UserExcel.class)</span><br><span class="line">                .doReadAllSync();</span><br><span class="line">        <span class="keyword">for</span> (UserExcel userExcel : userExcelList) &#123;</span><br><span class="line">            System.out.println(userExcel);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="读取多个Sheet（不同对象）">读取多个Sheet（不同对象）</h3>
<p>当每个Sheet的对象不一致的情况下，使用doReadAllSync方法无法指定每个Sheet的对象，可以依次读取Sheet进行解析</p>
<p>注意：依次读取Sheet会出现重复读取流对象的情况，而一个流对象只能读取一次，重复使用会导致异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/uploadFile4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">uploadFile4</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        in = file.getInputStream();</span><br><span class="line">        List&lt;UserExcel&gt; userExcelList1 = EasyExcel.read(in)</span><br><span class="line">                <span class="comment">// 读取第一个sheet</span></span><br><span class="line">                .sheet(<span class="number">0</span>)</span><br><span class="line">                <span class="comment">// 如果第一行才是标题，第二行是数据，从第二行开始读取</span></span><br><span class="line">                .headRowNumber(<span class="number">1</span>)</span><br><span class="line">                .head(UserExcel.class)</span><br><span class="line">                .doReadSync();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取剩余的sheet</span></span><br><span class="line">        in = file.getInputStream();</span><br><span class="line">        List&lt;UserExcel&gt; userExcelList2 = EasyExcel.read(in)</span><br><span class="line">                .sheet(<span class="number">1</span>)</span><br><span class="line">                <span class="comment">// 如果第一行才是标题，第二行是数据，从第二行开始读取</span></span><br><span class="line">                .headRowNumber(<span class="number">1</span>)</span><br><span class="line">                .head(UserExcel.class)</span><br><span class="line">                .doReadSync();</span><br><span class="line"></span><br><span class="line">        List&lt;UserExcel&gt; userExcelList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        userExcelList.addAll(userExcelList1);</span><br><span class="line">        userExcelList.addAll(userExcelList2);</span><br><span class="line">        <span class="keyword">for</span> (UserExcel userExcel : userExcelList) &#123;</span><br><span class="line">            System.out.println(userExcel);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (in != <span class="literal">null</span>) &#123;</span><br><span class="line">                in.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="异步读取">异步读取</h2>
<h3 id="监听器">监听器</h3>
<p>查看监听器源码，通过实现ReadListener接口或继承AnalysisEventListener类可以自定义读取Sheet监听器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ReadListener</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">Listener</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在转换异常 获取其他异常下会调用本接口。抛出异常则停止读取。如果这里不抛出异常则继续读取下一行</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">onException</span><span class="params">(Exception exception, AnalysisContext context)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">throw</span> exception;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 获取表头数据</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">invokeHead</span><span class="params">(Map&lt;Integer, ReadCellData&lt;?&gt;&gt; headMap, AnalysisContext context)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 一行行读取表格内容</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(T data, AnalysisContext context)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 读取条额外信息:批注、超链接、合并单元格信息等</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">extra</span><span class="params">(CellExtra extra, AnalysisContext context)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">   	<span class="comment">// 读取完成后的操作</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">doAfterAllAnalysed</span><span class="params">(AnalysisContext context)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 是否还有数据</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">(AnalysisContext context)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AnalysisEventListener</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">ReadListener</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析表头数据</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invokeHead</span><span class="params">(Map&lt;Integer, ReadCellData&lt;?&gt;&gt; headMap, AnalysisContext context)</span> &#123;</span><br><span class="line">        invokeHeadMap(ConverterUtils.convertToStringMap(headMap, context), context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invokeHeadMap</span><span class="params">(Map&lt;Integer, String&gt; headMap, AnalysisContext context)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="异常处理">异常处理</h3>
<h4 id="ExcelDateConvertException">ExcelDateConvertException</h4>
<p>表示数据转换异常错误，出现该异常时会继续解析文件信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExcelDataConvertException</span> <span class="keyword">extends</span> <span class="title class_">ExcelRuntimeException</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer rowIndex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer columnIndex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CellData&lt;?&gt; cellData;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ExcelContentProperty excelContentProperty;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ExcelDataConvertException</span><span class="params">(Integer rowIndex, Integer columnIndex, CellData&lt;?&gt; cellData,</span></span><br><span class="line"><span class="params">        ExcelContentProperty excelContentProperty, String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">        <span class="built_in">this</span>.rowIndex = rowIndex;</span><br><span class="line">        <span class="built_in">this</span>.columnIndex = columnIndex;</span><br><span class="line">        <span class="built_in">this</span>.cellData = cellData;</span><br><span class="line">        <span class="built_in">this</span>.excelContentProperty = excelContentProperty;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ExcelDataConvertException</span><span class="params">(Integer rowIndex, Integer columnIndex, CellData&lt;?&gt; cellData,</span></span><br><span class="line"><span class="params">        ExcelContentProperty excelContentProperty, String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">        <span class="built_in">this</span>.rowIndex = rowIndex;</span><br><span class="line">        <span class="built_in">this</span>.columnIndex = columnIndex;</span><br><span class="line">        <span class="built_in">this</span>.cellData = cellData;</span><br><span class="line">        <span class="built_in">this</span>.excelContentProperty = excelContentProperty;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="ExcelAnalysisStopException">ExcelAnalysisStopException</h4>
<p>非数据转换异常错误，在onexcetpion中抛出该异常后停止解析</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExcelAnalysisStopException</span> <span class="keyword">extends</span> <span class="title class_">ExcelAnalysisException</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ExcelAnalysisStopException</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ExcelAnalysisStopException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ExcelAnalysisStopException</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ExcelAnalysisStopException</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="读取单个Sheet（不指定对象）">读取单个Sheet（不指定对象）</h3>
<p>读取文件时使用doRead方法进行异步操作，同时指定对应的监听器解析文件数据</p>
<p>Map&lt;Integer, String&gt;中的key表示列号、value表示数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserExcelListener1</span> <span class="keyword">extends</span> <span class="title class_">AnalysisEventListener</span>&lt;Map&lt;Integer, String&gt;&gt; &#123;</span><br><span class="line">    <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Map&lt;Integer, String&gt;&gt; userExcelList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Map&lt;Integer, String&gt; map, AnalysisContext analysisContext)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;解析到一条数据:&#123;&#125;&quot;</span>, JSON.toJSONString(map));</span><br><span class="line">        userExcelList.add(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfterAllAnalysed</span><span class="params">(AnalysisContext analysisContext)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;已解析完所有数据!&quot;</span>);</span><br><span class="line">        userExcelList.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onException</span><span class="params">(Exception exception, AnalysisContext context)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ExcelDataConvertException) &#123;</span><br><span class="line">            <span class="type">ExcelDataConvertException</span> <span class="variable">convertException</span> <span class="operator">=</span> (ExcelDataConvertException) exception;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">row</span> <span class="operator">=</span> convertException.getRowIndex();</span><br><span class="line">            log.error(<span class="string">&quot;第&#123;&#125;行数据转换失败，异常信息：&#123;&#125;&quot;</span>, row, exception.getMessage());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.error(<span class="string">&quot;导入其他异常信息：&#123;&#125;&quot;</span>, exception.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;Integer, String&gt;&gt; <span class="title function_">getUserExcelList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userExcelList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserExcelList</span><span class="params">(List&lt;Map&lt;Integer, String&gt;&gt; userExcelList)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userExcelList = userExcelList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/uploadFile1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">uploadFile1</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> file.getInputStream()) &#123;</span><br><span class="line">        <span class="type">UserExcelListener1</span> <span class="variable">listener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserExcelListener1</span>();</span><br><span class="line">        EasyExcel.read(in, listener)</span><br><span class="line">                .sheet(<span class="number">0</span>)</span><br><span class="line">                .headRowNumber(<span class="number">1</span>) <span class="comment">// 第一行是标题, 从第二行开始读取</span></span><br><span class="line">                .doRead();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="读取单个Sheet（指定对象）">读取单个Sheet（指定对象）</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserExcelListener</span> <span class="keyword">extends</span> <span class="title class_">AnalysisEventListener</span>&lt;UserExcel&gt; &#123;</span><br><span class="line">    <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;UserExcel&gt; userExcelList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(UserExcel userExcel, AnalysisContext analysisContext)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;解析到一条数据:&#123;&#125;&quot;</span>, JSON.toJSONString(userExcel));</span><br><span class="line">        userExcelList.add(userExcel);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfterAllAnalysed</span><span class="params">(AnalysisContext analysisContext)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;已解析完所有数据!&quot;</span>);</span><br><span class="line">        userExcelList.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onException</span><span class="params">(Exception exception, AnalysisContext context)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ExcelDataConvertException) &#123;</span><br><span class="line">            <span class="type">ExcelDataConvertException</span> <span class="variable">convertException</span> <span class="operator">=</span> (ExcelDataConvertException) exception;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">row</span> <span class="operator">=</span> convertException.getRowIndex();</span><br><span class="line">            log.error(<span class="string">&quot;第&#123;&#125;行数据转换失败，异常信息：&#123;&#125;&quot;</span>, row, exception.getMessage());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.error(<span class="string">&quot;导入其他异常信息：&#123;&#125;&quot;</span>, exception.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;UserExcel&gt; <span class="title function_">getUserExcelList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userExcelList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserExcelList</span><span class="params">(List&lt;UserExcel&gt; userExcelList)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userExcelList = userExcelList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/uploadFile5&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">uploadFile5</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> file.getInputStream()) &#123;</span><br><span class="line">        <span class="type">UserExcelListener</span> <span class="variable">listener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserExcelListener</span>();</span><br><span class="line">        EasyExcel.read(in, UserExcel.class, listener)</span><br><span class="line">                .sheet(<span class="number">0</span>)</span><br><span class="line">                .headRowNumber(<span class="number">1</span>) <span class="comment">// 第一行是标题, 从第二行开始读取</span></span><br><span class="line">                .doRead();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="读取多个Sheet">读取多个Sheet</h3>
<ol>
<li>获取Sheet的总数，通过循环遍历的方式指定每个Sheet的监听器进行解析</li>
<li>使用构造器的方式传入Sheet对应的下标，在抛出异常时获取SheetNo和对应的行号，方便进行排查</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserExcelListener2</span> <span class="keyword">extends</span> <span class="title class_">AnalysisEventListener</span>&lt;UserExcel&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer sheetNo;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> List&lt;UserExcel&gt; userExcelList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserExcelListener2</span><span class="params">(Integer sheetNo)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sheetNo = sheetNo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(UserExcel userExcel, AnalysisContext analysisContext)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;解析到一条数据:&#123;&#125;&quot;</span>, JSON.toJSONString(userExcel));</span><br><span class="line">        userExcelList.add(userExcel);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfterAllAnalysed</span><span class="params">(AnalysisContext analysisContext)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;已解析完所有数据!&quot;</span>);</span><br><span class="line">        userExcelList.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onException</span><span class="params">(Exception exception, AnalysisContext context)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ExcelDataConvertException) &#123;</span><br><span class="line">            <span class="type">ExcelDataConvertException</span> <span class="variable">convertException</span> <span class="operator">=</span> (ExcelDataConvertException) exception;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">row</span> <span class="operator">=</span> convertException.getRowIndex();</span><br><span class="line">            log.error(<span class="string">&quot;sheetNo：&#123;&#125;，第&#123;&#125;行数据转换失败，异常信息：&#123;&#125;&quot;</span>, sheetNo, row, exception.getMessage());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.error(<span class="string">&quot;导入其他异常信息：&#123;&#125;&quot;</span>, exception.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;UserExcel&gt; <span class="title function_">getUserExcelList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userExcelList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserExcelList</span><span class="params">(List&lt;UserExcel&gt; userExcelList)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userExcelList = userExcelList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/uploadFile6&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">uploadFile6</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> file.getInputStream();</span><br><span class="line">         <span class="type">ExcelReader</span> <span class="variable">build</span> <span class="operator">=</span> EasyExcel.read(in).build();) &#123;</span><br><span class="line">        List&lt;ReadSheet&gt; readSheets = build.excelExecutor().sheetList();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, len = readSheets.size(); i &lt; len; i++) &#123;</span><br><span class="line">            <span class="type">UserExcelListener2</span> <span class="variable">listener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserExcelListener2</span>(i);</span><br><span class="line">            <span class="type">ReadSheet</span> <span class="variable">sheet</span> <span class="operator">=</span> EasyExcel.readSheet(readSheets.get(i).getSheetNo())</span><br><span class="line">                    .head(UserExcel.class)</span><br><span class="line">                    .headRowNumber(<span class="number">1</span>)</span><br><span class="line">                    .registerReadListener(listener)</span><br><span class="line">                    .build();</span><br><span class="line">            build.read(sheet);</span><br><span class="line">        &#125;</span><br><span class="line">        build.finish();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="分批读取（线程池操作）">分批读取（线程池操作）</h3>
<ol>
<li>使用构造器的方式传入Sheet对应的下标和自定义线程池，使用这种分批处理的方式，避免内存的消耗，加快文件的解析入库</li>
<li>数据库入库时可以使用MySQL的批量插入语法，同时指定每次插入数据的大小，相较于MyBatisPlus的批量插入方法较快（<strong>疑问：在MyBatisPlus的批量插入方法时出现数据部分丢失的情况</strong>）</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UserListener 不能被spring管理，要每次读取excel都要new，</span></span><br><span class="line"><span class="comment"> * 然后里面用到spring可以构造方法传进去</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserExcelListener3</span> <span class="keyword">extends</span> <span class="title class_">AnalysisEventListener</span>&lt;UserExcel&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">BATCH_SIZE</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer sheetNo;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Executor executor;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;UserExcel&gt; userExcelList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserExcelListener3</span><span class="params">(Integer sheetNo, Executor executor)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sheetNo = sheetNo;</span><br><span class="line">        <span class="built_in">this</span>.executor = executor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(UserExcel userExcel, AnalysisContext analysisContext)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;解析到一条数据:&#123;&#125;&quot;</span>, JSON.toJSONString(userExcel));</span><br><span class="line">        userExcelList.add(userExcel);</span><br><span class="line">        <span class="keyword">if</span> (userExcelList.size() &gt;= BATCH_SIZE) &#123;</span><br><span class="line">            List&lt;UserExcel&gt; userExcels = BeanUtil.copyToList(userExcelList, UserExcel.class);</span><br><span class="line">            CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">                <span class="comment">// 业务操作</span></span><br><span class="line">                <span class="comment">// saveToDB(userExcels);</span></span><br><span class="line">            &#125;, executor);</span><br><span class="line">            userExcelList.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfterAllAnalysed</span><span class="params">(AnalysisContext analysisContext)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;已解析完所有数据!&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!userExcelList.isEmpty()) &#123;</span><br><span class="line">            List&lt;UserExcel&gt; userExcels = BeanUtil.copyToList(userExcelList, UserExcel.class);</span><br><span class="line">            CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">                <span class="comment">// 业务操作</span></span><br><span class="line">                <span class="comment">// saveToDB(userExcels);</span></span><br><span class="line">            &#125;, executor);</span><br><span class="line">            userExcelList.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onException</span><span class="params">(Exception exception, AnalysisContext context)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ExcelDataConvertException) &#123;</span><br><span class="line">            <span class="type">ExcelDataConvertException</span> <span class="variable">convertException</span> <span class="operator">=</span> (ExcelDataConvertException) exception;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">row</span> <span class="operator">=</span> convertException.getRowIndex();</span><br><span class="line">            log.error(<span class="string">&quot;sheetNo：&#123;&#125;，第&#123;&#125;行数据转换失败，异常信息：&#123;&#125;&quot;</span>, sheetNo, row, exception.getMessage());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.error(<span class="string">&quot;导入其他异常信息：&#123;&#125;&quot;</span>, exception.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/uploadFile7&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">uploadFile77</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> file.getInputStream();</span><br><span class="line">         <span class="type">ExcelReader</span> <span class="variable">build</span> <span class="operator">=</span> EasyExcel.read(in).build();) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ThreadPoolExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">10</span>, <span class="number">20</span>, <span class="number">60L</span>,</span><br><span class="line">                TimeUnit.MILLISECONDS, <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">1000</span>), <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy());</span><br><span class="line">        List&lt;ReadSheet&gt; readSheets = build.excelExecutor().sheetList();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, len = readSheets.size(); i &lt; len; i++) &#123;</span><br><span class="line">            <span class="type">UserExcelListener3</span> <span class="variable">listener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserExcelListener3</span>(i, executor);</span><br><span class="line">            <span class="type">ReadSheet</span> <span class="variable">sheet</span> <span class="operator">=</span> EasyExcel.readSheet(readSheets.get(i).getSheetNo())</span><br><span class="line">                    .head(UserExcel.class)</span><br><span class="line">                    .headRowNumber(<span class="number">1</span>)</span><br><span class="line">                    .registerReadListener(listener)</span><br><span class="line">                    .build();</span><br><span class="line">            build.read(sheet);</span><br><span class="line">        &#125;</span><br><span class="line">        build.finish();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="事务操作">事务操作</h3>
<p>当使用监听器读取文件数据，使用分批插入数据的方法时，因为监听器不归Spring管理，所以无法使用Spring的事务注解进行事务的相关操作，怎么保证事务？</p>
<p>可以通过构造器的方式传入事务管理器，手动提交和回滚事务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDataListener</span> <span class="keyword">extends</span> <span class="title class_">AnalysisEventListener</span>&lt;Test&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//每隔5条存储数据库，实际使用中可以设置为2500条，然后清理list ，方便内存回收</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BATCH_COUNT</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Test&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//事务管理</span></span><br><span class="line">    <span class="keyword">private</span> DataSourceTransactionManager dataSourceTransactionManager;</span><br><span class="line">    <span class="comment">//事务定义</span></span><br><span class="line">    <span class="keyword">private</span> DefaultTransactionDefinition transactionDefinition;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">TransactionStatus</span> <span class="variable">transactionStatus</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TestService testService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestDataListener</span><span class="params">(TestService testService,</span></span><br><span class="line"><span class="params">                            DataSourceTransactionManager dataSourceTransactionManager,</span></span><br><span class="line"><span class="params">                            TransactionDefinition transactionDefinition)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.testService = testService;</span><br><span class="line">        <span class="built_in">this</span>.dataSourceTransactionManager = dataSourceTransactionManager;</span><br><span class="line">        <span class="built_in">this</span>.transactionDefinition = <span class="keyword">new</span> <span class="title class_">DefaultTransactionDefinition</span>(transactionDefinition);</span><br><span class="line">        <span class="comment">//设置事务的隔离级别 ：未提交读写</span></span><br><span class="line">        <span class="built_in">this</span>.transactionDefinition.setIsolationLevel(TransactionDefinition.ISOLATION_READ_UNCOMMITTED);</span><br><span class="line">        <span class="comment">// 手动开启事务</span></span><br><span class="line">        <span class="built_in">this</span>.transactionStatus = dataSourceTransactionManager.getTransaction(transactionDefinition);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Test data, AnalysisContext context)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;解析到一条数据:&#123;&#125;&quot;</span>, JSON.toJSONString(data));</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">hasCompleted</span> <span class="operator">=</span> transactionStatus.isCompleted();</span><br><span class="line">        <span class="comment">// 如果事务已经关闭，不执行业务代码</span></span><br><span class="line">        <span class="keyword">if</span> (hasCompleted)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        list.add(data);</span><br><span class="line">        <span class="keyword">if</span> (list.size() &gt;= BATCH_COUNT) &#123;</span><br><span class="line">            saveData();</span><br><span class="line">            list.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这个方法会在easyexcel读取完文件中所有数据后执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfterAllAnalysed</span><span class="params">(AnalysisContext context)</span> &#123;</span><br><span class="line">        <span class="comment">//判断事务是否已被处理，未处理则进行提交事务</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">hasCompleted</span> <span class="operator">=</span> transactionStatus.isCompleted();</span><br><span class="line">        <span class="keyword">if</span> (hasCompleted)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        saveData();</span><br><span class="line">        log.info(<span class="string">&quot;所有数据解析完成！&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!hasCompleted)&#123;</span><br><span class="line">            <span class="comment">//提交事务</span></span><br><span class="line">            dataSourceTransactionManager.commit(transactionStatus);</span><br><span class="line">            log.info(<span class="string">&quot;SensitiveWordListener doAfterAllAnalysed：当前事务已提交&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onException</span><span class="params">(Exception exception, AnalysisContext context)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        log.info(<span class="string">&quot;导入过程中出现异常会进入该方法，重写了父类方法&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;结束前事务状态：&quot;</span>+  transactionStatus.isCompleted());</span><br><span class="line">        dataSourceTransactionManager.rollback(transactionStatus);</span><br><span class="line">        log.info(<span class="string">&quot;结束后事务状态：&quot;</span>+  transactionStatus.isCompleted());</span><br><span class="line">        <span class="keyword">throw</span> exception;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加上存储数据库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">saveData</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125;条数据，开始存储数据库！&quot;</span>, list.size());</span><br><span class="line">        <span class="keyword">if</span> (!CollectionUtils.isEmpty(list)) &#123;</span><br><span class="line">            testService.saveBatch(list);</span><br><span class="line">            System.out.println(list);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//TODO 这里是测试事务，如有需要可以打开注释</span></span><br><span class="line">        <span class="comment">//int a = 1/0;</span></span><br><span class="line">        log.info(<span class="string">&quot;存储数据库成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>EasyExcel</tag>
      </tags>
  </entry>
  <entry>
    <title>Easyexcel（3-文件导出）</title>
    <url>/blog/2024/10/27/%E5%90%8E%E7%AB%AF/excel/easyexcel/Easyexcel%EF%BC%883-%E6%96%87%E4%BB%B6%E5%AF%BC%E5%87%BA%EF%BC%89/</url>
    <content><![CDATA[<h2 id="响应头设置">响应头设置</h2>
<p>通过设置文件导出的响应头，可以自定义文件导出的名字信息等</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//编码格式为UTF-8</span></span><br><span class="line">response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//让服务器告诉浏览器它发送的数据属于excel文件类型</span></span><br><span class="line">response.setContentType(<span class="string">&quot;application/vnd.ms-excel;charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//描述内容在传输过程中的编码格式，BINARY可能不止包含非ASCII字符，还可能不是一个短行（超过1000字符）。</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Content-Transfer-Encoding&quot;</span>, <span class="string">&quot;binary&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//must-revalidate：强制页面不缓存，post-check=0, pre-check=0：0秒后，在显示给用户之前，该对象被选中进行更新过</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Cache-Control&quot;</span>, <span class="string">&quot;must-revalidate, post-check=0, pre-check=0&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//表示响应可能是任何缓存的，即使它只是通常是非缓存或可缓存的仅在非共享缓存中</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Pragma&quot;</span>, <span class="string">&quot;public&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//告诉浏览器这个文件的名字和类型，attachment：作为附件下载；inline：直接打开</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="写入单个Sheet">写入单个Sheet</h2>
<h3 id="一次性写入数据">一次性写入数据</h3>
<p>指定导出内容所对应的对象信息，通过doWrite写入数据</p>
<p>注意：doWrite方法必须传入的是集合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download1</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUserId(<span class="number">123</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                .doWrite(Arrays.asList(user));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="分批写入数据">分批写入数据</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download2</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="type">ExcelWriter</span> <span class="variable">excelWriter</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUserId(<span class="number">123</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        excelWriter = EasyExcel.write(response.getOutputStream(), User.class).build();</span><br><span class="line">        <span class="type">WriteSheet</span> <span class="variable">writeSheet</span> <span class="operator">=</span> EasyExcel.writerSheet(<span class="string">&quot;测试&quot;</span>).build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 业务逻辑处理，分页查询</span></span><br><span class="line">        excelWriter.write(Arrays.asList(user), writeSheet);</span><br><span class="line">        excelWriter.write(Arrays.asList(user), writeSheet);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (excelWriter != <span class="literal">null</span>) &#123;</span><br><span class="line">            excelWriter.finish();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过WriteSheet对象可以指定要写入的Sheet，通过上面方式我们可以手工控制流的关闭，这样我们就可以实现多次写。可以实现分页查询获取数据，然后将数据写入Excel中，避免一次性加载的数据过多，导致内存溢出</p>
<p>在使用excelWriter.write方式时务必保证至少执行一次write，这样是为了将sheet和表头写入excel，否则打开excel时会报错。write的第一个参数可以为null</p>
<h3 id="导出表头自定义">导出表头自定义</h3>
<p>使用注解的方式定义表头时不能动态控制，每次修改表头内容时只能重新修改代码，这时可以通过head方法动态传参自定义表头</p>
<p>注意：内容结构必须是List&lt;List&lt;T&gt;&gt;，如果使用List&lt;T&gt;会出现问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download3</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="type">ExcelWriter</span> <span class="variable">excelWriter</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUserId(<span class="number">123</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        List&lt;List&lt;String&gt;&gt; heads = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        heads.add(Arrays.asList(<span class="string">&quot;姓名&quot;</span>));</span><br><span class="line">        heads.add(Arrays.asList(<span class="string">&quot;年龄&quot;</span>));</span><br><span class="line">        heads.add(Arrays.asList(<span class="string">&quot;地址&quot;</span>));</span><br><span class="line">        excelWriter = EasyExcel.write(response.getOutputStream()).head(heads).build();</span><br><span class="line">        <span class="type">WriteSheet</span> <span class="variable">writeSheet</span> <span class="operator">=</span> EasyExcel.writerSheet(<span class="string">&quot;测试&quot;</span>).build();</span><br><span class="line">        excelWriter.write(Arrays.asList(user), writeSheet);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (excelWriter != <span class="literal">null</span>) &#123;</span><br><span class="line">            excelWriter.finish();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="1.png" alt=""></p>
<h3 id="导出内容自定义">导出内容自定义</h3>
<p>当导出的内容不是某个固定的实体类时，希望导出不同的内容时可以通过List&lt;List&lt;String&gt;&gt;自定义要写入的内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download5&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download5</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="type">ExcelWriter</span> <span class="variable">excelWriter</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;List&lt;String&gt;&gt; heads = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        heads.add(Arrays.asList(<span class="string">&quot;姓名&quot;</span>));</span><br><span class="line">        heads.add(Arrays.asList(<span class="string">&quot;年龄&quot;</span>));</span><br><span class="line">        heads.add(Arrays.asList(<span class="string">&quot;地址&quot;</span>));</span><br><span class="line">        excelWriter = EasyExcel.write(response.getOutputStream()).head(heads).build();</span><br><span class="line">        <span class="type">WriteSheet</span> <span class="variable">writeSheet</span> <span class="operator">=</span> EasyExcel.writerSheet(<span class="string">&quot;测试&quot;</span>).build();</span><br><span class="line"></span><br><span class="line">        List&lt;List&lt;String&gt;&gt; dataList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        dataList.add(Arrays.asList(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;18&quot;</span>, <span class="string">&quot;上海&quot;</span>));</span><br><span class="line">        dataList.add(Arrays.asList(<span class="string">&quot;李四&quot;</span>, <span class="string">&quot;28&quot;</span>));</span><br><span class="line">        excelWriter.write(dataList, writeSheet);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (excelWriter != <span class="literal">null</span>) &#123;</span><br><span class="line">            excelWriter.finish();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="2.png" alt=""></p>
<h3 id="写入多个表头">写入多个表头</h3>
<p>若业务需求要求在同一个Sheet中写多个表，就需要用到WriteTable了。只定义一个WriteSheet，有几个表就定义几个WriteTable即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download4</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="type">ExcelWriter</span> <span class="variable">excelWriter</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUserId(<span class="number">123</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        excelWriter = EasyExcel.write(response.getOutputStream()).build();</span><br><span class="line">        <span class="type">WriteSheet</span> <span class="variable">writeSheet</span> <span class="operator">=</span> EasyExcel.writerSheet(<span class="string">&quot;测试&quot;</span>).build();</span><br><span class="line"></span><br><span class="line">        List&lt;List&lt;String&gt;&gt; heads1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        heads1.add(Arrays.asList(<span class="string">&quot;姓名&quot;</span>));</span><br><span class="line">        heads1.add(Arrays.asList(<span class="string">&quot;年龄&quot;</span>));</span><br><span class="line">        heads1.add(Arrays.asList(<span class="string">&quot;地址&quot;</span>));</span><br><span class="line">        <span class="type">WriteTable</span> <span class="variable">writeTable1</span> <span class="operator">=</span> EasyExcel.writerTable(<span class="number">1</span>).head(heads1).needHead(<span class="literal">true</span>).build();</span><br><span class="line"></span><br><span class="line">        List&lt;List&lt;String&gt;&gt; heads2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        heads2.add(Arrays.asList(<span class="string">&quot;姓名&quot;</span>));</span><br><span class="line">        heads2.add(Arrays.asList(<span class="string">&quot;年龄&quot;</span>));</span><br><span class="line">        heads2.add(Arrays.asList(<span class="string">&quot;地址&quot;</span>));</span><br><span class="line">        heads2.add(Arrays.asList(<span class="string">&quot;出生日期&quot;</span>));</span><br><span class="line">        <span class="type">WriteTable</span> <span class="variable">writeTable2</span> <span class="operator">=</span> EasyExcel.writerTable(<span class="number">2</span>).head(heads2).needHead(<span class="literal">true</span>).build();</span><br><span class="line"></span><br><span class="line">        excelWriter.write(Arrays.asList(user), writeSheet, writeTable1);</span><br><span class="line">        excelWriter.write(Arrays.asList(user), writeSheet, writeTable2);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (excelWriter != <span class="literal">null</span>) &#123;</span><br><span class="line">            excelWriter.finish();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="3.png" alt=""></p>
<h2 id="写入多个Sheet">写入多个Sheet</h2>
<p>通过EasyExcel.writerSheet创建对应的sheet，然后在写入sheet时指定对应的WriteSheet即可，同时可指定每个Sheet对应的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download6&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download6</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="type">ExcelWriter</span> <span class="variable">excelWriter</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;List&lt;String&gt;&gt; heads = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        heads.add(Arrays.asList(<span class="string">&quot;姓名&quot;</span>));</span><br><span class="line">        heads.add(Arrays.asList(<span class="string">&quot;年龄&quot;</span>));</span><br><span class="line">        heads.add(Arrays.asList(<span class="string">&quot;地址&quot;</span>));</span><br><span class="line">        excelWriter = EasyExcel.write(response.getOutputStream()).head(heads).build();</span><br><span class="line"></span><br><span class="line">        <span class="type">WriteSheet</span> <span class="variable">writeSheet1</span> <span class="operator">=</span> EasyExcel.writerSheet(<span class="number">0</span>, <span class="string">&quot;测试1&quot;</span>).build();</span><br><span class="line">        <span class="type">WriteSheet</span> <span class="variable">writeSheet2</span> <span class="operator">=</span> EasyExcel.writerSheet(<span class="number">1</span>, <span class="string">&quot;测试2&quot;</span>).build();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUserId(<span class="number">123</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        excelWriter.write(Arrays.asList(user), writeSheet1);</span><br><span class="line">        excelWriter.write(Arrays.asList(user), writeSheet2);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (excelWriter != <span class="literal">null</span>) &#123;</span><br><span class="line">            excelWriter.finish();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="4.png" alt=""></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>EasyExcel</tag>
      </tags>
  </entry>
  <entry>
    <title>Easyexcel（4-模板文件）</title>
    <url>/blog/2024/10/28/%E5%90%8E%E7%AB%AF/excel/easyexcel/Easyexcel%EF%BC%884-%E6%A8%A1%E6%9D%BF%E6%96%87%E4%BB%B6%EF%BC%89/</url>
    <content><![CDATA[<h2 id="文件导出">文件导出</h2>
<p>获取 resources 目录下的文件，使用 withTemplate 获取文件流导出文件模板</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download1</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;测试.xls&quot;</span>).getInputStream()) &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        EasyExcel.write(response.getOutputStream())</span><br><span class="line">                .withTemplate(in)</span><br><span class="line">                .sheet(<span class="string">&quot;sheet1&quot;</span>)</span><br><span class="line">                .doWrite(Collections.emptyList());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：获取 resources 目录下的文件需要在 maven 中添加以下配置，过滤对应的文件，防止编译生成后的 class 文件找不到对应的文件信息</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nonFilteredFileExtensions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">nonFilteredFileExtension</span>&gt;</span>xls<span class="tag">&lt;/<span class="name">nonFilteredFileExtension</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">nonFilteredFileExtension</span>&gt;</span>xlsx<span class="tag">&lt;/<span class="name">nonFilteredFileExtension</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">nonFilteredFileExtensions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="对象填充导出">对象填充导出</h2>
<p><strong>模板文件信息</strong></p>
<p><img src="1.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download5&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download5</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;测试3.xls&quot;</span>).getInputStream()) &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试3&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>, <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;12345678901&quot;</span>, <span class="string">&quot;zhangsan@qq.com&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                .withTemplate(in)</span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                .doFill(user);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：填充模板跟写文件使用的方法不一致，模板填充使用的方法是 doFill，而不是 doWrite</p>
<p><strong>导出文件内容</strong></p>
<p><img src="9.png" alt=""></p>
<h2 id="List-填充导出">List 填充导出</h2>
<h3 id="对象导出">对象导出</h3>
<p><strong>模板文件信息</strong></p>
<p><img src="1.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download2</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;测试.xls&quot;</span>).getInputStream()) &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; userList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        userList.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>, <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;12345678901&quot;</span>, <span class="string">&quot;zhangsan@qq.com&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">        userList.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;12345678902&quot;</span>, <span class="string">&quot;lisi@qq.com&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                .withTemplate(in)</span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                .doFill(userList);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>导出文件内容</strong></p>
<p><img src="2.png" alt=""></p>
<h3 id="对象嵌套对象（默认不支持）">对象嵌套对象（默认不支持）</h3>
<h4 id="原因排查">原因排查</h4>
<p><strong>模板文件信息</strong></p>
<p><img src="3.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;学生&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Student stu;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NoArgsConstructor</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@ExcelProperty(&quot;姓名&quot;)</span></span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@ExcelProperty(&quot;年龄&quot;)</span></span><br><span class="line">        <span class="keyword">private</span> Integer age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download3</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;测试2.xls&quot;</span>).getInputStream()) &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试2&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; userList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        userList.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>, <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;12345678901&quot;</span>, <span class="string">&quot;zhangsan@qq.com&quot;</span>, <span class="keyword">new</span> <span class="title class_">User</span>.Student(<span class="string">&quot;张三&quot;</span>, <span class="number">12</span>)));</span><br><span class="line">        userList.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;12345678902&quot;</span>, <span class="string">&quot;lisi@qq.com&quot;</span>, <span class="keyword">new</span> <span class="title class_">User</span>.Student(<span class="string">&quot;李四&quot;</span>, <span class="number">13</span>)));</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                .withTemplate(in)</span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                .doFill(userList);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>导出文件内容</strong></p>
<p>结果：Student 类的内容没有填充到模板文件中</p>
<p><img src="4.png" alt=""></p>
<p><strong>查看 ExcelWriteFillExecutor 源码</strong></p>
<p>可以看到 dataKeySet 集合中的数据只有 stu（没有 <a href="http://stu.name">stu.name</a> 和 stu.age），在! dataKeySet.contains(variable)方法中判断没有包含该字段信息，所以被过滤掉</p>
<p><img src="5.png" alt=""></p>
<p><img src="6.png" alt=""></p>
<h4 id="修改源码支持">修改源码支持</h4>
<p>在 com.alibaba.excel.write.executor 包下创建 ExcelWriteFillExecutor 类，跟源码中的类名称一致，尝试修改 analysisCell.getOnlyOneVariable()方法中的逻辑以便支持嵌套对象，修改如下：</p>
<p>根据分隔符.进行划分，循环获取对象中字段的数据，同时在 FieldUtils.getFieldClass 方法中重新设置 map 对象和字段</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (analysisCell.getOnlyOneVariable()) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">variable</span> <span class="operator">=</span> analysisCell.getVariableList().get(<span class="number">0</span>);</span><br><span class="line">    String[] split = variable.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> BeanUtil.copyProperties(dataMap, Map.class);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (split.length == <span class="number">1</span>) &#123;</span><br><span class="line">        value = map.get(variable);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> split.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> map.get(split[i]);</span><br><span class="line">            map = BeanMapUtils.create(o);</span><br><span class="line">        &#125;</span><br><span class="line">        value = map.get(split[split.length - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">ExcelContentProperty</span> <span class="variable">excelContentProperty</span> <span class="operator">=</span> ClassUtils.declaredExcelContentProperty(map,</span><br><span class="line">            writeContext.currentWriteHolder().excelWriteHeadProperty().getHeadClazz(), split[split.length - <span class="number">1</span>],</span><br><span class="line">            writeContext.currentWriteHolder());</span><br><span class="line">    cellWriteHandlerContext.setExcelContentProperty(excelContentProperty);</span><br><span class="line"></span><br><span class="line">    createCell(analysisCell, fillConfig, cellWriteHandlerContext, rowWriteHandlerContext);</span><br><span class="line">    cellWriteHandlerContext.setOriginalValue(value);</span><br><span class="line">    cellWriteHandlerContext.setOriginalFieldClass(FieldUtils.getFieldClass(map, split[split.length - <span class="number">1</span>], value));</span><br><span class="line"></span><br><span class="line">    converterAndSet(cellWriteHandlerContext);</span><br><span class="line">    WriteCellData&lt;?&gt; cellData = cellWriteHandlerContext.getFirstCellData();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Restyle</span></span><br><span class="line">    <span class="keyword">if</span> (fillConfig.getAutoStyle()) &#123;</span><br><span class="line">        Optional.ofNullable(collectionFieldStyleCache.get(currentUniqueDataFlag))</span><br><span class="line">                .map(collectionFieldStyleMap -&gt; collectionFieldStyleMap.get(analysisCell))</span><br><span class="line">                .ifPresent(cellData::setOriginCellStyle);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>导出文件内容</strong></p>
<p>查看导出的文件内容，此时发现嵌套对象的内容可以导出了</p>
<p><img src="10.png" alt=""></p>
<h3 id="对象嵌套-List（默认不支持）">对象嵌套 List（默认不支持）</h3>
<h4 id="原因排查-2">原因排查</h4>
<p><strong>模板文件信息</strong></p>
<p><img src="13.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;id列表&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; idList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download4</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;测试2.xls&quot;</span>).getInputStream()) &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; userList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        userList.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>, <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;12345678901&quot;</span>, <span class="string">&quot;zhangsan@qq.com&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), Arrays.asList(<span class="string">&quot;234&quot;</span>, <span class="string">&quot;465&quot;</span>)));</span><br><span class="line">        userList.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;12345678902&quot;</span>, <span class="string">&quot;lisi@qq.com&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), Arrays.asList(<span class="string">&quot;867&quot;</span>, <span class="string">&quot;465&quot;</span>)));</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                .withTemplate(in)</span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                .doFill(userList);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行后会发现报错 Can not find ‘Converter’ support class ArrayList.</p>
<p>EasyExcel 默认不支持对象嵌套 List 的，可以通过自定义转换器的方式修改导出的内容</p>
<h4 id="自定义转换器">自定义转换器</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListConvert</span> <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;List&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> WriteCellData&lt;?&gt; convertToExcelData(List value, ExcelContentProperty contentProperty, GlobalConfiguration globalConfiguration) &#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="literal">null</span> || value.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WriteCellData</span>&lt;&gt;(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">val</span> <span class="operator">=</span> (String) value.stream().collect(Collectors.joining(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WriteCellData</span>&lt;&gt;(val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List <span class="title function_">convertToJavaData</span><span class="params">(ReadCellData&lt;?&gt; cellData, ExcelContentProperty contentProperty, GlobalConfiguration globalConfiguration)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (cellData.getStringValue() == <span class="literal">null</span> || cellData.getStringValue().isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        String[] items = cellData.getStringValue().split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        Collections.addAll(list, items);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;id列表&quot;, converter = ListConvert.class)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; idList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>导出文件内容</strong></p>
<p>可以看到 List 列表的数据导出内容为 String 字符串，显示在一个单元格内</p>
<p><img src="14.png" alt=""></p>
<h2 id="Map-填充导出">Map 填充导出</h2>
<h3 id="简单导出">简单导出</h3>
<p><strong>模板文件信息</strong></p>
<p><img src="11.png" alt=""></p>
<p>注意：map跟对象导出有所区别，最前面没有.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download4</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;测试3.xls&quot;</span>).getInputStream()) &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;userId&quot;</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;phone&quot;</span>, <span class="string">&quot;12345678901&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;email&quot;</span>, <span class="string">&quot;zhangsan@qq.com&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;createTime&quot;</span>, <span class="string">&quot;2021-01-01&quot;</span>);</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                .withTemplate(in)</span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                .doFill(map);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>导出文件内容</strong></p>
<p><img src="12.png" alt=""></p>
<h3 id="嵌套方式（不支持）">嵌套方式（不支持）</h3>
<p><strong>模板文件信息</strong></p>
<p><img src="7.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download4</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;测试3.xls&quot;</span>).getInputStream()) &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;userId&quot;</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;phone&quot;</span>, <span class="string">&quot;12345678901&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;email&quot;</span>, <span class="string">&quot;zhangsan@qq.com&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;createTime&quot;</span>, <span class="string">&quot;2021-01-01&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;student.name&quot;</span>, <span class="string">&quot;小张&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;student.age&quot;</span>, <span class="string">&quot;23&quot;</span>);</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                .withTemplate(in)</span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                .doFill(map);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>导出文件内容</strong></p>
<p>注意：Easyexcel 不支持嵌套的方式导出数据</p>
<p><img src="8.png" alt=""></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>EasyExcel</tag>
      </tags>
  </entry>
  <entry>
    <title>Easyexcel（5-自定义列宽）</title>
    <url>/blog/2024/11/02/%E5%90%8E%E7%AB%AF/excel/easyexcel/Easyexcel%EF%BC%885-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%97%E5%AE%BD%EF%BC%89/</url>
    <content><![CDATA[<h2 id="注解">注解</h2>
<h3 id="ColumnWidth">@ColumnWidth</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WidthAndHeightData</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(&quot;字符串标题&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String string;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(&quot;日期标题&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date date;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ColumnWidth(50)</span></span><br><span class="line">    <span class="meta">@ExcelProperty(&quot;数字标题&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Double doubleData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注解使用时表头长度无法做到动态调整，只能固定设置，每次调整表头长度时只能重新修改代码</p>
<p>注意：@ColumnWidth最大值只能为255，超过255*256长度时会报错</p>
<p><strong>查看XSSFSheet源码</strong></p>
<p><img src="5.png" alt=""></p>
<h2 id="类方法">类方法</h2>
<p><img src="6.png" alt=""></p>
<h3 id="AbstractHeadColumnWidthStyleStrategy">AbstractHeadColumnWidthStyleStrategy</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractHeadColumnWidthStyleStrategy</span> <span class="keyword">extends</span> <span class="title class_">AbstractColumnWidthStyleStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">setColumnWidth</span><span class="params">(WriteSheetHolder writeSheetHolder, List&lt;WriteCellData&lt;?&gt;&gt; cellDataList, Cell cell, Head head,</span></span><br><span class="line"><span class="params">        Integer relativeRowIndex, Boolean isHead)</span> &#123;</span><br><span class="line">        <span class="comment">// 判断是否满足 当前行索引不为空 &amp;&amp; （当前是表头 || 当前行索引是首行）</span></span><br><span class="line">        <span class="comment">// 如果不满足，则说明不是表头，不需要设置</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">needSetWidth</span> <span class="operator">=</span> relativeRowIndex != <span class="literal">null</span> &amp;&amp; (isHead || relativeRowIndex == <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (!needSetWidth) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">width</span> <span class="operator">=</span> columnWidth(head, cell.getColumnIndex());</span><br><span class="line">        <span class="keyword">if</span> (width != <span class="literal">null</span>) &#123;</span><br><span class="line">            width = width * <span class="number">256</span>;</span><br><span class="line">            writeSheetHolder.getSheet().setColumnWidth(cell.getColumnIndex(), width);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> Integer <span class="title function_">columnWidth</span><span class="params">(Head head, Integer columnIndex)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过继承AbstractHeadColumnWidthStyleStrategy类，实现columnWidth方法获取其对应列的宽度</p>
<h3 id="SimpleColumnWidthStyleStrategy">SimpleColumnWidthStyleStrategy</h3>
<h4 id="源码查看">源码查看</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleColumnWidthStyleStrategy</span> <span class="keyword">extends</span> <span class="title class_">AbstractHeadColumnWidthStyleStrategy</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Integer columnWidth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SimpleColumnWidthStyleStrategy</span><span class="params">(Integer columnWidth)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.columnWidth = columnWidth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Integer <span class="title function_">columnWidth</span><span class="params">(Head head, Integer columnIndex)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> columnWidth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="基本使用">基本使用</h4>
<p>通过registerWriteHandler设置策略方法调整每列的固定宽度</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download2</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUserId(<span class="number">123</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;asplplplplpplplplplpl&quot;</span>);</span><br><span class="line">        user.setPhone(<span class="string">&quot;15245413&quot;</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;54565454@qq.com&quot;</span>);</span><br><span class="line">        user.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                .registerWriteHandler(<span class="keyword">new</span> <span class="title class_">SimpleColumnWidthStyleStrategy</span>(<span class="number">20</span>))</span><br><span class="line">                .doWrite(Arrays.asList(user));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="1.png" alt=""></p>
<h3 id="LongestMatchColumnWidthStyleStrategy">LongestMatchColumnWidthStyleStrategy</h3>
<h4 id="源码查看-2">源码查看</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LongestMatchColumnWidthStyleStrategy</span> <span class="keyword">extends</span> <span class="title class_">AbstractColumnWidthStyleStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_COLUMN_WIDTH</span> <span class="operator">=</span> <span class="number">255</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Integer, Map&lt;Integer, Integer&gt;&gt; cache = MapUtils.newHashMapWithExpectedSize(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">setColumnWidth</span><span class="params">(WriteSheetHolder writeSheetHolder, List&lt;WriteCellData&lt;?&gt;&gt; cellDataList, Cell cell,</span></span><br><span class="line"><span class="params">        Head head,</span></span><br><span class="line"><span class="params">        Integer relativeRowIndex, Boolean isHead)</span> &#123;</span><br><span class="line">        <span class="comment">// 判断 是否为表头 || 导出内容是否为空</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">needSetWidth</span> <span class="operator">=</span> isHead || !CollectionUtils.isEmpty(cellDataList);</span><br><span class="line">        <span class="keyword">if</span> (!needSetWidth) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;Integer, Integer&gt; maxColumnWidthMap = cache.computeIfAbsent(writeSheetHolder.getSheetNo(), key -&gt; <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">16</span>));</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">columnWidth</span> <span class="operator">=</span> dataLength(cellDataList, cell, isHead);</span><br><span class="line">        <span class="keyword">if</span> (columnWidth &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 超过最大值255时则设置为255</span></span><br><span class="line">        <span class="keyword">if</span> (columnWidth &gt; MAX_COLUMN_WIDTH) &#123;</span><br><span class="line">            columnWidth = MAX_COLUMN_WIDTH;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 比较该列的宽度，如果比原来的宽度大，则重新设置</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">maxColumnWidth</span> <span class="operator">=</span> maxColumnWidthMap.get(cell.getColumnIndex());</span><br><span class="line">        <span class="keyword">if</span> (maxColumnWidth == <span class="literal">null</span> || columnWidth &gt; maxColumnWidth) &#123;</span><br><span class="line">            maxColumnWidthMap.put(cell.getColumnIndex(), columnWidth);</span><br><span class="line">            writeSheetHolder.getSheet().setColumnWidth(cell.getColumnIndex(), columnWidth * <span class="number">256</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer <span class="title function_">dataLength</span><span class="params">(List&lt;WriteCellData&lt;?&gt;&gt; cellDataList, Cell cell, Boolean isHead)</span> &#123;</span><br><span class="line">        <span class="comment">// 如果是表头，则返回表头的宽度</span></span><br><span class="line">        <span class="keyword">if</span> (isHead) &#123;</span><br><span class="line">            <span class="keyword">return</span> cell.getStringCellValue().getBytes().length;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果是单元格内容，则根据类型返回其内容的宽度</span></span><br><span class="line">        WriteCellData&lt;?&gt; cellData = cellDataList.get(<span class="number">0</span>);</span><br><span class="line">        <span class="type">CellDataTypeEnum</span> <span class="variable">type</span> <span class="operator">=</span> cellData.getType();</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> STRING:</span><br><span class="line">                <span class="keyword">return</span> cellData.getStringValue().getBytes().length;</span><br><span class="line">            <span class="keyword">case</span> BOOLEAN:</span><br><span class="line">                <span class="keyword">return</span> cellData.getBooleanValue().toString().getBytes().length;</span><br><span class="line">            <span class="keyword">case</span> NUMBER:</span><br><span class="line">                <span class="keyword">return</span> cellData.getNumberValue().toString().getBytes().length;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>LongestMatchColumnWidthStyleStrategy是一个列宽自适应策略。当我们在写入Excel数据时，如果希望根据数据的实际长度来自适应调整列宽，就可以使用这个策略。它会遍历指定列的所有数据（包括表头），找出最长的数据，然后根据这个最长数据的长度来设定该列的宽度，确保数据在单元格内不会被截断。</p>
<p>根据官网介绍：这个目前不是很好用，比如有数字就会导致换行。而且长度也不是刚好和实际长度一致。 所以需要精确到刚好列宽的慎用。</p>
<h4 id="基本使用-2">基本使用</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download1</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUserId(<span class="number">123</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;asplplplplpplplplplpl&quot;</span>);</span><br><span class="line">        user.setPhone(<span class="string">&quot;15245413&quot;</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;54565454@qq.com&quot;</span>);</span><br><span class="line">        user.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                .registerWriteHandler(<span class="keyword">new</span> <span class="title class_">LongestMatchColumnWidthStyleStrategy</span>())</span><br><span class="line">                .doWrite(Arrays.asList(user));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="2.png" alt=""></p>
<h2 id="表头宽度工具类">表头宽度工具类</h2>
<p>仿照LongestMatchColumnWidthStyleStrategy源码自定义工具类</p>
<p>使用构造器传参的方式，用户可以自定义通过表头或者单元格内容长度来设置列宽，通过修改常数值和比例可以自己设置想调整的列宽</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 表头宽度根据表头或数据内容自适应</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomWidthStyleStrategy</span> <span class="keyword">extends</span> <span class="title class_">AbstractColumnWidthStyleStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1-根据表头宽度，2-根据单元格内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer type;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, Map&lt;Integer, Integer&gt;&gt; cache = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomWidthStyleStrategy</span><span class="params">(Integer type)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置列宽</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> writeSheetHolder 写入Sheet的持有者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cellDataList 当前列的单元格数据列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cell 当前单元格</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head 表头</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> relativeRowIndex 当前行的相对索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isHead 是否为表头</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">setColumnWidth</span><span class="params">(WriteSheetHolder writeSheetHolder, List&lt;WriteCellData&lt;?&gt;&gt; cellDataList, Cell cell, Head head, Integer relativeRowIndex, Boolean isHead)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isHead) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">columnWidth</span> <span class="operator">=</span> cell.getStringCellValue().length();</span><br><span class="line">                columnWidth = Math.max(columnWidth * <span class="number">2</span>, <span class="number">20</span>);</span><br><span class="line">                <span class="keyword">if</span> (columnWidth &gt; <span class="number">255</span>) &#123;</span><br><span class="line">                    columnWidth = <span class="number">255</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                writeSheetHolder.getSheet().setColumnWidth(cell.getColumnIndex(), columnWidth * <span class="number">256</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//不把标头计算在内</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">needSetWidth</span> <span class="operator">=</span> isHead || !CollectionUtils.isEmpty(cellDataList);</span><br><span class="line">        <span class="keyword">if</span> (needSetWidth) &#123;</span><br><span class="line">            Map&lt;Integer, Integer&gt; maxColumnWidthMap = cache.get(writeSheetHolder.getSheetNo());</span><br><span class="line">            <span class="keyword">if</span> (maxColumnWidthMap == <span class="literal">null</span>) &#123;</span><br><span class="line">                maxColumnWidthMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">                cache.put(writeSheetHolder.getSheetNo(), maxColumnWidthMap);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">Integer</span> <span class="variable">columnWidth</span> <span class="operator">=</span> <span class="built_in">this</span>.dataLength(cellDataList, cell, isHead);</span><br><span class="line">            <span class="keyword">if</span> (columnWidth &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (columnWidth &gt; <span class="number">255</span>) &#123;</span><br><span class="line">                    columnWidth = <span class="number">255</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">maxColumnWidth</span> <span class="operator">=</span> maxColumnWidthMap.get(cell.getColumnIndex());</span><br><span class="line">                <span class="keyword">if</span> (maxColumnWidth == <span class="literal">null</span> || columnWidth &gt; maxColumnWidth) &#123;</span><br><span class="line">                    maxColumnWidthMap.put(cell.getColumnIndex(), columnWidth);</span><br><span class="line">                    writeSheetHolder.getSheet().setColumnWidth(cell.getColumnIndex(), columnWidth * <span class="number">256</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cellDataList</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cell</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isHead</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer <span class="title function_">dataLength</span><span class="params">(List&lt;WriteCellData&lt;?&gt;&gt; cellDataList, Cell cell, Boolean isHead)</span> &#123;</span><br><span class="line">        <span class="comment">//头直接返回原始长度</span></span><br><span class="line">        <span class="keyword">if</span> (isHead) &#123;</span><br><span class="line">            <span class="keyword">return</span> cell.getStringCellValue().getBytes().length;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//不是头的话  看是什么类型  用数字加就可以了</span></span><br><span class="line">            <span class="type">WriteCellData</span> <span class="variable">cellData</span> <span class="operator">=</span> cellDataList.get(<span class="number">0</span>);</span><br><span class="line">            <span class="type">CellDataTypeEnum</span> <span class="variable">type</span> <span class="operator">=</span> cellData.getType();</span><br><span class="line">            <span class="keyword">if</span> (type == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">                    <span class="keyword">case</span> STRING:</span><br><span class="line">                        <span class="keyword">return</span> cellData.getStringValue().getBytes().length + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">case</span> BOOLEAN:</span><br><span class="line">                        <span class="keyword">return</span> cellData.getBooleanValue().toString().getBytes().length;</span><br><span class="line">                    <span class="keyword">case</span> NUMBER:</span><br><span class="line">                        <span class="keyword">return</span> cellData.getNumberValue().toString().getBytes().length * <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">case</span> DATE:</span><br><span class="line">                        <span class="keyword">return</span> cellData.getDateValue().toString().length() + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download3</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUserId(<span class="number">123</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;asplplplplpplplplplpl&quot;</span>);</span><br><span class="line">        user.setPhone(<span class="string">&quot;15245413&quot;</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;54565454@qq.com&quot;</span>);</span><br><span class="line">        user.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                .registerWriteHandler(<span class="keyword">new</span> <span class="title class_">CustomWidthStyleStrategy</span>(<span class="number">1</span>))</span><br><span class="line">                .doWrite(Arrays.asList(user));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/download4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download4</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUserId(<span class="number">123</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;asplplplplpplplplplpl&quot;</span>);</span><br><span class="line">        user.setPhone(<span class="string">&quot;15245413&quot;</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;54565454@qq.com&quot;</span>);</span><br><span class="line">        user.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                .registerWriteHandler(<span class="keyword">new</span> <span class="title class_">CustomWidthStyleStrategy</span>(<span class="number">2</span>))</span><br><span class="line">                .doWrite(Arrays.asList(user));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>运行结果</strong></p>
<ol>
<li>使用表头设置的列宽</li>
</ol>
<p><img src="3.png" alt=""></p>
<ol start="2">
<li>使用单元格内容设置的列宽</li>
</ol>
<p><img src="4.png" alt=""></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>EasyExcel</tag>
      </tags>
  </entry>
  <entry>
    <title>Easyexcel（6-单元格合并）</title>
    <url>/blog/2024/11/03/%E5%90%8E%E7%AB%AF/excel/easyexcel/Easyexcel%EF%BC%886-%E5%8D%95%E5%85%83%E6%A0%BC%E5%90%88%E5%B9%B6%EF%BC%89/</url>
    <content><![CDATA[<h2 id="注解">注解</h2>
<h3 id="ContentLoopMerge">@ContentLoopMerge</h3>
<p>用于设置合并单元格的注解，作用于字段上</p>
<ol>
<li>eachRow：每隔几行合并</li>
<li>columnExtend：合并列的下标</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ContentLoopMerge(eachRow = 2, columnExtend = 1)</span></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="OnceAbsoluteMerge">@OnceAbsoluteMerge</h3>
<p>用于指定位置的单元格合并，作用于类上</p>
<ol>
<li>firstRowIndex：第一行下标</li>
<li>lastRowIndex：最后一行下标</li>
<li>firstColumnIndex：第一列下标</li>
<li>lastColumnIndex：最后一列下标</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@OnceAbsoluteMerge(firstColumnIndex = 0, lastColumnIndex = 0, firstRowIndex = 1, lastRowIndex = 2)</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="类方法">类方法</h2>
<h3 id="LoopMergeStrategy">LoopMergeStrategy</h3>
<h4 id="源码查看">源码查看</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoopMergeStrategy</span> <span class="keyword">implements</span> <span class="title class_">RowWriteHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每隔几行合并</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> eachRow;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并几列</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> columnExtend;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并列</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> columnIndex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LoopMergeStrategy</span><span class="params">(<span class="type">int</span> eachRow, <span class="type">int</span> columnIndex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(eachRow, <span class="number">1</span>, columnIndex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LoopMergeStrategy</span><span class="params">(<span class="type">int</span> eachRow, <span class="type">int</span> columnExtend, <span class="type">int</span> columnIndex)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (eachRow &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;EachRows must be greater than 1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (columnExtend &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;ColumnExtend must be greater than 1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (columnExtend == <span class="number">1</span> &amp;&amp; eachRow == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;ColumnExtend or eachRows must be greater than 1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (columnIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;ColumnIndex must be greater than 0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.eachRow = eachRow;</span><br><span class="line">        <span class="built_in">this</span>.columnExtend = columnExtend;</span><br><span class="line">        <span class="built_in">this</span>.columnIndex = columnIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LoopMergeStrategy</span><span class="params">(LoopMergeProperty loopMergeProperty, Integer columnIndex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(loopMergeProperty.getEachRow(), loopMergeProperty.getColumnExtend(), columnIndex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterRowDispose</span><span class="params">(RowWriteHandlerContext context)</span> &#123;</span><br><span class="line">        <span class="comment">// 判断是否为表头</span></span><br><span class="line">        <span class="keyword">if</span> (context.getHead() || context.getRelativeRowIndex() == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 循环进行单元格合并</span></span><br><span class="line">        <span class="keyword">if</span> (context.getRelativeRowIndex() % eachRow == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">CellRangeAddress</span> <span class="variable">cellRangeAddress</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CellRangeAddress</span>(context.getRowIndex(),</span><br><span class="line">                context.getRowIndex() + eachRow - <span class="number">1</span>,</span><br><span class="line">                columnIndex, columnIndex + columnExtend - <span class="number">1</span>);</span><br><span class="line">            context.getWriteSheetHolder().getSheet().addMergedRegionUnsafe(cellRangeAddress);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="基本使用">基本使用</h4>
<p>通过 registerWriteHandler 方法设置单元格合并策略，用于指定某几列每相差几行进行单元格合并</p>
<ol>
<li>指定单列合并</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download1</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user1.setUserId(<span class="number">123</span>);</span><br><span class="line">        user1.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user1.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user1.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user1.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user2.setUserId(<span class="number">123</span>);</span><br><span class="line">        user2.setName(<span class="string">&quot;asbnm&quot;</span>);</span><br><span class="line">        user2.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user2.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user2.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user3.setUserId(<span class="number">123</span>);</span><br><span class="line">        user3.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user3.setPhone(<span class="string">&quot;46543213&quot;</span>);</span><br><span class="line">        user3.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user3.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 第1列每隔2行合并一次</span></span><br><span class="line">        <span class="type">LoopMergeStrategy</span> <span class="variable">loopMergeStrategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoopMergeStrategy</span>(<span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                .registerWriteHandler(loopMergeStrategy)</span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                .doWrite(Arrays.asList(user1, user2, user3));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="1.png" alt=""></p>
<ol start="2">
<li>指定多列合并</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download1</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user1.setUserId(<span class="number">123</span>);</span><br><span class="line">        user1.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user1.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user1.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user1.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user2.setUserId(<span class="number">123</span>);</span><br><span class="line">        user2.setName(<span class="string">&quot;asbnm&quot;</span>);</span><br><span class="line">        user2.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user2.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user2.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user3.setUserId(<span class="number">123</span>);</span><br><span class="line">        user3.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user3.setPhone(<span class="string">&quot;46543213&quot;</span>);</span><br><span class="line">        user3.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user3.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="comment">// 第2列开始每隔2行合并一次，从第2列开始的两列进行合并</span></span><br><span class="line">        <span class="type">LoopMergeStrategy</span> <span class="variable">loopMergeStrategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoopMergeStrategy</span>(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                .registerWriteHandler(loopMergeStrategy)</span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                .doWrite(Arrays.asList(user1, user2, user3));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="2.png" alt=""></p>
<h3 id="OnceAbsoluteMergeStrategy">OnceAbsoluteMergeStrategy</h3>
<h4 id="源码查看-2">源码查看</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OnceAbsoluteMergeStrategy</span> <span class="keyword">implements</span> <span class="title class_">SheetWriteHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第一行</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> firstRowIndex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最后一行</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> lastRowIndex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第一列</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> firstColumnIndex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最后一列</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> lastColumnIndex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OnceAbsoluteMergeStrategy</span><span class="params">(<span class="type">int</span> firstRowIndex, <span class="type">int</span> lastRowIndex, <span class="type">int</span> firstColumnIndex, <span class="type">int</span> lastColumnIndex)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (firstRowIndex &lt; <span class="number">0</span> || lastRowIndex &lt; <span class="number">0</span> || firstColumnIndex &lt; <span class="number">0</span> || lastColumnIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;All parameters must be greater than 0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.firstRowIndex = firstRowIndex;</span><br><span class="line">        <span class="built_in">this</span>.lastRowIndex = lastRowIndex;</span><br><span class="line">        <span class="built_in">this</span>.firstColumnIndex = firstColumnIndex;</span><br><span class="line">        <span class="built_in">this</span>.lastColumnIndex = lastColumnIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OnceAbsoluteMergeStrategy</span><span class="params">(OnceAbsoluteMergeProperty onceAbsoluteMergeProperty)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(onceAbsoluteMergeProperty.getFirstRowIndex(), onceAbsoluteMergeProperty.getLastRowIndex(),</span><br><span class="line">            onceAbsoluteMergeProperty.getFirstColumnIndex(), onceAbsoluteMergeProperty.getLastColumnIndex());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterSheetCreate</span><span class="params">(WriteWorkbookHolder writeWorkbookHolder, WriteSheetHolder writeSheetHolder)</span> &#123;</span><br><span class="line">        <span class="type">CellRangeAddress</span> <span class="variable">cellRangeAddress</span> <span class="operator">=</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">CellRangeAddress</span>(firstRowIndex, lastRowIndex, firstColumnIndex, lastColumnIndex);</span><br><span class="line">        writeSheetHolder.getSheet().addMergedRegionUnsafe(cellRangeAddress);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="基本使用-2">基本使用</h4>
<p>通过 registerWriteHandler 方法设置单元格合并策略，用于指定一个区域内的单元格进行合并</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download2</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user1.setUserId(<span class="number">123</span>);</span><br><span class="line">        user1.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user1.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user1.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user1.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user2.setUserId(<span class="number">123</span>);</span><br><span class="line">        user2.setName(<span class="string">&quot;asbnm&quot;</span>);</span><br><span class="line">        user2.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user2.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user2.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user3.setUserId(<span class="number">123</span>);</span><br><span class="line">        user3.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user3.setPhone(<span class="string">&quot;46543213&quot;</span>);</span><br><span class="line">        user3.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user3.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="comment">// 从第1行第3列合并到第3行第3列</span></span><br><span class="line">        <span class="type">OnceAbsoluteMergeStrategy</span> <span class="variable">onceAbsoluteMergeStrategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OnceAbsoluteMergeStrategy</span>(<span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                .registerWriteHandler(onceAbsoluteMergeStrategy)</span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                .doWrite(Arrays.asList(user1, user2, user3));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="3.png" alt=""></p>
<h2 id="合并单元格工具类">合并单元格工具类</h2>
<h3 id="AbstractMergeStrategy">AbstractMergeStrategy</h3>
<h4 id="基本思路">基本思路</h4>
<ol>
<li>继承 AbstractMergeStrategy 抽象合并策略，重写 merge 方法</li>
<li>传入要合并的数据列表，循环判断上下行是否是相同的数据，如果是则为同一个组，否则为另一个组，使用 List 保存每个组的数量</li>
<li>单元格渲染时，循环遍历每个组的值后，计算要合并的单元格的上下标</li>
</ol>
<h4 id="使用">使用</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义合并策略 该类继承了AbstractMergeStrategy抽象合并策略，需要重写merge()方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomMergeStrategy</span> <span class="keyword">extends</span> <span class="title class_">AbstractMergeStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分组，每几行合并一次</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; exportFieldGroupCountList;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 目标合并列index</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer targetColumnIndex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要开始合并单元格的首行index</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer rowIndex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomMergeStrategy</span><span class="params">(List&lt;String&gt; exportDataList, Integer targetColumnIndex, Integer rowIndex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.exportFieldGroupCountList = getGroupCountList(exportDataList, rowIndex);</span><br><span class="line">        <span class="built_in">this</span>.targetColumnIndex = targetColumnIndex;</span><br><span class="line">        <span class="built_in">this</span>.rowIndex = rowIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 该方法将目标列根据值是否相同连续可合并，存储可合并的行数</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; <span class="title function_">getGroupCountList</span><span class="params">(List&lt;String&gt; exportDataList, Integer rowIndex)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(exportDataList)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; groupCountList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> rowIndex + <span class="number">1</span>, len = exportDataList.size(); i &lt; len; i++) &#123;</span><br><span class="line">            <span class="comment">// 判断上一列和当前列的值是否相同</span></span><br><span class="line">            <span class="keyword">if</span> (exportDataList.get(i).equals(exportDataList.get(i - <span class="number">1</span>))) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                groupCountList.add(count);</span><br><span class="line">                count = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 处理完最后一条后</span></span><br><span class="line">        groupCountList.add(count);</span><br><span class="line">        <span class="keyword">return</span> groupCountList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(Sheet sheet, Cell cell, Head head, Integer relativeRowIndex)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == rowIndex) &#123;</span><br><span class="line">            rowIndex = cell.getRowIndex();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 仅从首行以及目标列的单元格开始合并，忽略其他</span></span><br><span class="line">        <span class="keyword">if</span> (cell.getRowIndex() == rowIndex + <span class="number">1</span> &amp;&amp; cell.getColumnIndex() == targetColumnIndex) &#123;</span><br><span class="line">            mergeGroupColumn(sheet);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">mergeGroupColumn</span><span class="params">(Sheet sheet)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rowCount</span> <span class="operator">=</span> rowIndex + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (Integer count : exportFieldGroupCountList) &#123;</span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">1</span>) &#123;</span><br><span class="line">                rowCount += count;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 合并单元格</span></span><br><span class="line">            <span class="type">CellRangeAddress</span> <span class="variable">cellRangeAddress</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CellRangeAddress</span>(rowCount, rowCount + count - <span class="number">1</span>, targetColumnIndex, targetColumnIndex);</span><br><span class="line">            sheet.addMergedRegionUnsafe(cellRangeAddress);</span><br><span class="line">            rowCount += count;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>从首行开始合并单元格</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download3</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user1.setUserId(<span class="number">123</span>);</span><br><span class="line">        user1.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user1.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user1.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user1.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user2.setUserId(<span class="number">123</span>);</span><br><span class="line">        user2.setName(<span class="string">&quot;asbnm&quot;</span>);</span><br><span class="line">        user2.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user2.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user2.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user3.setUserId(<span class="number">123</span>);</span><br><span class="line">        user3.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user3.setPhone(<span class="string">&quot;46543213&quot;</span>);</span><br><span class="line">        user3.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user3.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; userList = Arrays.asList(user1, user2, user3);</span><br><span class="line">        <span class="type">CustomMergeStrategy</span> <span class="variable">customMergeStrategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustomMergeStrategy</span>(userList.stream().map(e -&gt;</span><br><span class="line">                String.valueOf(e.getUserId())).collect(Collectors.toList()), <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                .registerWriteHandler(customMergeStrategy)</span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                .doWrite(userList);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="4.png" alt=""></p>
<ol start="2">
<li>从指定行开始合并单元格</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download3</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user1.setUserId(<span class="number">123</span>);</span><br><span class="line">        user1.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user1.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user1.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user1.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user2.setUserId(<span class="number">123</span>);</span><br><span class="line">        user2.setName(<span class="string">&quot;asbnm&quot;</span>);</span><br><span class="line">        user2.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user2.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user2.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user3.setUserId(<span class="number">123</span>);</span><br><span class="line">        user3.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user3.setPhone(<span class="string">&quot;46543213&quot;</span>);</span><br><span class="line">        user3.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user3.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; userList = Arrays.asList(user1, user2, user3);</span><br><span class="line">        <span class="type">CustomMergeStrategy</span> <span class="variable">customMergeStrategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustomMergeStrategy</span>(userList.stream().map(e -&gt;</span><br><span class="line">                String.valueOf(e.getUserId())).collect(Collectors.toList()), <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                .registerWriteHandler(customMergeStrategy)</span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                .doWrite(userList);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="5.png" alt=""></p>
<h3 id="CellWriteHandler">CellWriteHandler</h3>
<h4 id="基本思路-2">基本思路</h4>
<ol>
<li>实现 CellWriteHandler 类的 afterCellDispose 方法，在每个单元格完全创建完之后执行合并单元格操作</li>
<li>判断当前列是否为要合并的列，且当前行是否已经到达要操作的行数</li>
<li>如果是，则判断上一行和当前行的数据是否一致，且序号是否一致</li>
<li>如果是，则进行合并单元格操作，如果上一行已经被合并过了，则进行移除，然后再重新合并单元格</li>
</ol>
<h4 id="使用-2">使用</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * excel合并单元格导出工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EasyExcelUtil</span> <span class="keyword">implements</span> <span class="title class_">CellWriteHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要合并的列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] mergeColumnIndex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从哪一行开始合并</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> mergeRowIndex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EasyExcelUtil</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EasyExcelUtil</span><span class="params">(<span class="type">int</span> mergeRowIndex, <span class="type">int</span>[] mergeColumnIndex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mergeRowIndex = mergeRowIndex;</span><br><span class="line">        <span class="built_in">this</span>.mergeColumnIndex = mergeColumnIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建每个单元格之前执行</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> writeSheetHolder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> writeTableHolder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> row</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> columnIndex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> relativeRowIndex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isHead</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeCellCreate</span><span class="params">(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Row row,</span></span><br><span class="line"><span class="params">                                 Head head, Integer columnIndex, Integer relativeRowIndex, Boolean isHead)</span> &#123;</span><br><span class="line">        CellWriteHandler.<span class="built_in">super</span>.beforeCellCreate(writeSheetHolder, writeTableHolder, row, head, columnIndex, relativeRowIndex, isHead);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每个单元格数据内容渲染之后执行</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> writeSheetHolder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> writeTableHolder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cellData</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cell</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> relativeRowIndex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isHead</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCellDataConverted</span><span class="params">(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, WriteCellData&lt;?&gt; cellData,</span></span><br><span class="line"><span class="params">                                       Cell cell, Head head, Integer relativeRowIndex, Boolean isHead)</span> &#123;</span><br><span class="line">        CellWriteHandler.<span class="built_in">super</span>.afterCellDataConverted(writeSheetHolder, writeTableHolder, cellData, cell, head, relativeRowIndex, isHead);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每个单元格完全创建完之后执行</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> writeSheetHolder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> writeTableHolder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cellDataList</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cell</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> relativeRowIndex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isHead</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCellDispose</span><span class="params">(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, List&lt;WriteCellData&lt;?&gt;&gt; cellDataList,</span></span><br><span class="line"><span class="params">                                 Cell cell, Head head, Integer relativeRowIndex, Boolean isHead)</span> &#123;</span><br><span class="line">        <span class="comment">//当前行</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">curRowIndex</span> <span class="operator">=</span> cell.getRowIndex();</span><br><span class="line">        <span class="comment">//当前列</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">curColIndex</span> <span class="operator">=</span> cell.getColumnIndex();</span><br><span class="line">        <span class="comment">//判断当前行是否已经到达要合并的行数</span></span><br><span class="line">        <span class="keyword">if</span> (curRowIndex &gt; mergeRowIndex) &#123;</span><br><span class="line">            <span class="comment">//判断是否是合并列</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> columnIndex : mergeColumnIndex) &#123;</span><br><span class="line">                <span class="keyword">if</span> (curColIndex == columnIndex) &#123;</span><br><span class="line">                    mergeWithPrevRow(writeSheetHolder, cell, curRowIndex, curColIndex);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前单元格向上合并</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> writeSheetHolder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cell             当前单元格</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> curRowIndex      当前行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> curColIndex      当前列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">mergeWithPrevRow</span><span class="params">(WriteSheetHolder writeSheetHolder, Cell cell, <span class="type">int</span> curRowIndex, <span class="type">int</span> curColIndex)</span> &#123;</span><br><span class="line">        <span class="type">Cell</span> <span class="variable">cell1</span> <span class="operator">=</span> cell.getSheet().getRow(curRowIndex).getCell(<span class="number">0</span>);</span><br><span class="line">        <span class="type">Cell</span> <span class="variable">cell2</span> <span class="operator">=</span> cell.getSheet().getRow(curRowIndex - <span class="number">1</span>).getCell(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (cell1 == <span class="literal">null</span> || cell2 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取当前单元格的数据</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">curData</span> <span class="operator">=</span> cell.getCellType() == CellType.STRING ? cell.getStringCellValue() : cell.getNumericCellValue();</span><br><span class="line">        <span class="comment">// 获取上一行单元格的数据</span></span><br><span class="line">        <span class="type">Cell</span> <span class="variable">preCell</span> <span class="operator">=</span> cell.getSheet().getRow(curRowIndex - <span class="number">1</span>).getCell(curColIndex);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">preData</span> <span class="operator">=</span> preCell.getCellType() == CellType.STRING ? preCell.getStringCellValue() : preCell.getNumericCellValue();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将当前单元格数据与上一个单元格数据比较，然后判断其序号是否相同</span></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">dataBool</span> <span class="operator">=</span> preData.equals(curData);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">val1</span> <span class="operator">=</span> cell1.getCellType() == CellType.STRING ? cell1.getStringCellValue() : cell1.getNumericCellValue();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">val2</span> <span class="operator">=</span> cell2.getCellType() == CellType.STRING ? cell2.getStringCellValue() : cell2.getNumericCellValue();</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">bool</span> <span class="operator">=</span> Objects.equals(val1, val2);</span><br><span class="line">        <span class="keyword">if</span> (dataBool &amp;&amp; bool) &#123;</span><br><span class="line">            <span class="type">Sheet</span> <span class="variable">sheet</span> <span class="operator">=</span> writeSheetHolder.getSheet();</span><br><span class="line">            List&lt;CellRangeAddress&gt; mergeRegions = sheet.getMergedRegions();</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isMerged</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, len = mergeRegions.size(); i &lt; len &amp;&amp; !isMerged; ++i) &#123;</span><br><span class="line">                <span class="type">CellRangeAddress</span> <span class="variable">cellRangeAddr</span> <span class="operator">=</span> mergeRegions.get(i);</span><br><span class="line">                <span class="comment">// 若上一个单元格已经被合并，则先移出原有的合并单元，再重新添加合并单元</span></span><br><span class="line">                <span class="keyword">if</span> (cellRangeAddr.isInRange(curRowIndex - <span class="number">1</span>, curColIndex)) &#123;</span><br><span class="line">                    sheet.removeMergedRegion(i);</span><br><span class="line">                    cellRangeAddr.setLastRow(curRowIndex);</span><br><span class="line">                    sheet.addMergedRegion(cellRangeAddr);</span><br><span class="line">                    isMerged = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 若上一个单元格未被合并，则新增合并单元</span></span><br><span class="line">            <span class="keyword">if</span> (!isMerged) &#123;</span><br><span class="line">                <span class="type">CellRangeAddress</span> <span class="variable">cellRangeAddress</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CellRangeAddress</span>(curRowIndex - <span class="number">1</span>, curRowIndex, curColIndex, curColIndex);</span><br><span class="line">                sheet.addMergedRegion(cellRangeAddress);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download4</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user1.setUserId(<span class="number">123</span>);</span><br><span class="line">        user1.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user1.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user1.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user1.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user2.setUserId(<span class="number">123</span>);</span><br><span class="line">        user2.setName(<span class="string">&quot;asbnm&quot;</span>);</span><br><span class="line">        user2.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user2.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user2.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user3.setUserId(<span class="number">123</span>);</span><br><span class="line">        user3.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user3.setPhone(<span class="string">&quot;46543213&quot;</span>);</span><br><span class="line">        user3.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user3.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; userList = Arrays.asList(user1, user2, user3);</span><br><span class="line"></span><br><span class="line"><span class="comment">//            EasyExcel.write(response.getOutputStream(), User.class)</span></span><br><span class="line"><span class="comment">//                    .registerWriteHandler(new EasyExcelUtil(0, new int[]&#123;0, 2&#125;))</span></span><br><span class="line"><span class="comment">//                    .sheet(&quot;模板&quot;)</span></span><br><span class="line"><span class="comment">//                    .doWrite(userList);</span></span><br><span class="line">        EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                .registerWriteHandler(<span class="keyword">new</span> <span class="title class_">EasyExcelUtil</span>(<span class="number">0</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>&#125;))</span><br><span class="line">                .registerWriteHandler(<span class="keyword">new</span> <span class="title class_">EasyExcelUtil</span>(<span class="number">0</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">2</span>&#125;))</span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                .doWrite(userList);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="6.png" alt=""></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>EasyExcel</tag>
      </tags>
  </entry>
  <entry>
    <title>Easyexcel（7-自定义样式）</title>
    <url>/blog/2024/11/05/%E5%90%8E%E7%AB%AF/excel/easyexcel/Easyexcel%EF%BC%887-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%B7%E5%BC%8F%EF%BC%89/</url>
    <content><![CDATA[<h2 id="注解">注解</h2>
<h3 id="ContentStyle">@ContentStyle</h3>
<p>用于设置内容格式注解，可作用于类和字段上</p>
<ol>
<li>dataFormat：日期格式</li>
<li>hidden：设置单元格使用此样式隐藏</li>
<li>locked：设置单元格使用此样式锁定</li>
<li>quotePrefix：在单元格前面增加`符号，数字或公式将以字符串形式展示</li>
<li>horizontalAlignment：设置是否水平居中</li>
<li>wrapped：设置文本是否应换行。将此标志设置为true通过在多行上显示使单元格中的所有内容可见</li>
<li>verticalAlignment：设置是否垂直居中</li>
<li>rotation：设置单元格中文本旋转角度。03版本的Excel旋转角度区间为-90°90°，07版本的Excel旋转角度区间为0°180°</li>
<li>indent：设置单元格中缩进文本的空格数</li>
<li>borderLeft：设置左边框的样式</li>
<li>borderRight：设置右边框样式</li>
<li>borderTop：设置上边框样式</li>
<li>borderBottom：设置下边框样式</li>
<li>leftBorderColor：设置左边框颜色</li>
<li>rightBorderColor：设置右边框颜色</li>
<li>topBorderColor：设置上边框颜色</li>
<li>bottomBorderColor：设置下边框颜色</li>
<li>fillPatternType：设置填充类型</li>
<li>fillBackgroundColor：设置背景色</li>
<li>fillForegroundColor：设置前景色</li>
<li>shrinkToFit：设置自动单元格自动大小</li>
</ol>
<h3 id="ContentFontStyle">@ContentFontStyle</h3>
<p>用于设置单元格内容字体格式的注解，可作用于类和字段上</p>
<ol>
<li>fontName：字体名称</li>
<li>fontHeightInPoints：字体高度</li>
<li>italic：是否斜体</li>
<li>strikeout：是否设置删除水平线</li>
<li>color：字体颜色</li>
<li>typeOffset：偏移量</li>
<li>underline：下划线</li>
<li>bold：是否加粗</li>
<li>charset：编码格式</li>
</ol>
<h3 id="HeadStyle">@HeadStyle</h3>
<p>用于设置标题样式，可作用于类和字段上</p>
<ol>
<li>dataFormat：日期格式</li>
<li>hidden：设置单元格使用此样式隐藏</li>
<li>locked：设置单元格使用此样式锁定</li>
<li>quotePrefix：在单元格前面增加`符号，数字或公式将以字符串形式展示</li>
<li>horizontalAlignment：设置是否水平居中</li>
<li>wrapped：设置文本是否应换行。将此标志设置为true通过在多行上显示使单元格中的所有内容可见</li>
<li>verticalAlignment：设置是否垂直居中</li>
<li>rotation：设置单元格中文本旋转角度。03版本的Excel旋转角度区间为-90°90°，07版本的Excel旋转角度区间为0°180°</li>
<li>indent：设置单元格中缩进文本的空格数</li>
<li>borderLeft：设置左边框的样式</li>
<li>borderRight：设置右边框样式</li>
<li>borderTop：设置上边框样式</li>
<li>borderBottom：设置下边框样式</li>
<li>leftBorderColor：设置左边框颜色</li>
<li>rightBorderColor：设置右边框颜色</li>
<li>topBorderColor：设置上边框颜色</li>
<li>bottomBorderColor：设置下边框颜色</li>
<li>fillPatternType：设置填充类型</li>
<li>fillBackgroundColor：设置背景色</li>
<li>fillForegroundColor：设置前景色</li>
<li>shrinkToFit：设置自动单元格自动大小</li>
</ol>
<h3 id="HeadFontStyle">@HeadFontStyle</h3>
<p>用于定制标题字体格式，可作用于类和字段上</p>
<ol>
<li>fontName：设置字体名称</li>
<li>fontHeightInPoints：设置字体高度</li>
<li>italic：设置字体是否斜体</li>
<li>strikeout：是否设置删除线</li>
<li>color：设置字体颜色</li>
<li>typeOffset：设置偏移量</li>
<li>underline：设置下划线</li>
<li>charset：设置字体编码</li>
<li>bold：设置字体是否加粗</li>
</ol>
<h2 id="类方法">类方法</h2>
<p><img src="3.png" alt=""></p>
<h3 id="AbstractCellStyleStrategy">AbstractCellStyleStrategy</h3>
<p>通过继承AbstractCellStyleStrategy类，实现其setHeadCellStyle和setContentCellStyle方法可以自定义设置表头和单元格内容样式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractCellStyleStrategy</span> <span class="keyword">implements</span> <span class="title class_">CellWriteHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">order</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> OrderConstant.DEFINE_STYLE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCellDispose</span><span class="params">(CellWriteHandlerContext context)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (context.getHead() == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (context.getHead()) &#123;</span><br><span class="line">            setHeadCellStyle(context);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            setContentCellStyle(context);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置表头样式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">setHeadCellStyle</span><span class="params">(CellWriteHandlerContext context)</span> &#123;</span><br><span class="line">        setHeadCellStyle(context.getCell(), context.getHeadData(), context.getRelativeRowIndex());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置表头样式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">setHeadCellStyle</span><span class="params">(Cell cell, Head head, Integer relativeRowIndex)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(<span class="string">&quot;Custom styles must override the setHeadCellStyle method.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置单元格内容样式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">setContentCellStyle</span><span class="params">(CellWriteHandlerContext context)</span> &#123;</span><br><span class="line">        setContentCellStyle(context.getCell(), context.getHeadData(), context.getRelativeRowIndex());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置单元格内容样式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">setContentCellStyle</span><span class="params">(Cell cell, Head head, Integer relativeRowIndex)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(<span class="string">&quot;Custom styles must override the setContentCellStyle method.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="HorizontalCellStyleStrategy">HorizontalCellStyleStrategy</h3>
<p>HorizontalCellStyleStrategy 是提供的一个水平样式策略，只需实现CellWriteHandlerContext类自定义样式即可，通过设置构建这个策略对象基本上可以满足一般的要求了，比如：设置表头和内容的边框、底色、对齐方式、文字字体、文字颜色、文字大小等。设置完之后，需要创建 HorizontalCellStyleStrategy 对象，然后在导出文件时注册这个策略的 handler 即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HorizontalCellStyleStrategy</span> <span class="keyword">extends</span> <span class="title class_">AbstractCellStyleStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> WriteCellStyle headWriteCellStyle;</span><br><span class="line">    <span class="keyword">private</span> List&lt;WriteCellStyle&gt; contentWriteCellStyleList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HorizontalCellStyleStrategy</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HorizontalCellStyleStrategy</span><span class="params">(WriteCellStyle headWriteCellStyle,</span></span><br><span class="line"><span class="params">        List&lt;WriteCellStyle&gt; contentWriteCellStyleList)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.headWriteCellStyle = headWriteCellStyle;</span><br><span class="line">        <span class="built_in">this</span>.contentWriteCellStyleList = contentWriteCellStyleList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HorizontalCellStyleStrategy</span><span class="params">(WriteCellStyle headWriteCellStyle, WriteCellStyle contentWriteCellStyle)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.headWriteCellStyle = headWriteCellStyle;</span><br><span class="line">        <span class="keyword">if</span> (contentWriteCellStyle != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.contentWriteCellStyleList = ListUtils.newArrayList(contentWriteCellStyle);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置表头样式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">setHeadCellStyle</span><span class="params">(CellWriteHandlerContext context)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (stopProcessing(context) || headWriteCellStyle == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        WriteCellData&lt;?&gt; cellData = context.getFirstCellData();</span><br><span class="line">        WriteCellStyle.merge(headWriteCellStyle, cellData.getOrCreateStyle());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置单元格内容样式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">setContentCellStyle</span><span class="params">(CellWriteHandlerContext context)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (stopProcessing(context) || CollectionUtils.isEmpty(contentWriteCellStyleList)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        WriteCellData&lt;?&gt; cellData = context.getFirstCellData();</span><br><span class="line">        <span class="keyword">if</span> (context.getRelativeRowIndex() == <span class="literal">null</span> || context.getRelativeRowIndex() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            WriteCellStyle.merge(contentWriteCellStyleList.get(<span class="number">0</span>), cellData.getOrCreateStyle());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            WriteCellStyle.merge(</span><br><span class="line">                contentWriteCellStyleList.get(context.getRelativeRowIndex() % contentWriteCellStyleList.size()),</span><br><span class="line">                cellData.getOrCreateStyle());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断单元格是否为空</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">stopProcessing</span><span class="params">(CellWriteHandlerContext context)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> context.getFirstCellData() == <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="DefaultStyle">DefaultStyle</h3>
<p>Easyexcel在导出文件内容时默认使用DefaultStyle类来设置表头和单元格样式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultStyle</span> <span class="keyword">extends</span> <span class="title class_">HorizontalCellStyleStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">order</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> OrderConstant.DEFAULT_DEFINE_STYLE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DefaultStyle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="type">WriteCellStyle</span> <span class="variable">headWriteCellStyle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WriteCellStyle</span>();</span><br><span class="line">        headWriteCellStyle.setWrapped(<span class="literal">true</span>);</span><br><span class="line">        headWriteCellStyle.setVerticalAlignment(VerticalAlignment.CENTER);</span><br><span class="line">        headWriteCellStyle.setHorizontalAlignment(HorizontalAlignment.CENTER);</span><br><span class="line">        headWriteCellStyle.setLocked(<span class="literal">true</span>);</span><br><span class="line">        headWriteCellStyle.setFillPatternType(FillPatternType.SOLID_FOREGROUND);</span><br><span class="line">        headWriteCellStyle.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());</span><br><span class="line">        headWriteCellStyle.setBorderTop(BorderStyle.THIN);</span><br><span class="line">        headWriteCellStyle.setBorderBottom(BorderStyle.THIN);</span><br><span class="line">        headWriteCellStyle.setBorderLeft(BorderStyle.THIN);</span><br><span class="line">        headWriteCellStyle.setBorderRight(BorderStyle.THIN);</span><br><span class="line">        <span class="type">WriteFont</span> <span class="variable">headWriteFont</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WriteFont</span>();</span><br><span class="line">        headWriteFont.setFontName(<span class="string">&quot;宋体&quot;</span>);</span><br><span class="line">        headWriteFont.setFontHeightInPoints((<span class="type">short</span>)<span class="number">14</span>);</span><br><span class="line">        headWriteFont.setBold(<span class="literal">true</span>);</span><br><span class="line">        headWriteCellStyle.setWriteFont(headWriteFont);</span><br><span class="line"></span><br><span class="line">        setHeadWriteCellStyle(headWriteCellStyle);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Easyexcel的默认风格是，对于表头会显示灰色背景，但是如果取消使用默认风格之后，表头的背景颜色就会恢复白色</p>
<p>Easyexcel控制是否开启默认风格的属性方法是：<code>useDefaultStyle(false)</code></p>
<p>注意：useDefaultStyle方法一定要放在sheet方法前面，否则会失效（放在后面会因为在构造ExcelWriter类时获取不到useDefaultStyle的值，从而导致使用的是默认风格）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line">    EasyExcel.write(<span class="string">&quot;test01.xlsx&quot;</span>, DemoData.class)</span><br><span class="line">			<span class="comment">//禁用默认风格</span></span><br><span class="line">            .useDefaultStyle(<span class="literal">false</span>)</span><br><span class="line">            .sheet(<span class="string">&quot;testSheet01&quot;</span>)</span><br><span class="line">            .doWrite(demoData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="1.png" alt=""></p>
<h2 id="样式工具类">样式工具类</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * EasyExcel 样式工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomExcelStyleUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 标题样式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> WriteCellStyle <span class="title function_">getHeadStyle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 头的策略</span></span><br><span class="line">        <span class="type">WriteCellStyle</span> <span class="variable">headWriteCellStyle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WriteCellStyle</span>();</span><br><span class="line">        <span class="comment">// 背景颜色</span></span><br><span class="line">        <span class="comment">//headWriteCellStyle.setFillForegroundColor(IndexedColors.LIGHT_TURQUOISE1.getIndex());</span></span><br><span class="line">        <span class="comment">//headWriteCellStyle.setFillPatternType(FillPatternType.SOLID_FOREGROUND);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 字体</span></span><br><span class="line">        <span class="type">WriteFont</span> <span class="variable">headWriteFont</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WriteFont</span>();</span><br><span class="line">        headWriteFont.setFontName(<span class="string">&quot;宋体&quot;</span>);<span class="comment">//设置字体名字</span></span><br><span class="line">        headWriteFont.setFontHeightInPoints((<span class="type">short</span>) <span class="number">14</span>);<span class="comment">//设置字体大小</span></span><br><span class="line">        headWriteFont.setBold(<span class="literal">true</span>);<span class="comment">//字体加粗</span></span><br><span class="line">        headWriteCellStyle.setWriteFont(headWriteFont); <span class="comment">//在样式用应用设置的字体;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 样式</span></span><br><span class="line">        headWriteCellStyle.setBorderBottom(BorderStyle.THIN);<span class="comment">//设置底边框;</span></span><br><span class="line">        headWriteCellStyle.setBottomBorderColor((<span class="type">short</span>) <span class="number">0</span>);<span class="comment">//设置底边框颜色;</span></span><br><span class="line">        headWriteCellStyle.setBorderLeft(BorderStyle.THIN);  <span class="comment">//设置左边框;</span></span><br><span class="line">        headWriteCellStyle.setLeftBorderColor((<span class="type">short</span>) <span class="number">0</span>);<span class="comment">//设置左边框颜色;</span></span><br><span class="line">        headWriteCellStyle.setBorderRight(BorderStyle.THIN);<span class="comment">//设置右边框;</span></span><br><span class="line">        headWriteCellStyle.setRightBorderColor((<span class="type">short</span>) <span class="number">0</span>);<span class="comment">//设置右边框颜色;</span></span><br><span class="line">        headWriteCellStyle.setBorderTop(BorderStyle.THIN);<span class="comment">//设置顶边框;</span></span><br><span class="line">        headWriteCellStyle.setTopBorderColor((<span class="type">short</span>) <span class="number">0</span>); <span class="comment">//设置顶边框颜色;</span></span><br><span class="line"></span><br><span class="line">        headWriteCellStyle.setWrapped(<span class="literal">true</span>);  <span class="comment">//设置自动换行;</span></span><br><span class="line"></span><br><span class="line">        headWriteCellStyle.setHorizontalAlignment(HorizontalAlignment.CENTER);<span class="comment">//设置水平对齐的样式为居中对齐;</span></span><br><span class="line">        headWriteCellStyle.setVerticalAlignment(VerticalAlignment.CENTER);  <span class="comment">//设置垂直对齐的样式为居中对齐;</span></span><br><span class="line">        headWriteCellStyle.setShrinkToFit(<span class="literal">true</span>);<span class="comment">//设置文本收缩至合适</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> headWriteCellStyle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 内容样式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> WriteCellStyle <span class="title function_">getContentStyle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 内容的策略</span></span><br><span class="line">        <span class="type">WriteCellStyle</span> <span class="variable">contentWriteCellStyle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WriteCellStyle</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 背景颜色</span></span><br><span class="line">        <span class="comment">// 这里需要指定 FillPatternType 为FillPatternType.SOLID_FOREGROUND 不然无法显示背景颜色.头默认了 FillPatternType所以可以不指定</span></span><br><span class="line">        <span class="comment">//contentWriteCellStyle.setFillForegroundColor(IndexedColors.PALE_BLUE.getIndex());</span></span><br><span class="line">        <span class="comment">//contentWriteCellStyle.setFillPatternType(FillPatternType.SOLID_FOREGROUND);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置字体</span></span><br><span class="line">        <span class="type">WriteFont</span> <span class="variable">contentWriteFont</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WriteFont</span>();</span><br><span class="line">        contentWriteFont.setFontHeightInPoints((<span class="type">short</span>) <span class="number">12</span>);<span class="comment">//设置字体大小</span></span><br><span class="line">        contentWriteFont.setFontName(<span class="string">&quot;宋体&quot;</span>); <span class="comment">//设置字体名字</span></span><br><span class="line">        contentWriteCellStyle.setWriteFont(contentWriteFont);<span class="comment">//在样式用应用设置的字体;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置样式;</span></span><br><span class="line">        contentWriteCellStyle.setBorderBottom(BorderStyle.THIN);<span class="comment">//设置底边框;</span></span><br><span class="line">        contentWriteCellStyle.setBottomBorderColor((<span class="type">short</span>) <span class="number">0</span>);<span class="comment">//设置底边框颜色;</span></span><br><span class="line">        contentWriteCellStyle.setBorderLeft(BorderStyle.THIN);  <span class="comment">//设置左边框;</span></span><br><span class="line">        contentWriteCellStyle.setLeftBorderColor((<span class="type">short</span>) <span class="number">0</span>);<span class="comment">//设置左边框颜色;</span></span><br><span class="line">        contentWriteCellStyle.setBorderRight(BorderStyle.THIN);<span class="comment">//设置右边框;</span></span><br><span class="line">        contentWriteCellStyle.setRightBorderColor((<span class="type">short</span>) <span class="number">0</span>);<span class="comment">//设置右边框颜色;</span></span><br><span class="line">        contentWriteCellStyle.setBorderTop(BorderStyle.THIN);<span class="comment">//设置顶边框;</span></span><br><span class="line">        contentWriteCellStyle.setTopBorderColor((<span class="type">short</span>) <span class="number">0</span>); <span class="comment">///设置顶边框颜色;</span></span><br><span class="line"></span><br><span class="line">        contentWriteCellStyle.setHorizontalAlignment(HorizontalAlignment.CENTER);<span class="comment">// 水平居中</span></span><br><span class="line">        contentWriteCellStyle.setVerticalAlignment(VerticalAlignment.CENTER);<span class="comment">// 垂直居中</span></span><br><span class="line">        contentWriteCellStyle.setWrapped(<span class="literal">true</span>); <span class="comment">//设置自动换行;</span></span><br><span class="line">        contentWriteCellStyle.setShrinkToFit(<span class="literal">true</span>);<span class="comment">//设置文本收缩至合适</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> contentWriteCellStyle;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download1</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUserId(<span class="number">123</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                .registerWriteHandler(<span class="keyword">new</span> <span class="title class_">HorizontalCellStyleStrategy</span>(CustomExcelStyleUtil.getHeadStyle(), CustomExcelStyleUtil.getContentStyle()))</span><br><span class="line">                .doWrite(Arrays.asList(user));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="2.png" alt=""></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>EasyExcel</tag>
      </tags>
  </entry>
  <entry>
    <title>Easyexcel（9-类详解）</title>
    <url>/blog/2024/11/07/%E5%90%8E%E7%AB%AF/excel/easyexcel/Easyexcel%EF%BC%889-%E7%B1%BB%E8%AF%A6%E8%A7%A3%EF%BC%89/</url>
    <content><![CDATA[<h2 id="常用类">常用类</h2>
<ol>
<li>EasyExcel：入口类，用于构建开始各种操作；</li>
<li>ExcelReaderBuilder：构建出一个ReadWorkbook对象，即一个工作簿对象，对应的是一个Excel文件；</li>
<li>ExcelWriterBuilder：构建出一个WriteWorkbook对象，即一个工作簿对象，对应的是一个Excel文件；</li>
<li>ExcelReaderSheetBuilder：构建出一个ReadSheet对象，即一个工作表的对象，对应的Excel中的每个sheet，一个工作簿可以有多个工作表；</li>
<li>ExcelWriterSheetBuilder：构建出一WriteSheet对象，即一个工作表的对象，对应的Excel中的每个sheet，一个工作簿可以有多个工作表；</li>
<li>ReadListener：在每一行读取完毕后都会调用ReadListener来处理数据，我们可以把调用service的代码可以写在其invoke方法内部；</li>
<li>WriteHandler：在每一个操作包括创建单元格、创建表格等都会调用WriteHandler来处理数据，对使用者透明不可见；</li>
</ol>
<p>所有配置都是继承的，Workbook的配置会被Sheet继承。所以在用EasyExcel设置参数的时候，在EasyExcel…sheet()方法之前作用域是整个sheet，之后针对单个sheet</p>
<h2 id="RowWriteHandler">RowWriteHandler</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RowWriteHandler</span> <span class="keyword">extends</span> <span class="title class_">WriteHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//行创建之前</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">beforeRowCreate</span><span class="params">(RowWriteHandlerContext context)</span> &#123;</span><br><span class="line">        beforeRowCreate(context.getWriteSheetHolder(), context.getWriteTableHolder(), context.getRowIndex(),</span><br><span class="line">            context.getRelativeRowIndex(), context.getHead());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//行创建之前</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">beforeRowCreate</span><span class="params">(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Integer rowIndex,</span></span><br><span class="line"><span class="params">        Integer relativeRowIndex, Boolean isHead)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//在行创建之后</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">afterRowCreate</span><span class="params">(RowWriteHandlerContext context)</span> &#123;</span><br><span class="line">        afterRowCreate(context.getWriteSheetHolder(), context.getWriteTableHolder(), context.getRow(),</span><br><span class="line">            context.getRelativeRowIndex(), context.getHead());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//在行创建之后</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">afterRowCreate</span><span class="params">(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Row row,</span></span><br><span class="line"><span class="params">        Integer relativeRowIndex, Boolean isHead)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//在行处置之后</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">afterRowDispose</span><span class="params">(RowWriteHandlerContext context)</span> &#123;</span><br><span class="line">        afterRowDispose(context.getWriteSheetHolder(), context.getWriteTableHolder(), context.getRow(),</span><br><span class="line">            context.getRelativeRowIndex(), context.getHead());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//在行处置之后</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">afterRowDispose</span><span class="params">(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Row row,</span></span><br><span class="line"><span class="params">        Integer relativeRowIndex, Boolean isHead)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>使用案例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommentWriteHandler</span> <span class="keyword">extends</span> <span class="title class_">AbstractRowWriteHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, FailRecord&gt; failDataMap;</span><br><span class="line">	<span class="comment">// 构造参数传入错误的数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CommentWriteHandler</span><span class="params">(Map&lt;Integer, FailRecord&gt; failDataMap)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.failDataMap = failDataMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterRowDispose</span><span class="params">(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Row row,Integer relativeRowIndex, Boolean isHead)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (failDataMap.containsKey(row.getRowNum())) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!isHead) &#123;</span><br><span class="line">                <span class="type">Sheet</span> <span class="variable">sheet</span> <span class="operator">=</span> writeSheetHolder.getSheet();</span><br><span class="line">                <span class="type">Cell</span> <span class="variable">cell</span> <span class="operator">=</span> row.getCell(failDataMap.get(row.getRowNum()).getColumn());</span><br><span class="line">                <span class="type">Workbook</span> <span class="variable">workbook</span> <span class="operator">=</span> sheet.getWorkbook();</span><br><span class="line">                <span class="type">CellStyle</span> <span class="variable">cellStyle</span> <span class="operator">=</span> workbook.createCellStyle();</span><br><span class="line">                <span class="comment">//设置前景填充样式</span></span><br><span class="line">                cellStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);</span><br><span class="line">                <span class="comment">//设置前景色为红色</span></span><br><span class="line">                cellStyle.setFillForegroundColor(IndexedColors.RED.getIndex());</span><br><span class="line">                <span class="comment">//设置垂直居中</span></span><br><span class="line">                cellStyle.setVerticalAlignment(VerticalAlignment.CENTER);</span><br><span class="line">                <span class="type">Font</span> <span class="variable">font</span> <span class="operator">=</span> workbook.createFont();</span><br><span class="line">                <span class="comment">//设置字体为红色</span></span><br><span class="line">                font.setColor(Font.COLOR_RED);</span><br><span class="line">                cellStyle.setFont(font);</span><br><span class="line">				<span class="comment">//创建设置批注</span></span><br><span class="line">                Drawing&lt;?&gt; drawingPatriarch = sheet.createDrawingPatriarch();</span><br><span class="line">                <span class="type">Comment</span> <span class="variable">comment</span> <span class="operator">=</span> drawingPatriarch.createCellComment(<span class="keyword">new</span> <span class="title class_">HSSFClientAnchor</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">                        (<span class="type">short</span>) row.getRowNum(), failDataMap.get(row.getRowNum()).getColumn(), (<span class="type">short</span>) (row.getRowNum() + <span class="number">1</span>), failDataMap.get(row.getRowNum()).getColumn() + <span class="number">1</span>));</span><br><span class="line">                comment.setString(<span class="keyword">new</span> <span class="title class_">HSSFRichTextString</span>(failDataMap.get(row.getRowNum()).getMsg()));</span><br><span class="line">                cell.setCellComment(comment);</span><br><span class="line">                cell.setCellStyle(cellStyle);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="CellWriteHandler">CellWriteHandler</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CellWriteHandler</span> <span class="keyword">extends</span> <span class="title class_">WriteHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//单元创建之前，可以使用该方法来设置单元格的样式、字体等信息。</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">beforeCellCreate</span><span class="params">(CellWriteHandlerContext context)</span> &#123;</span><br><span class="line">        beforeCellCreate(context.getWriteSheetHolder(), context.getWriteTableHolder(), context.getRow(),</span><br><span class="line">            context.getHeadData(), context.getColumnIndex(), context.getRelativeRowIndex(), context.getHead());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//单元创建之前，可以使用该方法来设置单元格的样式、字体等信息。</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">beforeCellCreate</span><span class="params">(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Row row,</span></span><br><span class="line"><span class="params">        Head head, Integer columnIndex, Integer relativeRowIndex, Boolean isHead)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//单元创建后，可以使用该方法来对单元格的内容进行一些处理，例如可以将单元格的内容转换为另一种格式</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">afterCellCreate</span><span class="params">(CellWriteHandlerContext context)</span> &#123;</span><br><span class="line">        afterCellCreate(context.getWriteSheetHolder(), context.getWriteTableHolder(), context.getCell(),</span><br><span class="line">            context.getHeadData(), context.getRelativeRowIndex(), context.getHead());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//单元创建后，可以使用该方法来对单元格的内容进行一些处理，例如可以将单元格的内容转换为另一种格式</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">afterCellCreate</span><span class="params">(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Cell cell,</span></span><br><span class="line"><span class="params">        Head head, Integer relativeRowIndex, Boolean isHead)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//单元数据转换后，可以使用该方法来对单元格的数据进行一些处理，例如可以将单元格的数据转换为另一种类型</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">afterCellDataConverted</span><span class="params">(CellWriteHandlerContext context)</span> &#123;</span><br><span class="line">        WriteCellData&lt;?&gt; writeCellData = CollectionUtils.isNotEmpty(context.getCellDataList()) ? context</span><br><span class="line">            .getCellDataList().get(<span class="number">0</span>) : <span class="literal">null</span>;</span><br><span class="line">        afterCellDataConverted(context.getWriteSheetHolder(), context.getWriteTableHolder(), writeCellData,</span><br><span class="line">            context.getCell(), context.getHeadData(), context.getRelativeRowIndex(), context.getHead());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//单元数据转换后，可以使用该方法来对单元格的数据进行一些处理，例如可以将单元格的数据转换为另一种类型</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">afterCellDataConverted</span><span class="params">(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder,</span></span><br><span class="line"><span class="params">        WriteCellData&lt;?&gt; cellData, Cell cell, Head head, Integer relativeRowIndex, Boolean isHead)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//单元格处理后（完成后），可以使用该方法来对单元格进行一些清理工作，例如可以释放单元格中使用的资源</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">afterCellDispose</span><span class="params">(CellWriteHandlerContext context)</span> &#123;</span><br><span class="line">        afterCellDispose(context.getWriteSheetHolder(), context.getWriteTableHolder(), context.getCellDataList(),</span><br><span class="line">            context.getCell(), context.getHeadData(), context.getRelativeRowIndex(), context.getHead());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//单元格处理后（完成后），可以使用该方法来对单元格进行一些清理工作，例如可以释放单元格中使用的资源</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">afterCellDispose</span><span class="params">(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder,</span></span><br><span class="line"><span class="params">        List&lt;WriteCellData&lt;?&gt;&gt; cellDataList, Cell cell, Head head, Integer relativeRowIndex, Boolean isHead)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><font style="color:rgb(49, 51, 63);">注意：</font></p>
<ol>
<li><font style="color:rgb(49, 51, 63);">这四个方法都是可选的，你可以根据自己的需要来实现它们。</font></li>
<li><font style="color:rgb(49, 51, 63);">这四个方法都是线程安全的，你可以放心地在多线程环境中使用它们。</font></li>
</ol>
<p><strong><font style="color:rgb(49, 51, 63);">区别</font></strong></p>
<ol>
<li><font style="color:rgb(49, 51, 63);">beforeCellCreate方法在单元格创建之前调用，而afterCellCreate方法在单元格创建之后调用。</font></li>
<li><font style="color:rgb(49, 51, 63);">afterCellDataConverted</font><font style="color:rgb(49, 51, 63);">方法在单元格数据转换之后调用，而</font><font style="color:rgb(49, 51, 63);">afterCellDispose</font><font style="color:rgb(49, 51, 63);">方法在单元格处理完成之后调用。</font></li>
<li><font style="color:rgb(49, 51, 63);">beforeCellCreate方法和afterCellCreate方法主要用于设置单元格的样式和内容，而afterCellDataConverted方法和afterCellDispose方法主要用于对单元格的数据进行处理。</font></li>
</ol>
<p><strong><font style="color:rgb(49, 51, 63);">使用案例</font></strong></p>
<p><font style="color:rgb(49, 51, 63);">如果你想在单元格头部添加背景色，你可以在</font><font style="color:rgb(49, 51, 63);">beforeCellCreate</font><font style="color:rgb(49, 51, 63);">方法中设置单元格的样式。如果你想将单元格中的数字转换为百分比，你可以在</font><font style="color:rgb(49, 51, 63);">afterCellDataConverted</font><font style="color:rgb(49, 51, 63);">方法中将单元格的数据转换为百分比。如果你想在单元格中添加超链接，你可以在</font><font style="color:rgb(49, 51, 63);">afterCellCreate</font><font style="color:rgb(49, 51, 63);">方法中添加超链接。</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCellCreate</span><span class="params">(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder,</span></span><br><span class="line"><span class="params">                            Cell cell, Head head, Integer relativeRowIndex, Boolean isHead)</span> &#123;</span><br><span class="line">    <span class="type">Workbook</span> <span class="variable">workbook</span> <span class="operator">=</span> writeSheetHolder.getSheet().getWorkbook(); <span class="comment">// 获取 Workbook对象</span></span><br><span class="line">    <span class="type">CellStyle</span> <span class="variable">cellStyle</span> <span class="operator">=</span> workbook.createCellStyle(); <span class="comment">// 创建一个 CellStyle对象</span></span><br><span class="line">    <span class="keyword">if</span> (isHead) &#123; <span class="comment">// 如果是头，设置对应格式</span></span><br><span class="line">        <span class="type">WriteCellStyle</span> <span class="variable">headWriteCellStyle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WriteCellStyle</span>();</span><br><span class="line">        headWriteCellStyle.setFillPatternType(FillPatternType.SOLID_FOREGROUND);</span><br><span class="line">        headWriteCellStyle.setFillForegroundColor(IndexedColors.PALE_BLUE.getIndex());<span class="comment">// 背景设置</span></span><br><span class="line">        <span class="type">WriteFont</span> <span class="variable">headWriteFont</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WriteFont</span>();</span><br><span class="line">        headWriteFont.setFontHeightInPoints((<span class="type">short</span>) <span class="number">16</span>);</span><br><span class="line">        headWriteCellStyle.setWriteFont(headWriteFont);</span><br><span class="line"></span><br><span class="line">        cellStyle.setFillBackgroundColor(IndexedColors.PALE_BLUE.getIndex());</span><br><span class="line">        <span class="type">Font</span> <span class="variable">font</span> <span class="operator">=</span> workbook.createFont();</span><br><span class="line">        font.setFontName(<span class="string">&quot;宋体&quot;</span>);</span><br><span class="line">        font.setFontHeightInPoints((<span class="type">short</span>) <span class="number">16</span>);</span><br><span class="line">        font.setBold(<span class="literal">true</span>);</span><br><span class="line">        cellStyle.setFont(font);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 设置内容行列对应格式</span></span><br><span class="line">        <span class="keyword">if</span> (relativeRowIndex == <span class="number">0</span>) &#123; <span class="comment">// 如果是内容的第一行</span></span><br><span class="line">            cellStyle.setAlignment(HorizontalAlignment.LEFT);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 内容其它行</span></span><br><span class="line">            cellStyle.setAlignment(HorizontalAlignment.CENTER);</span><br><span class="line">        &#125;</span><br><span class="line">        cellStyle.setVerticalAlignment(VerticalAlignment.CENTER);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 边框</span></span><br><span class="line">        cellStyle.setBorderLeft(BorderStyle.THIN);<span class="comment">//细实线</span></span><br><span class="line">        cellStyle.setBorderTop(BorderStyle.THIN);</span><br><span class="line">        cellStyle.setBorderRight(BorderStyle.THIN);</span><br><span class="line">        cellStyle.setBorderBottom(BorderStyle.THIN);</span><br><span class="line">    &#125;</span><br><span class="line">    cell.setCellStyle(cellStyle);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="SheetWriteHandler">SheetWriteHandler</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SheetWriteHandler</span> <span class="keyword">extends</span> <span class="title class_">WriteHandler</span> &#123;</span><br><span class="line">    <span class="comment">//sheet创建之前</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">beforeSheetCreate</span><span class="params">(WriteWorkbookHolder var1, WriteSheetHolder var2)</span>;</span><br><span class="line">    <span class="comment">//sheet创建之后</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">afterSheetCreate</span><span class="params">(WriteWorkbookHolder var1, WriteSheetHolder var2)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>使用案例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySheetWriteHandler</span> <span class="keyword">implements</span> <span class="title class_">SheetWriteHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建sheet页前的操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> writeWorkbookHolder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> writeSheetHolder</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeSheetCreate</span><span class="params">(WriteWorkbookHolder writeWorkbookHolder, WriteSheetHolder writeSheetHolder)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建sheet页后的操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> writeWorkbookHolder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> writeSheetHolder</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterSheetCreate</span><span class="params">(WriteWorkbookHolder writeWorkbookHolder, WriteSheetHolder writeSheetHolder)</span> &#123;</span><br><span class="line">        <span class="comment">//定义选值范围</span></span><br><span class="line">        String[] sexStrings = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;男&quot;</span>, <span class="string">&quot;女&quot;</span>, <span class="string">&quot;未知&quot;</span>&#125;;</span><br><span class="line">        <span class="comment">//根据index，形成map，可插入多个  这个map可以由构造参数传入，毕竟不能写死</span></span><br><span class="line">        Map&lt;Integer, String[]&gt; mapDropDown = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        mapDropDown.put(<span class="number">2</span>, sexStrings);</span><br><span class="line">        <span class="comment">//获取sheet页</span></span><br><span class="line">        <span class="type">Sheet</span> <span class="variable">sheet</span> <span class="operator">=</span> writeSheetHolder.getSheet();</span><br><span class="line">        <span class="comment">///开始设置下拉框</span></span><br><span class="line">        <span class="type">DataValidationHelper</span> <span class="variable">helper</span> <span class="operator">=</span> sheet.getDataValidationHelper();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, String[]&gt; entry : mapDropDown.entrySet()) &#123;</span><br><span class="line">            <span class="comment">/***起始行、终止行、起始列、终止列**/</span></span><br><span class="line">            <span class="type">CellRangeAddressList</span> <span class="variable">addressList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CellRangeAddressList</span>(<span class="number">1</span>, <span class="number">9999</span>, entry.getKey(), entry.getKey());</span><br><span class="line">            <span class="comment">/***设置下拉框数据**/</span></span><br><span class="line">            <span class="type">DataValidationConstraint</span> <span class="variable">constraint</span> <span class="operator">=</span> helper.createExplicitListConstraint(entry.getValue());</span><br><span class="line">            <span class="type">DataValidation</span> <span class="variable">dataValidation</span> <span class="operator">=</span> helper.createValidation(constraint, addressList);</span><br><span class="line">            <span class="comment">/***处理Excel兼容性问题**/</span></span><br><span class="line">            <span class="keyword">if</span> (dataValidation <span class="keyword">instanceof</span> XSSFDataValidation) &#123;</span><br><span class="line">                dataValidation.setSuppressDropDownArrow(<span class="literal">true</span>);</span><br><span class="line">                dataValidation.setShowErrorBox(<span class="literal">true</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dataValidation.setSuppressDropDownArrow(<span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            sheet.addValidationData(dataValidation);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>EasyExcel</tag>
      </tags>
  </entry>
  <entry>
    <title>Easyexcel（8-通用工具类）</title>
    <url>/blog/2024/11/06/%E5%90%8E%E7%AB%AF/excel/easyexcel/Easyexcel%EF%BC%888-%E9%80%9A%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB%EF%BC%89/</url>
    <content><![CDATA[<h2 id="EasyExcelUtils">EasyExcelUtils</h2>
<p>提供常见的文件同步和异步读取、文件导出、模板填充、自定义表头、自定义内容、从指定行开始读取数据、多Sheet导出等方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EasyExcelUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步无模型读（默认读取sheet0,从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath excel文件的绝对路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Map&lt;Integer, String&gt;&gt; <span class="title function_">syncRead</span><span class="params">(String filePath)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(filePath).sheet().doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步无模型读（默认读取sheet0,从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream excel文件的输入流</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Map&lt;Integer, String&gt;&gt; <span class="title function_">syncRead</span><span class="params">(InputStream inputStream)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(inputStream).sheet().doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步无模型读（默认读取sheet0,从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file excel文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Map&lt;Integer, String&gt;&gt; <span class="title function_">syncRead</span><span class="params">(File file)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(file).sheet().doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步无模型读（自定义读取sheetX，从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath excel文件的绝对路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo  sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Map&lt;Integer, String&gt;&gt; <span class="title function_">syncRead</span><span class="params">(String filePath, Integer sheetNo)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(filePath).sheet(sheetNo).doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步无模型读（自定义读取sheetX，从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream excel文件的输入流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo  sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Map&lt;Integer, String&gt;&gt; <span class="title function_">syncRead</span><span class="params">(InputStream inputStream, Integer sheetNo)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(inputStream).sheet(sheetNo).doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步无模型读（自定义读取sheetX，从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file excel文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo  sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Map&lt;Integer, String&gt;&gt; <span class="title function_">syncRead</span><span class="params">(File file, Integer sheetNo)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(file).sheet(sheetNo).doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步无模型读（指定sheet和表头占的行数）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo    sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headRowNum 表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Map&lt;Integer, String&gt;&gt; <span class="title function_">syncRead</span><span class="params">(String filePath, Integer sheetNo, Integer headRowNum)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(filePath).sheet(sheetNo).headRowNumber(headRowNum).doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步无模型读（指定sheet和表头占的行数）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo     sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headRowNum  表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Map&lt;Integer, String&gt;&gt; <span class="title function_">syncRead</span><span class="params">(InputStream inputStream, Integer sheetNo, Integer headRowNum)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(inputStream).sheet(sheetNo).headRowNumber(headRowNum).doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步无模型读（指定sheet和表头占的行数）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo    sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headRowNum 表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Map&lt;Integer, String&gt;&gt; <span class="title function_">syncRead</span><span class="params">(File file, Integer sheetNo, Integer headRowNum)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(file).sheet(sheetNo).headRowNumber(headRowNum).doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步按模型读（默认读取sheet0,从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz    模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">syncReadModel</span><span class="params">(String filePath, Class clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(filePath).sheet().head(clazz).doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步按模型读（默认读取sheet0,从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz    模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">syncReadModel</span><span class="params">(InputStream inputStream, Class clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(inputStream).sheet().head(clazz).doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步按模型读（默认读取sheet0,从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz    模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">syncReadModel</span><span class="params">(File file, Class clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(file).sheet().head(clazz).doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步按模型读（默认表头占一行，从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz    模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo  sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">syncReadModel</span><span class="params">(String filePath, Class clazz, Integer sheetNo)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(filePath).sheet(sheetNo).head(clazz).doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步按模型读（默认表头占一行，从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz    模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo  sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">syncReadModel</span><span class="params">(InputStream inputStream, Class clazz, Integer sheetNo)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(inputStream).sheet(sheetNo).head(clazz).doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步按模型读（默认表头占一行，从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz    模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo  sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">syncReadModel</span><span class="params">(File file, Class clazz, Integer sheetNo)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(file).sheet(sheetNo).head(clazz).doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步按模型读（指定sheet和表头占的行数）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz      模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo    sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headRowNum 表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">syncReadModel</span><span class="params">(String filePath, Class clazz, Integer sheetNo, Integer headRowNum)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(filePath).sheet(sheetNo).headRowNumber(headRowNum).head(clazz).doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步按模型读（指定sheet和表头占的行数）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz       模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo     sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headRowNum  表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">syncReadModel</span><span class="params">(InputStream inputStream, Class clazz, Integer sheetNo, Integer headRowNum)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(inputStream).sheet(sheetNo).headRowNumber(headRowNum).head(clazz).doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步按模型读（指定sheet和表头占的行数）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz      模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo    sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headRowNum 表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">syncReadModel</span><span class="params">(File file, Class clazz, Integer sheetNo, Integer headRowNum)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(file).sheet(sheetNo).headRowNumber(headRowNum).head(clazz).doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步无模型读（默认读取sheet0,从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath      表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncRead</span><span class="params">(String filePath, AnalysisEventListener&lt;T&gt; excelListener)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(filePath, excelListener).sheet().doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步无模型读（默认读取sheet0,从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream      表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncRead</span><span class="params">(InputStream inputStream, AnalysisEventListener&lt;T&gt; excelListener)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(inputStream, excelListener).sheet().doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步无模型读（默认读取sheet0,从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file      表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncRead</span><span class="params">(File file, AnalysisEventListener&lt;T&gt; excelListener)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(file, excelListener).sheet().doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步无模型读（默认表头占一行，从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath      表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo       sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncRead</span><span class="params">(String filePath, AnalysisEventListener&lt;T&gt; excelListener, Integer sheetNo)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(filePath, excelListener).sheet(sheetNo).doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步无模型读（默认表头占一行，从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream      表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo       sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncRead</span><span class="params">(InputStream inputStream, AnalysisEventListener&lt;T&gt; excelListener, Integer sheetNo)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(inputStream, excelListener).sheet(sheetNo).doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步无模型读（默认表头占一行，从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file      表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo       sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncRead</span><span class="params">(File file, AnalysisEventListener&lt;T&gt; excelListener, Integer sheetNo)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(file, excelListener).sheet(sheetNo).doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步无模型读（指定sheet和表头占的行数）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo       sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headRowNum    表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncRead</span><span class="params">(String filePath, AnalysisEventListener&lt;T&gt; excelListener, Integer sheetNo, Integer headRowNum)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(filePath, excelListener).sheet(sheetNo).headRowNumber(headRowNum).doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步无模型读（指定sheet和表头占的行数）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo       sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headRowNum    表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncRead</span><span class="params">(InputStream inputStream, AnalysisEventListener&lt;T&gt; excelListener, Integer sheetNo, Integer headRowNum)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(inputStream, excelListener).sheet(sheetNo).headRowNumber(headRowNum).doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步无模型读（指定sheet和表头占的行数）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo       sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headRowNum    表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncRead</span><span class="params">(File file, AnalysisEventListener&lt;T&gt; excelListener, Integer sheetNo, Integer headRowNum)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(file, excelListener).sheet(sheetNo).headRowNumber(headRowNum).doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步按模型读取（默认读取sheet0,从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz         模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncReadModel</span><span class="params">(String filePath, AnalysisEventListener&lt;T&gt; excelListener, Class clazz)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(filePath, clazz, excelListener).sheet().doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步按模型读取（默认读取sheet0,从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz         模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncReadModel</span><span class="params">(InputStream inputStream, AnalysisEventListener&lt;T&gt; excelListener, Class clazz)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(inputStream, clazz, excelListener).sheet().doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步按模型读取（默认读取sheet0,从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz         模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncReadModel</span><span class="params">(File file, AnalysisEventListener&lt;T&gt; excelListener, Class clazz)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(file, clazz, excelListener).sheet().doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步按模型读取（默认表头占一行，从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz         模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo       sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncReadModel</span><span class="params">(String filePath, AnalysisEventListener&lt;T&gt; excelListener, Class clazz, Integer sheetNo)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(filePath, clazz, excelListener).sheet(sheetNo).doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步按模型读取（默认表头占一行，从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz         模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo       sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncReadModel</span><span class="params">(InputStream inputStream, AnalysisEventListener&lt;T&gt; excelListener, Class clazz, Integer sheetNo)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(inputStream, clazz, excelListener).sheet(sheetNo).doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步按模型读取（默认表头占一行，从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz         模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo       sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncReadModel</span><span class="params">(File file, AnalysisEventListener&lt;T&gt; excelListener, Class clazz, Integer sheetNo)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(file, clazz, excelListener).sheet(sheetNo).doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步按模型读取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz         模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo       sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headRowNum    表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncReadModel</span><span class="params">(String filePath, AnalysisEventListener&lt;T&gt; excelListener, Class clazz, Integer sheetNo, Integer headRowNum)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(filePath, clazz, excelListener).sheet(sheetNo).headRowNumber(headRowNum).doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步按模型读取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz         模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo       sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headRowNum    表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncReadModel</span><span class="params">(InputStream inputStream, AnalysisEventListener&lt;T&gt; excelListener, Class clazz, Integer sheetNo, Integer headRowNum)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(inputStream, clazz, excelListener).sheet(sheetNo).headRowNumber(headRowNum).doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步按模型读取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz         模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo       sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headRowNum    表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncReadModel</span><span class="params">(File file, AnalysisEventListener&lt;T&gt; excelListener, Class clazz, Integer sheetNo, Integer headRowNum)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(file, clazz, excelListener).sheet(sheetNo).headRowNumber(headRowNum).doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无模板写文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head     表头数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data     表内容数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String filePath, List&lt;List&lt;String&gt;&gt; head, List&lt;List&lt;Object&gt;&gt; data)</span> &#123;</span><br><span class="line">        EasyExcel.write(filePath).head(head).sheet().doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无模板写文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head     表头数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data     表内容数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(OutputStream outputStream, List&lt;List&lt;String&gt;&gt; head, List&lt;List&lt;Object&gt;&gt; data)</span> &#123;</span><br><span class="line">        EasyExcel.write(outputStream).head(head).sheet().doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无模板写文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head      表头数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data      表内容数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo   sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String filePath, List&lt;List&lt;String&gt;&gt; head, List&lt;List&lt;Object&gt;&gt; data, Integer sheetNo)</span> &#123;</span><br><span class="line">        EasyExcel.write(filePath).head(head).sheet(sheetNo).doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无模板写文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head      表头数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data      表内容数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo   sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(OutputStream outputStream, List&lt;List&lt;String&gt;&gt; head, List&lt;List&lt;Object&gt;&gt; data, Integer sheetNo)</span> &#123;</span><br><span class="line">        EasyExcel.write(outputStream).head(head).sheet(sheetNo).doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无模板写文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head      表头数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data      表内容数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo   sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetName sheet名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String filePath, List&lt;List&lt;String&gt;&gt; head, List&lt;List&lt;Object&gt;&gt; data, Integer sheetNo, String sheetName)</span> &#123;</span><br><span class="line">        EasyExcel.write(filePath).head(head).sheet(sheetNo, sheetName).doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无模板写文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head      表头数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data      表内容数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo   sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetName sheet名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(OutputStream outputStream, List&lt;List&lt;String&gt;&gt; head, List&lt;List&lt;Object&gt;&gt; data, Integer sheetNo, String sheetName)</span> &#123;</span><br><span class="line">        EasyExcel.write(outputStream).head(head).sheet(sheetNo, sheetName).doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据excel模板文件写入文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> templateFileName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeTemplate</span><span class="params">(String filePath, String templateFileName, List data)</span> &#123;</span><br><span class="line">        EasyExcel.write(filePath).withTemplate(templateFileName).sheet().doFill(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据excel模板文件写入文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> templateFileName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeTemplate</span><span class="params">(OutputStream outputStream, String templateFileName, List data)</span> &#123;</span><br><span class="line">        EasyExcel.write(outputStream).withTemplate(templateFileName).sheet().doFill(data);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据excel模板文件写入文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> templateFileName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeTemplate</span><span class="params">(File file, String templateFileName, List data)</span> &#123;</span><br><span class="line">        EasyExcel.write(file).withTemplate(templateFileName).sheet().doFill(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据excel模板文件写入文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> templateFileName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headClazz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeTemplate</span><span class="params">(String filePath, String templateFileName, Class headClazz, List data)</span> &#123;</span><br><span class="line">        EasyExcel.write(filePath, headClazz).withTemplate(templateFileName).sheet().doFill(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据excel模板文件写入文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> templateFileName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headClazz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeTemplate</span><span class="params">(OutputStream outputStream, String templateFileName, Class headClazz, List data)</span> &#123;</span><br><span class="line">        EasyExcel.write(outputStream, headClazz).withTemplate(templateFileName).sheet().doFill(data);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据excel模板文件写入文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> templateFileName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headClazz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeTemplate</span><span class="params">(File file, String templateFileName, Class headClazz, List data)</span> &#123;</span><br><span class="line">        EasyExcel.write(file, headClazz).withTemplate(templateFileName).sheet().doFill(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按模板写文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headClazz 表头模板</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data      数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String filePath, Class headClazz, List data)</span> &#123;</span><br><span class="line">        EasyExcel.write(filePath, headClazz).sheet().doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按模板写文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headClazz 表头模板</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data      数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(OutputStream outputStream, Class headClazz, List data)</span> &#123;</span><br><span class="line">        EasyExcel.write(outputStream, headClazz).sheet().doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按模板写文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headClazz 表头模板</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data      数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(File file, Class headClazz, List data)</span> &#123;</span><br><span class="line">        EasyExcel.write(file, headClazz).sheet().doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按模板写文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headClazz 表头模板</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data      数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo   sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String filePath, Class headClazz, List data, Integer sheetNo)</span> &#123;</span><br><span class="line">        EasyExcel.write(filePath, headClazz).sheet(sheetNo).doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按模板写文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headClazz 表头模板</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data      数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo   sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(OutputStream outputStream, Class headClazz, List data, Integer sheetNo)</span> &#123;</span><br><span class="line">        EasyExcel.write(outputStream, headClazz).sheet(sheetNo).doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按模板写文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headClazz 表头模板</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data      数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo   sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(File file, Class headClazz, List data, Integer sheetNo)</span> &#123;</span><br><span class="line">        EasyExcel.write(file, headClazz).sheet(sheetNo).doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按模板写文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headClazz 表头模板</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data      数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo   sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetName sheet名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String filePath, Class headClazz, List data, Integer sheetNo, String sheetName)</span> &#123;</span><br><span class="line">        EasyExcel.write(filePath, headClazz).sheet(sheetNo, sheetName).doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按模板写文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headClazz 表头模板</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data      数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo   sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetName sheet名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(OutputStream outputStream, Class headClazz, List data, Integer sheetNo, String sheetName)</span> &#123;</span><br><span class="line">        EasyExcel.write(outputStream, headClazz).sheet(sheetNo, sheetName).doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按模板写文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headClazz 表头模板</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data      数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo   sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetName sheet名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(File file, Class headClazz, List data, Integer sheetNo, String sheetName)</span> &#123;</span><br><span class="line">        EasyExcel.write(file, headClazz).sheet(sheetNo, sheetName).doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按模板写文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headClazz    表头模板</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data         数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> writeHandler 自定义的处理器，比如设置table样式，设置超链接、单元格下拉框等等功能都可以通过这个实现（需要注册多个则自己通过链式去调用）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo      sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetName    sheet名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String filePath, Class headClazz, List data, WriteHandler writeHandler, Integer sheetNo, String sheetName)</span> &#123;</span><br><span class="line">        EasyExcel.write(filePath, headClazz).registerWriteHandler(writeHandler).sheet(sheetNo, sheetName).doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按模板写文件（包含某些字段）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headClazz   表头模板</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data        数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> includeCols 包含字段集合，根据字段名称显示</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo     sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetName   sheet名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeInclude</span><span class="params">(String filePath, Class headClazz, List data, Set&lt;String&gt; includeCols, Integer sheetNo, String sheetName)</span> &#123;</span><br><span class="line">        EasyExcel.write(filePath, headClazz).includeColumnFieldNames(includeCols).sheet(sheetNo, sheetName).doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按模板写文件（排除某些字段）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headClazz   表头模板</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data        数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excludeCols 过滤排除的字段，根据字段名称过滤</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo     sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetName   sheet名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeExclude</span><span class="params">(String filePath, Class headClazz, List data, Set&lt;String&gt; excludeCols, Integer sheetNo, String sheetName)</span> &#123;</span><br><span class="line">        EasyExcel.write(filePath, headClazz).excludeColumnFieldNames(excludeCols).sheet(sheetNo, sheetName).doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 多个sheet页的数据链式写入</span></span><br><span class="line"><span class="comment">     * ExcelUtil.writeWithSheets(outputStream)</span></span><br><span class="line"><span class="comment">     * .writeModel(ExcelModel.class, excelModelList, &quot;sheetName1&quot;)</span></span><br><span class="line"><span class="comment">     * .write(headData, data,&quot;sheetName2&quot;)</span></span><br><span class="line"><span class="comment">     * .finish();</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputStream</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> EasyExcelWriterFactory <span class="title function_">writeWithSheets</span><span class="params">(OutputStream outputStream)</span> &#123;</span><br><span class="line">        <span class="type">EasyExcelWriterFactory</span> <span class="variable">excelWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EasyExcelWriterFactory</span>(outputStream);</span><br><span class="line">        <span class="keyword">return</span> excelWriter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 多个sheet页的数据链式写入</span></span><br><span class="line"><span class="comment">     * ExcelUtil.writeWithSheets(file)</span></span><br><span class="line"><span class="comment">     * .writeModel(ExcelModel.class, excelModelList, &quot;sheetName1&quot;)</span></span><br><span class="line"><span class="comment">     * .write(headData, data,&quot;sheetName2&quot;)</span></span><br><span class="line"><span class="comment">     * .finish();</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> EasyExcelWriterFactory <span class="title function_">writeWithSheets</span><span class="params">(File file)</span> &#123;</span><br><span class="line">        <span class="type">EasyExcelWriterFactory</span> <span class="variable">excelWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EasyExcelWriterFactory</span>(file);</span><br><span class="line">        <span class="keyword">return</span> excelWriter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 多个sheet页的数据链式写入</span></span><br><span class="line"><span class="comment">     * ExcelUtil.writeWithSheets(filePath)</span></span><br><span class="line"><span class="comment">     * .writeModel(ExcelModel.class, excelModelList, &quot;sheetName1&quot;)</span></span><br><span class="line"><span class="comment">     * .write(headData, data,&quot;sheetName2&quot;)</span></span><br><span class="line"><span class="comment">     * .finish();</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> EasyExcelWriterFactory <span class="title function_">writeWithSheets</span><span class="params">(String filePath)</span> &#123;</span><br><span class="line">        <span class="type">EasyExcelWriterFactory</span> <span class="variable">excelWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EasyExcelWriterFactory</span>(filePath);</span><br><span class="line">        <span class="keyword">return</span> excelWriter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 多个sheet页的数据链式写入（失败了会返回一个有部分数据的Excel）</span></span><br><span class="line"><span class="comment">     * ExcelUtil.writeWithSheets(response, exportFileName)</span></span><br><span class="line"><span class="comment">     * .writeModel(ExcelModel.class, excelModelList, &quot;sheetName1&quot;)</span></span><br><span class="line"><span class="comment">     * .write(headData, data,&quot;sheetName2&quot;)</span></span><br><span class="line"><span class="comment">     * .finish();</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exportFileName 导出的文件名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> EasyExcelWriterFactory <span class="title function_">writeWithSheetsWeb</span><span class="params">(HttpServletResponse response, String exportFileName)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(exportFileName, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xlsx&quot;</span>);</span><br><span class="line">        <span class="type">EasyExcelWriterFactory</span> <span class="variable">excelWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EasyExcelWriterFactory</span>(response.getOutputStream());</span><br><span class="line">        <span class="keyword">return</span> excelWriter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="EasyExcelWriterFactory">EasyExcelWriterFactory</h2>
<p>文件导出和模板填充实现多Sheet写入（链式使用）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EasyExcelWriterFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">sheetNo</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">ExcelWriter</span> <span class="variable">excelWriter</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EasyExcelWriterFactory</span><span class="params">(OutputStream outputStream)</span> &#123;</span><br><span class="line">        excelWriter = EasyExcel.write(outputStream).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EasyExcelWriterFactory</span><span class="params">(File file)</span> &#123;</span><br><span class="line">        excelWriter = EasyExcel.write(file).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EasyExcelWriterFactory</span><span class="params">(String filePath)</span> &#123;</span><br><span class="line">        excelWriter = EasyExcel.write(filePath).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链式模板表头写入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headClazz 表头格式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data      数据 List&lt;ExcelModel&gt; 或者List&lt;List&lt;Object&gt;&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> EasyExcelWriterFactory <span class="title function_">writeModel</span><span class="params">(Class headClazz, List data)</span> &#123;</span><br><span class="line">        excelWriter.write(data, EasyExcel.writerSheet(<span class="built_in">this</span>.sheetNo++).head(headClazz).build());</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链式模板表头写入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headClazz 表头格式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data      数据 List&lt;ExcelModel&gt; 或者List&lt;List&lt;Object&gt;&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> EasyExcelWriterFactory <span class="title function_">writeModel</span><span class="params">(Class headClazz, List data, String sheetName)</span> &#123;</span><br><span class="line">        excelWriter.write(data, EasyExcel.writerSheet(<span class="built_in">this</span>.sheetNo++, sheetName).head(headClazz).build());</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链式自定义表头写入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data      数据 List&lt;ExcelModel&gt; 或者List&lt;List&lt;Object&gt;&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> EasyExcelWriterFactory <span class="title function_">write</span><span class="params">(List&lt;List&lt;String&gt;&gt; head, List data, String sheetName)</span> &#123;</span><br><span class="line">        excelWriter.write(data, EasyExcel.writerSheet(<span class="built_in">this</span>.sheetNo++, sheetName).head(head).build());</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用此类结束后，一定要关闭流</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">finish</span><span class="params">()</span> &#123;</span><br><span class="line">        excelWriter.finish();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ExcelListener">ExcelListener</h2>
<p>文件读取大数据和多Sheet导入监听器（使用线程池和批量插入方法）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExcelListener</span> <span class="keyword">extends</span> <span class="title class_">AnalysisEventListener</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">BATCH_SIZE</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer sheetNo;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Executor executor;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; dataList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ExcelListener</span><span class="params">(Integer sheetNo, Executor executor)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sheetNo = sheetNo;</span><br><span class="line">        <span class="built_in">this</span>.executor = executor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(T data, AnalysisContext analysisContext)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;解析到一条数据：&#123;&#125;&quot;</span>, JSON.toJSONString(data));</span><br><span class="line">        dataList.add(data);</span><br><span class="line">        <span class="keyword">if</span> (dataList.size() &gt;= BATCH_SIZE) &#123;</span><br><span class="line">            CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">                <span class="comment">// 业务操作</span></span><br><span class="line">                <span class="comment">// saveToDB(dataList);</span></span><br><span class="line">            &#125;, executor);</span><br><span class="line">            dataList.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfterAllAnalysed</span><span class="params">(AnalysisContext analysisContext)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;已解析完所有数据!&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!dataList.isEmpty()) &#123;</span><br><span class="line">            CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">                <span class="comment">// 业务操作</span></span><br><span class="line">                <span class="comment">// saveToDB(dataList);</span></span><br><span class="line">            &#125;, executor);</span><br><span class="line">            dataList.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onException</span><span class="params">(Exception exception, AnalysisContext context)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ExcelDataConvertException) &#123;</span><br><span class="line">            <span class="type">ExcelDataConvertException</span> <span class="variable">convertException</span> <span class="operator">=</span> (ExcelDataConvertException) exception;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">row</span> <span class="operator">=</span> convertException.getRowIndex();</span><br><span class="line">            log.error(<span class="string">&quot;sheetNo：&#123;&#125;，第&#123;&#125;行数据转换失败，异常信息：&#123;&#125;&quot;</span>, sheetNo, row, exception.getMessage());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.error(<span class="string">&quot;导入其他异常信息：&#123;&#125;&quot;</span>, exception.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用案例">使用案例</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download1</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUserId(<span class="number">123</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        EasyExcelUtils.write(response.getOutputStream(), User.class, Arrays.asList(user));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/download2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download2</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUserId(<span class="number">123</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        EasyExcelUtils.write(response.getOutputStream(), User.class, Arrays.asList(user), <span class="number">2</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/download3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download3</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUserId(<span class="number">123</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        EasyExcelUtils.writeWithSheets(response.getOutputStream())</span><br><span class="line">                .writeModel(User.class, Arrays.asList(user))</span><br><span class="line">                .writeModel(User.class, Arrays.asList(user))</span><br><span class="line">                .finish();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>EasyExcel</tag>
      </tags>
  </entry>
  <entry>
    <title>Quartz（1-Job）</title>
    <url>/blog/2024/11/12/%E5%90%8E%E7%AB%AF/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/Quartz/Quartz%EF%BC%881-Job%EF%BC%89/</url>
    <content><![CDATA[<h2 id="依赖">依赖</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.quartz-scheduler<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="基本使用">基本使用</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloJob</span> <span class="keyword">implements</span> <span class="title class_">Job</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line">        <span class="comment">//实际触发时间。例如，计划时间可能是 10:00:00，但如果调度程序太忙，实际触发时间可能是 10:00:03。</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">fireTime</span> <span class="operator">=</span> jobExecutionContext.getFireTime();</span><br><span class="line">        System.out.println(<span class="string">&quot;fireTime:&quot;</span> + fireTime);</span><br><span class="line">        <span class="comment">//上次触发时间</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">previousFireTime</span> <span class="operator">=</span> jobExecutionContext.getPreviousFireTime();</span><br><span class="line">        System.out.println(<span class="string">&quot;previousFireTime:&quot;</span> + previousFireTime);</span><br><span class="line">        <span class="comment">//下次触发时间</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">nextFireTime</span> <span class="operator">=</span> jobExecutionContext.getNextFireTime();</span><br><span class="line">        System.out.println(<span class="string">&quot;nextFireTime:&quot;</span> + nextFireTime);</span><br><span class="line">        <span class="comment">//触发器触发的预定时间。</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">scheduledFireTime</span> <span class="operator">=</span> jobExecutionContext.getScheduledFireTime();</span><br><span class="line">        System.out.println(<span class="string">&quot;scheduledFireTime:&quot;</span> + scheduledFireTime);</span><br><span class="line"></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> jobExecutionContext.getJobDetail();</span><br><span class="line">        System.out.println(<span class="string">&quot;jobDataMap:&quot;</span> + JSON.toJSONString(jobDetail.getJobDataMap()));</span><br><span class="line">        System.out.println(<span class="string">&quot;jobKey:&quot;</span> + JSON.toJSONString(jobDetail.getKey()));</span><br><span class="line">        System.out.println(<span class="string">&quot;jobDescription:&quot;</span> + jobDetail.getDescription());</span><br><span class="line">        System.out.println(<span class="string">&quot;==================================&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SchedulerException &#123;</span><br><span class="line">        <span class="comment">//1.创建一个jobDetail的实例，将该实例与HelloJob Class绑定</span></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder</span><br><span class="line">                .newJob(HelloJob.class) <span class="comment">//定义Job类为HelloJob类，真正的执行逻辑所在</span></span><br><span class="line">                .withIdentity(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;group1&quot;</span>)</span><br><span class="line">                .withDescription(<span class="string">&quot;Quartz测试&quot;</span>)</span><br><span class="line">                .usingJobData(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;小米&quot;</span>)</span><br><span class="line">                .usingJobData(<span class="string">&quot;age&quot;</span>, <span class="number">15</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建一个Trigger触发器的实例，定义该job立即执行，并且每2秒执行一次，一直执行</span></span><br><span class="line">        <span class="type">SimpleTrigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .withIdentity(<span class="string">&quot;myTrigger&quot;</span>, <span class="string">&quot;group1&quot;</span>)</span><br><span class="line">                .startNow() <span class="comment">//立即生效</span></span><br><span class="line">                .withSchedule(SimpleScheduleBuilder.simpleSchedule()</span><br><span class="line">                        .withIntervalInSeconds(<span class="number">2</span>) <span class="comment">//每2秒执行一次</span></span><br><span class="line">                        .repeatForever()) <span class="comment">//一直执行</span></span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//3.创建schedule实例</span></span><br><span class="line">        <span class="type">StdSchedulerFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StdSchedulerFactory</span>();</span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> factory.getScheduler();</span><br><span class="line">        scheduler.start(); <span class="comment">//启动</span></span><br><span class="line">        scheduler.scheduleJob(jobDetail, trigger); <span class="comment">// jobDetail和trigger加入调度</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="JobExecutionContext">JobExecutionContext</h2>
<p>当Scheduler调用一个Job就会将JobExecutionContext传递给Job的execute()方法，Job能通过JobExecutionContext对象访问到Quartz运行时候的环境和Job本身的明细数据</p>
<h2 id="JobDetail、JobBuilder">JobDetail、JobBuilder</h2>
<h3 id="方法">方法</h3>
<h4 id="storeDurably">storeDurably</h4>
<p>JobDetails信息持久化到数据库的时候有一个属性storeDurably，如果设置为true则无论与其关联的Trigger是否存在其都会一直存在，否则只要相关联的trigger删除掉了其会自动删除掉</p>
<h4 id="requestRecovery">requestRecovery</h4>
<p>请求恢复，也就是说当应用发生故障的时候，是否重新执行默认是false。如果一个job是可恢复的，并且在其执行的时候，scheduler发生硬关闭（hard shutdown)（比如运行的进程崩溃了，或者关机了），则当scheduler重新启动的时候，该job会被重新执行。此时，该job的JobExecutionContext.isRecovering() 返回true</p>
<h4 id="usingJobData、setJobData">usingJobData、setJobData</h4>
<p>添加Job数据，每个JobDetail内都有一个JobDataMap，包含了关联到这个Job的数据，在Job类中，可以通过context取出该数据，进行业务流程处理。</p>
<h4 id="withIdentity">withIdentity</h4>
<p>给JobDetail起一个Id，方便后面检索</p>
<h4 id="withDescription">withDescription</h4>
<p>用来对job进行描述，并没有什么实际作用</p>
<h3 id="JobKey">JobKey</h3>
<p>JobKey是表明Job身份的一个对象，里面封装了Job的name和group，TriggerKey同理。当不指定group时，Quartz会用默认的组名DEFAULT</p>
<h3 id="JobDataMap">JobDataMap</h3>
<p>JobDetail是任务的定义，而Job是任务的执行逻辑，每一个JobDetail都会有一个JobDataMap，JobDataMap本质就是一个Map的扩展类，可以存储一些任务信息</p>
<h4 id="JobDataMap获取任务信息">JobDataMap获取任务信息</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloJob</span> <span class="keyword">implements</span> <span class="title class_">Job</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> jobExecutionContext.getJobDetail();</span><br><span class="line">        <span class="type">JobDataMap</span> <span class="variable">jobDataMap</span> <span class="operator">=</span> jobDetail.getJobDataMap();</span><br><span class="line">        System.out.println(<span class="string">&quot;name:&quot;</span> + jobDataMap.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;age:&quot;</span> + jobDataMap.getInt(<span class="string">&quot;age&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;jobKey:&quot;</span> + JSON.toJSONString(jobDetail.getKey()));</span><br><span class="line">        System.out.println(<span class="string">&quot;jobDescription:&quot;</span> + jobDetail.getDescription());</span><br><span class="line">        System.out.println(<span class="string">&quot;==================================&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SchedulerException &#123;</span><br><span class="line">        <span class="comment">//1.创建一个jobDetail的实例，将该实例与HelloJob Class绑定</span></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder</span><br><span class="line">                .newJob(HelloJob.class) <span class="comment">//定义Job类为HelloJob类，真正的执行逻辑所在</span></span><br><span class="line">                .withIdentity(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;group1&quot;</span>)</span><br><span class="line">                .withDescription(<span class="string">&quot;Quartz测试&quot;</span>)</span><br><span class="line">                .usingJobData(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;小米&quot;</span>)</span><br><span class="line">                .usingJobData(<span class="string">&quot;age&quot;</span>, <span class="number">15</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建一个Trigger触发器的实例，定义该job立即执行，并且每2秒执行一次，一直执行</span></span><br><span class="line">        <span class="type">SimpleTrigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .withIdentity(<span class="string">&quot;myTrigger&quot;</span>, <span class="string">&quot;group1&quot;</span>)</span><br><span class="line">                .startNow() <span class="comment">//立即生效</span></span><br><span class="line">                .withSchedule(SimpleScheduleBuilder.simpleSchedule()</span><br><span class="line">                        .withIntervalInSeconds(<span class="number">2</span>) <span class="comment">//每2秒执行一次</span></span><br><span class="line">                        .repeatForever()) <span class="comment">//一直执行</span></span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//3.创建schedule实例</span></span><br><span class="line">        <span class="type">StdSchedulerFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StdSchedulerFactory</span>();</span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> factory.getScheduler();</span><br><span class="line">        scheduler.start(); <span class="comment">//启动</span></span><br><span class="line">        scheduler.scheduleJob(jobDetail, trigger); <span class="comment">// jobDetail和trigger加入调度</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="实体类获取任务信息">实体类获取任务信息</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloJob3</span> <span class="keyword">implements</span> <span class="title class_">Job</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> Float floatJobValue;</span><br><span class="line">    <span class="keyword">private</span> Double doubleTriggerValue;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Float <span class="title function_">getFloatJobValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> floatJobValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFloatJobValue</span><span class="params">(Float floatJobValue)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.floatJobValue = floatJobValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getDoubleTriggerValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> doubleTriggerValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDoubleTriggerValue</span><span class="params">(Double doubleTriggerValue)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.doubleTriggerValue = doubleTriggerValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line">        <span class="comment">//打印当前的执行时间 例如 2017-11-22 00:00:00</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;现在的时间是：&quot;</span> + sf.format(date));</span><br><span class="line">        System.out.println(<span class="string">&quot;jobDataMap定义的message的值 : &quot;</span> + message);  <span class="comment">//打印jobDataMap定义的message的值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;jobDataMap定义的floatJobValue的值 : &quot;</span> + floatJobValue);   <span class="comment">//jobDataMap定义的floatJobValue的值</span></span><br><span class="line">		System.out.println(<span class="string">&quot;==================================&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SchedulerException &#123;</span><br><span class="line">        <span class="comment">//1.创建一个jobDetail的实例，将该实例与HelloJob Class绑定</span></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder</span><br><span class="line">                .newJob(HelloJob3.class) <span class="comment">//定义Job类为HelloJob类，真正的执行逻辑所在</span></span><br><span class="line">                .withIdentity(<span class="string">&quot;myJob&quot;</span>, <span class="string">&quot;group1&quot;</span>) <span class="comment">//定义name 和 group</span></span><br><span class="line">                .usingJobData(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;hello myJob1&quot;</span>) <span class="comment">//加入属性到jobDataMap</span></span><br><span class="line">                .usingJobData(<span class="string">&quot;FloatJobValue&quot;</span>,<span class="number">8.88f</span>) <span class="comment">//加入属性到jobDataMap</span></span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建一个Trigger触发器的实例，定义该job立即执行，并且每2秒执行一次，一直执行</span></span><br><span class="line">        <span class="type">SimpleTrigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .withIdentity(<span class="string">&quot;myTrigger&quot;</span>, <span class="string">&quot;group1&quot;</span>)</span><br><span class="line">                .startNow() <span class="comment">//立即生效</span></span><br><span class="line">                .withSchedule(SimpleScheduleBuilder.simpleSchedule()</span><br><span class="line">                        .withIntervalInSeconds(<span class="number">2</span>) <span class="comment">//每2秒执行一次</span></span><br><span class="line">                        .repeatForever()) <span class="comment">//一直执行</span></span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//3.创建schedule实例</span></span><br><span class="line">        <span class="type">StdSchedulerFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StdSchedulerFactory</span>();</span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> factory.getScheduler();</span><br><span class="line">        scheduler.start(); <span class="comment">//启动</span></span><br><span class="line">        scheduler.scheduleJob(jobDetail,trigger); <span class="comment">// jobDetail和trigger加入调度</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="注解">注解</h2>
<h3 id="PersistJobDataAfterExecution">@PersistJobDataAfterExecution</h3>
<p>有状态的Job可以理解为多次Job调用期间可以持有一些状态信息，这些状态信息存储在JobDataMap中，而默认的无状态Job每次调用时都会创建一个新的JobDataMap</p>
<p>注意：没有添加@PersistJobDataAfterExecution注解，每次调用时都会创建一个新的JobDataMap，不会累加；添加该注解后，多次调用期间可以持有一些状态信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PersistJobDataAfterExecution</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloJob4</span> <span class="keyword">implements</span> <span class="title class_">Job</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer count;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCount</span><span class="params">(Integer count)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line">        System.out.println(++count);</span><br><span class="line">        jobExecutionContext.getJobDetail().getJobDataMap().put(<span class="string">&quot;count&quot;</span>, count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SchedulerException &#123;</span><br><span class="line">        <span class="comment">//1.创建一个jobDetail的实例，将该实例与HelloJob Class绑定</span></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder</span><br><span class="line">                .newJob(HelloJob4.class) <span class="comment">//定义Job类为HelloJob类，真正的执行逻辑所在</span></span><br><span class="line">                .withIdentity(<span class="string">&quot;myJob&quot;</span>, <span class="string">&quot;group1&quot;</span>) <span class="comment">//定义name 和 group</span></span><br><span class="line">                .usingJobData(<span class="string">&quot;count&quot;</span>,<span class="number">0</span>) <span class="comment">//加入属性到jobDataMap</span></span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建一个Trigger触发器的实例，定义该job立即执行，并且每2秒执行一次，一直执行</span></span><br><span class="line">        <span class="type">SimpleTrigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .withIdentity(<span class="string">&quot;myTrigger&quot;</span>, <span class="string">&quot;group1&quot;</span>)</span><br><span class="line">                .startNow() <span class="comment">//立即生效</span></span><br><span class="line">                .withSchedule(SimpleScheduleBuilder.simpleSchedule()</span><br><span class="line">                        .withIntervalInSeconds(<span class="number">2</span>) <span class="comment">//每2秒执行一次</span></span><br><span class="line">                        .repeatForever()) <span class="comment">//一直执行</span></span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//3.创建schedule实例</span></span><br><span class="line">        <span class="type">StdSchedulerFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StdSchedulerFactory</span>();</span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> factory.getScheduler();</span><br><span class="line">        scheduler.start(); <span class="comment">//启动</span></span><br><span class="line">        scheduler.scheduleJob(jobDetail,trigger); <span class="comment">// jobDetail和trigger加入调度</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="DisallowConcurrentExecution">@DisallowConcurrentExecution</h3>
<p>禁止并发执行多个相同定义的JobDetail，这个注解是加在Job类上的，但意思并不是不能同时执行多个Job，而是不能并发执行同一个Job</p>
<p>例如：同一个Job实现类DemoJob的两个JobDetail实例A和B，设置A的定时执行频率为每1分钟执行一次，A的实际运行耗时为3分钟，B的定时执行频率也是每1分钟执行一次，B的实际运行耗时为30秒。假如在07:00分00秒时A和B同时第一次运行，则到07:00分30秒时B运行结束，此时A还在运行中，到07:01分00秒时A和B又该执行了，但是由于注解@DisallowConcurrentExecution的缘故，此时A不会再次运行，A只能在其上一次运行结束后才能再次被调用执行。但是B会正常运行（B不受A的影响，注解@DisallowConcurrentExecution是作用于JobDetail实例而不是Job实现类）</p>
<p>注意：如果你使用了@PersistJobDataAfterExecution注解，则强烈建议你同时使用@DisallowConcurrentExecution注解，因为当同一个job（JobDetail）的两个实例被并发执行时，由于竞争，JobDataMap中存储的数据很可能是不确定的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DisallowConcurrentExecution</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloJob5</span> <span class="keyword">implements</span> <span class="title class_">Job</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;现在的时间是：&quot;</span> + sf.format(date));</span><br><span class="line">        <span class="type">JobKey</span> <span class="variable">key</span> <span class="operator">=</span> jobExecutionContext.getJobDetail().getKey();</span><br><span class="line">        <span class="comment">//打印jobDetail 的name</span></span><br><span class="line">        System.out.println(<span class="string">&quot;jobDetail 的name ： &quot;</span> + key.getName());</span><br><span class="line">        <span class="comment">//打印jobDetail 的group</span></span><br><span class="line">        System.out.println(<span class="string">&quot;jobDetail 的group ： &quot;</span> + key.getGroup());</span><br><span class="line">        System.out.println(<span class="string">&quot;==============================&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SchedulerException &#123;</span><br><span class="line">        <span class="comment">//1.创建一个jobDetail的实例，将该实例与HelloJob Class绑定</span></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail1</span> <span class="operator">=</span> JobBuilder</span><br><span class="line">                .newJob(HelloJob5.class) <span class="comment">//定义Job类为HelloJob类，真正的执行逻辑所在</span></span><br><span class="line">                .withIdentity(<span class="string">&quot;group1&quot;</span>, <span class="string">&quot;group1&quot;</span>) <span class="comment">//定义name 和 group</span></span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建一个Trigger触发器的实例，定义该job立即执行，并且每2秒执行一次，一直执行</span></span><br><span class="line">        <span class="type">SimpleTrigger</span> <span class="variable">trigger1</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .withIdentity(<span class="string">&quot;myTrigger1&quot;</span>, <span class="string">&quot;group1&quot;</span>)</span><br><span class="line">                .startNow() <span class="comment">//立即生效</span></span><br><span class="line">                .withSchedule(SimpleScheduleBuilder.simpleSchedule()</span><br><span class="line">                        .withIntervalInSeconds(<span class="number">2</span>) <span class="comment">//每2秒执行一次</span></span><br><span class="line">                        .repeatForever()) <span class="comment">//一直执行</span></span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//3.创建schedule实例</span></span><br><span class="line">        <span class="type">StdSchedulerFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StdSchedulerFactory</span>();</span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> factory.getScheduler();</span><br><span class="line">        scheduler.start(); <span class="comment">//启动</span></span><br><span class="line">        scheduler.scheduleJob(jobDetail1, trigger1); <span class="comment">// jobDetail和trigger加入调度</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 运行结果：</span></span><br><span class="line">现在的时间是：<span class="number">2024</span>-<span class="number">11</span>-<span class="number">12</span> <span class="number">00</span>:<span class="number">59</span>:<span class="number">49</span></span><br><span class="line">jobDetail 的name ： group1</span><br><span class="line">jobDetail 的group ： group1</span><br><span class="line">==============================</span><br><span class="line">现在的时间是：<span class="number">2024</span>-<span class="number">11</span>-<span class="number">12</span> <span class="number">00</span>:<span class="number">59</span>:<span class="number">52</span></span><br><span class="line">jobDetail 的name ： group1</span><br><span class="line">jobDetail 的group ： group1</span><br><span class="line">==============================</span><br><span class="line">现在的时间是：<span class="number">2024</span>-<span class="number">11</span>-<span class="number">12</span> <span class="number">00</span>:<span class="number">59</span>:<span class="number">55</span></span><br><span class="line">jobDetail 的name ： group1</span><br><span class="line">jobDetail 的group ： group1</span><br><span class="line">==============================</span><br></pre></td></tr></table></figure>
<p><strong>注释@DisallowConcurrentExecution后</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 运行结果：</span></span><br><span class="line">现在的时间是：<span class="number">2024</span>-<span class="number">11</span>-<span class="number">12</span> <span class="number">01</span>:<span class="number">00</span>:<span class="number">48</span></span><br><span class="line">jobDetail 的name ： group1</span><br><span class="line">jobDetail 的group ： group1</span><br><span class="line">==============================</span><br><span class="line">现在的时间是：<span class="number">2024</span>-<span class="number">11</span>-<span class="number">12</span> <span class="number">01</span>:<span class="number">00</span>:<span class="number">50</span></span><br><span class="line">jobDetail 的name ： group1</span><br><span class="line">jobDetail 的group ： group1</span><br><span class="line">==============================</span><br><span class="line">现在的时间是：<span class="number">2024</span>-<span class="number">11</span>-<span class="number">12</span> <span class="number">01</span>:<span class="number">00</span>:<span class="number">52</span></span><br><span class="line">jobDetail 的name ： group1</span><br><span class="line">jobDetail 的group ： group1</span><br><span class="line">==============================</span><br></pre></td></tr></table></figure>
<p><strong>创建两个Job对象</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DisallowConcurrentExecution</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloJob5</span> <span class="keyword">implements</span> <span class="title class_">Job</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;现在的时间是：&quot;</span> + sf.format(date));</span><br><span class="line">        <span class="type">JobKey</span> <span class="variable">key</span> <span class="operator">=</span> jobExecutionContext.getJobDetail().getKey();</span><br><span class="line">        <span class="comment">//打印jobDetail 的name</span></span><br><span class="line">        System.out.println(<span class="string">&quot;jobDetail 的name ： &quot;</span> + key.getName());  </span><br><span class="line">        <span class="comment">//打印jobDetail 的group</span></span><br><span class="line">        System.out.println(<span class="string">&quot;jobDetail 的group ： &quot;</span> + key.getGroup());    </span><br><span class="line">        System.out.println(<span class="string">&quot;==============================&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SchedulerException &#123;</span><br><span class="line">        <span class="comment">//1.创建一个jobDetail的实例，将该实例与HelloJob Class绑定</span></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail1</span> <span class="operator">=</span> JobBuilder</span><br><span class="line">                .newJob(HelloJob5.class) <span class="comment">//定义Job类为HelloJob类，真正的执行逻辑所在</span></span><br><span class="line">                .withIdentity(<span class="string">&quot;group1&quot;</span>, <span class="string">&quot;group1&quot;</span>) <span class="comment">//定义name 和 group</span></span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建一个Trigger触发器的实例，定义该job立即执行，并且每2秒执行一次，一直执行</span></span><br><span class="line">        <span class="type">SimpleTrigger</span> <span class="variable">trigger1</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .withIdentity(<span class="string">&quot;myTrigger1&quot;</span>, <span class="string">&quot;group1&quot;</span>)</span><br><span class="line">                .startNow() <span class="comment">//立即生效</span></span><br><span class="line">                .withSchedule(SimpleScheduleBuilder.simpleSchedule()</span><br><span class="line">                        .withIntervalInSeconds(<span class="number">2</span>) <span class="comment">//每2秒执行一次</span></span><br><span class="line">                        .repeatForever()) <span class="comment">//一直执行</span></span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//3.创建schedule实例</span></span><br><span class="line">        <span class="type">StdSchedulerFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StdSchedulerFactory</span>();</span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> factory.getScheduler();</span><br><span class="line">        scheduler.start(); <span class="comment">//启动</span></span><br><span class="line">        scheduler.scheduleJob(jobDetail1, trigger1); <span class="comment">// jobDetail和trigger加入调度</span></span><br><span class="line"></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail2</span> <span class="operator">=</span> JobBuilder</span><br><span class="line">                .newJob(HelloJob5.class) <span class="comment">//定义Job类为HelloJob类，真正的执行逻辑所在</span></span><br><span class="line">                .withIdentity(<span class="string">&quot;group2&quot;</span>, <span class="string">&quot;group2&quot;</span>) <span class="comment">//定义name 和 group</span></span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建一个Trigger触发器的实例，定义该job立即执行，并且每2秒执行一次，一直执行</span></span><br><span class="line">        <span class="type">SimpleTrigger</span> <span class="variable">trigger2</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .withIdentity(<span class="string">&quot;myTrigger2&quot;</span>, <span class="string">&quot;group2&quot;</span>)</span><br><span class="line">                .startNow() <span class="comment">//立即生效</span></span><br><span class="line">                .withSchedule(SimpleScheduleBuilder.simpleSchedule()</span><br><span class="line">                        .withIntervalInSeconds(<span class="number">3</span>) <span class="comment">//每3秒执行一次</span></span><br><span class="line">                        .repeatForever()) <span class="comment">//一直执行</span></span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//3.创建schedule实例</span></span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler2</span> <span class="operator">=</span> factory.getScheduler();</span><br><span class="line">        scheduler2.start(); <span class="comment">//启动</span></span><br><span class="line">        scheduler2.scheduleJob(jobDetail2, trigger2); <span class="comment">// jobDetail和trigger加入调度</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line">现在的时间是：<span class="number">2024</span>-<span class="number">11</span>-<span class="number">12</span> <span class="number">01</span>:08:<span class="number">37</span></span><br><span class="line">现在的时间是：<span class="number">2024</span>-<span class="number">11</span>-<span class="number">12</span> <span class="number">01</span>:08:<span class="number">37</span></span><br><span class="line">jobDetail 的name ： group2</span><br><span class="line">jobDetail 的name ： group1</span><br><span class="line">jobDetail 的group ： group1</span><br><span class="line">jobDetail 的group ： group2</span><br><span class="line">==============================</span><br><span class="line">==============================</span><br><span class="line">现在的时间是：<span class="number">2024</span>-<span class="number">11</span>-<span class="number">12</span> <span class="number">01</span>:08:<span class="number">40</span></span><br><span class="line">jobDetail 的name ： group2</span><br><span class="line">jobDetail 的group ： group2</span><br><span class="line">==============================</span><br><span class="line">现在的时间是：<span class="number">2024</span>-<span class="number">11</span>-<span class="number">12</span> <span class="number">01</span>:08:<span class="number">40</span></span><br><span class="line">jobDetail 的name ： group1</span><br><span class="line">jobDetail 的group ： group1</span><br><span class="line">==============================</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>定时任务</tag>
        <tag>Quartz</tag>
      </tags>
  </entry>
  <entry>
    <title>Quartz（3-Scheduler）</title>
    <url>/blog/2024/11/14/%E5%90%8E%E7%AB%AF/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/Quartz/Quartz%EF%BC%883-Scheduler%EF%BC%89/</url>
    <content><![CDATA[<h2 id="BaseCalendar">BaseCalendar</h2>
<p>专门用于屏蔽一个时间区间，使Trigger在这个区间中不被触发</p>
<p><img src="1.png" alt=""></p>
<h3 id="AnnualCalendar">AnnualCalendar</h3>
<p>排除每一年中指定的一天或多少天，精度是天</p>
<h3 id="CronCalendar">CronCalendar</h3>
<p>使用表达式排除某些时间段不执行，精度取决于Cron表达式，最大精度到秒</p>
<h3 id="DailyCalendar">DailyCalendar</h3>
<p>指定的时间范围内的每一天不执行，指定每天的时间段，格式是HH:MM[:SS[mmm]]，即最大精度可以到毫秒</p>
<h3 id="HolidayCalendar">HolidayCalendar</h3>
<p>排除节假日，精度到天</p>
<h3 id="MonthlyCalendar">MonthlyCalendar</h3>
<p>排除月份中的数天，可选值为1-31，精度是天</p>
<h3 id="WeeklyCalendar">WeeklyCalendar</h3>
<p>排除星期中的一天或多天，可选值比如为：java.util.Calendar.SUNDAY，精度是天</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalendarSchedule</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SchedulerException &#123;</span><br><span class="line">        <span class="comment">//创建一个JobDetail的实例，将该实例与HelloJob绑定</span></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder.newJob(HelloJob.class)</span><br><span class="line">                                .withIdentity(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">                                .build();</span><br><span class="line">        <span class="type">AnnualCalendar</span> <span class="variable">holidays</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnualCalendar</span>();</span><br><span class="line">        <span class="comment">// 排除今天的时间2017年11月27日（月份是从0～11的）</span></span><br><span class="line">        <span class="type">GregorianCalendar</span> <span class="variable">nationalDay</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GregorianCalendar</span>(<span class="number">2017</span>, <span class="number">10</span>, <span class="number">27</span>);  </span><br><span class="line">        <span class="comment">// 排除的日期，如果为false则为包含</span></span><br><span class="line">        holidays.setDayExcluded(nationalDay,<span class="literal">true</span>); </span><br><span class="line"></span><br><span class="line">        <span class="type">Trigger</span> <span class="variable">simpleTrigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .withIdentity(<span class="string">&quot;testTrigger&quot;</span>)</span><br><span class="line">                .withSchedule(SimpleScheduleBuilder.simpleSchedule()</span><br><span class="line">                              .withIntervalInSeconds(<span class="number">1</span>)</span><br><span class="line">                              .repeatForever()) <span class="comment">//每一秒执行一次job</span></span><br><span class="line">                .modifiedByCalendar(<span class="string">&quot;holidays&quot;</span>)   <span class="comment">//将我们设置好的Calander与trigger绑定</span></span><br><span class="line">                .build();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//创建Scheduler实例</span></span><br><span class="line">        <span class="type">StdSchedulerFactory</span> <span class="variable">stdSchedulerFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StdSchedulerFactory</span>();</span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> stdSchedulerFactory.getScheduler();</span><br><span class="line">        <span class="comment">//向Scheduler注册日历</span></span><br><span class="line">        scheduler.addCalendar(<span class="string">&quot;holidays&quot;</span>,holidays,<span class="literal">false</span>,<span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//让trigger应用指定的日历规则</span></span><br><span class="line">        scheduler.scheduleJob(jobDetail,simpleTrigger);</span><br><span class="line">        scheduler.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="定时任务增删改查">定时任务增删改查</h2>
<p><strong>参考Scheduler源码中的方法</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定时任务</span></span><br><span class="line"><span class="attr">quartz:</span></span><br><span class="line">  <span class="attr">jobs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">myName</span> <span class="comment">#（随便取任务名）</span></span><br><span class="line">      <span class="attr">group:</span> <span class="string">collect</span></span><br><span class="line">      <span class="attr">cron:</span> <span class="number">0</span> <span class="number">0</span><span class="string">/5</span> <span class="string">*</span> <span class="string">*</span> <span class="string">*</span> <span class="string">?</span> <span class="string">*</span></span><br><span class="line">      <span class="attr">jobClass:</span> <span class="string">com.gamer.me.quartz.jobs.MyJob</span> <span class="comment">#（自己的定时任务的执行类，也就是你写业务代码的类）</span></span><br><span class="line">      <span class="attr">desc:</span> <span class="string">我的任务</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SchedulerJob</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String group;</span><br><span class="line">    <span class="keyword">private</span> String cron;</span><br><span class="line">    <span class="keyword">private</span> String jobClass;</span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;quartz&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SchedulerJobs</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;SchedulerJob&gt; jobs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SchedulerManager</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Scheduler scheduler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 激活任务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> schedulerJob</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">activeJob</span><span class="params">(SchedulerJob schedulerJob)</span>&#123;</span><br><span class="line">        <span class="type">JobKey</span> <span class="variable">jobKey</span> <span class="operator">=</span> JobKey.jobKey(schedulerJob.getName(), schedulerJob.getGroup());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (scheduler.checkExists(jobKey) &amp;&amp; !MonitorCronJob.JOB_NAME.equals(schedulerJob.getName())) &#123;</span><br><span class="line">                updateJob(schedulerJob);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                createJob(schedulerJob);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;activeJob &#123;&#125;&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建任务并加入调度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> schedulerJob</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createJob</span><span class="params">(SchedulerJob schedulerJob)</span>&#123;</span><br><span class="line">        <span class="type">JobKey</span> <span class="variable">jobKey</span> <span class="operator">=</span> JobKey.jobKey(schedulerJob.getName(), schedulerJob.getGroup());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (scheduler.checkExists(jobKey)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Class&lt;?&gt; clazz = Class.forName(schedulerJob.getJobClass());</span><br><span class="line">            <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> getJobDetail(schedulerJob, (Class&lt;Job&gt;) clazz);</span><br><span class="line">            <span class="type">Trigger</span> <span class="variable">cronTrigger</span> <span class="operator">=</span> getCronTrigger(schedulerJob);</span><br><span class="line">            <span class="comment">//加入调度器</span></span><br><span class="line">            scheduler.scheduleJob(jobDetail, cronTrigger);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | SchedulerException e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;createJob &#123;&#125;&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新任务触发器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> schedulerJob</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateJob</span><span class="params">(SchedulerJob schedulerJob)</span>&#123;</span><br><span class="line">        <span class="type">TriggerKey</span> <span class="variable">triggerKey</span> <span class="operator">=</span> TriggerKey.triggerKey(schedulerJob.getName(), schedulerJob.getGroup());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Trigger</span> <span class="variable">trigger</span> <span class="operator">=</span> scheduler.getTrigger(triggerKey);</span><br><span class="line">            <span class="keyword">if</span> (trigger == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">JobKey</span> <span class="variable">jobKey</span> <span class="operator">=</span> trigger.getJobKey();</span><br><span class="line">            <span class="comment">//查询cron</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">oldCron</span> <span class="operator">=</span> ((CronTrigger)trigger).getCronExpression();</span><br><span class="line">            <span class="comment">//没有变化则返回</span></span><br><span class="line">            <span class="keyword">if</span> (oldCron.equals(schedulerJob.getCron()))&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Trigger</span> <span class="variable">cronTrigger</span> <span class="operator">=</span> getCronTrigger(schedulerJob);</span><br><span class="line">            <span class="comment">//加入调度器</span></span><br><span class="line">            scheduler.rescheduleJob(triggerKey, cronTrigger);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;updateJob &#123;&#125;&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteJobs</span><span class="params">(List&lt;JobKey&gt; jobKeys)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            scheduler.deleteJobs(jobKeys);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;deleteJobs &#123;&#125;&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建任务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> schedulerJob</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> JobDetail <span class="title function_">getJobDetail</span><span class="params">(SchedulerJob schedulerJob, Class&lt;Job&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> JobBuilder.newJob()</span><br><span class="line">                .ofType(clazz)</span><br><span class="line">                .withIdentity(schedulerJob.getName(), schedulerJob.getGroup())</span><br><span class="line">                .withDescription(schedulerJob.getDesc())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建触发器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> schedulerJob</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Trigger <span class="title function_">getCronTrigger</span><span class="params">(SchedulerJob schedulerJob)</span> &#123;</span><br><span class="line">        <span class="type">CronScheduleBuilder</span> <span class="variable">cronScheduleBuilder</span> <span class="operator">=</span> CronScheduleBuilder.cronSchedule(schedulerJob.getCron());</span><br><span class="line">        <span class="keyword">if</span> (!MonitorCronJob.JOB_NAME.equals(schedulerJob.getName()))&#123;</span><br><span class="line">            <span class="comment">//任务错过执行策略，以错过的第一个频率时间立刻开始执行，重做错过的所有频率周期后，当下一次触发频率发生时间大于当前时间后，再按照正常的Cron频率依次执行</span></span><br><span class="line">            cronScheduleBuilder.withMisfireHandlingInstructionIgnoreMisfires();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .withIdentity(schedulerJob.getName(), schedulerJob.getGroup())</span><br><span class="line">                .withDescription(schedulerJob.getDesc())</span><br><span class="line">                .withSchedule(cronScheduleBuilder)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>监控其他定时任务的总任务MonitorCronJob（用于监控cron的更新）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MonitorCronJob</span> <span class="keyword">implements</span> <span class="title class_">Job</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">JOB_NAME</span> <span class="operator">=</span> <span class="string">&quot;monitor_cron&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">GROUP_NAME</span> <span class="operator">=</span> <span class="string">&quot;monitor&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CRON</span> <span class="operator">=</span> <span class="string">&quot;0 0/10 * * * ?&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DESC</span> <span class="operator">=</span> <span class="string">&quot;监控cron更新&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SchedulerManager schedulerManager;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SchedulerJobs schedulerJobs;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ContextRefresher contextRefresher;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line">        <span class="comment">//重新加载配置</span></span><br><span class="line">        contextRefresher.refresh();</span><br><span class="line">        Set&lt;JobKey&gt; oldJobKeys = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            oldJobKeys = jobExecutionContext.getScheduler().getJobKeys(GroupMatcher.anyJobGroup());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;MonitorCronJob &#123;&#125;&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; newJobKeys = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (SchedulerJob job : schedulerJobs.getJobs()) &#123;</span><br><span class="line">            <span class="comment">//过滤掉monitor_cron任务</span></span><br><span class="line">            <span class="keyword">if</span> (job.getName().equals(JOB_NAME)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            newJobKeys.add(job.getName());</span><br><span class="line">            logger.info(<span class="string">&quot;job【&#123;&#125;】,cron【&#123;&#125;】&quot;</span>, job.getName(), job.getCron());</span><br><span class="line">            schedulerManager.activeJob(job);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (oldJobKeys == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//删除没有配置的任务</span></span><br><span class="line">        List&lt;JobKey&gt; shouldDeleteJobKeys = oldJobKeys.stream()</span><br><span class="line">                .filter(jobKey -&gt; !JOB_NAME.equals(jobKey.getName()) &amp;&amp; !newJobKeys.contains(jobKey.getName()))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        logger.info(<span class="string">&quot;delete jobs &#123;&#125;&quot;</span>, shouldDeleteJobKeys);</span><br><span class="line">        schedulerManager.deleteJobs(shouldDeleteJobKeys);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Initialization</span> <span class="keyword">implements</span> <span class="title class_">ApplicationRunner</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SchedulerManager schedulerManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SchedulerJob</span> <span class="variable">schedulerJob</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SchedulerJob</span>();</span><br><span class="line">        schedulerJob.setName(MonitorCronJob.JOB_NAME);</span><br><span class="line">        schedulerJob.setGroup(MonitorCronJob.GROUP_NAME);</span><br><span class="line">        schedulerJob.setCron(MonitorCronJob.CRON);</span><br><span class="line">        schedulerJob.setDesc(MonitorCronJob.DESC);</span><br><span class="line">        schedulerJob.setJobClass(MonitorCronJob.class.getName());</span><br><span class="line">        schedulerManager.activeJob(schedulerJob);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>定时任务</tag>
        <tag>Quartz</tag>
      </tags>
  </entry>
  <entry>
    <title>Quartz（2-Trigger）</title>
    <url>/blog/2024/11/13/%E5%90%8E%E7%AB%AF/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/Quartz/Quartz%EF%BC%882-Trigger%EF%BC%89/</url>
    <content><![CDATA[<h2 id="Trigger">Trigger</h2>
<h3 id="方法">方法</h3>
<h4 id="优先级（priority）">优先级（priority）</h4>
<p>如果你的trigger很多（或者Quartz线程池的工作线程太少），Quartz可能没有足够的资源同时触发所有的trigger；这种情况下，你可能希望控制哪些trigger优先使用Quartz的工作线程，要达到该目的，可以在trigger上设置priority属性。</p>
<p>比如，你有N个trigger需要同时触发，但只有Z个工作线程，优先级最高的Z个trigger会被首先触发</p>
<h4 id="错过触发（misfire-instructions）">错过触发（misfire instructions）</h4>
<p>如果scheduler关闭了，或者Quartz线程池中没有可用的线程来执行job，此时持久性的trigger就会错过(miss)其触发时间，即错过触发(misfire)。当下次调度器启动或者有可以线程时，会检查处于misfire状态的Trigger。而misfire的状态值决定了调度器如何处理这个Trigger。</p>
<p>不同类型的trigger，有不同的misfire机制。它们默认都使用“智能机制（smart policy）”，即根据trigger的类型和配置动态调整行为</p>
<h3 id="分类">分类</h3>
<p><img src="1.png" alt=""></p>
<h2 id="SimpleTrigger">SimpleTrigger</h2>
<p>为需要在特定的日期/时间启动，且以一个可能的间隔时间重复执行n次的job所设计的</p>
<ol>
<li>startNow()：Scheduler开始执行时，触发器也即执行</li>
<li>startAt()：在指定的时间开始执行</li>
<li>endAt()：结束时间</li>
</ol>
<p>执行间隔：</p>
<ol>
<li>withInterval(TimeSpan timeSpan)：通用的间隔执行方法</li>
<li>withIntervalInHours(int hours)：以小时为间隔单位进行执行</li>
<li>withIntervalInMinutes(int minutes)：以分钟为间隔单位进行执行</li>
<li>withIntervalInSeconds(int seconds)：以秒为间隔单位进行执行</li>
</ol>
<p>执行时间：</p>
<ol>
<li>withRepeatCount(int repeatCount)：执行多少次以后结束</li>
<li>repeatForever()：永远执行</li>
<li>repeatMinutelyForever()：一分钟执行一次(永远执行)</li>
<li>repeatMinutelyForever(int minutes)：每隔几分钟执行一次(永远执行)</li>
<li>repeatMinutelyForTotalCount(int count, int minutes)：每隔几分钟执行一次(执行次数为count)类似的还有秒、小时。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Trigger1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SchedulerException &#123;</span><br><span class="line">        <span class="comment">//创建一个JobDetail的实例，将该实例与HelloJob绑定</span></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder.newJob(HelloJob.class)</span><br><span class="line">                .withIdentity(<span class="string">&quot;testJob&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//开始时间 3秒钟之后 （具体时间按实际业务编写）</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">sData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        sData.setTime(sData.getTime() + <span class="number">3000</span>);</span><br><span class="line">        <span class="comment">//结束时间 20秒钟之后 （具体时间按实际业务编写）</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">eData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        eData.setTime(eData.getTime() + <span class="number">20000</span>);</span><br><span class="line">        <span class="comment">//创建一个Trigger实例，定义该job3秒之后执行，在6秒之后结束</span></span><br><span class="line">        <span class="type">SimpleTrigger</span> <span class="variable">zhlTrigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                    .withIdentity(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">                    .startAt(sData) <span class="comment">//设定开始时间</span></span><br><span class="line">                    .endAt(eData)   <span class="comment">//设定结束时间</span></span><br><span class="line">                    .withSchedule(SimpleScheduleBuilder.simpleSchedule()</span><br><span class="line">                            .withIntervalInSeconds(<span class="number">2</span>) <span class="comment">//每两秒打印一次</span></span><br><span class="line">                            .withRepeatCount(<span class="number">2</span>)) <span class="comment">// 重复2次</span></span><br><span class="line">                    .build();</span><br><span class="line">        <span class="comment">//创建Scheduler实例</span></span><br><span class="line">        <span class="type">StdSchedulerFactory</span> <span class="variable">stdSchedulerFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StdSchedulerFactory</span>();</span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> stdSchedulerFactory.getScheduler();</span><br><span class="line">        scheduler.start();</span><br><span class="line">        scheduler.scheduleJob(jobDetail, zhlTrigger);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloJob</span> <span class="keyword">implements</span> <span class="title class_">Job</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line">        <span class="comment">//打印当前的执行时间 例如 2017-11-22 00:00:00</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;现在的时间是：&quot;</span>+ sf.format(date));</span><br><span class="line">        <span class="comment">//具体的业务逻辑</span></span><br><span class="line">        System.out.println(<span class="string">&quot;具体执行的业务...&quot;</span>);</span><br><span class="line">        <span class="type">JobKey</span> <span class="variable">key</span> <span class="operator">=</span> jobExecutionContext.getJobDetail().getKey();</span><br><span class="line">        <span class="type">Trigger</span> <span class="variable">trigger</span> <span class="operator">=</span> jobExecutionContext.getTrigger();</span><br><span class="line">        System.out.println(<span class="string">&quot;开始的时间：&quot;</span>+sf.format(trigger.getStartTime()));</span><br><span class="line">        System.out.println(<span class="string">&quot;结束的事件：&quot;</span>+sf.format(trigger.getEndTime()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="CronTrigger">CronTrigger</h2>
<p>指定对应的cron表达式执行任务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Trigger2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SchedulerException &#123;</span><br><span class="line">        <span class="comment">//创建一个JobDetail的实例，将该实例与HelloJob绑定</span></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder.newJob(HelloJob.class)</span><br><span class="line">                .withIdentity(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//开始时间 3秒钟之后 （具体时间按实际业务编写）</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">sData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        sData.setTime(sData.getTime() + <span class="number">3000</span>);</span><br><span class="line">        <span class="comment">//结束时间 20秒钟之后 （具体时间按实际业务编写）</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">eData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        eData.setTime(eData.getTime() + <span class="number">20000</span>);</span><br><span class="line">        <span class="comment">//创建一个Trigger实例，定义该job3秒之后执行，在6秒之后结束</span></span><br><span class="line">        <span class="type">CronTrigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .withIdentity(<span class="string">&quot;testTrigger&quot;</span>)</span><br><span class="line">                .startAt(sData) <span class="comment">//设定开始时间</span></span><br><span class="line">                .endAt(eData)   <span class="comment">//设定结束时间</span></span><br><span class="line">                .withSchedule(CronScheduleBuilder.cronSchedule(<span class="string">&quot;0/3 * * * * ?&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//创建Scheduler实例</span></span><br><span class="line">        <span class="type">StdSchedulerFactory</span> <span class="variable">stdSchedulerFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StdSchedulerFactory</span>();</span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> stdSchedulerFactory.getScheduler();</span><br><span class="line">        scheduler.start();</span><br><span class="line">        scheduler.scheduleJob(jobDetail, trigger);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="CalendarIntervalTrigger">CalendarIntervalTrigger</h2>
<p>用来触发基于定时重复的JobDetail，Trigger将会每隔N个Calendar在Trigger中定义的时间单元触发一次，这个Trigger不适合使用SimpleTrigger完成（例如由于每一个月的时间不是固定的描述），也不适用于CronTrigger（例如每5个月）</p>
<p>相较于SimpleTrigger有两个优势：</p>
<ol>
<li>更方便，比如：每隔1小时执行，你不用自己去计算1小时等于多少毫秒。</li>
<li>支持不是固定长度的间隔，比如：间隔为月和年。但劣势是精度只能到秒。</li>
</ol>
<p>参数：</p>
<ol>
<li>interval：执行间隔</li>
<li>intervalUnit：执行间隔的单位（秒、分钟、小时、天、月、年、星期）</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Trigger4</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SchedulerException &#123;</span><br><span class="line">        <span class="comment">//创建一个JobDetail的实例，将该实例与HelloJob绑定</span></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder.newJob(HelloJob.class)</span><br><span class="line">                .withIdentity(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//开始时间 3秒钟之后 （具体时间按实际业务编写）</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">sData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        sData.setTime(sData.getTime() + <span class="number">3000</span>);</span><br><span class="line">        <span class="comment">//结束时间 20秒钟之后 （具体时间按实际业务编写）</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">eData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        eData.setTime(eData.getTime() + <span class="number">20000</span>);</span><br><span class="line">        <span class="comment">//创建一个Trigger实例，定义该job3秒之后执行，在20秒之后结束</span></span><br><span class="line">        <span class="type">CalendarIntervalTrigger</span> <span class="variable">intervalTrigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .withIdentity(<span class="string">&quot;testTrigger&quot;</span>)</span><br><span class="line">                .startAt(sData) <span class="comment">//设定开始时间</span></span><br><span class="line">                .endAt(eData)   <span class="comment">//设定结束时间</span></span><br><span class="line">                .withSchedule(CalendarIntervalScheduleBuilder.calendarIntervalSchedule()</span><br><span class="line">                        .withIntervalInSeconds(<span class="number">5</span>))	<span class="comment">// 每隔5秒执行一次</span></span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//创建Scheduler实例</span></span><br><span class="line">        <span class="type">StdSchedulerFactory</span> <span class="variable">stdSchedulerFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StdSchedulerFactory</span>();</span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> stdSchedulerFactory.getScheduler();</span><br><span class="line">        scheduler.start();</span><br><span class="line">        scheduler.scheduleJob(jobDetail, intervalTrigger);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="DailyTimeIntervalTrigger">DailyTimeIntervalTrigger</h2>
<p>指定每天的某个时间段内，以一定的时间间隔执行任务，并且可以支持星期的设置</p>
<p>适合的任务类似于：指定每天9：00至18：00，每隔10秒执行一次，并且只要周一至周五执行</p>
<p>参数：</p>
<ol>
<li>onEveryDay：每天</li>
<li>onMondayThroughFriday：周一至周五，即工作日</li>
<li>onSaturdayAndSunday：周六至周天，即休息日e</li>
<li>onDaysOfTheWeek：用数组的形式单独来指定一周中的哪几天</li>
<li>startingDailyAt：表示开始于几点 （区别于前面的StartAt）</li>
<li>endingDailyAt：表示结束于几点 （区别于前面的EndAt）</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Trigger3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SchedulerException &#123;</span><br><span class="line">        <span class="comment">//创建一个JobDetail的实例，将该实例与HelloJob绑定</span></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder.newJob(HelloJob.class)</span><br><span class="line">                .withIdentity(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//开始时间 3秒钟之后 （具体时间按实际业务编写）</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">sData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        sData.setTime(sData.getTime() + <span class="number">3000</span>);</span><br><span class="line">        <span class="comment">//结束时间 20秒钟之后 （具体时间按实际业务编写）</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">eData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        eData.setTime(eData.getTime() + <span class="number">20000</span>);</span><br><span class="line">        <span class="comment">//创建一个Trigger实例，定义该job3秒之后执行，在20秒之后结束</span></span><br><span class="line">        <span class="type">DailyTimeIntervalTrigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .withIdentity(<span class="string">&quot;testTrigger&quot;</span>)</span><br><span class="line">                .startAt(sData) <span class="comment">//设定开始时间</span></span><br><span class="line">                .endAt(eData)   <span class="comment">//设定结束时间</span></span><br><span class="line">                .withSchedule(DailyTimeIntervalScheduleBuilder.dailyTimeIntervalSchedule()</span><br><span class="line">                        .withIntervalInSeconds(<span class="number">3</span>)</span><br><span class="line">                        .onEveryDay()) <span class="comment">//每天每隔3秒执行一次</span></span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//创建Scheduler实例</span></span><br><span class="line">        <span class="type">StdSchedulerFactory</span> <span class="variable">stdSchedulerFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StdSchedulerFactory</span>();</span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> stdSchedulerFactory.getScheduler();</span><br><span class="line">        scheduler.start();</span><br><span class="line">        scheduler.scheduleJob(jobDetail, trigger);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>定时任务</tag>
        <tag>Quartz</tag>
      </tags>
  </entry>
  <entry>
    <title>Quartz（5-SpringBoot整合）</title>
    <url>/blog/2024/11/17/%E5%90%8E%E7%AB%AF/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/Quartz/Quartz%EF%BC%885-SpringBoot%E6%95%B4%E5%90%88%EF%BC%89/</url>
    <content><![CDATA[<h2 id="单机版配置">单机版配置</h2>
<h3 id="依赖">依赖</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="任务创建">任务创建</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJob</span> <span class="keyword">extends</span> <span class="title class_">QuartzJobBean</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Log</span> <span class="variable">logger</span> <span class="operator">=</span> LogFactory.getLog(TestJob.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">executeInternal</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;测试======&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>可以实现Job接口，也可以继承QuartzJobBean</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义任务描述和具体的执行时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuartzConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JobDetail <span class="title function_">jobDetail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//指定任务描述具体的实现类</span></span><br><span class="line">        <span class="keyword">return</span> JobBuilder.newJob(TestJob.class)</span><br><span class="line">                <span class="comment">// 指定任务的名称</span></span><br><span class="line">                .withIdentity(<span class="string">&quot;testJob&quot;</span>)</span><br><span class="line">                <span class="comment">// 任务描述</span></span><br><span class="line">                .withDescription(<span class="string">&quot;testJob&quot;</span>)</span><br><span class="line">                <span class="comment">// 每次任务执行后进行存储</span></span><br><span class="line">                .storeDurably()</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Trigger <span class="title function_">trigger</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//创建触发器</span></span><br><span class="line">        <span class="keyword">return</span> TriggerBuilder.newTrigger()</span><br><span class="line">                <span class="comment">// 绑定工作任务</span></span><br><span class="line">                .forJob(jobDetail())</span><br><span class="line">                <span class="comment">// 每隔 5 秒执行一次 job</span></span><br><span class="line">                .withSchedule(SimpleScheduleBuilder.repeatSecondlyForever(<span class="number">5</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>项目初始化手动创建任务</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JobInit</span> <span class="keyword">implements</span> <span class="title class_">ApplicationRunner</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ID</span> <span class="operator">=</span> <span class="string">&quot;SUMMERDAY&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Scheduler scheduler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder.newJob(TestJob.class)</span><br><span class="line">                .withIdentity(ID + <span class="string">&quot; 01&quot;</span>)</span><br><span class="line">                .storeDurably()</span><br><span class="line">                .build();</span><br><span class="line">        <span class="type">CronScheduleBuilder</span> <span class="variable">scheduleBuilder</span> <span class="operator">=</span></span><br><span class="line">                CronScheduleBuilder.cronSchedule(<span class="string">&quot;0/5 * * * * ? *&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建任务触发器</span></span><br><span class="line">        <span class="type">Trigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .forJob(jobDetail)</span><br><span class="line">                .withIdentity(ID + <span class="string">&quot; 01Trigger&quot;</span>)</span><br><span class="line">                .withSchedule(scheduleBuilder)</span><br><span class="line">                .startNow() <span class="comment">//立即執行一次任務</span></span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">// 手动将触发器与任务绑定到调度器内</span></span><br><span class="line">        scheduler.scheduleJob(jobDetail, trigger);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="yaml配置">yaml配置</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># Quartz 的配置，对应 QuartzProperties 配置类</span></span><br><span class="line">  <span class="attr">quartz:</span></span><br><span class="line">    <span class="attr">job-store-type:</span> <span class="string">memory</span> <span class="comment"># Job 存储器类型。默认为 memory 表示内存，可选 jdbc 使用数据库。</span></span><br><span class="line">    <span class="attr">auto-startup:</span> <span class="literal">true</span> <span class="comment"># Quartz 是否自动启动</span></span><br><span class="line">    <span class="attr">startup-delay:</span> <span class="number">0</span> <span class="comment"># 延迟 N 秒启动</span></span><br><span class="line">    <span class="attr">wait-for-jobs-to-complete-on-shutdown:</span> <span class="literal">true</span> <span class="comment"># 应用关闭时，是否等待定时任务执行完成。默认为 false ，建议设置为 true</span></span><br><span class="line">    <span class="attr">overwrite-existing-jobs:</span> <span class="literal">false</span> <span class="comment"># 是否覆盖已有 Job 的配置</span></span><br><span class="line">    <span class="attr">properties:</span> <span class="comment"># 添加 Quartz Scheduler 附加属性</span></span><br><span class="line">      <span class="attr">org:</span></span><br><span class="line">        <span class="attr">quartz:</span></span><br><span class="line">          <span class="attr">threadPool:</span></span><br><span class="line">            <span class="attr">threadCount:</span> <span class="number">25</span> <span class="comment"># 线程池大小。默认为 10 。</span></span><br><span class="line">            <span class="attr">threadPriority:</span> <span class="number">5</span> <span class="comment"># 线程优先级</span></span><br><span class="line">            <span class="attr">class:</span> <span class="string">org.quartz.simpl.SimpleThreadPool</span> <span class="comment"># 线程池类型</span></span><br></pre></td></tr></table></figure>
<h2 id="持久化配置">持久化配置</h2>
<h3 id="集群部署">集群部署</h3>
<p><img src="Quartz/1.png" alt=""></p>
<p>一个Quartz集群中的每个节点是一个独立的Quartz应用，它又管理着其他的节点。这就意味着你必须对每个节点分别启动或停止。Quartz集群中，独立的Quartz节点并不与另一其的节点或是管理节点通信，而是通过同一个数据库表来感知到另一Quartz应用的。因为Quartz集群依赖于数据库，所以必须首先创建Quartz数据库表，Quartz发布包中包括了所有被支持的数据库平台的SQL脚本。</p>
<h3 id="创建数据库表">创建数据库表</h3>
<p>针对不同的数据库，org.quartz.impl.jdbcjobstore 包下提供了不同建表脚本，数据库脚本放在org\quartz-scheduler\quartz\2.3.2\quartz-2.3.2.jar!包中的\org\quartz\impl\jdbcjobstore路径下</p>
<table>
<thead>
<tr>
<th>表名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>qrtz_fired_triggers</td>
<td>存储已触发的trigger相关信息</td>
</tr>
<tr>
<td>qrtz_paused_trigger_grps</td>
<td>存储已暂停的trigger组信息</td>
</tr>
<tr>
<td>qrtz_scheduler_state</td>
<td>存储Scheduler状态信息</td>
</tr>
<tr>
<td>qrtz_locks</td>
<td>存储悲观锁的信息</td>
</tr>
<tr>
<td>qrtz_simple_triggers</td>
<td>存储Simple trigger信息</td>
</tr>
<tr>
<td>qrtz_simprop_triggers</td>
<td>存储其他几种trigger信息</td>
</tr>
<tr>
<td>qrtz_cron_triggers</td>
<td>存储cron trigger信息</td>
</tr>
<tr>
<td>qrtz_blob_triggers</td>
<td>blog类型存储triggers</td>
</tr>
<tr>
<td>qrtz_triggers</td>
<td>存储已配置的trigger信息</td>
</tr>
<tr>
<td>qrtz_job_details</td>
<td>存储每一个已配置的job details</td>
</tr>
<tr>
<td>qrtz_calendars</td>
<td>以blog类型存储Calendar信息</td>
</tr>
</tbody>
</table>
<p>所有的表中都含有一个SCHED_NAME字段，对应我们配置的scheduler-name，相同Scheduler-name的节点，形成一个Quartz集群</p>
<h3 id="存储类型">存储类型</h3>
<p>Quartz提供两种基本作业存储类型：RAMJobStore和JDBC作业存储。在默认情况下Quartz将任务调度的运行信息保存在内存中，这种方法提供了最佳的性能，因为内存中数据访问最快。不足之处是缺乏数据的持久性，当程序路途停止或系统崩溃时，所有运行的信息都会丢失。</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td>RAMJobStore</td>
<td>不要外部数据库，配置容易，运行速度快</td>
<td>因为调度程序信息是存储在被分配给JVM的内存里面，所以，当应用程序停止运行时，所有调度信息将被丢失。另外因为存储到JVM内存里面，所以可以存储多少个Job和Trigger将会受到限制</td>
</tr>
<tr>
<td>JDBC作业存储</td>
<td>支持集群，因为所有的任务信息都会保存到数据库中，可以控制事物，还有就是如果应用服务器关闭或者重启，任务信息都不会丢失，并且可以恢复因服务器关闭或者重启而导致执行失败的任务</td>
<td>运行速度的快慢取决与连接数据库的快慢</td>
</tr>
</tbody>
</table>
<h3 id="事务管理类型">事务管理类型</h3>
<table>
<thead>
<tr>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>JobStoreTX</td>
<td>如果不需要将调度命令（例如添加和删除triggers）绑定到其他事务，那么可以通过使用 JobStoreTX 管理事务（这是最常见的选择）</td>
</tr>
<tr>
<td>JobStoreCMT</td>
<td>如果需要 Quartz 与其他事务（即J2EE应用程序服务器）一起工作，那么应该使用 JobStoreCMT，这种情况下，Quartz 将让应用程序服务器容器管理事务</td>
</tr>
</tbody>
</table>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#需要使用哪一种事务类型，配置文件中就指定谁</span></span><br><span class="line"><span class="comment">#org.quartz.jobStore.class=org.quartz.impl.jdbcjobstore.JobStoreTX</span></span><br><span class="line"><span class="attr">org.quartz.jobStore.class</span>=<span class="string">org.quartz.impl.jdbcjobstore.JobStoreCMT</span></span><br></pre></td></tr></table></figure>
<h3 id="数据库驱动代理">数据库驱动代理</h3>
<p>针对不同的数据库制作了不同的数据库的代理，其中使用最多的是 StdJDBCDelegate ，它是一个使用 JDBC 代码（和SQL语句）来执行其工作的委托。其他驱动代理可以在 “org.quartz.impl.jdbcjobstore” 包或其子包中找到。如 DB2v6Delegate（用于DB2版本6及更早版本），HSQLDBDelegate（HSQLDB），MSSQLDelegate（SQLServer），PostgreSQLDelegate（PostgreSQL），WeblogicDelegate（用于使用Weblogic创建的JDBC驱动程序）</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">org.quartz.jobStore.driverDelegateClass</span> = <span class="string">org.quartz.impl.jdbcjobstore.StdJDBCDelegate</span></span><br></pre></td></tr></table></figure>
<h3 id="配置信息">配置信息</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 实现对 Quartz 的自动化配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.19<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>yaml配置</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/quartz?serverTimezone=GMT%2B8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">  <span class="attr">quartz:</span></span><br><span class="line">    <span class="comment"># 使用数据库存储</span></span><br><span class="line">    <span class="attr">job-store-type:</span> <span class="string">jdbc</span></span><br><span class="line">    <span class="comment"># 相同 Scheduler 名字的节点，形成一个 Quartz 集群</span></span><br><span class="line">    <span class="attr">scheduler-name:</span> <span class="string">hyhScheduler</span></span><br><span class="line">    <span class="comment"># 应用关闭时，是否等待定时任务执行完成。默认为 false ，建议设置为 true</span></span><br><span class="line">    <span class="attr">wait-for-jobs-to-complete-on-shutdown:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">jdbc:</span></span><br><span class="line">      <span class="comment"># 是否自动使用 SQL 初始化 Quartz 表结构。这里设置成 never ，我们手动创建表结构。</span></span><br><span class="line">      <span class="attr">initialize-schema:</span> <span class="string">never</span></span><br><span class="line">      <span class="comment"># 用于初始化数据库架构的SQL文件的路径</span></span><br><span class="line">      <span class="comment">#schema: classpath:org/quartz/impl/jdbcjobstore/tables_@@platform@@.sql</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">org:</span></span><br><span class="line">        <span class="attr">quartz:</span></span><br><span class="line">          <span class="comment">#延时启动，要有足够长的时间让你的应用先启动完成后再让Scheduler启动（单位秒）</span></span><br><span class="line">          <span class="attr">startup-delay:</span> <span class="number">60</span></span><br><span class="line">          <span class="comment">#是否每次系统运行都会清空数据库中的Job信息，重新进行初始化</span></span><br><span class="line">          <span class="attr">overwrite-existing-jobs:</span> <span class="literal">false</span></span><br><span class="line">          <span class="attr">scheduler:</span></span><br><span class="line">            <span class="comment"># 默认主机名和时间戳生成实例ID,可以是任何字符串，但对于所有调度程序来说，必须是唯一的 对应qrtz_scheduler_state INSTANCE_NAME字段</span></span><br><span class="line">            <span class="attr">instanceId:</span> <span class="string">AUTO</span></span><br><span class="line">            <span class="attr">instanceName:</span> <span class="string">hyhScheduler</span></span><br><span class="line">          <span class="comment"># JobStore 相关配置</span></span><br><span class="line">          <span class="attr">jobStore:</span></span><br><span class="line">            <span class="comment"># 持久化配置</span></span><br><span class="line">            <span class="comment"># 此存储机制用于Quartz独立于应用容器的事务管理，如果是Tomcat容器管理的数据源，那我们定义的事务也不会传播给Quartz框架内部。</span></span><br><span class="line">            <span class="comment"># 通俗的讲就是不管我们的Service服务本身业务代码是否执行成功，只要代码中调用了Quartz API的数据库操作，那任务状态就永久持久化了，</span></span><br><span class="line">            <span class="comment"># 就算业务代码抛出运行时异常任务状态也不会回滚到之前的状态。与之相反的是JobStoreCMT。</span></span><br><span class="line">            <span class="attr">class:</span> <span class="string">org.quartz.impl.jdbcjobstore.JobStoreTX</span></span><br><span class="line">            <span class="comment"># JDBC代理类，仅为数据库制作了特定于数据库的代理</span></span><br><span class="line">            <span class="attr">driverDelegateClass:</span> <span class="string">org.quartz.impl.jdbcjobstore.StdJDBCDelegate</span></span><br><span class="line">            <span class="comment"># Quartz 表前缀</span></span><br><span class="line">            <span class="attr">tablePrefix:</span> <span class="string">QRTZ_</span></span><br><span class="line">            <span class="comment"># 是集群模式</span></span><br><span class="line">            <span class="attr">isClustered:</span> <span class="literal">true</span></span><br><span class="line">            <span class="comment"># 设置此实例&quot;检入&quot;与群集的其他实例的频率（以毫秒为单位）。影响检测失败实例的速度。</span></span><br><span class="line">            <span class="attr">clusterCheckinInterval:</span> <span class="number">1000</span></span><br><span class="line">            <span class="comment">#让JDBCJobStore将JobDataMaps中的所有值都作为字符串，因此可以作为键值对存储而不是在BLOB列中以其序列化形式存储，从而避免序列化的版本问题</span></span><br><span class="line">            <span class="attr">useProperties:</span> <span class="literal">false</span></span><br><span class="line">            <span class="comment">#超过这个时间还未触发的trigger，就被认为发生了misfire，默认60s。job成功触发叫fire，misfire就是未成功触发。</span></span><br><span class="line">            <span class="attr">misfireThreshold:</span> <span class="number">60000</span></span><br><span class="line">          <span class="comment"># 线程池相关配置</span></span><br><span class="line">          <span class="attr">threadPool:</span></span><br><span class="line">            <span class="comment"># 线程池大小。默认为 10</span></span><br><span class="line">            <span class="attr">threadCount:</span> <span class="number">25</span></span><br><span class="line">            <span class="comment"># 线程优先级</span></span><br><span class="line">            <span class="attr">threadPriority:</span> <span class="number">5</span></span><br><span class="line">            <span class="comment"># 线程池类型</span></span><br><span class="line">            <span class="attr">class:</span> <span class="string">org.quartz.simpl.SimpleThreadPool</span></span><br></pre></td></tr></table></figure>
<p>注意：同一集群下，instanceName必须相同，instanceId可自动生成，isClustered为true，持久化存储，指定数据库类型对应的驱动类和数据源连接。</p>
<ol start="2">
<li>自定义properties和配置类</li>
</ol>
<p><strong>quartz.properties</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#调度标识名 集群中每一个实例都必须使用相同的名称</span></span><br><span class="line"><span class="attr">org.quartz.scheduler.instanceName</span> = <span class="string">hyhScheduler</span></span><br><span class="line"><span class="comment">#ID设置为自动获取 每一个必须不同</span></span><br><span class="line"><span class="attr">org.quartz.scheduler.instanceId</span> = <span class="string">AUTO</span></span><br><span class="line"><span class="comment">#数据保存方式为持久化</span></span><br><span class="line"><span class="comment">#springboot版本2.6.x请使用：org.springframework.scheduling.quartz.LocalDataSourceJobStore</span></span><br><span class="line"><span class="comment">#org.quartz.jobStore.class=org.quartz.impl.jdbcjobstore.JobStoreTX</span></span><br><span class="line"><span class="attr">org.quartz.jobStore.class</span>=<span class="string">org.springframework.scheduling.quartz.JobStoreTX</span></span><br><span class="line"><span class="comment">#表的前缀</span></span><br><span class="line"><span class="attr">org.quartz.jobStore.tablePrefix</span> = <span class="string">QRTZ_</span></span><br><span class="line"><span class="comment">#设置为TRUE不会出现序列化非字符串类到 BLOB 时产生的类版本问题</span></span><br><span class="line"><span class="attr">org.quartz.jobStore.useProperties</span> = <span class="string">true</span></span><br><span class="line"><span class="comment">#加入集群</span></span><br><span class="line"><span class="attr">org.quartz.jobStore.isClustered</span> = <span class="string">true</span></span><br><span class="line"><span class="comment">#ThreadPool 实现的类名</span></span><br><span class="line"><span class="attr">org.quartz.threadPool.class</span> = <span class="string">org.quartz.simpl.SimpleThreadPool</span></span><br><span class="line"><span class="comment">#调度实例失效的检查时间间隔</span></span><br><span class="line"><span class="attr">org.quartz.jobStore.clusterCheckinInterval</span> = <span class="string">20000</span></span><br><span class="line"><span class="comment">#容许的最大作业延长时间</span></span><br><span class="line"><span class="attr">org.quartz.jobStore.misfireThreshold</span> = <span class="string">60000</span></span><br><span class="line"><span class="comment">#线程数量</span></span><br><span class="line"><span class="attr">org.quartz.threadPool.threadCount</span> = <span class="string">10</span></span><br><span class="line"><span class="comment">#线程优先级</span></span><br><span class="line"><span class="attr">org.quartz.threadPool.threadPriority</span> = <span class="string">5</span></span><br><span class="line"><span class="comment">#自创建父线程</span></span><br><span class="line"><span class="attr">org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread</span> = <span class="string">true</span></span><br><span class="line"><span class="comment">#org.quartz.threadPool.threadNamePrefix=liftsail</span></span><br></pre></td></tr></table></figure>
<p><strong>配置类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JobFactory</span> <span class="keyword">extends</span> <span class="title class_">AdaptableJobFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AutowireCapableBeanFactory capableBeanFactory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Job对象的实例化过程是在Quartz中进行的，注入的实体类是在Spring容器当中的 所以在job中无法注入Spring容器的实体类。</span></span><br><span class="line">    <span class="comment">// 将Job Bean也纳入到Spring容器的管理之中，Spring容器自然能够为Job Bean自动装配好所需的依赖。</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">createJobInstance</span><span class="params">(TriggerFiredBundle bundle)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 调用父类的方法，来实现对Job的实例化。</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">jobInstance</span> <span class="operator">=</span> <span class="built_in">super</span>.createJobInstance(bundle);</span><br><span class="line">        <span class="comment">// 进行注入，调用自身方法为创建好的Job实例进行属性自动装配并将其纳入到Spring容器的管理之中</span></span><br><span class="line">        capableBeanFactory.autowireBean(jobInstance);</span><br><span class="line">        <span class="keyword">return</span> jobInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JobConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> JobFactory jobFactory;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SchedulerFactoryBean <span class="title function_">schedulerFactoryBean</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SchedulerFactoryBean</span> <span class="variable">schedulerFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SchedulerFactoryBean</span>();</span><br><span class="line">        schedulerFactoryBean.setJobFactory(jobFactory);</span><br><span class="line">        <span class="comment">// 配置数据源</span></span><br><span class="line">        schedulerFactoryBean.setDataSource(dataSource);</span><br><span class="line">        <span class="comment">// 用于quartz集群，QuartzScheduler 启动时更新己存在的Job</span></span><br><span class="line">        schedulerFactoryBean.setOverwriteExistingJobs(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 延时启动，应用启动1秒后</span></span><br><span class="line">        schedulerFactoryBean.setStartupDelay(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 设置加载的配置文件</span></span><br><span class="line">        schedulerFactoryBean.setConfigLocation(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;quartz.properties&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> schedulerFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Scheduler <span class="title function_">scheduler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> schedulerFactoryBean().getScheduler();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="基本使用">基本使用</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JobInit</span> <span class="keyword">implements</span> <span class="title class_">ApplicationRunner</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ID</span> <span class="operator">=</span> <span class="string">&quot;SUMMERDAY&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Scheduler scheduler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder.newJob(SecondJob.class)</span><br><span class="line">                .withIdentity(ID + <span class="string">&quot; 02&quot;</span>)</span><br><span class="line">                .storeDurably()</span><br><span class="line">                .build();</span><br><span class="line">        <span class="type">CronScheduleBuilder</span> <span class="variable">scheduleBuilder</span> <span class="operator">=</span></span><br><span class="line">                CronScheduleBuilder.cronSchedule(<span class="string">&quot;0/10 * * * * ? *&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建任务触发器</span></span><br><span class="line">        <span class="type">Trigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .forJob(jobDetail)</span><br><span class="line">                .withIdentity(ID + <span class="string">&quot; 02Trigger&quot;</span>)</span><br><span class="line">                .withSchedule(scheduleBuilder)</span><br><span class="line">                .startNow() <span class="comment">//立即執行一次任務</span></span><br><span class="line">                .build();</span><br><span class="line">        Set&lt;Trigger&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        set.add(trigger);</span><br><span class="line">        <span class="comment">// boolean replace 表示启动时对数据库中的quartz的任务进行覆盖。</span></span><br><span class="line">        scheduler.scheduleJob(jobDetail, set, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>定时任务</tag>
        <tag>Quartz</tag>
      </tags>
  </entry>
  <entry>
    <title>Quartz（4-Listener）</title>
    <url>/blog/2024/11/16/%E5%90%8E%E7%AB%AF/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/Quartz/Quartz%EF%BC%884-Listener%EF%BC%89/</url>
    <content><![CDATA[<h2 id="ListenerManager">ListenerManager</h2>
<p>可以通过ListenerManager向scheduler中添加我们的监听器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ListenerManager</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addJobListener</span><span class="params">(JobListener jobListener)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addJobListener</span><span class="params">(JobListener jobListener, Matcher&lt;JobKey&gt; matcher)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addJobListener</span><span class="params">(JobListener jobListener, Matcher&lt;JobKey&gt; ... matchers)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addJobListener</span><span class="params">(JobListener jobListener, List&lt;Matcher&lt;JobKey&gt;&gt; matchers)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addJobListenerMatcher</span><span class="params">(String listenerName, Matcher&lt;JobKey&gt; matcher)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">removeJobListenerMatcher</span><span class="params">(String listenerName, Matcher&lt;JobKey&gt; matcher)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">setJobListenerMatchers</span><span class="params">(String listenerName, List&lt;Matcher&lt;JobKey&gt;&gt; matchers)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Matcher&lt;JobKey&gt;&gt; <span class="title function_">getJobListenerMatchers</span><span class="params">(String listenerName)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">removeJobListener</span><span class="params">(String name)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;JobListener&gt; <span class="title function_">getJobListeners</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> JobListener <span class="title function_">getJobListener</span><span class="params">(String name)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addTriggerListener</span><span class="params">(TriggerListener triggerListener)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addTriggerListener</span><span class="params">(TriggerListener triggerListener, Matcher&lt;TriggerKey&gt; matcher)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addTriggerListener</span><span class="params">(TriggerListener triggerListener, Matcher&lt;TriggerKey&gt; ... matchers)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addTriggerListener</span><span class="params">(TriggerListener triggerListener, List&lt;Matcher&lt;TriggerKey&gt;&gt; matchers)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addTriggerListenerMatcher</span><span class="params">(String listenerName, Matcher&lt;TriggerKey&gt; matcher)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">removeTriggerListenerMatcher</span><span class="params">(String listenerName, Matcher&lt;TriggerKey&gt; matcher)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">setTriggerListenerMatchers</span><span class="params">(String listenerName, List&lt;Matcher&lt;TriggerKey&gt;&gt; matchers)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Matcher&lt;TriggerKey&gt;&gt; <span class="title function_">getTriggerListenerMatchers</span><span class="params">( String listenerName)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">removeTriggerListener</span><span class="params">(String name)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;TriggerListener&gt; <span class="title function_">getTriggerListeners</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TriggerListener <span class="title function_">getTriggerListener</span><span class="params">(String name)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addSchedulerListener</span><span class="params">(SchedulerListener schedulerListener)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">removeSchedulerListener</span><span class="params">(SchedulerListener schedulerListener)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;SchedulerListener&gt; <span class="title function_">getSchedulerListeners</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Matcher">Matcher</h2>
<h3 id="KeyMatcher">KeyMatcher</h3>
<p>根据JobKey进行匹配，每个JobDetail都有一个对应的JobKey，里面存储了JobName和JobGroup来定位唯一的JobDetail</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构造匹配pickNewsJob中的JobKey的keyMatcher。</span></span><br><span class="line">KeyMatcher&lt;JobKey&gt; keyMatcher = KeyMatcher.keyEquals(pickNewsJob.getKey());</span><br><span class="line"><span class="comment">//通过这句完成我们监听器对pickNewsJob的唯一监听</span></span><br><span class="line">scheduler.getListenerManager().addJobListener(myJobListener, keyMatcher);</span><br></pre></td></tr></table></figure>
<h3 id="GroupMatcher">GroupMatcher</h3>
<p>根据组名信息匹配</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">GroupMatcher&lt;JobKey&gt; groupMatcher1 = GroupMatcher.jobGroupContains(<span class="string">&quot;group1&quot;</span>);<span class="comment">//包含特定字符串</span></span><br><span class="line">GroupMatcher&lt;JobKey&gt; groupMatcher2 = GroupMatcher.groupEndsWith(<span class="string">&quot;oup1&quot;</span>);<span class="comment">//以特定字符串结尾</span></span><br><span class="line">GroupMatcher&lt;JobKey&gt; groupMatcher3 = GroupMatcher.groupEquals(<span class="string">&quot;jgroup1&quot;</span>);<span class="comment">//以特定字符串完全匹配</span></span><br><span class="line">GroupMatcher&lt;JobKey&gt; groupMatcher4 = GroupMatcher.groupStartsWith(<span class="string">&quot;jgou&quot;</span>);<span class="comment">//以特定字符串开头</span></span><br></pre></td></tr></table></figure>
<h3 id="AndMatcher">AndMatcher</h3>
<p>对两个匹配器取交集</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">KeyMatcher&lt;JobKey&gt; keyMatcher = KeyMatcher.keyEquals(pickNewsJob.getKey());</span><br><span class="line">GroupMatcher&lt;JobKey&gt; groupMatcher = GroupMatcher.jobGroupContains(<span class="string">&quot;group1&quot;</span>);</span><br><span class="line">AndMatcher&lt;JobKey&gt; andMatcher = AndMatcher.and(keyMatcher, groupMatcher);<span class="comment">//同时满足两个入参匹配</span></span><br></pre></td></tr></table></figure>
<h3 id="OrMatcher">OrMatcher</h3>
<p>对两个匹配器取并集</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OrMatcher&lt;JobKey&gt; orMatcher = OrMatcher.or(keyMatcher, groupMatcher);<span class="comment">//满足任意一个即可</span></span><br></pre></td></tr></table></figure>
<h3 id="EverythingMatcher">EverythingMatcher</h3>
<p>局部全局匹配</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EverythingMatcher.allJobs();<span class="comment">//对全部JobListener匹配</span></span><br><span class="line">EverythingMatcher.allTriggers();<span class="comment">//对全部TriggerListener匹配</span></span><br></pre></td></tr></table></figure>
<h2 id="JobListener">JobListener</h2>
<h3 id="方法">方法</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">JobListener</span> &#123;</span><br><span class="line">    <span class="comment">//用于获取该JobListener的名称</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Scheduler在JobDetail将要被执行时调用这个方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jobToBeExecuted</span><span class="params">(JobExecutionContext context)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Scheduler在JobDetail即将被执行，但又被TriggerListener否决时会调用该方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jobExecutionVetoed</span><span class="params">(JobExecutionContext context)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Scheduler在JobDetail被执行之后调用这个方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jobWasExecuted</span><span class="params">(JobExecutionContext context, JobExecutionException jobException)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="基本使用">基本使用</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Job1</span> <span class="keyword">implements</span> <span class="title class_">Job</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line">        <span class="comment">// 输出当前时间</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">dateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">dateString</span> <span class="operator">=</span> dateFormat.format(date);</span><br><span class="line">        <span class="comment">// 工作内容</span></span><br><span class="line">        System.out.println(<span class="string">&quot;正在进行数据库的备份工作，备份数据库的时间是：&quot;</span> +dateString);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JobListener1</span> <span class="keyword">implements</span> <span class="title class_">JobListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;================================&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getSimpleName();</span><br><span class="line">        System.out.println(<span class="string">&quot;监听器的名称是：&quot;</span> +name);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jobToBeExecuted</span><span class="params">(JobExecutionContext context)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> context.getJobDetail().getKey().getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;Job的名称是：&quot;</span> +name + <span class="string">&quot;，Scheduler在JobDetail被执行之前调用这个方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jobExecutionVetoed</span><span class="params">(JobExecutionContext context)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> context.getJobDetail().getKey().getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;Job的名称是：&quot;</span> +name + <span class="string">&quot;，Scheduler在JobDetail即将被执行，但又被TriggerListener否决时会调用该方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jobWasExecuted</span><span class="params">(JobExecutionContext context, JobExecutionException jobException)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> context.getJobDetail().getKey().getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;Job的名称是：&quot;</span> +name + <span class="string">&quot;，Scheduler在JobDetail被执行之后调用这个方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1、调度器（Scheduler），从工厂中获取调度的实例（默认：实例化new StdSchedulerFactory();）</span></span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> StdSchedulerFactory.getDefaultScheduler();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、任务实例（JobDetail）定义一个任务调度实例，将该实例与HelloJobSimpleTrigger绑定，任务类需要实现Job接口</span></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder.newJob(Job1.class) <span class="comment">// 加载任务类，与HelloJob完成绑定，要求HelloJob实现Job接口</span></span><br><span class="line">                .withIdentity(<span class="string">&quot;job1&quot;</span>, <span class="string">&quot;group1&quot;</span>) <span class="comment">// 参数1：任务的名称（唯一实例）；参数2：任务组的名称</span></span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、触发器（Trigger）定义触发器，马上执行，然后每5秒重复执行一次</span></span><br><span class="line">        <span class="type">Trigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .withIdentity(<span class="string">&quot;trigger1&quot;</span>, <span class="string">&quot;group1&quot;</span>) <span class="comment">// 参数1：触发器的名称（唯一实例）；参数2：触发器组的名称</span></span><br><span class="line">                .startNow()</span><br><span class="line">                .withSchedule(SimpleScheduleBuilder.repeatSecondlyForever(<span class="number">5</span>)</span><br><span class="line">                        .withRepeatCount(<span class="number">2</span>))  <span class="comment">// 每5秒执行一次，连续执行3次后停止，默认是0</span></span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">// 4、让调度器关联任务和触发器，保证按照触发器定义的调整执行任务</span></span><br><span class="line">        scheduler.scheduleJob(jobDetail, trigger);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建并注册一个局部的Job Listener，表示指定的任务Job</span></span><br><span class="line">        scheduler.getListenerManager().addJobListener(<span class="keyword">new</span> <span class="title class_">JobListener1</span>(), KeyMatcher.keyEquals(JobKey.jobKey(<span class="string">&quot;job1&quot;</span>, <span class="string">&quot;group1&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5、启动</span></span><br><span class="line">        scheduler.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 执行结果：</span></span><br><span class="line">================================</span><br><span class="line">监听器的名称是：Listener1</span><br><span class="line">================================</span><br><span class="line">监听器的名称是：Listener1</span><br><span class="line">================================</span><br><span class="line">监听器的名称是：Listener1</span><br><span class="line">================================</span><br><span class="line">监听器的名称是：Listener1</span><br><span class="line">================================</span><br><span class="line">监听器的名称是：Listener1</span><br><span class="line">Job的名称是：job1，Scheduler在JobDetail被执行之前调用这个方法</span><br><span class="line">正在进行数据库的备份工作，备份数据库的时间是：<span class="number">2024</span>-<span class="number">11</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">20</span>:<span class="number">11</span></span><br><span class="line">================================</span><br><span class="line">监听器的名称是：Listener1</span><br><span class="line">Job的名称是：job1，Scheduler在JobDetail被执行之后调用这个方法</span><br><span class="line">================================</span><br><span class="line">监听器的名称是：Listener1</span><br><span class="line">Job的名称是：job1，Scheduler在JobDetail被执行之前调用这个方法</span><br><span class="line">正在进行数据库的备份工作，备份数据库的时间是：<span class="number">2024</span>-<span class="number">11</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">20</span>:<span class="number">16</span></span><br><span class="line">================================</span><br><span class="line">监听器的名称是：Listener1</span><br><span class="line">Job的名称是：job1，Scheduler在JobDetail被执行之后调用这个方法</span><br><span class="line">================================</span><br><span class="line">监听器的名称是：Listener1</span><br><span class="line">Job的名称是：job1，Scheduler在JobDetail被执行之前调用这个方法</span><br><span class="line">正在进行数据库的备份工作，备份数据库的时间是：<span class="number">2024</span>-<span class="number">11</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">20</span>:<span class="number">21</span></span><br><span class="line">================================</span><br><span class="line">监听器的名称是：Listener1</span><br><span class="line">Job的名称是：job1，Scheduler在JobDetail被执行之后调用这个方法</span><br></pre></td></tr></table></figure>
<h2 id="TriggerListener">TriggerListener</h2>
<h3 id="方法-2">方法</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TriggerListener</span> &#123;</span><br><span class="line">    <span class="comment">//用于获取触发器的名称</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//当与监听器关联的Trigger被触发，Job上的Execute()方法将被执行时，Scheduler就调用该方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">triggerFired</span><span class="params">(Trigger trigger, JobExecutionContext context)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//在Trigger触发后，Job将要执行时由Scheduler调用这个方法。TriggerListener给了一个选择去否决Job的执行。</span></span><br><span class="line">    <span class="comment">//假如这个方法返回true，这个Job将不会为此次Trigger触发而得到执行。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">vetoJobExecution</span><span class="params">(Trigger trigger, JobExecutionContext context)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Scheduler调用这个方法是在Trigger错过触发时。你应该关注此方法中持续时间长的逻辑：</span></span><br><span class="line">    <span class="comment">//在出现许多错过触发的Trigger时，长逻辑会导致骨牌效应。你应当保持这个方法尽量的小。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">triggerMisfired</span><span class="params">(Trigger trigger)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Trigger被触发并且完成了Job的执行时，Scheduler调用这个方法。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">triggerComplete</span><span class="params">(Trigger trigger, JobExecutionContext context, CompletedExecutionInstruction triggerInstructionCode)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="基本使用-2">基本使用</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TriggerListener1</span> <span class="keyword">implements</span> <span class="title class_">TriggerListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=========================&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getSimpleName();</span><br><span class="line">        System.out.println(<span class="string">&quot;触发器的名称是：&quot;</span> +name);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">triggerFired</span><span class="params">(Trigger trigger, JobExecutionContext context)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getSimpleName();</span><br><span class="line">        System.out.println(name +<span class="string">&quot;被触发&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">vetoJobExecution</span><span class="params">(Trigger trigger, JobExecutionContext context)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getSimpleName();</span><br><span class="line">        <span class="comment">// TriggerListener给了一个选择去否决Job的执行。假如这个方法返回true，这个Job将不会为此次Trigger触发而得到执行。</span></span><br><span class="line">        System.out.println(name +<span class="string">&quot;否决没有被触发&quot;</span>);</span><br><span class="line">        <span class="comment">// true:表示不会执行Job的方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">triggerMisfired</span><span class="params">(Trigger trigger)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getSimpleName();</span><br><span class="line">        <span class="comment">// Scheduler调用这个方法是在Trigger错过触发时</span></span><br><span class="line">        System.out.println(name +<span class="string">&quot;错过触发&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">triggerComplete</span><span class="params">(Trigger trigger, JobExecutionContext context,</span></span><br><span class="line"><span class="params">                                Trigger.CompletedExecutionInstruction triggerInstructionCode)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getSimpleName();</span><br><span class="line">        <span class="comment">// Trigger被触发并且完成了Job的执行时，Scheduler调用这个方法。</span></span><br><span class="line">        System.out.println(name +<span class="string">&quot;完成之后触发&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1、调度器（Scheduler），从工厂中获取调度的实例（默认：实例化new StdSchedulerFactory();）</span></span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> StdSchedulerFactory.getDefaultScheduler();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、任务实例（JobDetail）定义一个任务调度实例，将该实例与HelloJobSimpleTrigger绑定，任务类需要实现Job接口</span></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder.newJob(Job1.class) <span class="comment">// 加载任务类，与HelloJob完成绑定，要求HelloJob实现Job接口</span></span><br><span class="line">                .withIdentity(<span class="string">&quot;job1&quot;</span>, <span class="string">&quot;group1&quot;</span>) <span class="comment">// 参数1：任务的名称（唯一实例）；参数2：任务组的名称</span></span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、触发器（Trigger）定义触发器，马上执行，然后每5秒重复执行一次</span></span><br><span class="line">        <span class="type">Trigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .withIdentity(<span class="string">&quot;trigger1&quot;</span>, <span class="string">&quot;group1&quot;</span>) <span class="comment">// 参数1：触发器的名称（唯一实例）；参数2：触发器组的名称</span></span><br><span class="line">                .startNow()</span><br><span class="line">                .withSchedule(SimpleScheduleBuilder.repeatSecondlyForever(<span class="number">5</span>)</span><br><span class="line">                        .withRepeatCount(<span class="number">2</span>))  <span class="comment">// 每5秒执行一次，连续执行3次后停止，默认是0</span></span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">// 4、让调度器关联任务和触发器，保证按照触发器定义的调整执行任务</span></span><br><span class="line">        scheduler.scheduleJob(jobDetail, trigger);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建并注册一个局部的Job Listener，表示指定的任务Job</span></span><br><span class="line"><span class="comment">//        scheduler.getListenerManager().addJobListener(new JobListener1(), KeyMatcher.keyEquals(JobKey.jobKey(&quot;job1&quot;, &quot;group1&quot;)));</span></span><br><span class="line">        scheduler.getListenerManager().addTriggerListener(<span class="keyword">new</span> <span class="title class_">TriggerListener1</span>(), KeyMatcher.keyEquals(TriggerKey.triggerKey(<span class="string">&quot;trigger1&quot;</span>, <span class="string">&quot;group1&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5、启动</span></span><br><span class="line">        scheduler.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 执行结果：</span></span><br><span class="line">=========================</span><br><span class="line">触发器的名称是：TriggerListener1</span><br><span class="line">=========================</span><br><span class="line">触发器的名称是：TriggerListener1</span><br><span class="line">=========================</span><br><span class="line">触发器的名称是：TriggerListener1</span><br><span class="line">=========================</span><br><span class="line">触发器的名称是：TriggerListener1</span><br><span class="line">=========================</span><br><span class="line">触发器的名称是：TriggerListener1</span><br><span class="line">TriggerListener1被触发</span><br><span class="line">TriggerListener1否决没有被触发</span><br><span class="line">正在进行数据库的备份工作，备份数据库的时间是：<span class="number">2024</span>-<span class="number">11</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">34</span>:<span class="number">59</span></span><br><span class="line">=========================</span><br><span class="line">触发器的名称是：TriggerListener1</span><br><span class="line">TriggerListener1完成之后触发</span><br><span class="line">=========================</span><br><span class="line">触发器的名称是：TriggerListener1</span><br><span class="line">TriggerListener1被触发</span><br><span class="line">TriggerListener1否决没有被触发</span><br><span class="line">正在进行数据库的备份工作，备份数据库的时间是：<span class="number">2024</span>-<span class="number">11</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">35</span>:<span class="number">04</span></span><br><span class="line">=========================</span><br><span class="line">触发器的名称是：TriggerListener1</span><br><span class="line">TriggerListener1完成之后触发</span><br><span class="line">=========================</span><br><span class="line">触发器的名称是：TriggerListener1</span><br><span class="line">TriggerListener1被触发</span><br><span class="line">TriggerListener1否决没有被触发</span><br><span class="line">正在进行数据库的备份工作，备份数据库的时间是：<span class="number">2024</span>-<span class="number">11</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">35</span>:09</span><br><span class="line">=========================</span><br><span class="line">触发器的名称是：TriggerListener1</span><br><span class="line">TriggerListener1完成之后触发</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong></p>
<p>Job和Trigger监听器的调用顺序：</p>
<ol>
<li>成功时：triggerFired=&gt;vetoJobExecution=&gt;jobToBeExecuted=&gt;jobWasExecuted=&gt;triggerComplete</li>
<li>失败时：triggerFired=&gt;vetoJobExecution=&gt;jobExecutionVetoed</li>
</ol>
<h2 id="SchedulerListener">SchedulerListener</h2>
<h3 id="方法-3">方法</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SchedulerListener</span> &#123;</span><br><span class="line">    <span class="comment">//用于部署JobDetail时调用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jobScheduled</span><span class="params">(Trigger trigger)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//用于卸载JobDetail时调用。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jobUnscheduled</span><span class="params">(TriggerKey triggerKey)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//当一个Trigger来到了再也不会触发的状态时调用这个方法。除非这个Job已设置成了持久性，否则它就会从Scheduler中移除</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">triggerFinalized</span><span class="params">(Trigger trigger)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Scheduler调用这个方法是发生在一个Trigger或Trigger组被暂停时。假如是Trigger组的话，triggerName参数将为null</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">triggersPaused</span><span class="params">(String triggerGroup)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Scheduler调用这个方法是发生在一个Trigger或Trigger组从暂停中恢复时。假如是Trigger组的话，triggerName参数将为null</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">triggersResumed</span><span class="params">(String triggerGroup)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//当一个或一组JobDetail暂停时调用这个方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jobsPaused</span><span class="params">(String jobGroup)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//当一个或一组Job从暂停上恢复时调用这个方法。假如是一个Job组，jobName将为null</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jobsResumed</span><span class="params">(String jobGroup)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//在Scheduler的正常运行期间产生一个严重错误时调用这个方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">schedulerError</span><span class="params">(String msg, SchedulerException cause)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//当Scheduler开启时，调用该方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">schedulerStarted</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//当Scheduler处于StandBy模式时，调用该方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">schedulerInStandbyMode</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//当Scheduler停止时，调用该方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">schedulerShutdown</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//当Scheduler中的数据被清除时，调用该方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">schedulingDataCleared</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="基本使用-3">基本使用</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SchedulerListener1</span> <span class="keyword">implements</span> <span class="title class_">SchedulerListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jobScheduled</span><span class="params">(Trigger trigger)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> trigger.getKey().getName();</span><br><span class="line">        <span class="comment">// 用于部署JobDetail时调用</span></span><br><span class="line">        System.out.println(name +<span class="string">&quot; 完成部署&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jobUnscheduled</span><span class="params">(TriggerKey triggerKey)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> triggerKey.getName();</span><br><span class="line">        <span class="comment">// 用于卸载JobDetail时调用</span></span><br><span class="line">        System.out.println(name +<span class="string">&quot; 完成卸载&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">triggerFinalized</span><span class="params">(Trigger trigger)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> trigger.getKey().getName();</span><br><span class="line">        <span class="comment">// 当一个Trigger来到了再也不会触发的状态时调用这个方法。除非这个Job已设置成了持久性，否则它就会从Scheduler中移除。</span></span><br><span class="line">        System.out.println(name +<span class="string">&quot; 触发器被移除&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">triggerPaused</span><span class="params">(TriggerKey triggerKey)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> triggerKey.getName();</span><br><span class="line">        <span class="comment">// Scheduler调用这个方法是发生在一个Trigger或Trigger组被暂停时。假如是Trigger组的话，triggerName参数将为null。</span></span><br><span class="line">        System.out.println(name +<span class="string">&quot; 正在被暂停&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">triggersPaused</span><span class="params">(String triggerGroup)</span> &#123;</span><br><span class="line">        <span class="comment">// Scheduler调用这个方法是发生在一个Trigger或Trigger组被暂停时。假如是Trigger组的话，triggerName参数将为null。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;触发器组&quot;</span> +triggerGroup +<span class="string">&quot; 正在被暂停&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">triggerResumed</span><span class="params">(TriggerKey triggerKey)</span> &#123;</span><br><span class="line">        <span class="comment">// Scheduler调用这个方法是发生在一个Trigger或Trigger组从暂停中恢复时。假如是Trigger组的话，triggerName参数将为null。参数将为null。</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> triggerKey.getName();</span><br><span class="line">        System.out.println(name +<span class="string">&quot; 正在从暂停中恢复&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">triggersResumed</span><span class="params">(String triggerGroup)</span> &#123;</span><br><span class="line">        <span class="comment">// Scheduler调用这个方法是发生在一个Trigger或Trigger组从暂停中恢复时。假如是Trigger组的话，triggerName参数将为null。参数将为null。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;触发器组&quot;</span> +triggerGroup +<span class="string">&quot; 正在从暂停中恢复&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jobAdded</span><span class="params">(JobDetail jobDetail)</span> &#123;</span><br><span class="line">        System.out.println(jobDetail.getKey() +<span class="string">&quot; 添加工作任务&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jobDeleted</span><span class="params">(JobKey jobKey)</span> &#123;</span><br><span class="line">        System.out.println(jobKey +<span class="string">&quot; 删除工作任务&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jobPaused</span><span class="params">(JobKey jobKey)</span> &#123;</span><br><span class="line">        System.out.println(jobKey +<span class="string">&quot; 工作任务正在被暂停&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jobsPaused</span><span class="params">(String jobGroup)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;工作组&quot;</span> +jobGroup +<span class="string">&quot; 正在被暂停&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jobResumed</span><span class="params">(JobKey jobKey)</span> &#123;</span><br><span class="line">        System.out.println(jobKey +<span class="string">&quot; 正在从暂停中恢复&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jobsResumed</span><span class="params">(String jobGroup)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;工作组&quot;</span> +jobGroup +<span class="string">&quot; 正在从暂停中恢复&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">schedulerError</span><span class="params">(String msg, SchedulerException cause)</span> &#123;</span><br><span class="line">        <span class="comment">// 在Scheduler的正常运行期间产生一个严重错误时调用这个方法。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;产生严重错误的时候调用&quot;</span> +msg +<span class="string">&quot;    &quot;</span> +cause.getUnderlyingException());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">schedulerInStandbyMode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 当Scheduler处于StandBy模式时，调用该方法。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;调度器被挂起模式的时候调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">schedulerStarted</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调度器开启的时候调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">schedulerStarting</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调度器正在开启的时候调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">schedulerShutdown</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调度器关闭的时候调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">schedulerShuttingdown</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调度器正在关闭的时候调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">schedulingDataCleared</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调度器数据被清除的时候调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1、调度器（Scheduler），从工厂中获取调度的实例（默认：实例化new StdSchedulerFactory();）</span></span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> StdSchedulerFactory.getDefaultScheduler();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、任务实例（JobDetail）定义一个任务调度实例，将该实例与HelloJobSimpleTrigger绑定，任务类需要实现Job接口</span></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder.newJob(Job1.class) <span class="comment">// 加载任务类，与HelloJob完成绑定，要求HelloJob实现Job接口</span></span><br><span class="line">                .withIdentity(<span class="string">&quot;job1&quot;</span>, <span class="string">&quot;group1&quot;</span>) <span class="comment">// 参数1：任务的名称（唯一实例）；参数2：任务组的名称</span></span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、触发器（Trigger）定义触发器，马上执行，然后每5秒重复执行一次</span></span><br><span class="line">        <span class="type">Trigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .withIdentity(<span class="string">&quot;trigger1&quot;</span>, <span class="string">&quot;group1&quot;</span>) <span class="comment">// 参数1：触发器的名称（唯一实例）；参数2：触发器组的名称</span></span><br><span class="line">                .startNow()</span><br><span class="line">                .withSchedule(SimpleScheduleBuilder.repeatSecondlyForever(<span class="number">5</span>)</span><br><span class="line">                        .withRepeatCount(<span class="number">2</span>))  <span class="comment">// 每5秒执行一次，连续执行3次后停止，默认是0</span></span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">// 4、让调度器关联任务和触发器，保证按照触发器定义的调整执行任务</span></span><br><span class="line">        scheduler.scheduleJob(jobDetail, trigger);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建并注册一个局部的Job Listener，表示指定的任务Job</span></span><br><span class="line">        <span class="comment">//scheduler.getListenerManager().addJobListener(new JobListener1(), KeyMatcher.keyEquals(JobKey.jobKey(&quot;job1&quot;, &quot;group1&quot;)));</span></span><br><span class="line">        <span class="comment">//scheduler.getListenerManager().addTriggerListener(new TriggerListener1(), KeyMatcher.keyEquals(TriggerKey.triggerKey(&quot;trigger1&quot;, &quot;group1&quot;)));</span></span><br><span class="line">        scheduler.getListenerManager().addSchedulerListener(<span class="keyword">new</span> <span class="title class_">SchedulerListener1</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5、启动</span></span><br><span class="line">        scheduler.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>定时任务</tag>
        <tag>Quartz</tag>
      </tags>
  </entry>
</search>
