<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JWT原理与应用</title>
    <url>/blog/2025/04/05/Java/SpringBoot/JWT%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h2 id="出现背景">出现背景</h2>
<p>基于 session 认证所显露的问题：</p>
<ol>
<li>Session：每个用户经过我们的应用认证之后，我们的应用都要在服务端做一次记录，以方便用户下次请求的鉴别，通常而言 session 都是保存在内存中，而随着认证用户的增多，服务端的开销会明显增大。</li>
<li>扩展性：用户认证之后，服务端做认证记录，如果认证的记录被保存在内存中的话，这意味着用户下次请求还必须要请求在这台服务器上，这样才能拿到授权的资源，这样在分布式的应用上，相应的限制了负载均衡器的能力。这也意味着限制了应用的扩展能力。</li>
<li>CSRF：因为是基于 cookie 来进行用户识别的，cookie 如果被截获，用户就会很容易受到跨站请求伪造的攻击。</li>
</ol>
<table>
<thead>
<tr>
<th><strong>对比项</strong></th>
<th><strong>JWT</strong></th>
<th><strong>Session</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>存储位置</td>
<td>客户端（Token）</td>
<td>服务器（Session）</td>
</tr>
<tr>
<td>状态管理</td>
<td>无状态</td>
<td>有状态</td>
</tr>
<tr>
<td>安全性</td>
<td>需要加密+签名</td>
<td>依赖服务器安全</td>
</tr>
<tr>
<td>适用于</td>
<td>分布式系统、微服务</td>
<td>传统 Web 应用</td>
</tr>
</tbody>
</table>
<h2 id="基本概念">基本概念</h2>
<h3 id="什么是-JWT？">什么是 JWT？</h3>
<p>JWT（JSON Web Token）是一种用于身份认证和信息传递的轻量级安全令牌标准，基于 JSON 格式，它常用于用户身份验证、授权以及 信息传递，尤其在单点登录（SSO）和 前后端分离架构下被广泛使用。</p>
<p>作用：只需要服务端生成 token，客户端保存这个 token，每次请求携带这个 token，服务端认证解析即可。简单便捷，无需通过 Redis 缓存，而是直接根据 token 取出保存的用户信息，以及对 token 可用性校验</p>
<h3 id="优缺点">优缺点</h3>
<p><strong>优点</strong></p>
<ol>
<li>占资源少：不在服务端保存信息</li>
<li>扩展性好：分布式中，Session 需要做多机数据共享，通常存在数据库或者 Redis 中，而 JWT 不需要</li>
<li>跨语言：Token 是以 JSON 加密的形式保存在客户端的，所以 JWT 是跨语言的，原则上任何 web 形式都支持</li>
</ol>
<p><strong>缺点</strong></p>
<ol>
<li>无法废弃已颁布的令牌：一旦签发一个 JWT，在到期之前就会始终有效，无法中途废弃。例如：在 payload 中存储了一些信息，当信息需要更新时，则重新签发一个 JWT，但由于旧的 JWT 还没过期，拿着这些旧的 JWT 依旧可以登录</li>
</ol>
<p>解决方法：服务端部署额外的逻辑，例如：设置黑名单，一旦签发了新的 JWT，旧的就加入黑名单（如存在 Redis 里面），避免被再次使用（违背 JWT 初衷）</p>
<ol start="2">
<li>过期需要重新生成 JWT：Cookie 续签方案一般都是框架自带的，如：Session 有效期 30 分钟，若 30 分钟内有访问，有效期刷新至 30 分钟。对于 JWT，改变 JWT 的有效时间，就要签发新的 JWT</li>
</ol>
<p>解决方法：</p>
<ul>
<li>每次请求刷新 JWT，即每个 HTTP 请求都返回一个新的 JWT，这个方法每次请求都要做 JWT 的加密解密，会带来性能问题</li>
<li>在 Redis 中单独为每个 JWT 设置过期时间，每次访问时刷新 JWT 的过期时间，引入 Redis 后就把无状态的 JWT 变成了有状态（违背了 JWT 的初衷）</li>
</ul>
<h3 id="JWT-的构成">JWT 的构成</h3>
<p>一个 token 分 3 部分，按顺序为：头部（header），载荷（payload），签证（signature），每部分使用 <code>.</code> 进行分隔：Header.Payload.Signature</p>
<h4 id="header">header</h4>
<p>JWT 的头部承载两部分信息：</p>
<ol>
<li>
<p>alg：签名算法（如 HS256、RS256）</p>
</li>
<li>
<p>typ：令牌类型（JWT）</p>
</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HS256&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="playload">playload</h4>
<p>载荷就是存放有效信息的地方。这个名字像是特指飞机上承载的货品，这些有效信息包含三个部分</p>
<ol>
<li>标准中注册的声明</li>
</ol>
<ul>
<li>iss（issuer）：签发人</li>
<li>exp（expiration time）：过期时间</li>
<li>sub（subject）：主题</li>
<li>aud（audience）：接收 JWT 的一方</li>
<li>nbf（Not Before）：生效时间</li>
<li>iat （Issued At）：签发时间</li>
<li>jti（JWT ID）：JWT 的唯一标识</li>
</ul>
<ol start="2">
<li>
<p>公共的声明：如 username、role 等。</p>
</li>
<li>
<p>私有的声明，应用程序自定义字段。</p>
</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;sub&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1234567890&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;John Doe&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;iat&quot;</span><span class="punctuation">:</span> <span class="number">1516239022</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="signature">signature</h4>
<p>JWT 的第三部分是一个签证信息，这个签证信息由三部分组成：</p>
<ol>
<li>header (base64 后的)</li>
<li>payload (base64 后的)</li>
<li>secret</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">HMACSHA256(</span><br><span class="line">  base64UrlEncode(header) + <span class="string">&quot;.&quot;</span> +</span><br><span class="line">  base64UrlEncode(payload)<span class="punctuation">,</span></span><br><span class="line">	your<span class="number">-256</span>-bit-secret</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h2 id="基本使用">基本使用</h2>
<h3 id="jjwt">jjwt</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Jwt01ApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> time=<span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>;</span><br><span class="line">    <span class="keyword">private</span> String signature=<span class="string">&quot;admin&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        JwtBuilder jwtBuilder= Jwts.builder();</span><br><span class="line">        <span class="type">String</span> <span class="variable">jwtToken</span> <span class="operator">=</span> jwtBuilder</span><br><span class="line">                <span class="comment">//header</span></span><br><span class="line">                .setHeaderParam(<span class="string">&quot;typ&quot;</span>, <span class="string">&quot;JWT&quot;</span>)</span><br><span class="line">                .setHeaderParam(<span class="string">&quot;alg&quot;</span>,<span class="string">&quot;HS256&quot;</span>)</span><br><span class="line">                <span class="comment">//payload</span></span><br><span class="line">                .claim(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;tom&quot;</span>)</span><br><span class="line">                .claim(<span class="string">&quot;role&quot;</span>,<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">                .setSubject(<span class="string">&quot;admin-text&quot;</span>)</span><br><span class="line">                .setExpiration(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis()+time))</span><br><span class="line">                .setId(UUID.randomUUID().toString())</span><br><span class="line">                <span class="comment">//signature</span></span><br><span class="line">                .signWith(SignatureAlgorithm.HS256,signature)</span><br><span class="line">                .compact();</span><br><span class="line"></span><br><span class="line">        System.out.println(jwtToken);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">parse</span><span class="params">()</span>&#123;</span><br><span class="line">        String token=<span class="string">&quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6InRvbSIsInJvbGUiOiJhZG1pbiIsInN1YiI6ImFkbWluLXRleHQiLCJleHAiOjE2MzY0NjM4OTcsImp0aSI6Ijg5OTkzZGM1LWE5OGQtNDhkZS1hMDg0LTgzMWNlNjcxMGJmZCJ9.hHFAbj6d9e0_y1JXtf2q3ZBbO1M3iIbO_s0v6YqUPeM&quot;</span>;</span><br><span class="line">        <span class="type">JwtParser</span> <span class="variable">parser</span> <span class="operator">=</span> Jwts.parser();</span><br><span class="line">        Jws&lt;Claims&gt; claimsJws = parser.setSigningKey(signature).parseClaimsJws(token);</span><br><span class="line">        <span class="type">Claims</span> <span class="variable">body</span> <span class="operator">=</span> claimsJws.getBody();</span><br><span class="line">        System.out.println(body.get(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">        System.out.println(body.get(<span class="string">&quot;role&quot;</span>));</span><br><span class="line">        System.out.println(body.getId());</span><br><span class="line">        System.out.println(body.getSubject());</span><br><span class="line">        System.out.println(body.getExpiration());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="java-jwt">java-jwt</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.18.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>JWTUtils 工具类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JWTUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SING=<span class="string">&quot;!abcd&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成 token  header.payload.sing</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getToken</span><span class="params">(Map&lt;String,String&gt; map)</span>&#123;</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">instance</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        instance.add(Calendar.DATE,<span class="number">7</span>);<span class="comment">//默认 7 天过期</span></span><br><span class="line">        JWTCreator.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> JWT.create();</span><br><span class="line">        <span class="comment">//payload</span></span><br><span class="line">        map.forEach((k,v)-&gt;&#123;</span><br><span class="line">            builder.withClaim(k,v);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> builder.withExpiresAt(instance.getTime())</span><br><span class="line">                .sign(Algorithm.HMAC256(SING));</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证 token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> DecodedJWT <span class="title function_">verify</span><span class="params">(String token)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JWT.require(Algorithm.HMAC256(SING)).build().verify(token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取 token 信息</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> DecodedJWT <span class="title function_">getTokenInfo</span><span class="params">(String token)</span>&#123;</span><br><span class="line">       <span class="type">DecodedJWT</span> <span class="variable">verify</span> <span class="operator">=</span> JWT.require(Algorithm.HMAC256(SING)).build().verify(token);</span><br><span class="line">       <span class="keyword">return</span> verify;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>拦截器</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JWTInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">DecodedJWT</span> <span class="variable">verify</span> <span class="operator">=</span> JWTUtils.verify(token);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (SignatureVerificationException e)&#123;</span><br><span class="line">            e.printStackTrace();<span class="comment">//签名异常</span></span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;无效签名&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (TokenExpiredException e)&#123;</span><br><span class="line">            e.printStackTrace();<span class="comment">//过期异常</span></span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;token过期&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (AlgorithmMismatchException e)&#123;</span><br><span class="line">            e.printStackTrace();<span class="comment">//算法异常</span></span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;算法不一致&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;token无效&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(<span class="string">&quot;state&quot;</span>,<span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//将 map 转为 json</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(map);</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">        response.getWriter().print(json);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterceptorConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">JWTInterceptor</span>())</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/user/test&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/user/login&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>接口获取 jwt</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title function_">login</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;用户名：[&#123;&#125;]&quot;</span>,user.getName());</span><br><span class="line">        log.info(<span class="string">&quot;密码：[&#123;&#125;]&quot;</span>,user.getPwd());</span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">User</span> <span class="variable">login</span> <span class="operator">=</span> userService.login(user);</span><br><span class="line">            HashMap&lt;String,String&gt; payload = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            payload.put(<span class="string">&quot;id&quot;</span>,login.getId());</span><br><span class="line">            payload.put(<span class="string">&quot;name&quot;</span>,login.getName());</span><br><span class="line">            <span class="comment">//生成 JWT 的令牌</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JWTUtils.getToken(payload);</span><br><span class="line"></span><br><span class="line">            map.put(<span class="string">&quot;state&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;认证成功&quot;</span>);</span><br><span class="line">            map.put(<span class="string">&quot;token&quot;</span>,token);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            map.put(<span class="string">&quot;state&quot;</span>,<span class="literal">false</span>);</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>,e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title function_">test</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="type">DecodedJWT</span> <span class="variable">verify</span> <span class="operator">=</span> JWTUtils.verify(token);</span><br><span class="line">        log.info(<span class="string">&quot;用户id：[&#123;&#125;]&quot;</span>,verify.getClaim(<span class="string">&quot;id&quot;</span>).asString());</span><br><span class="line">        log.info(<span class="string">&quot;用户name：[&#123;&#125;]&quot;</span>,verify.getClaim(<span class="string">&quot;name&quot;</span>).asString());</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">&quot;state&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">        map.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;请求成功&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="前端传递-token">前端传递 token</h3>
<ol>
<li>放在请求头中</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"> $.ajax(<span class="punctuation">&#123;</span></span><br><span class="line">    type<span class="punctuation">:</span> <span class="string">&quot;post&quot;</span><span class="punctuation">,</span></span><br><span class="line">    url<span class="punctuation">:</span> <span class="string">&quot;http:///test/getInfo&quot;</span><span class="punctuation">,</span></span><br><span class="line">    headers<span class="punctuation">:</span> <span class="punctuation">&#123;</span>      <span class="comment">//请求头</span></span><br><span class="line">        Accept<span class="punctuation">:</span> <span class="string">&quot;application/json; charset=utf-8&quot;</span><span class="punctuation">,</span></span><br><span class="line">        token<span class="punctuation">:</span> <span class="string">&quot;&quot;</span> + token  <span class="comment">//这是获取的token</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    data<span class="punctuation">:</span>JSON.stringify(jsonDate)<span class="punctuation">,</span></span><br><span class="line">    contentType<span class="punctuation">:</span> <span class="string">&quot;application/json&quot;</span><span class="punctuation">,</span>  <span class="comment">//推荐写这个</span></span><br><span class="line">    dataType<span class="punctuation">:</span> <span class="string">&quot;json&quot;</span><span class="punctuation">,</span></span><br><span class="line">    success<span class="punctuation">:</span> function(data)<span class="punctuation">&#123;</span></span><br><span class="line">      console.log(&#x27;ok&#x27;);</span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    error<span class="punctuation">:</span>function()<span class="punctuation">&#123;</span></span><br><span class="line">        console.log(&#x27;error&#x27;);</span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span>)</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>使用 beforeSend 设置请求头</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">$.ajax(<span class="punctuation">&#123;</span></span><br><span class="line">           type<span class="punctuation">:</span> <span class="string">&quot;post&quot;</span><span class="punctuation">,</span></span><br><span class="line">           url<span class="punctuation">:</span> <span class="string">&quot;http://aliyun.seatang.cn:8080/onlinejudge/test/getInfoById&quot;</span><span class="punctuation">,</span></span><br><span class="line">           beforeSend<span class="punctuation">:</span> function(request) <span class="punctuation">&#123;</span>      <span class="comment">//使用beforeSend</span></span><br><span class="line">               request.setRequestHeader(<span class="string">&quot;token&quot;</span><span class="punctuation">,</span> token);</span><br><span class="line">                request.setRequestHeader(<span class="string">&quot;Content-Type&quot;</span><span class="punctuation">,</span><span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">           data<span class="punctuation">:</span>JSON.stringify(jsonDate)<span class="punctuation">,</span></span><br><span class="line">           dataType<span class="punctuation">:</span> <span class="string">&quot;json&quot;</span><span class="punctuation">,</span></span><br><span class="line">           success<span class="punctuation">:</span> function(data)<span class="punctuation">&#123;</span></span><br><span class="line">               console.log(&#x27;ok&#x27;);</span><br><span class="line">           <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">           error<span class="punctuation">:</span>function()<span class="punctuation">&#123;</span></span><br><span class="line">               console.log(&#x27;error&#x27;);</span><br><span class="line">           <span class="punctuation">&#125;</span></span><br><span class="line">       <span class="punctuation">&#125;</span>)</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>前端保存 token</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">  <span class="attr">token</span>:<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">token</span>) &#123;</span><br><span class="line">  <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;token&quot;</span>,token);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="工具类">工具类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JWTUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 过期时间 5 分钟</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">EXPIRE_TIME</span> <span class="operator">=</span> <span class="number">5</span>*<span class="number">60</span>*<span class="number">1000</span>;</span><br><span class="line">	<span class="comment">// 密钥</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SECERT=<span class="string">&quot;chen&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验 token 是否正确</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token 密钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> secret 用户的密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否正确</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">verify</span><span class="params">(String token, String username, String secret)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Algorithm</span> <span class="variable">algorithm</span> <span class="operator">=</span> Algorithm.HMAC256(secret);</span><br><span class="line">            <span class="type">JWTVerifier</span> <span class="variable">verifier</span> <span class="operator">=</span> JWT.require(algorithm)</span><br><span class="line">                    .withClaim(<span class="string">&quot;username&quot;</span>, username)</span><br><span class="line">                    .build();</span><br><span class="line">            <span class="type">DecodedJWT</span> <span class="variable">jwt</span> <span class="operator">=</span> verifier.verify(token);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得 token 中的信息无需 secret 解密也能获得</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> token 中包含的用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getUsername</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">DecodedJWT</span> <span class="variable">jwt</span> <span class="operator">=</span> JWT.decode(token);</span><br><span class="line">            <span class="keyword">return</span> jwt.getClaim(<span class="string">&quot;username&quot;</span>).asString();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JWTDecodeException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成签名,5min 后过期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> secret 用户的密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 加密的 token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">sign</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis()+EXPIRE_TIME);</span><br><span class="line">            <span class="type">Algorithm</span> <span class="variable">algorithm</span> <span class="operator">=</span> Algorithm.HMAC256(SECERT);</span><br><span class="line">            <span class="comment">// 附带 username 信息</span></span><br><span class="line">            <span class="keyword">return</span> JWT.create()</span><br><span class="line">                    .withClaim(<span class="string">&quot;username&quot;</span>, username)</span><br><span class="line">                    .withExpiresAt(date)</span><br><span class="line">                    .sign(algorithm);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot（1-Async异步调用）</title>
    <url>/blog/2024/11/22/Java/SpringBoot/SpringBoot%EF%BC%881-Async%E5%BC%82%E6%AD%A5%E8%B0%83%E7%94%A8%EF%BC%89/</url>
    <content><![CDATA[<h2 id="基本使用">基本使用</h2>
<h3 id="异步调用">异步调用</h3>
<p>在使用@Async 之前，我们需要确保已经启用了 Spring 的异步任务执行功能，这通常通过在配置类上添加@EnableAsync 注解来完成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// 开启异步调用</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Async01Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Async01Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>未使用@Async</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Task1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doTaskOne</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;start 任务1....&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        Thread.sleep(random.nextInt(<span class="number">10000</span>));</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;任务1耗时：&quot;</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doTaskTwo</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;start 任务2....&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        Thread.sleep(random.nextInt(<span class="number">10000</span>));</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;任务2耗时：&quot;</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doTaskThree</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;start 任务3....&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        Thread.sleep(random.nextInt(<span class="number">10000</span>));</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;任务3耗时：&quot;</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>使用@Async</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Task2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doTaskOne</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;start 任务1...&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        Thread.sleep(random.nextInt(<span class="number">10000</span>));</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;任务1，耗时&quot;</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doTaskTwo</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;start 任务2...&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        Thread.sleep(random.nextInt(<span class="number">10000</span>));</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;任务2，耗时&quot;</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doTaskThree</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;start 任务3...&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        Thread.sleep(random.nextInt(<span class="number">10000</span>));</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;任务3，耗时&quot;</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>使用两个方法进行比较</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Async01ApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Task1 task1;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Task2 task2;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        task1.doTaskOne();</span><br><span class="line">        task1.doTaskTwo();</span><br><span class="line">        task1.doTaskThree();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        task2.doTaskOne();</span><br><span class="line">        task2.doTaskTwo();</span><br><span class="line">        task2.doTaskThree();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>未使用@Async 执行结果</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">start 任务<span class="number">1.</span>...</span><br><span class="line">任务<span class="number">1</span>耗时：<span class="number">1498</span></span><br><span class="line">start 任务<span class="number">2.</span>...</span><br><span class="line">任务<span class="number">2</span>耗时：<span class="number">1967</span></span><br><span class="line">start 任务<span class="number">3.</span>...</span><br><span class="line">任务<span class="number">3</span>耗时：<span class="number">9994</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>使用@Async 执行结果</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">start 任务<span class="number">1.</span>..</span><br><span class="line">start 任务<span class="number">3.</span>..</span><br><span class="line">start 任务<span class="number">2.</span>..</span><br><span class="line">任务<span class="number">2</span>，耗时<span class="number">664</span></span><br><span class="line">任务<span class="number">1</span>，耗时<span class="number">2378</span></span><br><span class="line">任务<span class="number">3</span>，耗时<span class="number">4973</span></span><br></pre></td></tr></table></figure>
<p>可以看出，未使用@Async 时所有任务是串行执行的，只能等上一个任务执行完毕才能执行下一个，而使用@Async 后任务是并发执行的</p>
<h3 id="异步返回结果">异步返回结果</h3>
<p>注意：被@Async 标注的方法必须是 void 类型的，且不能有返回值，除非返回类型是 Future，这样可以通过 Future 获取异步操作的结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncTask</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="keyword">public</span> Future&lt;String&gt; <span class="title function_">asyncTask2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;asyncTask2 start.....&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AsyncResult</span>&lt;String&gt;(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AsyncTask asyncTask;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">    Future&lt;String&gt; future = asyncTask.asyncTask2();</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="comment">//判断是否执行完毕</span></span><br><span class="line">        <span class="keyword">if</span> (future.isDone()) &#123;</span><br><span class="line">            System.out.println(future.get());</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="异常处理">异常处理</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncExceptionHandler</span> <span class="keyword">implements</span> <span class="title class_">AsyncUncaughtExceptionHandler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(AsyncExceptionHandler.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 异常捕获</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleUncaughtException</span><span class="params">(Throwable ex, Method method, Object... params)</span> &#123;</span><br><span class="line">        logger.error(<span class="string">&quot;@Async调用异常，出现异常的方法：&#123;&#125;，参数：&#123;&#125;，异常信息：&#123;&#125;&quot;</span>, method.getDeclaringClass().getName() + <span class="string">&quot;.&quot;</span></span><br><span class="line">                + method.getName(), JSON.toJSONString(params), ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncConfig</span> <span class="keyword">extends</span> <span class="title class_">AsyncConfigurerSupport</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AsyncExceptionHandler asyncExceptionHandler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将异常处理类注入容器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> AsyncUncaughtExceptionHandler <span class="title function_">getAsyncUncaughtExceptionHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> asyncExceptionHandler;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Task3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doTaskOne</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;start 任务1...&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        Thread.sleep(random.nextInt(<span class="number">10000</span>));</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;任务1，耗时&quot;</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Task3 task3;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    task3.doTaskOne();</span><br><span class="line">    TimeUnit.SECONDS.sleep(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 执行结果：</span></span><br><span class="line">start 任务<span class="number">1.</span>..</span><br><span class="line"><span class="number">2024</span>-<span class="number">11</span>-<span class="number">22</span> 09:<span class="number">12</span>:<span class="number">45.828</span> ERROR <span class="number">20716</span> --- [         task-<span class="number">1</span>] c.e.a.d.config.AsyncExceptionHandler     : <span class="meta">@Async</span>调用异常，出现异常的方法：com.example.async.demos.config.Task3.doTaskOne，参数：[]，异常信息：/ by zero</span><br></pre></td></tr></table></figure>
<h2 id="线程池配置">线程池配置</h2>
<h3 id="默认线程池">默认线程池</h3>
<p>SpringBoot 从 2.1 开始使用的是 ThreadPoolTaskExecutor 线程池，之前使用的是 SimpleAsyncTaskExecutor，查看 AsyncExecutionInterceptor 源码中的 getDefaultExecutor 方法，会先去找名称为 taskExecutor 的 Bean，如果找不到才使用 SimpleAsyncTaskExecutor</p>
<p>注意：名称为 taskExecutor 的 Bean 在 TaskExecutionAutoConfiguration 会被实例化</p>
<p><img src="1.png" alt=""></p>
<p><img src="2.png" alt=""></p>
<p><img src="3.png" alt=""></p>
<ol>
<li>ThreadPoolTaskExecutor</li>
</ol>
<p>此线程池的默认参数（由 SpringBoot 配置 TaskExecutionProperties），核心线程数 8，队列容量不限，最大线程数不限。如果业务逻辑需要执行的时间比较长，或者由于代码缺陷导致核心线程不能被释放，那么队列中的任务会越来越多且不会被执行。因此使用@Async 必须配置自定义线程池，或者修改默认线程池参数</p>
<ol start="2">
<li>SimpleAsyncTaskExecutor</li>
</ol>
<p>此线程池会一直创建新的线程，失去了线程池的优势，不推荐使用，若系统中不断地创建线程，最终会导致系统占用内存过高，引发 OutOfMemoryError 错误。</p>
<p>针对线程创建问题，SimpleAsyncTaskExecutor 提供了限流机制，查看 ConcurrencyThrottleSupport 源码中的 beforeAccess 方法，通过 concurrencyLimit 属性来控制开关，当 concurrencyLimit &gt;= 0 时开启限流机制，默认关闭限流机制即 concurrencyLimit =-1，当关闭情况下，会不断创建新的线程来处理任务。基于默认配置，SimpleAsyncTaskExecutor 并不是严格意义的线程池，达不到线程复用的功能</p>
<p><img src="4.png" alt=""></p>
<p><img src="5.png" alt=""></p>
<h3 id="线程池修改">线程池修改</h3>
<h4 id="配置文件修改">配置文件修改</h4>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#核心线程数</span></span><br><span class="line"><span class="attr">spring.task.execution.pool.core-size</span>=<span class="string">200</span></span><br><span class="line"><span class="comment">#最大线程数</span></span><br><span class="line"><span class="attr">spring.task.execution.pool.max-size</span>=<span class="string">1000</span></span><br><span class="line"><span class="comment">#空闲线程保留时间</span></span><br><span class="line"><span class="attr">spring.task.execution.pool.keep-alive</span>=<span class="string">3s</span></span><br><span class="line"><span class="comment">#队列容量</span></span><br><span class="line"><span class="attr">spring.task.execution.pool.queue-capacity</span>=<span class="string">1000</span></span><br><span class="line"><span class="comment">#线程名称前缀</span></span><br><span class="line"><span class="attr">spring.task.execution.thread-name-prefix</span>=<span class="string">test-thread-</span></span><br></pre></td></tr></table></figure>
<p>@Async 异步方法默认使用 Spring 创建 ThreadPoolTaskExecutor（参考 TaskExecutionAutoConfiguration）</p>
<ol>
<li>默认核心线程数：8</li>
<li>最大线程数：Integet.MAX_VALUE</li>
<li>队列使用：LinkedBlockingQueue</li>
<li>容量是：Integet.MAX_VALUE</li>
<li>空闲线程保留时间：60s</li>
<li>线程池拒绝策略：AbortPolicy</li>
</ol>
<h4 id="自定义线程池">自定义线程池</h4>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">task.pool.corePoolSize</span>=<span class="string">20</span></span><br><span class="line"><span class="attr">task.pool.maxPoolSize</span>=<span class="string">40</span></span><br><span class="line"><span class="attr">task.pool.keepAliveSeconds</span>=<span class="string">300</span></span><br><span class="line"><span class="attr">task.pool.queueCapacity</span>=<span class="string">50</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Async02Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Async02Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;task.pool&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskThreadPoolConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> corePoolSize;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> maxPoolSize;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> keepAliveSeconds;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> queueCapacity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskExecutePool</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TaskThreadPoolConfig config;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Executor <span class="title function_">myTaskAsyncPool</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line">        <span class="comment">//核心线程池大小</span></span><br><span class="line">        executor.setCorePoolSize(config.getCorePoolSize());</span><br><span class="line">        <span class="comment">//最大线程数</span></span><br><span class="line">        executor.setMaxPoolSize(config.getMaxPoolSize());</span><br><span class="line">        <span class="comment">//队列容量</span></span><br><span class="line">        executor.setQueueCapacity(config.getQueueCapacity());</span><br><span class="line">        <span class="comment">//活跃时间</span></span><br><span class="line">        executor.setKeepAliveSeconds(config.getKeepAliveSeconds());</span><br><span class="line">        <span class="comment">//线程名字前缀</span></span><br><span class="line">        executor.setThreadNamePrefix(<span class="string">&quot;myExecutor-&quot;</span>);</span><br><span class="line">        <span class="comment">//setRejectedExecutionHandler：当 pool 已经达到 max size 的时候，如何处理新任务</span></span><br><span class="line">        <span class="comment">//CallerRunsPolicy: 不在新线程中执行任务，而是由调用者所在的线程来执行</span></span><br><span class="line">        executor.setRejectedExecutionHandler(<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//用来设置线程池关闭的时候等待所有任务都完成再继续销毁其他的 Bean，这样这些异步任务的销毁就会先于 Redis 线程池的销毁</span></span><br><span class="line">        executor.setWaitForTasksToCompleteOnShutdown(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//用来设置线程池中任务的等待时间，如果超过这个时间还没有销毁就强制销毁，以确保应用最后能够被关闭，而不是阻塞住</span></span><br><span class="line">        executor.setAwaitTerminationSeconds(<span class="number">60</span>);</span><br><span class="line">        <span class="comment">//线程初始化</span></span><br><span class="line">        executor.initialize();</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过指定@Async 中的值去找对应的 Bean，从而获取自定义的线程池</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncTask</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(AsyncTask.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//myTaskAsynPool 即配置线程池的方法名，此处如果不写自定义线程池的方法名，会使用默认的线程池</span></span><br><span class="line">    <span class="meta">@Async(&quot;myTaskAsyncPool&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doTask1</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;task:&quot;</span> + i + <span class="string">&quot; start&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Async02ApplicationTests</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AsyncTask asyncTask;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            asyncTask.doTask1(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="实现接口-AsyncConfigurer">实现接口 AsyncConfigurer</h4>
<p>AsyncConfigurer 接口是 Spring 框架用于全局配置异步执行器（即线程池）的核心接口。当我们的 Spring 应用需要统一管理所有异步任务的执行环境时，可以选择实现此接口</p>
<p>使用@EnableAsync 后会导入 AsyncConfigurationSelector 类，根据代理类型返回对应的类（默认为 PROXY，即 ProxyAsyncConfiguration 类），ProxyAsyncConfiguration 会实例化 AsyncAnnotationBeanPostProcessor，并注入对应的实现 AsyncConfigurer 接口的类</p>
<p><img src="6.png" alt=""></p>
<p><img src="7.png" alt=""></p>
<p><img src="8.png" alt=""></p>
<p><img src="9.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AsyncConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">default</span> Executor <span class="title function_">getAsyncExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">default</span> AsyncUncaughtExceptionHandler <span class="title function_">getAsyncUncaughtExceptionHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>getAsyncExecutor()：用于实现自定义线程池，控制并发数</li>
</ol>
<ul>
<li>在 getAsyncExecutor()中创建线程池的时候，必须使用 executor.initialize()，不然在调用时会报线程池未初始化的异常</li>
<li>如果使用 threadPoolTaskExecutor()来定义 bean，则不需要初始化</li>
</ul>
<ol start="2">
<li>getAsyncUncaughtExceptionHandler()：用于处理异步方法的异常</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NativeAsyncTaskExecutePool</span> <span class="keyword">implements</span> <span class="title class_">AsyncConfigurer</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TaskThreadPoolConfig config;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Executor <span class="title function_">getAsyncExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line">        <span class="comment">//核心线程池大小</span></span><br><span class="line">        executor.setCorePoolSize(config.getCorePoolSize());</span><br><span class="line">        <span class="comment">//最大线程数</span></span><br><span class="line">        executor.setMaxPoolSize(config.getMaxPoolSize());</span><br><span class="line">        <span class="comment">//队列容量</span></span><br><span class="line">        executor.setQueueCapacity(config.getQueueCapacity());</span><br><span class="line">        <span class="comment">//活跃时间</span></span><br><span class="line">        executor.setKeepAliveSeconds(config.getKeepAliveSeconds());</span><br><span class="line">        <span class="comment">//线程名字前缀</span></span><br><span class="line">        executor.setThreadNamePrefix(<span class="string">&quot;MyExecutor-&quot;</span>);</span><br><span class="line">        <span class="comment">//CallerRunsPolicy：不在新线程中执行任务，而是由调用者所在的线程来执行</span></span><br><span class="line">        executor.setRejectedExecutionHandler(<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());</span><br><span class="line">        <span class="comment">//线程初始化</span></span><br><span class="line">        executor.initialize();</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Bean</span></span><br><span class="line"><span class="comment">//    public ThreadPoolTaskExecutor threadPoolTaskExecutor()&#123;</span></span><br><span class="line"><span class="comment">//        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();</span></span><br><span class="line"><span class="comment">//        executor.setCorePoolSize(10);</span></span><br><span class="line"><span class="comment">//        executor.setMaxPoolSize(100);</span></span><br><span class="line"><span class="comment">//        executor.setQueueCapacity(100);</span></span><br><span class="line"><span class="comment">//        return executor;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步任务中异常处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> AsyncUncaughtExceptionHandler <span class="title function_">getAsyncUncaughtExceptionHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AsyncUncaughtExceptionHandler</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleUncaughtException</span><span class="params">(Throwable ex, Method method, Object... params)</span> &#123;</span><br><span class="line">                log.error(<span class="string">&quot;@Async调用异常，出现异常的方法：&#123;&#125;，参数：&#123;&#125;，异常信息：&#123;&#125;&quot;</span>, method.getDeclaringClass().getName() + <span class="string">&quot;.&quot;</span></span><br><span class="line">                        + method.getName(), JSON.toJSONString(params), ex.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="继承-AsyncConfigurerSupport">继承 AsyncConfigurerSupport</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncConfigurerSupport</span> <span class="keyword">implements</span> <span class="title class_">AsyncConfigurer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AsyncConfigurerSupport</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Executor <span class="title function_">getAsyncExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">public</span> AsyncUncaughtExceptionHandler <span class="title function_">getAsyncUncaughtExceptionHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Async-注意点">@Async 注意点</h2>
<h3 id="失效情况">失效情况</h3>
<ol>
<li>异步方法使用 static 修饰</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">async</span><span class="params">(String value)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;async:&#123;&#125;&quot;</span>, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这时@Async 的异步功能会失效，因为这种情况 idea 会直接报错：<code>Methods annotated with '@Async' must be overridable</code> 。<br>
使用@Async 注解声明的方法，必须是能被重写的，很显然 static 修饰的方法，是类的静态方法，是不允许被重写的。因此这种情况下，@Async 注解的异步功能会失效。</p>
<ol start="2">
<li>方法用 final 修饰</li>
</ol>
<p>在 Java 种 final 关键字，是一个非常特别的存在。</p>
<ul>
<li>用 final 修饰的类，没法被继承。</li>
<li>用 final 修饰的方法，没法被重写。</li>
<li>用 final 修饰的变量，没法被修改。</li>
</ul>
<p>如果 final 使用不当，也会导致@Async 注解的异步功能失效，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        async(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">async</span><span class="params">(String value)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;async:&#123;&#125;&quot;</span>, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种情况下 idea 也会直接报错：<code>Methods annotated with '@Async' must be overridable</code> 。</p>
<p>因为使用 final 关键字修饰的方法，是没法被子类重写的。因此这种情况下，@Async 注解的异步功能会失效。</p>
<ol start="3">
<li>
<p>异步类没有使用@Component 注解导致 Spring 无法扫描到异步类</p>
</li>
<li>
<p>需要在启动类上添加@EnableAsync 注解</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>异步方法在同一个类中调用</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        async(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">async</span><span class="params">(String value)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;async:&#123;&#125;&quot;</span>, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>方法不是 public</li>
</ol>
<p>private 修饰的方法，只能在 UserService 类的对象中使用。而@Async 注解的异步功能，需要使用 Spring 的 AOP 生成 UserService 类的代理对象，该代理对象没法访问 UserService 类的 private 方法，因此会出现@Async 注解失效的问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">async</span><span class="params">(String value)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;async:&#123;&#125;&quot;</span>, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="7">
<li>方法返回值错误</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">async</span><span class="params">(String value)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;async:&#123;&#125;&quot;</span>, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 AsyncExecutionInterceptor 类的 invoke()方法，会调用它的父类 AsyncExecutionAspectSupport 中的 doSubmit 方法，该方法时异步功能的核心代码，如下：</p>
<p><img src="10.png" alt=""></p>
<p>从上面看出，@Async 注解的异步方法的返回值，要么是 Future，要么是 null。<br>
因此，在实际项目中，如果想要使用 <code>@Async</code> 注解的异步功能，相关方法的返回值必须是 void 或者 Future</p>
<h3 id="事务使用">事务使用</h3>
<p>在 Async 方法上标注@Transactional 是没用的，在 Async 方法中调用的方法上添加@Transactional 有效</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 无效事务方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">doTaskOne2</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;start 任务1...&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;任务1结束&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="异常情况">异常情况</h3>
<ol>
<li>异步方法中抛出的异常不能直接捕获，因为调用者将无法获取到异常。建议使用 Future 或 CompletableFuture 来捕获异步方法的异常并进行处理</li>
<li>异步方法的执行是非阻塞的，它们可能以任意顺序完成。如果需要按照特定的顺序处理结果，可以使用 CompletableFuture 的 thenApply 方法或者使用@Async 的 order 属性来指定顺序</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot（10-Cache缓存使用）</title>
    <url>/blog/2025/04/18/Java/SpringBoot/SpringBoot%EF%BC%8810-Cache%E7%BC%93%E5%AD%98%E4%BD%BF%E7%94%A8%EF%BC%89/</url>
    <content><![CDATA[<h2 id="SpringBoot-整合-Cache">SpringBoot 整合 Cache</h2>
<h3 id="注解及方法">注解及方法</h3>
<table>
<thead>
<tr>
<th>名称</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>Cache</td>
<td>缓存接口，定义缓存操作。实现有：RedisCache、EhCacheCache、ConcurrentMapCache 等</td>
</tr>
<tr>
<td>CacheManager</td>
<td>缓存管理器，管理各种缓存（cache）组件，用于指定使用哪个缓存管理器，非必需，只有当有多个时才需要使用</td>
</tr>
<tr>
<td>@Cacheable</td>
<td>主要针对方法配置，能够根据方法的请求参数对其进行缓存</td>
</tr>
<tr>
<td>@CacheEvict</td>
<td>清空缓存</td>
</tr>
<tr>
<td>@CachePut</td>
<td>保证方法被调用，又希望结果被缓存。 与@Cacheable 区别在于是否每次都调用方法，常用于更新</td>
</tr>
<tr>
<td>@EnableCaching</td>
<td>开启基于注解的缓存，用于指定 key 生成器，非必需。若需要指定一个自定义的 key 生成器，我们需要去实现 org.springframework.cache.interceptor.KeyGenerator 接口，并使用该参数来指定。需要注意的是：该参数与 key 是互斥的</td>
</tr>
<tr>
<td>keyGenerator</td>
<td>缓存数据时 key 生成策略</td>
</tr>
<tr>
<td>serialize</td>
<td>缓存数据时 value 序列化策略</td>
</tr>
<tr>
<td>@CacheConfig</td>
<td>统一配置本类的缓存注解的属性</td>
</tr>
</tbody>
</table>
<h4 id="Cache">Cache</h4>
<p>缓存接口，定义缓存操作。实现有：RedisCache、EhCacheCache、ConcurrentMapCache 等；</p>
<p>具体意义：每一个 Cache 中存储一个缓存信息，比如说：用户信息缓存（user_cache）、商品信息缓存（product_cache）…，然后每一个 cache 中又会用具体的缓存 key 做具体区分，如：用户信息缓存中，根据用户 id 区分，那么用户 id 就是 user_cache 中的 key；product_cache 中又以商品 id 作为 key 区分具体缓存记录；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Cache</span> &#123;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">getName</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    Object <span class="title function_">getNativeCache</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    ValueWrapper <span class="title function_">get</span><span class="params">(Object key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    &lt;T&gt; T <span class="title function_">get</span><span class="params">(Object key, <span class="meta">@Nullable</span> Class&lt;T&gt; type)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    &lt;T&gt; T <span class="title function_">get</span><span class="params">(Object key, Callable&lt;T&gt; valueLoader)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(Object key, <span class="meta">@Nullable</span> Object value)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">default</span> ValueWrapper <span class="title function_">putIfAbsent</span><span class="params">(Object key, <span class="meta">@Nullable</span> Object value)</span> &#123;</span><br><span class="line">        <span class="type">ValueWrapper</span> <span class="variable">existingValue</span> <span class="operator">=</span> get(key);</span><br><span class="line">        <span class="keyword">if</span> (existingValue == <span class="literal">null</span>) &#123;</span><br><span class="line">            put(key, value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> existingValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">evict</span><span class="params">(Object key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">evictIfPresent</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        evict(key);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">invalidate</span><span class="params">()</span> &#123;</span><br><span class="line">        clear();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@FunctionalInterface</span></span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">ValueWrapper</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Nullable</span></span><br><span class="line">        Object <span class="title function_">get</span><span class="params">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">ValueRetrievalException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Nullable</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Object key;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ValueRetrievalException</span><span class="params">(<span class="meta">@Nullable</span> Object key, Callable&lt;?&gt; loader, Throwable ex)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(String.format(<span class="string">&quot;Value for key &#x27;%s&#x27; could not be loaded using &#x27;%s&#x27;&quot;</span>, key, loader), ex);</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Nullable</span></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">getKey</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.key;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="CacheManager">CacheManager</h4>
<p>缓存管理器，管理各个缓存(Cache)组件，针对不同的业务场景，可以定义多个不同的 CacheManager 管理具体 cache 数据；</p>
<p>比如说：我们可以通过 CacheManager 加载各个 cache，并且可以初始化各个 cache 的参数设置（如过期时间等），我们缓存数据需要指定 cache manager 跟具体被其管理的 cache，这样才可以正确缓存</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CacheManager</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 通过 cacheName 创建 Cache 的实现 bean，具体实现中需要存储已创建的 Cache 实现 bean，避免重复创建，也避免内存缓存对象（如 Caffeine）重新创建后原来缓存内容丢失的情况</span></span><br><span class="line">    Cache <span class="title function_">getCache</span><span class="params">(String name)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 返回所有的 cacheName</span></span><br><span class="line">    Collection&lt;String&gt; <span class="title function_">getCacheNames</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="EnableCaching">@EnableCaching</h4>
<p>开启基于注解的缓存，属于 spring4.x 之后的 spring 缓存注解；</p>
<h4 id="CacheConfig">@CacheConfig</h4>
<p>在类上使用@CacheConfig 统一的配置缓存的信息，包括指定 cacheManager、具体 cache 等；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CacheConfig &#123;</span><br><span class="line"></span><br><span class="line">    String[] cacheNames() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">keyGenerator</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">cacheManager</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">cacheResolver</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Cacheable">@Cacheable</h4>
<p>主要针对方法配置，能够根据方法的请求参数对其结果进行缓存，具体缓存的 key 可以指定；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Cacheable &#123;</span><br><span class="line">    <span class="comment">// cacheNames，CacheManager 就是通过这个名称创建对应的 Cache 实现 bean，和 value 注解差不多，二选一</span></span><br><span class="line">    <span class="meta">@AliasFor(&quot;cacheNames&quot;)</span></span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@AliasFor(&quot;value&quot;)</span></span><br><span class="line">    String[] cacheNames() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 缓存的 key，支持 SpEL 表达式。默认是使用所有参数及其计算的 hashCode 包装后的对象（SimpleKey）</span></span><br><span class="line">    String <span class="title function_">key</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 缓存 key 生成器，默认实现是 SimpleKeyGenerator，key 的生成器，key/keyGenerator 二选一使用</span></span><br><span class="line">    String <span class="title function_">keyGenerator</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 指定使用哪个 CacheManager</span></span><br><span class="line">    String <span class="title function_">cacheManager</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 缓存解析器</span></span><br><span class="line">    String <span class="title function_">cacheResolver</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 缓存的条件，支持 SpEL 表达式，当达到满足的条件时才缓存数据。在调用方法前后都会判断</span></span><br><span class="line">    String <span class="title function_">condition</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">// 满足条件时不更新缓存，支持 SpEL 表达式，只在调用方法后判断</span></span><br><span class="line">    String <span class="title function_">unless</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 回源到实际方法获取数据时，是否要保持同步，如果为 false，调用的是 Cache.get(key)方法；如果为 true，调用的是 Cache.get(key, Callable)方法</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">sync</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="CachePut">@CachePut</h4>
<p>保证方法调用，又能将结果缓存，可以用于刷新缓存，同样 key 需要指定，需要跟@Cacheable 中制定的 key 对应保持一致，同样是将方法返回结果进行保存，所以同样需要跟@Cacheable 方法中的结果返回类型一致；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CachePut &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor(&quot;cacheNames&quot;)</span></span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor(&quot;value&quot;)</span></span><br><span class="line">    String[] cacheNames() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">key</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">keyGenerator</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">cacheManager</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">cacheResolver</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">condition</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">unless</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="CacheEvict">@CacheEvict</h4>
<p>针对指定的 key，清空缓存；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CacheEvict &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@AliasFor(&quot;cacheNames&quot;)</span></span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor(&quot;value&quot;)</span></span><br><span class="line">    String[] cacheNames() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">key</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">keyGenerator</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">cacheManager</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">cacheResolver</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="comment">// ...相同属性说明请参考@Cacheable 中的说明</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否要清除所有缓存的数据，为 false 时调用的是 Cache.evict(key)方法；为 true 时调用的是 Cache.clear()方法</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">allEntries</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用方法之前或之后清除缓存</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">beforeInvocation</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="参数信息">参数信息</h3>
<p><strong>@Cacheable/@CachePut/@CacheEvict 主要的参数</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">名称</th>
<th style="text-align:left">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">value</td>
<td style="text-align:left">缓存的名称，在 spring 配置文件中定义，必须指定至少一个 例如： @Cacheable(value =”mycache”) 或者 @Cacheable(value ={”cache1”,”cache2”})</td>
</tr>
<tr>
<td style="text-align:left">key</td>
<td style="text-align:left">缓存的 key，可以为空，如果指定要按照 SpEL 表达式编写，如果不指定，则缺省按照方法的所有参数进行组合，例如：@Cacheable(value =”testcache”, key =”#id”)</td>
</tr>
<tr>
<td style="text-align:left">condition</td>
<td style="text-align:left">缓存的条件，可以为空，使用 SpEL 编写，返回 true 或者 false，只有为 true 才进行缓存/清除缓存，例如：@Cacheable(value =”testcache”, condition =”#userName.length()&gt; 2”)</td>
</tr>
<tr>
<td style="text-align:left">unless</td>
<td style="text-align:left">否定缓存，当条件结果为 TRUE 时，就不会缓存。 @Cacheable(value =”testcache”, unless =”#userName.length()&gt; 2”)</td>
</tr>
<tr>
<td style="text-align:left">allEntries (@CacheEvict )</td>
<td style="text-align:left">是否清空所有缓存内容，缺省为 false，如果指定为 true，则方法调用后将立即清空所有缓存，例如：@CachEvict(value =”testcache”, allEntries = true)</td>
</tr>
<tr>
<td style="text-align:left">beforeInvocation (@CacheEvict)</td>
<td style="text-align:left">是否在方法执行前就清空，缺省为 false，如果指定为 true，则在方法还没有执行的时候就清空缓存，缺省情况下，如果方法执行抛出异常，则不会清空缓存，例如： @CachEvict(value =”testcache”，beforeInvocation = true)</td>
</tr>
</tbody>
</table>
<h3 id="SpEl-上下文数据">SpEl 上下文数据</h3>
<p>Spring Cache 提供了一些供我们使用的 SpEL 上下文数据，下表直接摘自 Spring 官方文档：</p>
<table>
<thead>
<tr>
<th style="text-align:left">名称</th>
<th style="text-align:left">位置</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">示例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">methodName</td>
<td style="text-align:left">root 对象</td>
<td style="text-align:left">当前被调用的方法名</td>
<td style="text-align:left"><code>#root.methodname</code></td>
</tr>
<tr>
<td style="text-align:left">method</td>
<td style="text-align:left">root 对象</td>
<td style="text-align:left">当前被调用的方法</td>
<td style="text-align:left"><code>#root.method.name</code></td>
</tr>
<tr>
<td style="text-align:left">target</td>
<td style="text-align:left">root 对象</td>
<td style="text-align:left">当前被调用的目标对象实例</td>
<td style="text-align:left"><code>#root.target</code></td>
</tr>
<tr>
<td style="text-align:left">targetClass</td>
<td style="text-align:left">root 对象</td>
<td style="text-align:left">当前被调用的目标对象的类</td>
<td style="text-align:left"><code>#root.targetClass</code></td>
</tr>
<tr>
<td style="text-align:left">args</td>
<td style="text-align:left">root 对象</td>
<td style="text-align:left">当前被调用的方法的参数列表</td>
<td style="text-align:left"><code>#root.args[0]</code></td>
</tr>
<tr>
<td style="text-align:left">caches</td>
<td style="text-align:left">root 对象</td>
<td style="text-align:left">当前方法调用使用的缓存列表</td>
<td style="text-align:left"><code>#root.caches[0].name</code></td>
</tr>
<tr>
<td style="text-align:left">Argument Name</td>
<td style="text-align:left">执行上下文</td>
<td style="text-align:left">当前被调用的方法的参数，如 findArtisan(Artisan artisan), 可以通过#<a href="http://artsian.id">artsian.id</a> 获得参数</td>
<td style="text-align:left"><code>#artsian.id</code></td>
</tr>
<tr>
<td style="text-align:left">result</td>
<td style="text-align:left">执行上下文</td>
<td style="text-align:left">方法执行后的返回值（仅当方法执行后的判断有效，如 unless cacheEvict 的 beforeInvocation = false）</td>
<td style="text-align:left"><code>#result</code></td>
</tr>
</tbody>
</table>
<ol>
<li>要使用 root 对象的属性作为 key 时我们也可以将“#root”省略，因为 Spring 默认使用的就是 root 对象的属性，如：@Cacheable(key = “targetClass+methodName+#p0”)</li>
<li>使用方法参数时我们可以直接使用“#参数名”或者“#p 参数 index”，如：@Cacheable(value = “users”, key = “#id”)，@Cacheable(value = “user”, key = “#p0”)</li>
</ol>
<h3 id="CacheManger-缓存类型">CacheManger 缓存类型</h3>
<p>针对不同的缓存技术，需要实现不同的 cacheManager，Spring 定义了如下的 cacheManger 实现。</p>
<table>
<thead>
<tr>
<th>CacheManger</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>SimpleCacheManager</td>
<td>使用简单的 Collection 来存储缓存，主要用于测试</td>
</tr>
<tr>
<td>ConcurrentMapCacheManager</td>
<td>使用 ConcurrentMap 作为缓存技术（默认），需要显式的删除缓存，无过期机制</td>
</tr>
<tr>
<td>NoOpCacheManager</td>
<td>仅测试用途，不会实际存储缓存</td>
</tr>
<tr>
<td>EhCacheCacheManager</td>
<td>使用 EhCache 作为缓存技术，以前在 hibernate 的时候经常用</td>
</tr>
<tr>
<td>GuavaCacheManager</td>
<td>使用 google guava 的 GuavaCache 作为缓存技术(1.5 版本已不建议使用）</td>
</tr>
<tr>
<td>CaffeineCacheManager</td>
<td>是使用 Java8 对 Guava 缓存的重写，spring5（springboot2）开始用 Caffeine 取代 guava</td>
</tr>
<tr>
<td>HazelcastCacheManager</td>
<td>使用 Hazelcast 作为缓存技术</td>
</tr>
<tr>
<td>JCacheCacheManager</td>
<td>使用 JCache 标准的实现作为缓存技术，如 Apache Commons JCS</td>
</tr>
<tr>
<td>RedisCacheManager</td>
<td>使用 Redis 作为缓存技术</td>
</tr>
</tbody>
</table>
<p>常规的 SpringBoot 已经为我们自动配置了 EhCache、Collection、Guava、ConcurrentMap 等缓存，默认使用 <code>ConcurrentMapCacheManager</code>。SpringBoot 的 application.properties 配置文件，使用 spring.cache 前缀的属性进行配置。</p>
<p><strong>ConcurrentMap Cache</strong></p>
<p>Spring boot 默认使用的是 SimpleCacheConfiguration，即使用 ConcurrentMapCacheManager 来实现缓存，ConcurrentMapCache 实质是一个 ConcurrentHashMap 集合对象 java 内置，所以无需引入其他依赖，也没有额外的配置</p>
<p>ConcurrentMapCache 的自动装配声明在 SimpleCacheConfiguration 中，如果需要也可对它进行额外的装配</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(CacheManager.class)</span></span><br><span class="line"><span class="meta">@Conditional(CacheCondition.class)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleCacheConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    ConcurrentMapCacheManager <span class="title function_">cacheManager</span><span class="params">(CacheProperties cacheProperties,</span></span><br><span class="line"><span class="params">            CacheManagerCustomizers cacheManagerCustomizers)</span> &#123;</span><br><span class="line">        <span class="type">ConcurrentMapCacheManager</span> <span class="variable">cacheManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcurrentMapCacheManager</span>();</span><br><span class="line">        List&lt;String&gt; cacheNames = cacheProperties.getCacheNames();</span><br><span class="line">        <span class="keyword">if</span> (!cacheNames.isEmpty()) &#123;</span><br><span class="line">            cacheManager.setCacheNames(cacheNames);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cacheManagerCustomizers.customize(cacheManager);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>application.properties 配置</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 缓存的技术类型，可选 generic,ehcache,hazelcast,infinispan,jcache,redis,guava,simple,none</span></span><br><span class="line"><span class="attr">spring.cache.type</span>=<span class="string"></span></span><br><span class="line"><span class="comment"># 应用程序启动创建缓存的名称，必须将所有注释为@Cacheable缓存name（或value）罗列在这里，否者：Cannot find cache named &#x27;xxx&#x27; for Builder[xx] caches=[sysItem] | key=&#x27;&#x27; | keyGenerator=&#x27;&#x27; | cacheManager=&#x27;&#x27; | cacheResolver=&#x27;&#x27; | condition=&#x27;&#x27; | unless=&#x27;&#x27; | sync=&#x27;false&#x27;#以下根据不同缓存技术选择配置</span></span><br><span class="line"><span class="attr">spring.cache.cache-names</span>= <span class="string"></span></span><br><span class="line"><span class="comment"># EHCache的配置文件位置</span></span><br><span class="line"><span class="attr">spring.cache.ehcache.config</span>=<span class="string"></span></span><br><span class="line"><span class="comment"># infinispan的配置文件位置</span></span><br><span class="line"><span class="attr">spring.cache.infinispan.config</span>= <span class="string"></span></span><br><span class="line"><span class="comment"># jcache配置文件位置</span></span><br><span class="line"><span class="attr">spring.cache.jcache.config</span>= <span class="string"></span></span><br><span class="line"><span class="comment"># 当多个jcache实现类时，指定选择jcache的实现类</span></span><br><span class="line"><span class="attr">spring.cache.jcache.provider</span>=<span class="string"></span></span><br><span class="line"><span class="comment"># caffeine类型创建缓存的规范。查看CaffeineSpec了解更多关于规格格式的细节</span></span><br><span class="line"><span class="attr">spring.caffeine.spec</span>= <span class="string"></span></span><br></pre></td></tr></table></figure>
<h3 id="基本使用">基本使用</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定cache的类型</span></span><br><span class="line"><span class="attr">spring.cache.type</span>=<span class="string">simple</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableCaching</span>  <span class="comment">//开启缓存</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoApplication</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@CacheConfig(cacheNames = &quot;user&quot;)</span></span><br><span class="line"><span class="comment">//加上这句可以统一指定 value 的值，这时可以省略 value</span></span><br><span class="line"><span class="comment">//如果在方法上依旧写上了 value，那么依然以方法的 value 值为准</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存新增或更新的数据到缓存，缓存名称为 user，数据的 key 为 user 的 id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@CachePut(key = &quot;#user.id.toString()&quot;,value = &quot;user&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        userMapper.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将 key 为 id 的缓存缓存到 user 中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Cacheable(key = &quot;#id.toString()&quot;,value = &quot;user&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">findById</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(id);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从缓存 user 中删除 key 为 id 的缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@CacheEvict(key = &quot;#id.toString()&quot;,value = &quot;user&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">        userMapper.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不足：多是根据请求参数命名 key，根据返回值设置 value，在很多情况下，想在方法内部进行命名和操作有一定的限制</p>
<h3 id="坑点">坑点</h3>
<p>整合 redis 实现 cache 方法后，在使用@Cacheable 缓存对象为空时会报错</p>
<p>解决方法：</p>
<ol>
<li>设置结果为空时不缓存，直接加上 unless =&quot;#result == null &quot; 就好了</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Cacheable(cacheNames = &quot;cache:getCustRange&quot;, key = &quot;#root.args[0][&#x27;custId&#x27;] + &#x27;&#x27;&quot;, unless=&quot;#result == null&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CustRangeVo <span class="title function_">getCustRange</span><span class="params">(Map&lt;String, Object&gt; map)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> custMapper.getCustRange(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>设置允许缓存为 null 值</li>
</ol>
<p>只要把 RedisCacheConfiguration 的 cacheNullValues 设置为 true，就可以缓存 null 值了</p>
<h2 id="SpringBoot-整合-EHCache、Cache">SpringBoot 整合 EHCache、Cache</h2>
<p>EhCache 是一个纯 Java 的进程内缓存框架，具有快速、精干等特点，是 Hibernate 中默认 CacheProvider</p>
<p>Ehcache 是一种广泛使用的开源 Java 分布式缓存，主要面向通用缓存，Java EE 和轻量级容器。它具有内存和磁盘存储，缓存加载器，缓存扩展，缓存异常处理程序，一个 gzip 缓存 servlet 过滤器，支持 REST 和 SOAP api 等特点。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sf.ehcache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置ehcache缓存</span></span><br><span class="line"><span class="attr">spring.cache.type</span>=<span class="string">ehcache </span></span><br><span class="line"><span class="comment"># 指定ehcache配置文件路径，可以不用写，因为默认就是这个路径，SpringBoot会自动扫描</span></span><br><span class="line"><span class="attr">spring.cache.ehcache.config</span>=<span class="string">classpath:/ehcache.xml </span></span><br></pre></td></tr></table></figure>
<p>EhCache 的配置文件 ehcache.xml 只需要放到类路径下面，SpringBoot 会自动扫描</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ehcache</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        磁盘存储:指定一个文件目录，当EHCache把数据写到硬盘上时，将把数据写到这个文件目录下</span></span><br><span class="line"><span class="comment">        path:指定在硬盘上存储对象的路径</span></span><br><span class="line"><span class="comment">        path可以配置的目录有：</span></span><br><span class="line"><span class="comment">            user.home（用户的家目录）</span></span><br><span class="line"><span class="comment">            user.dir（用户当前的工作目录）</span></span><br><span class="line"><span class="comment">            java.io.tmpdir（默认的临时目录）</span></span><br><span class="line"><span class="comment">            ehcache.disk.store.dir（ehcache的配置目录）</span></span><br><span class="line"><span class="comment">            绝对路径（如：d:\\ehcache）</span></span><br><span class="line"><span class="comment">        查看路径方法：String tmpDir = System.getProperty(&quot;java.io.tmpdir&quot;);</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">&quot;java.io.tmpdir&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        defaultCache:默认的缓存配置信息,如果不加特殊说明,则所有对象按照此配置项处理</span></span><br><span class="line"><span class="comment">        maxElementsInMemory:设置了缓存的上限,最多存储多少个记录对象</span></span><br><span class="line"><span class="comment">        eternal:代表对象是否永不过期 (指定true则下面两项配置需为0无限期)</span></span><br><span class="line"><span class="comment">        timeToIdleSeconds:最大的发呆时间 /秒</span></span><br><span class="line"><span class="comment">        timeToLiveSeconds:最大的存活时间 /秒</span></span><br><span class="line"><span class="comment">        overflowToDisk:是否允许对象被写入到磁盘</span></span><br><span class="line"><span class="comment">        说明：下列配置自缓存建立起600秒(10分钟)有效 。</span></span><br><span class="line"><span class="comment">        在有效的600秒(10分钟)内，如果连续120秒(2分钟)未访问缓存，则缓存失效。</span></span><br><span class="line"><span class="comment">        就算有访问，也只会存活600秒。</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultCache</span> <span class="attr">maxElementsInMemory</span>=<span class="string">&quot;10000&quot;</span> <span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;600&quot;</span> <span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;600&quot;</span> <span class="attr">overflowToDisk</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 按缓存名称的不同管理策略 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">&quot;myCache&quot;</span> <span class="attr">maxElementsInMemory</span>=<span class="string">&quot;10000&quot;</span> <span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;120&quot;</span> <span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;600&quot;</span> <span class="attr">overflowToDisk</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>SpringBoot 会为我们自动配置 <code>EhCacheCacheManager </code> 这个 Bean，如果想自定义设置一些个性化参数时，通过 Java Config 形式配置。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheConfig</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Bean</span>  </span><br><span class="line">    <span class="keyword">public</span> CacheManager <span class="title function_">cacheManager</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">EhCacheCacheManager</span>(ehCacheCacheManager().getObject());  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Bean</span>  </span><br><span class="line">    <span class="keyword">public</span> EhCacheManagerFactoryBean <span class="title function_">ehCacheCacheManager</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="type">EhCacheManagerFactoryBean</span> <span class="variable">cmfb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EhCacheManagerFactoryBean</span>();  </span><br><span class="line">        cmfb.setConfigLocation(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;ehcache.xml&quot;</span>));  </span><br><span class="line">        cmfb.setShared(<span class="literal">true</span>);  </span><br><span class="line">        <span class="keyword">return</span> cmfb;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="SpringBoot-整合-Redis、Cache">SpringBoot 整合 Redis、Cache</h2>
<h3 id="基本使用-2">基本使用</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/springboot?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">lettuce:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">20</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="number">-1</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">10</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">1000</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.example.springboot_cache_redis.dao&quot;)</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringbootCacheRedisApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringbootCacheRedisApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String,Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span>&#123;</span><br><span class="line">        RedisTemplate&lt;String,Object&gt; redisTemplate=<span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        redisTemplate.setConnectionFactory(factory);</span><br><span class="line"></span><br><span class="line">        <span class="type">StringRedisSerializer</span> <span class="variable">stringRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        <span class="type">GenericJackson2JsonRedisSerializer</span> <span class="variable">genericJackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>();</span><br><span class="line"></span><br><span class="line">        redisTemplate.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        redisTemplate.setValueSerializer(genericJackson2JsonRedisSerializer);</span><br><span class="line"></span><br><span class="line">        redisTemplate.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        redisTemplate.setHashValueSerializer(genericJackson2JsonRedisSerializer);</span><br><span class="line">        <span class="keyword">return</span>  redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CacheManager <span class="title function_">cacheManager</span><span class="params">(RedisTemplate&lt;String,Object&gt; redisTemplate)</span>&#123;</span><br><span class="line">        RedisCacheConfiguration redisCacheConfiguration=</span><br><span class="line">                RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">                        <span class="comment">//设置 key 为 String</span></span><br><span class="line">                        .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(redisTemplate.getStringSerializer()))</span><br><span class="line">                        <span class="comment">//设置 value 为自动转 JSON 的 Object</span></span><br><span class="line">                        .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(redisTemplate.getValueSerializer()))</span><br><span class="line">                        <span class="comment">//不缓存 null</span></span><br><span class="line">                        .disableCachingNullValues()</span><br><span class="line">                        <span class="comment">//缓存数据为 1 小时</span></span><br><span class="line">                        .entryTtl(Duration.ofHours(<span class="number">1</span>));</span><br><span class="line">        RedisCacheManager redisCacheManager=</span><br><span class="line">                RedisCacheManager.RedisCacheManagerBuilder</span><br><span class="line">                        <span class="comment">//Redis 连接工厂</span></span><br><span class="line">                        .fromConnectionFactory(redisTemplate.getConnectionFactory())</span><br><span class="line">                        <span class="comment">//缓存配置</span></span><br><span class="line">                        .cacheDefaults(redisCacheConfiguration)</span><br><span class="line">                        <span class="comment">//配置同步修改或删除 put/evict</span></span><br><span class="line">                        .transactionAware()</span><br><span class="line">                        .build();</span><br><span class="line">        <span class="keyword">return</span> redisCacheManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@CacheConfig(cacheNames = &quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@CachePut(key = &quot;#user.id.toString()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        userMapper.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Cacheable(key = &quot;#id.toString()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">selectById</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(id);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@CacheEvict(key = &quot;#id.toString()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">        userMapper.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="自定义-CacheManager">自定义 CacheManager</h3>
<p><strong>为什么要配置自定义 CacheManager？</strong></p>
<p>当导入 Redis 后，SpringBoot 不再使用默认的 SimpleCacheManager，因为 Redis 的配置类，会提前注入 redisCacheManager，能够缓存，但是使用的是 JDK 内置的序列化器，可视化很差</p>
<p><img src="2.png" alt=""></p>
<p>为了能让 redis 使用我们指定的序列化器，必须自定义 cacheManager</p>
<p><img src="1.png" alt=""></p>
<h2 id="SpringBoot-整合-Redis、Caffeine">SpringBoot 整合 Redis、Caffeine</h2>
<h3 id="基本使用-3">基本使用</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--caffeine--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.ben-manes.caffeine<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>caffeine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--redis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/springboot?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">lettuce:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">20</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="number">-1</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">10</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">1000</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 本地缓存 Caffeine 配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LocalCacheConfiguration</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Bean(&quot;localCacheManager&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Cache&lt;String, Object&gt; <span class="title function_">localCacheManager</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Caffeine.newBuilder()</span><br><span class="line">                <span class="comment">//写入或者更新 5s 后，缓存过期并失效, 实际项目中肯定不会那么短时间就过期，根据具体情况设置即可</span></span><br><span class="line">                .expireAfterWrite(<span class="number">5</span>, TimeUnit.SECONDS)</span><br><span class="line">                <span class="comment">// 初始的缓存空间大小</span></span><br><span class="line">                .initialCapacity(<span class="number">50</span>)</span><br><span class="line">                <span class="comment">// 缓存的最大条数，通过 Window TinyLfu 算法控制整个缓存大小</span></span><br><span class="line">                .maximumSize(<span class="number">500</span>)</span><br><span class="line">            	<span class="comment">//打开数据收集功能</span></span><br><span class="line">                .recordStats()</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String,Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span>&#123;</span><br><span class="line">        RedisTemplate&lt;String,Object&gt; redisTemplate=<span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        redisTemplate.setConnectionFactory(factory);</span><br><span class="line"></span><br><span class="line">        <span class="type">StringRedisSerializer</span> <span class="variable">stringRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        <span class="type">GenericJackson2JsonRedisSerializer</span> <span class="variable">genericJackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>();</span><br><span class="line"></span><br><span class="line">        redisTemplate.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        redisTemplate.setValueSerializer(genericJackson2JsonRedisSerializer);</span><br><span class="line"></span><br><span class="line">        redisTemplate.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        redisTemplate.setHashValueSerializer(genericJackson2JsonRedisSerializer);</span><br><span class="line">        <span class="keyword">return</span>  redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(User user)</span>;</span><br><span class="line"> </span><br><span class="line">    User <span class="title function_">getById</span><span class="params">(String id)</span>;</span><br><span class="line"> </span><br><span class="line">    User <span class="title function_">update</span><span class="params">(User user)</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(String id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟数据库存储数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HashMap&lt;String, User&gt; userMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Cache&lt;String, Object&gt; caffeineCache;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserServiceImpl</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate,</span></span><br><span class="line"><span class="params">                           <span class="meta">@Qualifier(&quot;localCacheManager&quot;)</span> Cache&lt;String, Object&gt; caffeineCache)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">        <span class="built_in">this</span>.caffeineCache = caffeineCache;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        userMap.put(<span class="string">&quot;1&quot;</span>, <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>));</span><br><span class="line">        userMap.put(<span class="string">&quot;2&quot;</span>, <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;lisi&quot;</span>));</span><br><span class="line">        userMap.put(<span class="string">&quot;3&quot;</span>, <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;3&quot;</span>, <span class="string">&quot;wangwu&quot;</span>));</span><br><span class="line">        userMap.put(<span class="string">&quot;4&quot;</span>, <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;4&quot;</span>, <span class="string">&quot;zhaoliu&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.保存 Caffeine 缓存</span></span><br><span class="line">        caffeineCache.put(user.getId(), user);</span><br><span class="line">        <span class="comment">// 2.保存 redis 缓存</span></span><br><span class="line">        redisTemplate.opsForValue().set(user.getId(), JSON.toJSONString(user), <span class="number">20</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="comment">// 3.保存数据库(模拟)</span></span><br><span class="line">        userMap.put(user.getId(), user);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getById</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.先从 Caffeine 缓存中读取</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> caffeineCache.getIfPresent(id);</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(o)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;从Caffeine中查询到数据...&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> (User) o;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 2.如果缓存中不存在，则从 Redis 缓存中查找</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> (String) redisTemplate.opsForValue().get(id);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> JSON.parseObject(jsonString, User.class);</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(user)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;从Redis中查询到数据...&quot;</span>);</span><br><span class="line">            <span class="comment">// 保存 Caffeine 缓存</span></span><br><span class="line">            caffeineCache.put(user.getId(), user);</span><br><span class="line">            <span class="keyword">return</span> user;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 3.如果 Redis 缓存中不存在，则从数据库中查询</span></span><br><span class="line">        user = userMap.get(id);</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(user)) &#123;</span><br><span class="line">            <span class="comment">// 保存 Caffeine 缓存</span></span><br><span class="line">            caffeineCache.put(user.getId(), user);</span><br><span class="line">            <span class="comment">// 保存 Redis 缓存,20s 后过期</span></span><br><span class="line">            redisTemplate.opsForValue().set(user.getId(), JSON.toJSONString(user), <span class="number">20</span>, TimeUnit.SECONDS);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;从数据库中查询到数据...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">update</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">oldUser</span> <span class="operator">=</span> userMap.get(user.getId());</span><br><span class="line">        oldUser.setName(user.getName());</span><br><span class="line">        <span class="comment">// 1.更新数据库</span></span><br><span class="line">        userMap.put(oldUser.getId(), oldUser);</span><br><span class="line">        <span class="comment">// 2.更新 Caffeine 缓存</span></span><br><span class="line">        caffeineCache.put(oldUser.getId(), oldUser);</span><br><span class="line">        <span class="comment">// 3.更新 Redis 数据库</span></span><br><span class="line">        redisTemplate.opsForValue().set(oldUser.getId(), JSON.toJSONString(oldUser), <span class="number">20</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">return</span> oldUser;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.删除数据库</span></span><br><span class="line">        userMap.remove(id);</span><br><span class="line">        <span class="comment">// 2.删除 Caffeine 缓存</span></span><br><span class="line">        caffeineCache.invalidate(id);</span><br><span class="line">        <span class="comment">// 3.删除 Redis 缓存</span></span><br><span class="line">        redisTemplate.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="自定义-CacheManager-2">自定义 CacheManager</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(&quot;com.example.cache&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, CacheProperty&gt; managers;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">CacheProperty</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 初始化缓存条数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> Integer initialCapacity;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 缓存最大条数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> Integer maximumSize;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 缓存过期时间</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> Integer expireAfterAccess;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 缓存名称列表</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> List&lt;String&gt; cacheNames;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;CacheProperties.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CaffeineAutoConfiguration</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextAware</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext context;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> CacheProperties cacheProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(<span class="meta">@Nullable</span> ApplicationContext context)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="built_in">this</span>.context = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="keyword">public</span> CaffeineCacheManager <span class="title function_">caffeineCacheManager</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CaffeineCacheManager</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildCacheManagers</span><span class="params">()</span> &#123;</span><br><span class="line">        Map&lt;String, CacheProperties.CacheProperty&gt; propertyMap = <span class="built_in">this</span>.cacheProperties.getManagers();</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(propertyMap)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;未配置 CacheManager&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">DefaultListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> (DefaultListableBeanFactory) <span class="built_in">this</span>.context.getAutowireCapableBeanFactory();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, CacheProperties.CacheProperty&gt; entry : propertyMap.entrySet()) &#123;</span><br><span class="line">            <span class="type">BeanDefinitionBuilder</span> <span class="variable">beanDefinitionBuilder</span> <span class="operator">=</span> BeanDefinitionBuilder.genericBeanDefinition(CaffeineCacheManager.class);</span><br><span class="line">            beanDefinitionBuilder.addPropertyValue(<span class="string">&quot;cacheNames&quot;</span>, entry.getValue().getCacheNames());</span><br><span class="line">            Caffeine&lt;Object, Object&gt; caffeine = <span class="built_in">this</span>.buildCaffeine(entry.getValue());</span><br><span class="line">            beanDefinitionBuilder.addPropertyValue(<span class="string">&quot;caffeine&quot;</span>, caffeine);</span><br><span class="line">            beanFactory.registerBeanDefinition(entry.getKey(), beanDefinitionBuilder.getBeanDefinition());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Caffeine&lt;Object, Object&gt; <span class="title function_">buildCaffeine</span><span class="params">(CacheProperties.CacheProperty property)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Caffeine.newBuilder()</span><br><span class="line">                .initialCapacity(property.getInitialCapacity())</span><br><span class="line">                .maximumSize((<span class="type">long</span>) property.getMaximumSize())</span><br><span class="line">                .expireAfterAccess((<span class="type">long</span>) property.getExpireAfterAccess(), TimeUnit.SECONDS)</span><br><span class="line">                .recordStats();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot（8-事务监听器）</title>
    <url>/blog/2025/03/24/Java/SpringBoot/SpringBoot%EF%BC%8812-%E4%BA%8B%E5%8A%A1%E7%9B%91%E5%90%AC%E5%99%A8%EF%BC%89/</url>
    <content><![CDATA[<h2 id="使用背景">使用背景</h2>
<p>当在完成某些数据的入库后，发布了一个事件，此时使用的是@EventListener，然后在这个事件中又去对刚才入库的数据进行查询，从而完成后续的操作。例如：（数据入库 =&gt; 对入库数据进行查询审核），这时候会发现，查询不到刚才入库的数据，这是因为事务还没提交完成，在同一个事务当中，查询不到才存入的数据，那么就引出了下面的解决方式</p>
<ol>
<li>@TransactionalEventListener</li>
<li>事务同步管理器 TransactionSynchronizationManager</li>
</ol>
<h2 id="注解属性">注解属性</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.ANNOTATION_TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@EventListener</span> <span class="comment">//有类似于注解继承的效果</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> TransactionalEventListener &#123;</span><br><span class="line">	<span class="comment">// 这个注解取值有：BEFORE_COMMIT、AFTER_COMMIT、AFTER_ROLLBACK、AFTER_COMPLETION</span></span><br><span class="line">	<span class="comment">// 各个值都代表什么意思表达什么功能，非常清晰，下面解释了对应的枚举类~</span></span><br><span class="line">	<span class="comment">// 需要注意的是：AFTER_COMMIT + AFTER_COMPLETION 是可以同时生效的</span></span><br><span class="line">	<span class="comment">// AFTER_ROLLBACK + AFTER_COMPLETION 是可以同时生效的</span></span><br><span class="line">	TransactionPhase <span class="title function_">phase</span><span class="params">()</span> <span class="keyword">default</span> TransactionPhase.AFTER_COMMIT;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 表明若没有事务的时候，对应的 event 是否需要执行，默认值为 false 表示，没事务就不执行了。</span></span><br><span class="line">	<span class="type">boolean</span> <span class="title function_">fallbackExecution</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 这里巧妙的用到了@AliasFor 的能力，放到了@EventListener 身上</span></span><br><span class="line">	<span class="comment">// 注意：一般建议都需要指定此值，否则默认可以处理所有类型的事件，范围太广了。</span></span><br><span class="line">	<span class="meta">@AliasFor(annotation = EventListener.class, attribute = &quot;classes&quot;)</span></span><br><span class="line">	Class&lt;?&gt;[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">	<span class="meta">@AliasFor(annotation = EventListener.class, attribute = &quot;classes&quot;)</span></span><br><span class="line">	Class&lt;?&gt;[] classes() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">	</span><br><span class="line">	String <span class="title function_">condition</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">TransactionPhase</span> &#123;</span><br><span class="line">    <span class="comment">// 指定目标方法在事务 commit 之前执行</span></span><br><span class="line">    BEFORE_COMMIT,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 指定目标方法在事务 commit 之后执行</span></span><br><span class="line">    AFTER_COMMIT,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 指定目标方法在事务 rollback 之后执行</span></span><br><span class="line">    AFTER_ROLLBACK,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 指定目标方法在事务完成时执行，这里的完成是指无论事务是成功提交还是事务回滚了</span></span><br><span class="line">    AFTER_COMPLETION</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="基本使用">基本使用</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">HelloService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationEventPublisher applicationEventPublisher;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">hello</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="comment">// 向数据库插入一条记录</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into user (id,name,age) values (&quot;</span> + id + <span class="string">&quot;,&#x27;fsx&#x27;,21)&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发布一个自定义的事件~~~</span></span><br><span class="line">        applicationEventPublisher.publishEvent(<span class="keyword">new</span> <span class="title class_">MyAfterTransactionEvent</span>(<span class="string">&quot;我是和事务相关的事件，请事务提交后执行我~~~&quot;</span>, id));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;service hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Slf4j</span></span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyTransactionListener</span> &#123;</span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@TransactionalEventListener(phase = TransactionPhase.AFTER_COMMIT)</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">onHelloEvent</span><span class="params">(HelloServiceImpl.MyAfterTransactionEvent event)</span> &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">source</span> <span class="operator">=</span> event.getSource();</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">id</span> <span class="operator">=</span> event.getId();</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">query</span> <span class="operator">=</span> <span class="string">&quot;select count(1) from user where id = &quot;</span> + id;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> jdbcTemplate.queryForObject(query, Integer.class);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 可以看到 这里的 count 是 1  它肯定是在上面事务提交之后才会执行的</span></span><br><span class="line">            log.info(source + <span class="string">&quot;:&quot;</span> + count.toString()); <span class="comment">//我是和事务相关的事件，请事务提交后执行我~~~: 1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定一个事件，继承自 ApplicationEvent </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyAfterTransactionEvent</span> <span class="keyword">extends</span> <span class="title class_">ApplicationEvent</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MyAfterTransactionEvent</span><span class="params">(Object source, Integer id)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(source);</span><br><span class="line">            <span class="built_in">this</span>.id = id;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="实现原理">实现原理</h2>
<p>Spring 对事务监控的处理逻辑是在 TransactionSynchronization</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TransactionSynchronization</span> <span class="keyword">extends</span> <span class="title class_">Ordered</span>, Flushable &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">STATUS_COMMITTED</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">STATUS_ROLLED_BACK</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">STATUS_UNKNOWN</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.MAX_VALUE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在当前事务挂起时执行</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">suspend</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在当前事务重新加载时执行</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">resume</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在当前数据刷新到数据库时执行</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">flush</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在当前事务 commit 之前执行</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">beforeCommit</span><span class="params">(<span class="type">boolean</span> readOnly)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在当前事务 completion 之前执行</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">beforeCompletion</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在当前事务 commit 之后实质性</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">afterCommit</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在当前事务 completion 之后执行</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(<span class="type">int</span> status)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Spring 会注册一个 TransactionalEventListenerFactory 类型的 bean 到 Spring 容器中，TransactionalEventListenerFactory 实现了 EventListenerFactory 接口，主要作用是先判断目标方法是否是某个监听器的类型，然后为目标方法生成一个监听器，会在某个 bean 初始化之后由 Spring 调用其方法用于生成监听器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransactionalEventListenerFactory</span> <span class="keyword">implements</span> <span class="title class_">EventListenerFactory</span>, Ordered &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定当前监听器的顺序</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">order</span> <span class="operator">=</span> <span class="number">50</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOrder</span><span class="params">(<span class="type">int</span> order)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.order = order;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.order;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定目标方法是否是所支持的监听器的类型，这里的判断逻辑就是如果目标方法上包含有</span></span><br><span class="line">    <span class="comment">// TransactionalEventListener 注解，则说明其是一个事务事件监听器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supportsMethod</span><span class="params">(Method method)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (AnnotationUtils.findAnnotation(method, TransactionalEventListener.class) != <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 为目标方法生成一个事务事件监听器，这里 ApplicationListenerMethodTransactionalAdapter 实现了</span></span><br><span class="line">    <span class="comment">// ApplicationEvent 接口</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ApplicationListener&lt;?&gt; createApplicationListener(String beanName, Class&lt;?&gt; type, Method method) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApplicationListenerMethodTransactionalAdapter</span>(beanName, type, method);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>TransactionalApplicationListenerMethodAdapter 在监听到发布的事件之后会生成一个 TransactionSynchronization 对象，并且将该对象注册到当前事务逻辑中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransactionalApplicationListenerMethodAdapter</span> <span class="keyword">extends</span> <span class="title class_">ApplicationListenerMethodAdapter</span> <span class="keyword">implements</span> <span class="title class_">TransactionalApplicationListener</span>&lt;ApplicationEvent&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TransactionalEventListener annotation;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TransactionPhase transactionPhase;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;TransactionalApplicationListener.SynchronizationCallback&gt; callbacks = <span class="keyword">new</span> <span class="title class_">CopyOnWriteArrayList</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TransactionalApplicationListenerMethodAdapter</span><span class="params">(String beanName, Class&lt;?&gt; targetClass, Method method)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(beanName, targetClass, method);</span><br><span class="line">        <span class="type">TransactionalEventListener</span> <span class="variable">ann</span> <span class="operator">=</span> (TransactionalEventListener)AnnotatedElementUtils.findMergedAnnotation(method, TransactionalEventListener.class);</span><br><span class="line">        <span class="keyword">if</span> (ann == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;No TransactionalEventListener annotation found on method: &quot;</span> + method);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.annotation = ann;</span><br><span class="line">            <span class="built_in">this</span>.transactionPhase = ann.phase();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TransactionPhase <span class="title function_">getTransactionPhase</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.transactionPhase;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCallback</span><span class="params">(TransactionalApplicationListener.SynchronizationCallback callback)</span> &#123;</span><br><span class="line">        Assert.notNull(callback, <span class="string">&quot;SynchronizationCallback must not be null&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.callbacks.add(callback);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(ApplicationEvent event)</span> &#123;</span><br><span class="line">        <span class="comment">// 如果当前 TransactionManager 已经配置开启事务事件监听，此时才会注册 TransactionSynchronization 对象</span></span><br><span class="line">        <span class="keyword">if</span> (TransactionSynchronizationManager.isSynchronizationActive() &amp;&amp; TransactionSynchronizationManager.isActualTransactionActive()) &#123;</span><br><span class="line">            <span class="comment">// 注册 TransactionSynchronization 对象到 TransactionManager 中</span></span><br><span class="line">            TransactionSynchronizationManager.registerSynchronization(<span class="keyword">new</span> <span class="title class_">TransactionalApplicationListenerSynchronization</span>(event, <span class="built_in">this</span>, <span class="built_in">this</span>.callbacks));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.annotation.fallbackExecution()) &#123;</span><br><span class="line">            <span class="comment">// 如果当前 TransactionManager 没有开启事务事件处理，但是当前事务监听方法中配置了</span></span><br><span class="line">        	<span class="comment">// fallbackExecution 属性为 true，说明其需要对当前事务事件进行监听，无论其是否有事务</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.annotation.phase() == TransactionPhase.AFTER_ROLLBACK &amp;&amp; <span class="built_in">this</span>.logger.isWarnEnabled()) &#123;</span><br><span class="line">                <span class="built_in">this</span>.logger.warn(<span class="string">&quot;Processing &quot;</span> + event + <span class="string">&quot; as a fallback execution on AFTER_ROLLBACK phase&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.processEvent(event);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line">            <span class="comment">// 走到这里说明当前是不需要事务事件处理的，因而直接略过</span></span><br><span class="line">            <span class="built_in">this</span>.logger.debug(<span class="string">&quot;No transaction is active - skipping &quot;</span> + event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">TransactionSynchronizationEventAdapter</span> </span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_">TransactionSynchronizationAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ApplicationListenerMethodAdapter listener;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ApplicationEvent event;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TransactionPhase phase;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TransactionSynchronizationEventAdapter</span><span class="params">(ApplicationListenerMethodAdapter </span></span><br><span class="line"><span class="params">        listener, ApplicationEvent event, TransactionPhase phase)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.listener = listener;</span><br><span class="line">        <span class="built_in">this</span>.event = event;</span><br><span class="line">        <span class="built_in">this</span>.phase = phase;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.listener.getOrder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在目标方法配置的 phase 属性为 BEFORE_COMMIT 时，处理 before commit 事件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeCommit</span><span class="params">(<span class="type">boolean</span> readOnly)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.phase == TransactionPhase.BEFORE_COMMIT) &#123;</span><br><span class="line">            processEvent();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 这里对于 after completion 事件的处理，虽然分为了三个 if 分支，但是实际上都是执行的 processEvent()</span></span><br><span class="line">    <span class="comment">// 方法，因为 after completion 事件是事务事件中一定会执行的，因而这里对于 commit，</span></span><br><span class="line">    <span class="comment">// rollback 和 completion 事件都在当前方法中处理也是没问题的</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(<span class="type">int</span> status)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.phase == TransactionPhase.AFTER_COMMIT &amp;&amp; status == STATUS_COMMITTED) &#123;</span><br><span class="line">            processEvent();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.phase == TransactionPhase.AFTER_ROLLBACK </span><br><span class="line">                   &amp;&amp; status == STATUS_ROLLED_BACK) &#123;</span><br><span class="line">            processEvent();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.phase == TransactionPhase.AFTER_COMPLETION) &#123;</span><br><span class="line">            processEvent();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 执行事务事件</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">processEvent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.listener.processEvent(<span class="built_in">this</span>.event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processEvent</span><span class="params">(ApplicationEvent event)</span> &#123;</span><br><span class="line">    <span class="comment">// 处理事务事件的相关参数，这里主要是判断 TransactionalEventListener 注解中是否配置了 value</span></span><br><span class="line">    <span class="comment">// 或 classes 属性，如果配置了，则将方法参数转换为该指定类型传给监听的方法；如果没有配置，则判断</span></span><br><span class="line">    <span class="comment">// 目标方法是 ApplicationEvent 类型还是 PayloadApplicationEvent 类型，是则转换为该类型传入</span></span><br><span class="line">    Object[] args = resolveArguments(event);</span><br><span class="line">    <span class="comment">// 这里主要是获取 TransactionalEventListener 注解中的 condition 属性，然后通过</span></span><br><span class="line">    <span class="comment">// Spring expression language 将其与目标类和方法进行匹配</span></span><br><span class="line">    <span class="keyword">if</span> (shouldHandle(event, args)) &#123;</span><br><span class="line">        <span class="comment">// 通过处理得到的参数借助于反射调用事务监听方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> doInvoke(args);</span><br><span class="line">        <span class="keyword">if</span> (result != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 对方法的返回值进行处理</span></span><br><span class="line">            handleResult(result);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.trace(<span class="string">&quot;No result object given - no result to handle&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理事务监听方法的参数</span></span><br><span class="line"><span class="keyword">protected</span> Object[] resolveArguments(ApplicationEvent event) &#123;</span><br><span class="line">    <span class="comment">// 获取发布事务事件时传入的参数类型</span></span><br><span class="line">    <span class="type">ResolvableType</span> <span class="variable">declaredEventType</span> <span class="operator">=</span> getResolvableType(event);</span><br><span class="line">    <span class="keyword">if</span> (declaredEventType == <span class="literal">null</span>) &#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果事务监听方法的参数个数为 0，则直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.method.getParameterCount() == <span class="number">0</span>) &#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果事务监听方法的参数不为 ApplicationEvent 或 PayloadApplicationEvent，则直接将发布事务</span></span><br><span class="line">    <span class="comment">// 事件时传入的参数当做事务监听方法的参数传入。从这里可以看出，如果事务监听方法的参数不是</span></span><br><span class="line">    <span class="comment">// ApplicationEvent 或 PayloadApplicationEvent 类型，那么其参数必须只能有一个，并且这个</span></span><br><span class="line">    <span class="comment">// 参数必须与发布事务事件时传入的参数一致</span></span><br><span class="line">    Class&lt;?&gt; eventClass = declaredEventType.getRawClass();</span><br><span class="line">    <span class="keyword">if</span> ((eventClass == <span class="literal">null</span> || !ApplicationEvent.class.isAssignableFrom(eventClass)) &amp;&amp;</span><br><span class="line">    	event <span class="keyword">instanceof</span> PayloadApplicationEvent) &#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;((PayloadApplicationEvent) event).getPayload()&#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果参数类型为 ApplicationEvent 或 PayloadApplicationEvent，则直接将其传入事务事件方法</span></span><br><span class="line">    	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;event&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断事务事件方法方法是否需要进行事务事件处理</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">shouldHandle</span><span class="params">(ApplicationEvent event, <span class="meta">@Nullable</span> Object[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (args == <span class="literal">null</span>) &#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">condition</span> <span class="operator">=</span> getCondition();</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.hasText(condition)) &#123;</span><br><span class="line">        Assert.notNull(<span class="built_in">this</span>.evaluator, <span class="string">&quot;EventExpressionEvaluator must no be null&quot;</span>);</span><br><span class="line">        <span class="type">EvaluationContext</span> <span class="variable">evaluationContext</span> <span class="operator">=</span> <span class="built_in">this</span>.evaluator.createEvaluationContext(</span><br><span class="line">            event, <span class="built_in">this</span>.targetClass, <span class="built_in">this</span>.method, args, <span class="built_in">this</span>.applicationContext);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.evaluator.condition(condition, <span class="built_in">this</span>.methodKey, evaluationContext);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对事务事件方法的返回值进行处理，这里的处理方式主要是将其作为一个事件继续发布出去，这样就可以在</span></span><br><span class="line"><span class="comment">// 一个统一的位置对事务事件的返回值进行处理</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">handleResult</span><span class="params">(Object result)</span> &#123;</span><br><span class="line">    <span class="comment">// 如果返回值是数组类型，则对数组元素一个一个进行发布</span></span><br><span class="line">    <span class="keyword">if</span> (result.getClass().isArray()) &#123;</span><br><span class="line">        Object[] events = ObjectUtils.toObjectArray(result);</span><br><span class="line">        <span class="keyword">for</span> (Object event : events) &#123;</span><br><span class="line">            publishEvent(event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result <span class="keyword">instanceof</span> Collection&lt;?&gt;) &#123;</span><br><span class="line">    	<span class="comment">// 如果返回值是集合类型，则对集合进行遍历，并且发布集合中的每个元素</span></span><br><span class="line">    	Collection&lt;?&gt; events = (Collection&lt;?&gt;) result;</span><br><span class="line">        <span class="keyword">for</span> (Object event : events) &#123;</span><br><span class="line">            publishEvent(event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果返回值是一个对象，则直接将其进行发布</span></span><br><span class="line">        publishEvent(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot（3-Validator属性校验）</title>
    <url>/blog/2025/03/19/Java/SpringBoot/SpringBoot%EF%BC%883-Validator%E5%B1%9E%E6%80%A7%E6%A0%A1%E9%AA%8C%EF%BC%89/</url>
    <content><![CDATA[<h2 id="依赖">依赖</h2>
<p>Java API 规范（JSR303）定义了 Bean 校验的标准 validation-api，但没有提供实现。hibernate validation 是对这个规范的实现，并增加了校验注解如 @Email、@Length 等。Spring Validation 是对 hibernate validation 的二次封装，用于支持 spring mvc 参数自动校验</p>
<p>如果 spring-boot 版本小于 2.3.x，spring-boot-starter-web 会自动传入 hibernate-validator 依赖。如果 spring-boot 版本大于 2.3.x，则需要手动引入依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;groupId&gt;org.hibernate&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;version&gt;6.0.1.Final&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;/dependency&gt;--&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="常用注解">常用注解</h2>
<table>
<thead>
<tr>
<th>注解</th>
<th>返回值</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>@AssertFalse</td>
<td>Boolean, boolean</td>
<td>验证注解的元素值是 false</td>
</tr>
<tr>
<td>@AssertTrue</td>
<td>Boolean, boolean</td>
<td>验证注解的元素值是 true</td>
</tr>
<tr>
<td>@NotNull</td>
<td>任意类型</td>
<td>验证注解的元素值不是 null</td>
</tr>
<tr>
<td>@Null</td>
<td>任意类型</td>
<td>验证注解的元素值是 null</td>
</tr>
<tr>
<td>@Min(value = 值)</td>
<td>BigDecimal，BigInteger, byte, short, int, long，等任何 Number 或 CharSequence（存储的是数字）子类型</td>
<td>验证注解的元素值大于等于@Min 指定的 value 值</td>
</tr>
<tr>
<td>@Max（value = 值）</td>
<td>和@Min 要求一样</td>
<td>验证注解的元素值小于等于@Max 指定的 value 值</td>
</tr>
<tr>
<td>@DecimalMin(value = 值)</td>
<td>和@Min 要求一样</td>
<td>验证注解的元素值大于等于@ DecimalMin 指定的 value 值</td>
</tr>
<tr>
<td>@DecimalMax(value = 值)</td>
<td>和@Min 要求一样</td>
<td>验证注解的元素值小于等于@ DecimalMax 指定的 value 值</td>
</tr>
<tr>
<td>@Digits(integer = 整数位数, fraction = 小数位数)</td>
<td>和@Min 要求一样</td>
<td>验证注解的元素值的整数位数和小数位数上限</td>
</tr>
<tr>
<td>@Size(min = 下限, max = 上限)</td>
<td>字符串、Collection、Map、数组等</td>
<td>验证注解的元素值的在 min 和 max（包含）指定区间之内，如字符长度、集合大小</td>
</tr>
<tr>
<td>@Past</td>
<td>java.util.Date, java.util.Calendar; Joda Time 类库的日期类型</td>
<td>验证注解的元素值（日期类型）比当前时间早</td>
</tr>
<tr>
<td>@Future</td>
<td>与@Past 要求一样</td>
<td>验证注解的元素值（日期类型）比当前时间晚</td>
</tr>
<tr>
<td>@NotBlank</td>
<td>CharSequence 子类型</td>
<td>验证注解的元素值不为空（不为 null、去除首位空格后长度为 0），不同于@NotEmpty，@NotBlank 只应用于字符串且在比较时会去除字符串的首位空格</td>
</tr>
<tr>
<td>@Length(min = 下限, max = 上限)</td>
<td>CharSequence 子类型</td>
<td>验证注解的元素值长度在 min 和 max 区间内</td>
</tr>
<tr>
<td>@NotEmpty</td>
<td>CharSequence 子类型、Collection、Map、数组</td>
<td>验证注解的元素值不为 null 且不为空（字符串长度不为 0、集合大小不为 0）</td>
</tr>
<tr>
<td>@Range(min = 最小值, max = 最大值)</td>
<td>BigDecimal, BigInteger, CharSequence, byte, short, int, long 等原子类型和包装类型</td>
<td>验证注解的元素值在最小值和最大值之间</td>
</tr>
<tr>
<td>@Email(regexp = 正则表达式, flag = 标志的模式)</td>
<td>CharSequence 子类型（如 String）</td>
<td>验证注解的元素值是 Email，也可以通过 regexp 和 flag 指定自定义的 email 格式</td>
</tr>
<tr>
<td>@Pattern(regexp = 正则表达式, flag = 标志的模式)</td>
<td>String，任何 CharSequence 的子类型</td>
<td>验证注解的元素值与指定的正则表达式匹配</td>
</tr>
<tr>
<td>@Valid</td>
<td>任何非原子类型</td>
<td>指定递归验证关联的对象；如用户对象中有个地址对象属性，如果想在验证用户对象时一起验证地址对象的话，在地址对象上加@Valid 注解即可级联验证</td>
</tr>
</tbody>
</table>
<h2 id="使用案例">使用案例</h2>
<h3 id="基本使用">基本使用</h3>
<ol>
<li>在请求参数上声明校验注解</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserValid</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@NotNull(message = &quot;id不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@NotNull(message = &quot;date不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span></span><br><span class="line">    <span class="meta">@Future(message = &quot;只能是将来的日期&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date date;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@DecimalMax(value = &quot;10000.0&quot;)</span></span><br><span class="line">    <span class="meta">@DecimalMin(value = &quot;1.0&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Double</span> <span class="variable">doubleValue</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@Max(value = 100, message = &quot;最大值&quot;)</span></span><br><span class="line">    <span class="meta">@Min(value = 1, message = &quot;最小值&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer integer;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Range(min = 1,max = 100,message = &quot;范围&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long range;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Email(message = &quot;邮箱格式错误&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Size(min = 2,max = 10,message = &quot;字符串长度在2-10&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/save&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">saveUser</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated</span> UserValid userValid)</span> &#123;</span><br><span class="line">    <span class="comment">// 校验通过，才会执行业务逻辑处理</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>RequestParam/PathVariable 参数校验</li>
</ol>
<p>GET 请求一般会使用 RequestParam/PathVariable 传参。如果参数比较多（比如超过 6 个），还是推荐使用 DTO 对象接收。否则，推荐将一个个参数平铺到方法入参中。在这种情况下，必须在 Controller 类上标注 @Validated 注解，并在入参上声明约束注解（如 @Min 等）。如果校验失败，会抛出 ConstraintViolationException 异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/api/user&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="comment">// 路径变量</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;&#123;userId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">detail</span><span class="params">(<span class="meta">@PathVariable(&quot;userId&quot;)</span> <span class="meta">@Min(10000000000000000L)</span> Long userId)</span> &#123;</span><br><span class="line">        <span class="comment">// 校验通过，才会执行业务逻辑处理</span></span><br><span class="line">        <span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDTO</span>();</span><br><span class="line">        userDTO.setUserId(userId);</span><br><span class="line">        userDTO.setAccount(<span class="string">&quot;11111111111111111&quot;</span>);</span><br><span class="line">        userDTO.setUserName(<span class="string">&quot;xixi&quot;</span>);</span><br><span class="line">        userDTO.setAccount(<span class="string">&quot;11111111111111111&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(userDTO);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询参数</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;getByAccount&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">getByAccount</span><span class="params">(<span class="meta">@Length(min = 6, max = 20)</span> <span class="meta">@NotNull</span> String  account)</span> &#123;</span><br><span class="line">        <span class="comment">// 校验通过，才会执行业务逻辑处理</span></span><br><span class="line">        <span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDTO</span>();</span><br><span class="line">        userDTO.setUserId(<span class="number">10000000000000003L</span>);</span><br><span class="line">        userDTO.setAccount(account);</span><br><span class="line">        userDTO.setUserName(<span class="string">&quot;xixi&quot;</span>);</span><br><span class="line">        userDTO.setAccount(<span class="string">&quot;11111111111111111&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(userDTO);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="多级嵌套">多级嵌套</h3>
<p>当实体类中字段中包含其他对象时，且该对象是需要校验时，需要在实体类字段中加上@Valid</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Project</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;Project title must be present&quot;)</span></span><br><span class="line">    <span class="meta">@Size(min = 3, max = 20, message = &quot;Project title size not valid&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 校验嵌套的对象</span></span><br><span class="line">    <span class="meta">@Valid</span></span><br><span class="line">    <span class="keyword">private</span> User owner;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 校验规则</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;User name must be present&quot;)</span></span><br><span class="line">    <span class="meta">@Size(min = 3, max = 50, message = &quot;User name size not valid&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 校验规则</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;User email must be present&quot;)</span></span><br><span class="line">    <span class="meta">@Email(message = &quot;User email format is incorrect&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="分组校验">分组校验</h3>
<p>在很多时候，同一个模型可能会在多处被用到，但每处的校验场景又不一定相同（如：新增用户接口、修改用户接口，参数都是 User 模型，在新增时 User 中 name 字段不能为空，userNo 字段可以为空；在修改时 User 中 name 字段可以为空，userNo 字段不能为空）。</p>
<p>我们可以用 groups 来实现：同一个模型在不同场景下，动态区分校验模型中的不同字段。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Add</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Edit</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 新增</span></span><br><span class="line"><span class="keyword">public</span> AjaxResult <span class="title function_">addSave</span><span class="params">(<span class="meta">@Validated(Add.class)</span> <span class="meta">@RequestBody</span> Xxxx xxxx)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> success(xxxx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编辑</span></span><br><span class="line"><span class="keyword">public</span> AjaxResult <span class="title function_">editSave</span><span class="params">(<span class="meta">@Validated(Edit.class)</span> <span class="meta">@RequestBody</span> Xxxx xxxx)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> success(xxxx);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 仅在新增时验证</span></span><br><span class="line"><span class="meta">@NotNull(message = &quot;不能为空&quot;, groups = &#123;Add.class&#125;)</span></span><br><span class="line"><span class="keyword">private</span> String xxxx;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在新增和修改时验证</span></span><br><span class="line"><span class="meta">@NotBlank(message = &quot;不能为空&quot;, groups = &#123;Add.class, Edit.class&#125;)</span></span><br><span class="line"><span class="keyword">private</span> String xxxx;</span><br></pre></td></tr></table></figure>
<h3 id="自定义注解校验">自定义注解校验</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义校验注解</span></span><br><span class="line"><span class="comment"> *     1、message、contains、payload是必须要写的</span></span><br><span class="line"><span class="comment"> *     2、还需要什么方法可根据自己的实际业务需求，自行添加定义即可</span></span><br><span class="line"><span class="comment"> * 注:当没有指定默认值时，那么在使用此注解时，就必须输入对应的属性值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(&#123;FIELD, PARAMETER&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="comment">// 指定此注解的实现，即:验证器</span></span><br><span class="line"><span class="meta">@Constraint(validatedBy =&#123;JustryDengValidator.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ConstraintsJustryDeng &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 当验证不通过时的提示信息</span></span><br><span class="line">    String <span class="title function_">message</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;JustryDeng : param value must contais specified value!&quot;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 根据实际需求定的方法</span></span><br><span class="line">    String <span class="title function_">contains</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 约束注解在验证时所属的组别</span></span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123; &#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 负载</span></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Payload</span>&gt;[] payload() <span class="keyword">default</span> &#123; &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ConstraintsJustryDeng注解 校验器 实现</span></span><br><span class="line"><span class="comment"> * 注:验证器需要实现ConstraintValidator&lt;U, V&gt;, 其中 U为对应的注解类， V为被该注解标记的字段的类型(或其父类型)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 注: 当项目启动后，会(懒加载)创建ConstraintValidator实例，在创建实例后会初始化调</span></span><br><span class="line"><span class="comment"> *     用&#123;<span class="doctag">@link</span> ConstraintValidator#initialize&#125;方法。</span></span><br><span class="line"><span class="comment"> *     所以，只有在第一次请求时，会走initialize方法， 后面的请求是不会走initialize方法的。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 注: (懒加载)创建ConstraintValidator实例时， 会走缓存; 如果缓存中有，则直接使用相</span></span><br><span class="line"><span class="comment"> *     同的ConstraintValidator实例； 如果缓存中没有，那么会创建新的ConstraintValidator实例。</span></span><br><span class="line"><span class="comment"> *     由于缓存的key是能唯一定位的， 且 ConstraintValidator的实例属性只有在</span></span><br><span class="line"><span class="comment"> *     &#123;<span class="doctag">@link</span> ConstraintValidator#initialize&#125;方法中才会写；</span></span><br><span class="line"><span class="comment"> *	   在&#123;<span class="doctag">@link</span> ConstraintValidator#isValid&#125;方法中只是读。</span></span><br><span class="line"><span class="comment"> *     所以不用担心线程安全问题。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 注: 如何创建ConstraintValidator实例的，可详见源码</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@see</span> ConstraintTree#getInitializedConstraintValidator(ValidationContext, ValueContext)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JustryDengValidator</span> <span class="keyword">implements</span> <span class="title class_">ConstraintValidator</span>&lt;ConstraintsJustryDeng, String&gt; &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/** 错误提示信息 */</span></span><br><span class="line">    <span class="keyword">private</span> String contains;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化方法， 在(懒加载)创建一个当前类实例后，会马上执行此方法</span></span><br><span class="line"><span class="comment">     * 注: 此方法只会执行一次，即:创建实例后马上执行。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> constraintAnnotation 注解信息模型，可以从该模型中获取注解类中定义的一些信息，如默认值等</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(ConstraintsJustryDeng constraintAnnotation)</span> &#123;</span><br><span class="line">        System.out.println(constraintAnnotation.message());</span><br><span class="line">        <span class="built_in">this</span>.contains = constraintAnnotation.contains();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验方法， 每个需要校验的请求都会走这个方法</span></span><br><span class="line"><span class="comment">     * 注: 此方法可能会并发执行，需要根据实际情况看否是需要保证线程安全。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 被校验的对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 校验是否通过</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(Object value, ConstraintValidatorContext context)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (value <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">strMessage</span> <span class="operator">=</span> (String) value;</span><br><span class="line">            <span class="keyword">return</span> strMessage.contains(contains);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> Integer) &#123;</span><br><span class="line">            <span class="keyword">return</span> contains.contains(String.valueOf(value));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="编程式校验">编程式校验</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> javax.validation.Validator globalValidator;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编程式校验</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/saveWithCodingValidate&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">saveWithCodingValidate</span><span class="params">(<span class="meta">@RequestBody</span> UserDTO userDTO)</span> &#123;</span><br><span class="line">    Set&lt;ConstraintViolation&lt;UserDTO&gt;&gt; validate = globalValidator.validate(userDTO, UserDTO.Save.class);</span><br><span class="line">    <span class="comment">// 如果校验通过，validate为空；否则，validate包含未校验通过项</span></span><br><span class="line">    <span class="keyword">if</span> (validate.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">// 校验通过，才会执行业务逻辑处理</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (ConstraintViolation&lt;UserDTO&gt; userDTOConstraintViolation : validate) &#123;</span><br><span class="line">            <span class="comment">// 校验失败，做其它逻辑</span></span><br><span class="line">            System.out.println(userDTOConstraintViolation);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Result.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="快速失败">快速失败</h3>
<p>Spring Validation 默认会校验完所有字段，然后才抛出异常。可以通过一些简单的配置，开启 Fali Fast 模式，一旦校验失败就立即返回。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Validator <span class="title function_">validator</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ValidatorFactory</span> <span class="variable">validatorFactory</span> <span class="operator">=</span> Validation.byProvider(HibernateValidator.class)</span><br><span class="line">            .configure()</span><br><span class="line">            <span class="comment">// 快速失败模式</span></span><br><span class="line">            .failFast(<span class="literal">true</span>)</span><br><span class="line">            .buildValidatorFactory();</span><br><span class="line">    <span class="keyword">return</span> validatorFactory.getValidator();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="异常信息">异常信息</h2>
<h3 id="异常分类">异常分类</h3>
<p>注解校验不通过时，可能抛出的异常：</p>
<ol>
<li>MethodArgumentNotValidException</li>
<li>ConstraintViolationException</li>
<li>BindException</li>
</ol>
<h3 id="异常捕获">异常捕获</h3>
<p><strong>MVC 全局捕获</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobleExceptionHandler</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 要拦截的异常Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = &#123;BindException.class, ValidationException.class, MethodArgumentNotValidException.class&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;Result&lt;?&gt;&gt; handleValidatedException(Exception e) &#123;</span><br><span class="line">        Result&lt;?&gt; resp = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> MethodArgumentNotValidException) &#123;</span><br><span class="line">            <span class="comment">// BeanValidation exception</span></span><br><span class="line">            <span class="type">MethodArgumentNotValidException</span> <span class="variable">ex</span> <span class="operator">=</span> (MethodArgumentNotValidException) e;</span><br><span class="line">            resp =	Result.error(<span class="number">500</span>, ex.getBindingResult().getAllErrors().stream()</span><br><span class="line">                    .map(ObjectError::getDefaultMessage)</span><br><span class="line">                    .collect(Collectors.joining(<span class="string">&quot;; &quot;</span>))</span><br><span class="line">            );</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ConstraintViolationException) &#123;</span><br><span class="line">            <span class="comment">// BeanValidation GET simple param</span></span><br><span class="line">            <span class="type">ConstraintViolationException</span> <span class="variable">ex</span> <span class="operator">=</span> (ConstraintViolationException) e;</span><br><span class="line">            resp = Result.error(<span class="number">500</span>,ex.getConstraintViolations().stream()</span><br><span class="line">                            .map(ConstraintViolation::getMessage)</span><br><span class="line">                            .collect(Collectors.joining(<span class="string">&quot;; &quot;</span>))</span><br><span class="line">            );</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> BindException) &#123;</span><br><span class="line">            <span class="comment">// BeanValidation GET object param</span></span><br><span class="line">            <span class="type">BindException</span> <span class="variable">ex</span> <span class="operator">=</span> (BindException) e;</span><br><span class="line">            resp = Result.error(<span class="number">500</span>,ex.getAllErrors().stream()</span><br><span class="line">                            .map(ObjectError::getDefaultMessage)</span><br><span class="line">                            .collect(Collectors.joining(<span class="string">&quot;; &quot;</span>))</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(resp,HttpStatus.INTERNAL_SERVER_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>接口捕获异常</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MessageSource messageSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/validator&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">validator</span><span class="params">(<span class="meta">@Validated</span> User user, BindingResult result)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (result.hasErrors())&#123;</span><br><span class="line">            StringBuffer msg=<span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">            <span class="comment">//获取错误字段集合</span></span><br><span class="line">            List&lt;FieldError&gt; fieldErrors = result.getFieldErrors();</span><br><span class="line">            <span class="comment">//获取本地locale,zh_CN</span></span><br><span class="line">            <span class="type">Locale</span> <span class="variable">currentLocale</span> <span class="operator">=</span> LocaleContextHolder.getLocale();</span><br><span class="line">            <span class="comment">//遍历错误字段获取错误信息</span></span><br><span class="line">            <span class="keyword">for</span> (FieldError fieldError : fieldErrors) &#123;</span><br><span class="line">                <span class="comment">//获取错误信息</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">errorMessage</span> <span class="operator">=</span> messageSource.getMessage(fieldError, currentLocale);</span><br><span class="line">                <span class="comment">//添加到错误信息</span></span><br><span class="line">                msg.append(fieldError.getField()+<span class="string">&quot;:&quot;</span>+errorMessage+<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> msg.toString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;验证通过&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Validated-与-Valid-区别">@Validated 与@Valid 区别</h2>
<table>
<thead>
<tr>
<th>区别</th>
<th>@Valid</th>
<th>@Validated</th>
</tr>
</thead>
<tbody>
<tr>
<td>提供者</td>
<td>JSR-303 规范</td>
<td>Spring</td>
</tr>
<tr>
<td>是否支持分组</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>标注位置</td>
<td>METHOD, FIELD, CONSTRUCTOR, PARAMETER, TYPE_USE</td>
<td>TYPE, METHOD, PARAMETER</td>
</tr>
<tr>
<td>嵌套校验</td>
<td>支持</td>
<td>不支持</td>
</tr>
</tbody>
</table>
<h2 id="实现原理">实现原理</h2>
<p>校验触发的时机，其实是从两个点触发，一个跟 SpringMVC 的请求处理过程息息相关，一个是跟 MethodValidationPostProcessor 相关</p>
<h3 id="RequestBody-参数">RequestBody 参数</h3>
<p>在 Spring MVC 中，RequestResponseBodyMethodProcessor 是用于解析 @RequestBody 标注的参数以及处理 @ResponseBody 标注方法的返回值的。显然，执行参数校验的逻辑肯定就在解析参数的方法 resolveArgument() 中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestResponseBodyMethodProcessor</span> <span class="keyword">extends</span> <span class="title class_">AbstractMessageConverterMethodProcessor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">resolveArgument</span><span class="params">(MethodParameter parameter, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span></span><br><span class="line"><span class="params">                                  NativeWebRequest webRequest, <span class="meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        parameter = parameter.nestedIfOptional();</span><br><span class="line">        <span class="comment">// 将请求数据封装到DTO对象中</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">arg</span> <span class="operator">=</span> readWithMessageConverters(webRequest, parameter, parameter.getNestedGenericParameterType());</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Conventions.getVariableNameForParameter(parameter);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (binderFactory != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">WebDataBinder</span> <span class="variable">binder</span> <span class="operator">=</span> binderFactory.createBinder(webRequest, arg, name);</span><br><span class="line">            <span class="keyword">if</span> (arg != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 执行数据校验</span></span><br><span class="line">                validateIfApplicable(binder, parameter);</span><br><span class="line">                <span class="keyword">if</span> (binder.getBindingResult().hasErrors() &amp;&amp; isBindExceptionRequired(binder, parameter)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MethodArgumentNotValidException</span>(parameter, binder.getBindingResult());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mavContainer != <span class="literal">null</span>) &#123;</span><br><span class="line">                mavContainer.addAttribute(BindingResult.MODEL_KEY_PREFIX + name, binder.getBindingResult());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> adaptArgumentIfNecessary(arg, parameter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">validateIfApplicable</span><span class="params">(WebDataBinder binder, MethodParameter parameter)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取参数注解，比如@RequestBody、@Valid、@Validated</span></span><br><span class="line">    Annotation[] annotations = parameter.getParameterAnnotations();</span><br><span class="line">    <span class="keyword">for</span> (Annotation ann : annotations) &#123;</span><br><span class="line">        <span class="comment">// 先尝试获取@Validated注解</span></span><br><span class="line">        <span class="type">Validated</span> <span class="variable">validatedAnn</span> <span class="operator">=</span> AnnotationUtils.getAnnotation(ann, Validated.class);</span><br><span class="line">        <span class="comment">// 如果直接标注了@Validated，那么直接开启校验。</span></span><br><span class="line">        <span class="comment">// 如果没有，那么判断参数前是否有Valid起头的注解。</span></span><br><span class="line">        <span class="keyword">if</span> (validatedAnn != <span class="literal">null</span> || ann.annotationType().getSimpleName().startsWith(<span class="string">&quot;Valid&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">hints</span> <span class="operator">=</span> (validatedAnn != <span class="literal">null</span> ? validatedAnn.value() : AnnotationUtils.getValue(ann));</span><br><span class="line">            Object[] validationHints = (hints <span class="keyword">instanceof</span> Object[] ? (Object[]) hints : <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;hints&#125;);</span><br><span class="line">            <span class="comment">//执行校验</span></span><br><span class="line">            binder.validate(validationHints);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">validate</span><span class="params">(Object... validationHints)</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">target</span> <span class="operator">=</span> getTarget();</span><br><span class="line">    Assert.state(target != <span class="literal">null</span>, <span class="string">&quot;No target to validate&quot;</span>);</span><br><span class="line">    <span class="type">BindingResult</span> <span class="variable">bindingResult</span> <span class="operator">=</span> getBindingResult();</span><br><span class="line">    <span class="comment">// Call each validator with the same binding result</span></span><br><span class="line">    <span class="keyword">for</span> (Validator validator : getValidators()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!ObjectUtils.isEmpty(validationHints) &amp;&amp; validator <span class="keyword">instanceof</span> SmartValidator) &#123;</span><br><span class="line">            ((SmartValidator) validator).validate(target, bindingResult, validationHints);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (validator != <span class="literal">null</span>) &#123;</span><br><span class="line">            validator.validate(target, bindingResult);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">validate</span><span class="params">(Object target, Errors errors, Object... validationHints)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.targetValidator != <span class="literal">null</span>) &#123;</span><br><span class="line">        processConstraintViolations(</span><br><span class="line">            <span class="comment">// 此处调用Hibernate Validator执行真正的校验</span></span><br><span class="line">            <span class="built_in">this</span>.targetValidator.validate(target, asValidationGroups(validationHints)), errors);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="方法级别">方法级别</h3>
<p>上面提到的将参数一个个平铺到方法参数中，然后在每个参数前面声明约束注解的校验方式，就是方法级别的参数校验。实际上，这种方式可用于任何 Spring Bean 的方法上，比如 Controller/ Service 等。其底层实现原理就是 AOP，具体来说是通过 MethodValidationPostProcessor 动态注册 AOP 切面，然后使用 MethodValidationInterceptor 对切点方法织入增强。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodValidationPostProcessor</span> <span class="keyword">extends</span> <span class="title class_">AbstractBeanFactoryAwareAdvisingPostProcessorimplements</span> InitializingBean &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 为所有`@Validated`标注的Bean创建切面</span></span><br><span class="line">        <span class="type">Pointcut</span> <span class="variable">pointcut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationMatchingPointcut</span>(<span class="built_in">this</span>.validatedAnnotationType, <span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 创建Advisor进行增强</span></span><br><span class="line">        <span class="built_in">this</span>.advisor = <span class="keyword">new</span> <span class="title class_">DefaultPointcutAdvisor</span>(pointcut, createMethodValidationAdvice(<span class="built_in">this</span>.validator));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建Advice，本质就是一个方法拦截器</span></span><br><span class="line">    <span class="keyword">protected</span> Advice <span class="title function_">createMethodValidationAdvice</span><span class="params">(<span class="meta">@Nullable</span> Validator validator)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (validator != <span class="literal">null</span> ? <span class="keyword">new</span> <span class="title class_">MethodValidationInterceptor</span>(validator) : <span class="keyword">new</span> <span class="title class_">MethodValidationInterceptor</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodValidationInterceptor</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">// 无需增强的方法，直接跳过</span></span><br><span class="line">        <span class="keyword">if</span> (isFactoryBeanMetadataMethod(invocation.getMethod())) &#123;</span><br><span class="line">            <span class="keyword">return</span> invocation.proceed();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取分组信息</span></span><br><span class="line">        Class&lt;?&gt;[] groups = determineValidationGroups(invocation);</span><br><span class="line">        <span class="type">ExecutableValidator</span> <span class="variable">execVal</span> <span class="operator">=</span> <span class="built_in">this</span>.validator.forExecutables();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">methodToValidate</span> <span class="operator">=</span> invocation.getMethod();</span><br><span class="line">        Set&lt;ConstraintViolation&lt;Object&gt;&gt; result;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 方法入参校验，最终还是委托给Hibernate Validator来校验</span></span><br><span class="line">            result = execVal.validateParameters(</span><br><span class="line">                invocation.getThis(), methodToValidate, invocation.getArguments(), groups);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IllegalArgumentException ex) &#123;</span><br><span class="line">			methodToValidate = BridgeMethodResolver.findBridgedMethod(</span><br><span class="line">					ClassUtils.getMostSpecificMethod(invocation.getMethod(), invocation.getThis().getClass()));</span><br><span class="line">			result = execVal.validateParameters(</span><br><span class="line">					invocation.getThis(), methodToValidate, invocation.getArguments(), groups);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 有异常直接抛出</span></span><br><span class="line">        <span class="keyword">if</span> (!result.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConstraintViolationException</span>(result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 真正的方法调用</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">returnValue</span> <span class="operator">=</span> invocation.proceed();</span><br><span class="line">        <span class="comment">// 对返回值做校验，最终还是委托给Hibernate Validator来校验</span></span><br><span class="line">        result = execVal.validateReturnValue(invocation.getThis(), methodToValidate, returnValue, groups);</span><br><span class="line">        <span class="comment">// 有异常直接抛出</span></span><br><span class="line">        <span class="keyword">if</span> (!result.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConstraintViolationException</span>(result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> returnValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="总结">总结</h3>
<p>实际上，不管是 RequestBody 参数校验 还是 方法级别的校验，最终都是调用 Hibernate Validator 执行校验，Spring Validation 只是做了一层封装。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot（6-请求参数和返回结果定义）</title>
    <url>/blog/2025/03/22/Java/SpringBoot/SpringBoot%EF%BC%886-%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E5%92%8C%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E5%AE%9A%E4%B9%89%EF%BC%89/</url>
    <content><![CDATA[<h2 id="RestControllerAdvice">@RestControllerAdvice</h2>
<p>@RestControllerAdvice 是 Spring Framework 提供的一个组合注解，专门用于实现 RESTful API 的全局异常处理、数据绑定和数据预处理。它是 @ControllerAdvice 和 @ResponseBody 的组合，简化了 REST 异常处理的实现。</p>
<h3 id="作用">作用</h3>
<ol>
<li>全局异常处理：集中处理控制器抛出的异常</li>
<li>统一响应格式：确保所有错误响应格式一致</li>
<li>减少重复代码：避免在每个控制器中重复异常处理逻辑</li>
<li>REST 专用：专为 RESTful API 设计，自动将返回值转为 JSON/XML</li>
</ol>
<h3 id="基本使用">基本使用</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ErrorResponse</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> status;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String error;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String path;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">LocalDateTime</span> <span class="variable">timestamp</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理特定异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(ResourceNotFoundException.class)</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.NOT_FOUND)</span></span><br><span class="line">    <span class="keyword">public</span> ErrorResponse <span class="title function_">handleResourceNotFound</span><span class="params">(ResourceNotFoundException ex, </span></span><br><span class="line"><span class="params">        HttpServletRequest request)</span> &#123;</span><br><span class="line">        log.error(<span class="string">&quot;Resource not found: &#123;&#125;&quot;</span>, ex.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ErrorResponse</span>(</span><br><span class="line">            HttpStatus.NOT_FOUND.value(),</span><br><span class="line">            <span class="string">&quot;Not Found&quot;</span>,</span><br><span class="line">            ex.getMessage(),</span><br><span class="line">            request.getRequestURI());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(MethodArgumentNotValidException.class)</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.BAD_REQUEST)</span></span><br><span class="line">    <span class="keyword">public</span> ErrorResponse <span class="title function_">handleValidationErrors</span><span class="params">(MethodArgumentNotValidException ex,</span></span><br><span class="line"><span class="params">        HttpServletRequest request)</span> &#123;</span><br><span class="line">        List&lt;String&gt; errors = ex.getBindingResult()</span><br><span class="line">            .getFieldErrors()</span><br><span class="line">            .stream()</span><br><span class="line">            .map(FieldError::getDefaultMessage)</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">            </span><br><span class="line">        log.error(<span class="string">&quot;Validation errors: &#123;&#125;&quot;</span>, errors);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ErrorResponse</span>(</span><br><span class="line">            HttpStatus.BAD_REQUEST.value(),</span><br><span class="line">            <span class="string">&quot;Validation Error&quot;</span>,</span><br><span class="line">            errors.toString(),</span><br><span class="line">            request.getRequestURI());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理所有未明确处理的异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)</span></span><br><span class="line">    <span class="keyword">public</span> ErrorResponse <span class="title function_">handleAllExceptions</span><span class="params">(Exception ex,</span></span><br><span class="line"><span class="params">        HttpServletRequest request)</span> &#123;</span><br><span class="line">        log.error(<span class="string">&quot;Internal server error: &#123;&#125;&quot;</span>, ex.getMessage(), ex);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ErrorResponse</span>(</span><br><span class="line">            HttpStatus.INTERNAL_SERVER_ERROR.value(),</span><br><span class="line">            <span class="string">&quot;Internal Server Error&quot;</span>,</span><br><span class="line">            <span class="string">&quot;An unexpected error occurred&quot;</span>,</span><br><span class="line">            request.getRequestURI());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="其他">其他</h3>
<ol>
<li>限定控制器的生效范围</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只对指定包下的控制器生效</span></span><br><span class="line"><span class="meta">@RestControllerAdvice(&quot;com.example.controllers&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 只对带有特定注解的控制器生效</span></span><br><span class="line"><span class="meta">@RestControllerAdvice(annotations = RestController.class)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 只对指定的控制器类生效</span></span><br><span class="line"><span class="meta">@RestControllerAdvice(assignableTypes = &#123;UserController.class, ProductController.class&#125;)</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>处理数据绑定异常</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(MethodArgumentNotValidException.class)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;ErrorResponse&gt; <span class="title function_">handleValidationExceptions</span><span class="params">(MethodArgumentNotValidException ex)</span> &#123;</span><br><span class="line">    List&lt;String&gt; errors = ex.getBindingResult()</span><br><span class="line">        .getFieldErrors()</span><br><span class="line">        .stream()</span><br><span class="line">        .map(error -&gt; error.getField() + <span class="string">&quot;: &quot;</span> + error.getDefaultMessage())</span><br><span class="line">        .collect(Collectors.toList());</span><br><span class="line">        </span><br><span class="line">    <span class="type">ErrorResponse</span> <span class="variable">error</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorResponse</span>(</span><br><span class="line">        HttpStatus.BAD_REQUEST.value(),</span><br><span class="line">        <span class="string">&quot;Validation failed&quot;</span>,</span><br><span class="line">        errors.toString());</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(error, HttpStatus.BAD_REQUEST);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>处理自定义业务异常</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(BusinessException.class)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;ErrorResponse&gt; <span class="title function_">handleBusinessException</span><span class="params">(BusinessException ex)</span> &#123;</span><br><span class="line">    <span class="type">ErrorResponse</span> <span class="variable">error</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorResponse</span>(</span><br><span class="line">        ex.getErrorCode(),</span><br><span class="line">        ex.getErrorType(),</span><br><span class="line">        ex.getMessage());</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(error, ex.getHttpStatus());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ResponseBodyAdvice">ResponseBodyAdvice</h2>
<h3 id="作用-2">作用</h3>
<p>ResponseBodyAdvice 是 spring mvc 提供的一个增强接口，用于在返回对象被 HttpMessageConverter 执行序列化之前对其进行一些自定义的操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ResponseBodyAdvice</span> &lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于确定该实现类是否支持对响应体进行处理，通过 returnType 参数可以获取到 Controller 方法的返回类型等信息。</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(MethodParameter returnType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; converterType)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 该方法在响应体写入之前被调用，在这个方法中可以通过参数获取到最终要响应给客户端的对象，我们可以对这个对象进行一些操作，最后返回修改后的对象。</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    T <span class="title function_">beforeBodyWrite</span><span class="params">(<span class="meta">@Nullable</span> T body, MethodParameter returnType, MediaType selectedContentType,</span></span><br><span class="line"><span class="params">            Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; selectedConverterType,</span></span><br><span class="line"><span class="params">            ServerHttpRequest request, ServerHttpResponse response)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>supports：判断是否要执行 beforeBodyWrite 方法，true 为执行，false 不执行。通过该方法可以选择哪些类或哪些方法的 response 要进行处理，其他的不进行处理</li>
<li>beforeBodyWrite：对 response 方法进行具体操作处理</li>
</ol>
<h3 id="基本使用-2">基本使用</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseResponse</span> &lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestControllerAdvice(annotations = &#123;RestController.class&#125;)</span> </span><br><span class="line"><span class="comment">// 通过注解进行过滤哪些请求响应会被拦截，避免错误拦截。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseAdvice</span> <span class="keyword">implements</span> <span class="title class_">ResponseBodyAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 我们可以选择哪些方法或者类进入 beforeBodyWrite 方法</span></span><br><span class="line"><span class="comment">     * 从returnType获取类名和方法名，通过returnType.getMethod().getDeclaringClass.getName获取类名</span></span><br><span class="line"><span class="comment">     * converterType 表示当前请求使用的一个数据转换器，根据我们在 controller 指定返回类型决定</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(MethodParameter returnType, Class converterType)</span> &#123;</span><br><span class="line">        log.info(returnType.getMethod().getDeclaringClass().getName());</span><br><span class="line">        log.info(converterType.toString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 如果方法上添加了自定义注解@EncodeBody，才对返回对象进行编码</span></span><br><span class="line">        <span class="comment">// return returnType.hasMethodAnnotation(EncodeBody.class);</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * body—请求即将返回给客户端的实体信息</span></span><br><span class="line"><span class="comment">     * body 还可能存在出现异常的情况，需要进行处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">beforeBodyWrite</span><span class="params">(Object body, MethodParameter returnType, MediaType selectedContentType, Class selectedConverterType, ServerHttpRequest request, ServerHttpResponse response)</span> &#123;</span><br><span class="line">        log.info(selectedContentType.getType());</span><br><span class="line">        <span class="comment">// jackson 序列化</span></span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        <span class="comment">// 我们也可以根据 selectConvertorType 的类型进行判断</span></span><br><span class="line">        <span class="keyword">if</span> (body <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> objectMapper.writeValueAsString(<span class="keyword">new</span> <span class="title class_">BaseResponse</span>(<span class="number">0</span>, <span class="string">&quot;操作成功&quot;</span>, body));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (body <span class="keyword">instanceof</span> Page) &#123;</span><br><span class="line">            <span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>();</span><br><span class="line">            map.put(<span class="string">&quot;data&quot;</span>, ((Page&lt;?&gt;) body).getRecords());</span><br><span class="line">            map.put(<span class="string">&quot;current&quot;</span>, ((Page&lt;?&gt;) body).getCurrent());</span><br><span class="line">            map.put(<span class="string">&quot;size&quot;</span>, ((Page&lt;?&gt;) body).getSize());</span><br><span class="line">            map.put(<span class="string">&quot;total&quot;</span>, ((Page&lt;?&gt;) body).getTotal());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BaseResponse</span>(<span class="number">0</span>, <span class="string">&quot;操作成功&quot;</span>, map);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BaseResponse</span>(<span class="number">0</span>, <span class="string">&quot;操作成功&quot;</span>, body);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="存在问题">存在问题</h3>
<p>返回 String 类型的 ContentType 是 “text/plain”，对应的转换器是 StringHttpMessageConverter，由于我们将返回结果都封装成 BaseResponse 导致由其转换成 String 类型会引发类型错误</p>
<p>解决方法有两个：</p>
<ol>
<li>设置接口的返回类型</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/ok&quot;, produces = &quot;application/json;charset=utf-8&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">ok</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>通过 SpringBoot 内置提供 Jackson 序列化 ObjectMapper 实现实体信息的序列化</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"><span class="keyword">if</span> (body <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> objectMapper.writeValueAsString(<span class="keyword">new</span> <span class="title class_">Response</span>(<span class="number">0</span>, <span class="string">&quot;操作成功&quot;</span>, body));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="转换器">转换器</h2>
<h3 id="使用枚举为请求参数">使用枚举为请求参数</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">GenderEnum</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 男</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    MALE(<span class="number">0</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 女</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    FEMALE(<span class="number">1</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 性别编码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"> </span><br><span class="line">    GenderEnum(<span class="type">int</span> code) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QueryRequest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> GenderEnum gender;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/enum&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumTestController</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/get&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Dict <span class="title function_">testGet</span><span class="params">(QueryRequest request)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;【get-request】= &#123;&#125;&quot;</span>, JSONUtil.toJsonStr(request));</span><br><span class="line">        <span class="keyword">return</span> Dict.create().set(<span class="string">&quot;get-request&quot;</span>, request);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@PostMapping(&quot;/post&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Dict <span class="title function_">testPost</span><span class="params">(<span class="meta">@RequestBody</span> QueryRequest request)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;【post-request】= &#123;&#125;&quot;</span>, JSONUtil.toJsonStr(request));</span><br><span class="line">        <span class="keyword">return</span> Dict.create().set(<span class="string">&quot;post-request&quot;</span>, request);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="转换器-2">转换器</h3>
<p>gender 只能接收到 MALE 、FEMALE 这样的参数，除此以外，均会报类型不匹配的错误信息，此时是无法处理 0 、1 这样的参数的</p>
<p>需求：</p>
<ol>
<li>接收到 MALE 、FEMALE 这样的参数，可以自动转为对应的枚举值；</li>
<li>接收到 0 、1 这样的参数，也可以自动转为对应的枚举值</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IntegerCodeToGenderEnumConverter</span> <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;Integer, GenderEnum&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, GenderEnum&gt; enumMap = Maps.newHashMap();</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">IntegerCodeToGenderEnumConverter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (GenderEnum genderEnum : GenderEnum.values()) &#123;</span><br><span class="line">            enumMap.put(genderEnum.getCode(), genderEnum);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> GenderEnum <span class="title function_">convert</span><span class="params">(Integer source)</span> &#123;</span><br><span class="line">        <span class="type">GenderEnum</span> <span class="variable">genderEnum</span> <span class="operator">=</span> enumMap.get(source);</span><br><span class="line">        <span class="keyword">if</span> (ObjectUtil.isNull(genderEnum)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;无法匹配对应的枚举类型&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> genderEnum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 枚举类的转换器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFormatters</span><span class="params">(FormatterRegistry registry)</span> &#123;</span><br><span class="line">        registry.addConverter(<span class="keyword">new</span> <span class="title class_">IntegerCodeToGenderEnumConverter</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="转换器工厂">转换器工厂</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BaseEnum</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取枚举编码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 编码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Integer <span class="title function_">getCode</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">GenderEnum</span> <span class="keyword">implements</span> <span class="title class_">BaseEnum</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 男</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    MALE(<span class="number">0</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 女</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    FEMALE(<span class="number">1</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 性别编码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"> </span><br><span class="line">    GenderEnum(<span class="type">int</span> code) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IntegerToEnumConverter</span>&lt;T <span class="keyword">extends</span> <span class="title class_">BaseEnum</span>&gt; <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;Integer, T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, T&gt; enumMap = Maps.newHashMap();</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">IntegerToEnumConverter</span><span class="params">(Class&lt;T&gt; enumType)</span> &#123;</span><br><span class="line">        T[] enums = enumType.getEnumConstants();</span><br><span class="line">        <span class="keyword">for</span> (T e : enums) &#123;</span><br><span class="line">            enumMap.put(e.getCode(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">convert</span><span class="params">(Integer source)</span> &#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> enumMap.get(source);</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(t)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;无法匹配对应的枚举类型&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IntegerCodeToEnumConverterFactory</span> <span class="keyword">implements</span> <span class="title class_">ConverterFactory</span>&lt;Integer, BaseEnum&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Class, Converter&gt; CONVERTERS = Maps.newHashMap();</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取一个从 Integer 转化为 T 的转换器，T 是一个泛型，有多个实现</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetType 转换后的类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回一个转化器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T <span class="keyword">extends</span> <span class="title class_">BaseEnum</span>&gt; Converter&lt;Integer, T&gt; <span class="title function_">getConverter</span><span class="params">(Class&lt;T&gt; targetType)</span> &#123;</span><br><span class="line">        Converter&lt;Integer, T&gt; converter = CONVERTERS.get(targetType);</span><br><span class="line">        <span class="keyword">if</span> (converter == <span class="literal">null</span>) &#123;</span><br><span class="line">            converter = <span class="keyword">new</span> <span class="title class_">IntegerToEnumConverter</span>&lt;&gt;(targetType);</span><br><span class="line">            CONVERTERS.put(targetType, converter);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> converter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringToEnumConverter</span>&lt;T <span class="keyword">extends</span> <span class="title class_">BaseEnum</span>&gt; <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;String, T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, T&gt; enumMap = Maps.newHashMap();</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StringToEnumConverter</span><span class="params">(Class&lt;T&gt; enumType)</span> &#123;</span><br><span class="line">        T[] enums = enumType.getEnumConstants();</span><br><span class="line">        <span class="keyword">for</span> (T e : enums) &#123;</span><br><span class="line">            enumMap.put(e.getCode().toString(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">convert</span><span class="params">(String source)</span> &#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> enumMap.get(source);</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(t)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;无法匹配对应的枚举类型&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringCodeToEnumConverterFactory</span> <span class="keyword">implements</span> <span class="title class_">ConverterFactory</span>&lt;String, BaseEnum&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Class, Converter&gt; CONVERTERS = Maps.newHashMap();</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取一个从 Integer 转化为 T 的转换器，T 是一个泛型，有多个实现</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetType 转换后的类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回一个转化器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T <span class="keyword">extends</span> <span class="title class_">BaseEnum</span>&gt; Converter&lt;String, T&gt; <span class="title function_">getConverter</span><span class="params">(Class&lt;T&gt; targetType)</span> &#123;</span><br><span class="line">        Converter&lt;String, T&gt; converter = CONVERTERS.get(targetType);</span><br><span class="line">        <span class="keyword">if</span> (converter == <span class="literal">null</span>) &#123;</span><br><span class="line">            converter = <span class="keyword">new</span> <span class="title class_">StringToEnumConverter</span>&lt;&gt;(targetType);</span><br><span class="line">            CONVERTERS.put(targetType, converter);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> converter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 枚举类的转换器工厂 addConverterFactory</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFormatters</span><span class="params">(FormatterRegistry registry)</span> &#123;</span><br><span class="line">        registry.addConverterFactory(<span class="keyword">new</span> <span class="title class_">IntegerCodeToEnumConverterFactory</span>());</span><br><span class="line">        registry.addConverterFactory(<span class="keyword">new</span> <span class="title class_">StringCodeToEnumConverterFactory</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot（2-Retry重试机制）</title>
    <url>/blog/2025/03/08/Java/SpringBoot/SpringBoot%EF%BC%882-Retry%E9%87%8D%E8%AF%95%E6%9C%BA%E5%88%B6%EF%BC%89/</url>
    <content><![CDATA[<h2 id="使用背景">使用背景</h2>
<p>在调用第三方接口或者使用 MQ 时，会出现网络抖动、连接超时等网络异常，所以需要重试。为了使处理更加健壮并且不太容易出现故障，后续的尝试操作，有时候会帮助失败的操作最后执行成功。一般情况下，需要我们自行实现重试机制</p>
<h2 id="使用案例">使用案例</h2>
<h3 id="基本使用">基本使用</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.retry<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-retry<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// 开启重试机制</span></span><br><span class="line"><span class="meta">@EnableRetry</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoRetryService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Retryable(value = Exception.class, maxAttempts = 4, backoff = @Backoff(delay = 2000L, multiplier = 1.5))</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">doRetry</span><span class="params">(<span class="type">boolean</span> isRetry)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始通知下游系统&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (isRetry) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;通知下游系统异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="配置文件获取参数">配置文件获取参数</h3>
<ol>
<li>在 application.properties 文件中定义属性</li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">retry.maxAttempts</span>=<span class="string">2 # 最大尝试次数</span></span><br><span class="line"><span class="attr">retry.maxDelay</span>=<span class="string">100 # 延迟</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>在 @Retryable 注入 Properties 文件中定义的 retry.maxAttempts 和 retry.maxDelay</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Retryable(retryFor = SQLException.class, maxAttemptsExpression = &quot;$&#123;retry.maxAttempts&#125;&quot;, backoff = @Backoff(delayExpression = &quot;$&#123;retry.maxDelay&#125;&quot;))</span> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">retryServiceWithExternalConfiguration</span><span class="params">(String sql)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="相关注解">相关注解</h2>
<h3 id="Retryable">@Retryable</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Retryable &#123;</span><br><span class="line">    String <span class="title function_">interceptor</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Throwable</span>&gt;[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Throwable</span>&gt;[] include() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Throwable</span>&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">label</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">stateful</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">maxAttempts</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">maxAttemptsExpression</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Backoff <span class="title function_">backoff</span><span class="params">()</span> <span class="keyword">default</span> <span class="meta">@Backoff</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">exceptionExpression</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String[] listeners() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用于标记当前方法会使用重试机制</p>
<p>参数信息：</p>
<ol>
<li>interceptor：将 interceptor 的 bean 名称应用到 retryable()，和其他的属性互斥</li>
<li>value：可重试的异常类型，抛出指定异常才会重试</li>
<li>include：哪些异常可以触发重试，和 value 一样，默认为空</li>
<li>exclude：哪些异常将不会触发重试，默认为空，如果和 include 属性同时为空，则所有的异常都将会触发重试</li>
<li>label：统计报告的唯—标签。如果没有提供，调用者可以选择忽略它，或者提供默认值</li>
<li>maxAttempts：最大重试次数，默认 3 次（包括第一次调用）</li>
<li>backoff：重试等待策略，默认使用@Backoff</li>
</ol>
<p><strong>Retry 配置的优先级规则</strong></p>
<ol>
<li>
<p>方法级别配置：如果某个配置在方法上定义了，则该方法上的配置会覆盖类级别的配置和全局配置。</p>
</li>
<li>
<p>类级别配置：如果某个配置在类上定义了，并且该类的方法没有单独定义配置，则使用类级别的配置。</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Retryable(</span></span><br><span class="line"><span class="meta">    value = &#123;RuntimeException.class&#125;,</span></span><br><span class="line"><span class="meta">    maxAttempts = 3,</span></span><br><span class="line"><span class="meta">    backoff = @Backoff(delay = 1000) // 类级别的配置</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Retryable(</span></span><br><span class="line"><span class="meta">        value = &#123;RuntimeException.class&#125;,</span></span><br><span class="line"><span class="meta">        maxAttempts = 5,</span></span><br><span class="line"><span class="meta">        backoff = @Backoff(delay = 500) // 方法级别的配置</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">retryableMethodWithSpecificConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Retrying with specific config...&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Simulated exception&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Retryable(</span></span><br><span class="line"><span class="meta">        value = &#123;RuntimeException.class&#125;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">retryableMethodWithoutSpecificDelay</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Retrying without specific delay...&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Simulated exception&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">nonRetryableMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This method does not retry.&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Simulated exception&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>全局配置：如果没有在方法或类上定义配置，则使用全局配置。（例如：定义 RetryTemplate 配置类）</li>
</ol>
<h3 id="Backoff">@Backoff</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Backoff &#123;</span><br><span class="line">    <span class="type">long</span> <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">1000L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="title function_">delay</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="title function_">maxDelay</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> <span class="title function_">multiplier</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">delayExpression</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">maxDelayExpression</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">multiplierExpression</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">random</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重试回退策略（立即重试还是等待一会再重试）</p>
<p>参数信息：</p>
<ol>
<li>value：隔多少毫秒后重试，默认为 1000L</li>
<li>delay：和 value 一样，但是默认为 0</li>
<li>maxDelay：重试之间的最大等待时间（以毫秒为单位）</li>
<li>multiplier（指定延迟倍数）：默认为 0，表示固定暂停 1 秒后进行重试，如果把 multiplier 设置为 1.5，则第一次重试为 2 秒，第二次为 3 秒，第三次为 4.5 秒</li>
<li>delayExpression：重试之间的等待时间表达式</li>
<li>maxDelayExpression：重试之间的最大等待时间表达式</li>
<li>multiplierExpression：指定延迟的倍数表达式</li>
<li>random：随机指定延迟时间</li>
</ol>
<h3 id="Recover">@Recover</h3>
<p>当重试次数耗尽时，RetryOperations 可以将控制传递给另一个回调，即 RecoveryCallback。@Recover 用于@Retryable 重试失败后处理方法，此方法里的异常一定要是@Retryable 方法里抛出的异常，否则不会调用这个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoRetryService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Retryable(value = Exception.class, maxAttempts = 4, backoff = @Backoff(delay = 2000L, multiplier = 1.5))</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">doRetry</span><span class="params">(<span class="type">boolean</span> isRetry)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始通知下游系统&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (isRetry) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;通知下游系统异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Spring-Retry还提供了<span class="doctag">@Recover</span>注解，用于<span class="doctag">@Retryable</span>重试失败后处理方法。</span></span><br><span class="line"><span class="comment">     * 如果不需要回调方法，可以直接不写回调方法，那么实现的效果是，重试次数完了后，如果还是没成功没符合业务判断，就抛出异常。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Recover</span>标记方法必须要与<span class="doctag">@Retryable</span>注解的方法“形参”保持一致，第一入参为要重试的异常(一定要是<span class="doctag">@Retryable</span>方法里抛出的异常或者异常父类)，其他参数与<span class="doctag">@Retryable</span>保持一致，返回值也要一样，否则无法执行！</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Retryable</span>注解的原方法参数，可以保留，也可以不要。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Recover</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">doRecover</span><span class="params">(Throwable e, <span class="type">boolean</span> isRetry)</span> <span class="keyword">throws</span> ArithmeticException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;全部重试失败，执行doRecover&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong></p>
<ol>
<li>方法的返回值必须与@Retryable 方法一致</li>
<li>方法的第一个参数，必须是 Throwable 类型的，建议是与@Retryable 配置的异常一致，其余的参数需要与@Retryable 方法的参数一致</li>
<li>回调方法和重试方法写在同一个实现类里面，且被@Retryable 标记的方法不能有返回值，这样 Recover 方法才会生效</li>
</ol>
<p><strong>@Recover 不生效问题</strong></p>
<ol>
<li>对于@EnableRetry 中的 proxyTargetClass 参数，是控制是否对使用接口实现的 bean 开启代理类，默认下是不开启的</li>
<li>当使用接口实现的 bean 时，需要将 EnableRetry 的参数改为 true，非接口的实现类可以使用</li>
<li>由于 retry 用到了 aspect 增强，所有会有 aspect 的坑，就是方法内部调用，会使 aspect 增强失效，那么 retry 当然也会失效</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">A</span><span class="params">()</span> &#123;</span><br><span class="line">        B();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法内部条用，这里B不会执行</span></span><br><span class="line">    <span class="meta">@Retryable(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">B</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;retry...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="RetryTemplate">RetryTemplate</h2>
<h3 id="RetryOperations">RetryOperations</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RetryOperations</span> &#123;</span><br><span class="line"></span><br><span class="line">    &lt;T, E <span class="keyword">extends</span> <span class="title class_">Throwable</span>&gt; T <span class="title function_">execute</span><span class="params">(RetryCallback&lt;T, E&gt; retryCallback)</span> <span class="keyword">throws</span> E;</span><br><span class="line"></span><br><span class="line">    &lt;T, E <span class="keyword">extends</span> <span class="title class_">Throwable</span>&gt; T <span class="title function_">execute</span><span class="params">(RetryCallback&lt;T, E&gt; retryCallback, RecoveryCallback&lt;T&gt; recoveryCallback)</span> <span class="keyword">throws</span> E;</span><br><span class="line"></span><br><span class="line">    &lt;T, E <span class="keyword">extends</span> <span class="title class_">Throwable</span>&gt; T <span class="title function_">execute</span><span class="params">(RetryCallback&lt;T, E&gt; retryCallback, RetryState retryState)</span> <span class="keyword">throws</span> E, ExhaustedRetryException;</span><br><span class="line"></span><br><span class="line">    &lt;T, E <span class="keyword">extends</span> <span class="title class_">Throwable</span>&gt; T <span class="title function_">execute</span><span class="params">(RetryCallback&lt;T, E&gt; retryCallback, RecoveryCallback&lt;T&gt; recoveryCallback, RetryState retryState)</span> <span class="keyword">throws</span> E;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="RetryCallback">RetryCallback</h3>
<p>允许插入需要在失败时重试的业务逻辑</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RetryCallback</span>&lt;T, E <span class="keyword">extends</span> <span class="title class_">Throwable</span>&gt; &#123;</span><br><span class="line"></span><br><span class="line">    T <span class="title function_">doWithRetry</span><span class="params">(RetryContext context)</span> <span class="keyword">throws</span> E;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="RetryPolicy-重试策略">RetryPolicy 重试策略</h3>
<ol>
<li>NeverRetryPolicy：只允许调用 RetryCallback 一次，不允许重试</li>
<li>AlwaysRetryPolicy：允许无限重试，直到成功</li>
<li>SimpleRetryPolicy（默认策略）：固定次数重试策略，默认重试最大次数为 3 次</li>
<li>TimeoutRetryPolicy：超时时间重试策略，默认超时时间为 1 秒，在指定的时间内允许重试</li>
<li>CircuitBreakerRetryPolicy：有熔断功能的重试策略，需设置 3 个参数 openTimeout、resetTimeout 和 delegate</li>
<li>CompositeRetryPolicy：组合重试策略，但不管哪种组合方式，组合中的每一个策略都会执行</li>
</ol>
<ul>
<li>乐观组合重试策略：只要有一个策略允许重试即可以</li>
<li>悲观组合重试策略：只要有一个策略不允许重试即不可以</li>
</ul>
<h3 id="BackOffPolicy-退避策略">BackOffPolicy 退避策略</h3>
<table>
<thead>
<tr>
<th>策略类</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>FixedBackOffPolicy</td>
<td>间隔固定时间重试，直接 Thread.sleep 固定时间</td>
</tr>
<tr>
<td>NoBackOffPolicy</td>
<td>无等待，立马重试</td>
</tr>
<tr>
<td>UniformRandomBackOffPolicy</td>
<td>在一个设置的时间区间内。随机等待后重试</td>
</tr>
<tr>
<td>ExponentialBackOffPolicy</td>
<td>在一个设置的时间区间内，等待时长为上一次时长的递增</td>
</tr>
<tr>
<td>ExponentialRandomBackOffPolicy</td>
<td>乘数随机的 ExponentialBackOffPolicy</td>
</tr>
</tbody>
</table>
<h3 id="基本使用-2">基本使用</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RetryConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RetryTemplate <span class="title function_">retryTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">RetryTemplate</span> <span class="variable">retryTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RetryTemplate</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置延迟策略</span></span><br><span class="line">        <span class="type">FixedBackOffPolicy</span> <span class="variable">fixedBackOffPolicy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FixedBackOffPolicy</span>();</span><br><span class="line">        fixedBackOffPolicy.setBackOffPeriod(<span class="number">2000l</span>);</span><br><span class="line">        retryTemplate.setBackOffPolicy(fixedBackOffPolicy);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置重试策略</span></span><br><span class="line">        <span class="type">SimpleRetryPolicy</span> <span class="variable">retryPolicy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleRetryPolicy</span>();</span><br><span class="line">        retryPolicy.setMaxAttempts(<span class="number">2</span>);</span><br><span class="line">        retryTemplate.setRetryPolicy(retryPolicy);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> retryTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用 retryTemplate.execute() 方法来运行带有重试处理功能的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">retryTemplate.execute(<span class="keyword">new</span> <span class="title class_">RetryCallback</span>&lt;Void, RuntimeException&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Void <span class="title function_">doWithRetry</span><span class="params">(RetryContext arg0)</span> &#123;</span><br><span class="line">        myService.templateRetryService();</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>可以通过 setRetryPolicy()方法来为 RetryTemplate 设置重试策略</p>
<h2 id="监听器">监听器</h2>
<p>Listener（监听器）会在重试时提供额外的回调，可以利用这些回调处理不同重试中的各种横切关注点（cross-cutting concerns）。</p>
<h3 id="添加回调">添加回调</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultListenerSupport</span> <span class="keyword">extends</span> <span class="title class_">RetryListenerSupport</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T, E <span class="keyword">extends</span> <span class="title class_">Throwable</span>&gt; <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(RetryContext context, RetryCallback&lt;T, E&gt; callback, Throwable throwable)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;onClose&quot;</span>);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="built_in">super</span>.close(context, callback, throwable);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T, E <span class="keyword">extends</span> <span class="title class_">Throwable</span>&gt; <span class="keyword">void</span> <span class="title function_">onError</span><span class="params">(RetryContext context, RetryCallback&lt;T, E&gt; callback, Throwable throwable)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;onError&quot;</span>); </span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="built_in">super</span>.onError(context, callback, throwable);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T, E <span class="keyword">extends</span> <span class="title class_">Throwable</span>&gt; <span class="type">boolean</span> <span class="title function_">open</span><span class="params">(RetryContext context, RetryCallback&lt;T, E&gt; callback)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;onOpen&quot;</span>);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.open(context, callback);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>open 和 close 回调在整个重试前后进行，而 onError 则适用于单个 RetryCallback 调用。</p>
<h3 id="注册监听器">注册监听器</h3>
<p>向 RetryTemplate 实例化的 Bean 注册监听器（DefaultListenerSupport）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RetryConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RetryTemplate <span class="title function_">retryTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">RetryTemplate</span> <span class="variable">retryTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RetryTemplate</span>();</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        retryTemplate.registerListener(<span class="keyword">new</span> <span class="title class_">DefaultListenerSupport</span>());</span><br><span class="line">        <span class="keyword">return</span> retryTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="基本使用-3">基本使用</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = AppConfig.class, loader = AnnotationConfigContextLoader.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRetryIntegrationTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyService myService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RetryTemplate retryTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test(expected = RuntimeException.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        retryTemplate.execute(arg0 -&gt; &#123;</span><br><span class="line">            myService.templateRetryService();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="实现原理">实现原理</h2>
<ol>
<li>使用@EnableRetry 注解后会导入 RetryConfiguration 配置类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy(proxyTargetClass = false)</span></span><br><span class="line"><span class="meta">@Import(RetryConfiguration.class)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableRetry &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">proxyTargetClass</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>RetryConfiguration 通过 init()方法构建切点和通知</li>
</ol>
<ul>
<li>buildPointcut 构建切点：切点类型为使用 Retryable 注解的类或方法（org.springframework.retry.annotation.RetryConfiguration.AnnotationClassOrMethodPointcut）</li>
<li>buildAdvice 构建通知：创建通知 org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RetryConfiguration</span> <span class="keyword">extends</span> <span class="title class_">AbstractPointcutAdvisor</span> <span class="keyword">implements</span> <span class="title class_">IntroductionAdvisor</span>, BeanFactoryAware &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Advice advice;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Pointcut pointcut;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="keyword">private</span> RetryContextCache retryContextCache;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;RetryListener&gt; retryListeners;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="keyword">private</span> MethodArgumentsKeyGenerator methodArgumentsKeyGenerator;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="keyword">private</span> NewMethodArgumentsIdentifier newMethodArgumentsIdentifier;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="keyword">private</span> Sleeper sleeper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BeanFactory beanFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        Set&lt;Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt;&gt; retryableAnnotationTypes = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt;&gt;(<span class="number">1</span>);</span><br><span class="line">        retryableAnnotationTypes.add(Retryable.class);</span><br><span class="line">        <span class="built_in">this</span>.pointcut = buildPointcut(retryableAnnotationTypes);</span><br><span class="line">        <span class="built_in">this</span>.advice = buildAdvice();</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.advice <span class="keyword">instanceof</span> BeanFactoryAware) &#123;</span><br><span class="line">            ((BeanFactoryAware) <span class="built_in">this</span>.advice).setBeanFactory(beanFactory);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Advice <span class="title function_">buildAdvice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">AnnotationAwareRetryOperationsInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationAwareRetryOperationsInterceptor</span>();</span><br><span class="line">        <span class="keyword">if</span> (retryContextCache != <span class="literal">null</span>) &#123;</span><br><span class="line">            interceptor.setRetryContextCache(retryContextCache);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (retryListeners != <span class="literal">null</span>) &#123;</span><br><span class="line">            interceptor.setListeners(retryListeners);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (methodArgumentsKeyGenerator != <span class="literal">null</span>) &#123;</span><br><span class="line">            interceptor.setKeyGenerator(methodArgumentsKeyGenerator);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (newMethodArgumentsIdentifier != <span class="literal">null</span>) &#123;</span><br><span class="line">            interceptor.setNewItemIdentifier(newMethodArgumentsIdentifier);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sleeper != <span class="literal">null</span>) &#123;</span><br><span class="line">            interceptor.setSleeper(sleeper);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>切面方法拦截器 AnnotationAwareRetryOperationsInterceptor 会拦截目标方法，查找方法上是否有@Retryable 注解</li>
</ol>
<ul>
<li>如果存在方法拦截器委派者，调用委派者 invoke 方法</li>
<li>否则直接调用目标方法，即：不具备可重试功能</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationAwareRetryOperationsInterceptor</span> <span class="keyword">implements</span> <span class="title class_">IntroductionInterceptor</span>, BeanFactoryAware &#123;</span><br><span class="line">    <span class="comment">// ....</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">MethodInterceptor</span> <span class="variable">delegate</span> <span class="operator">=</span> getDelegate(invocation.getThis(), invocation.getMethod());</span><br><span class="line">        <span class="keyword">if</span> (delegate != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 调用委派者invoke方法</span></span><br><span class="line">            <span class="keyword">return</span> delegate.invoke(invocation);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 直接调用目标方法</span></span><br><span class="line">            <span class="keyword">return</span> invocation.proceed();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MethodInterceptor <span class="title function_">getDelegate</span><span class="params">(Object target, Method method)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.delegates.containsKey(target) || !<span class="built_in">this</span>.delegates.get(target).containsKey(method)) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="built_in">this</span>.delegates) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="built_in">this</span>.delegates.containsKey(target)) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.delegates.put(target, <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Method, MethodInterceptor&gt;());</span><br><span class="line">                &#125;</span><br><span class="line">                Map&lt;Method, MethodInterceptor&gt; delegatesForTarget = <span class="built_in">this</span>.delegates.get(target);</span><br><span class="line">                <span class="keyword">if</span> (!delegatesForTarget.containsKey(method)) &#123;</span><br><span class="line">                    <span class="comment">// 1. 获取目标方法上的Retryable注解</span></span><br><span class="line">                    <span class="type">Retryable</span> <span class="variable">retryable</span> <span class="operator">=</span> AnnotationUtils.findAnnotation(method, Retryable.class);</span><br><span class="line">                    <span class="keyword">if</span> (retryable == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="comment">// 2. 目标方法不存在Retryable注解，降级查找目标方法声明类上的Retryable注解</span></span><br><span class="line">                        retryable = AnnotationUtils.findAnnotation(method.getDeclaringClass(), Retryable.class);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (retryable == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="comment">// 3. 方法、声明类均没有Retryable注解，降级从target目标实例中获取同方法名、同方法入参类型的方法上的Retryable注解</span></span><br><span class="line">                        retryable = findAnnotationOnTarget(target, method);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 4.依然不存在则为方法缓存委派者为null，即降级直接调用目标方法，不具备可重试功能。</span></span><br><span class="line">                    <span class="keyword">if</span> (retryable == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> delegatesForTarget.put(method, <span class="literal">null</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    MethodInterceptor delegate;</span><br><span class="line">                    <span class="keyword">if</span> (StringUtils.hasText(retryable.interceptor())) &#123;</span><br><span class="line">                        <span class="comment">// 5. 如果Retryable注解指定了方法拦截器，使用自定义方法拦截器拦截目标方法</span></span><br><span class="line">                        delegate = <span class="built_in">this</span>.beanFactory.getBean(retryable.interceptor(), MethodInterceptor.class);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (retryable.stateful()) &#123;</span><br><span class="line">                        delegate = getStatefulInterceptor(target, method, retryable);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        delegate = getStatelessInterceptor(target, method, retryable);</span><br><span class="line">                    &#125;</span><br><span class="line">                    delegatesForTarget.put(method, delegate);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.delegates.get(target).get(method);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Retryable <span class="title function_">findAnnotationOnTarget</span><span class="params">(Object target, Method method)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Method</span> <span class="variable">targetMethod</span> <span class="operator">=</span> target.getClass().getMethod(method.getName(), method.getParameterTypes());</span><br><span class="line">            <span class="type">Retryable</span> <span class="variable">retryable</span> <span class="operator">=</span> AnnotationUtils.findAnnotation(targetMethod, Retryable.class);</span><br><span class="line">            <span class="keyword">if</span> (retryable == <span class="literal">null</span>) &#123;</span><br><span class="line">                retryable = AnnotationUtils.findAnnotation(targetMethod.getDeclaringClass(), Retryable.class);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> retryable;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MethodInterceptor <span class="title function_">getStatelessInterceptor</span><span class="params">(Object target, Method method, Retryable retryable)</span> &#123;</span><br><span class="line">        <span class="type">RetryTemplate</span> <span class="variable">template</span> <span class="operator">=</span> createTemplate(retryable.listeners());</span><br><span class="line">        template.setRetryPolicy(getRetryPolicy(retryable));</span><br><span class="line">        template.setBackOffPolicy(getBackoffPolicy(retryable.backoff()));</span><br><span class="line">        <span class="keyword">return</span> RetryInterceptorBuilder.stateless()</span><br><span class="line">                .retryOperations(template)</span><br><span class="line">                .label(retryable.label())</span><br><span class="line">                .recoverer(getRecoverer(target, method))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MethodInterceptor <span class="title function_">getStatefulInterceptor</span><span class="params">(Object target, Method method, Retryable retryable)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 创建重试模板类</span></span><br><span class="line">        <span class="type">RetryTemplate</span> <span class="variable">template</span> <span class="operator">=</span> createTemplate(retryable.listeners());</span><br><span class="line">        template.setRetryContextCache(<span class="built_in">this</span>.retryContextCache);</span><br><span class="line">        <span class="comment">// 2. 获取方法的环路打断器注解</span></span><br><span class="line">        <span class="type">CircuitBreaker</span> <span class="variable">circuit</span> <span class="operator">=</span> AnnotationUtils.findAnnotation(method, CircuitBreaker.class);</span><br><span class="line">        <span class="keyword">if</span> (circuit!=<span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 3. 根据环路打断器注解获取重试策略：a. ExpressionRetryPolicy。b. SimpleRetryPolicy</span></span><br><span class="line">            <span class="type">RetryPolicy</span> <span class="variable">policy</span> <span class="operator">=</span> getRetryPolicy(circuit);</span><br><span class="line">            <span class="comment">// 4. 环路打断器重试策略包装原注解配置的重试策略</span></span><br><span class="line">            <span class="type">CircuitBreakerRetryPolicy</span> <span class="variable">breaker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CircuitBreakerRetryPolicy</span>(policy);</span><br><span class="line">            breaker.setOpenTimeout(getOpenTimeout(circuit));</span><br><span class="line">            breaker.setResetTimeout(getResetTimeout(circuit));</span><br><span class="line">            template.setRetryPolicy(breaker);</span><br><span class="line">            <span class="comment">// 无backoff策略，即立马重试</span></span><br><span class="line">            template.setBackOffPolicy(<span class="keyword">new</span> <span class="title class_">NoBackOffPolicy</span>());</span><br><span class="line">            <span class="type">String</span> <span class="variable">label</span> <span class="operator">=</span> circuit.label();</span><br><span class="line">            <span class="keyword">if</span> (!StringUtils.hasText(label))  &#123;</span><br><span class="line">                label = method.toGenericString();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 5. 根据配置构建并返回重试拦截器，底层实际使用的是StatefulRetryOperationsInterceptor</span></span><br><span class="line">            <span class="comment">// 拦截器，区别主要是重试策略在原基础上增加了CircuitBreakerRetryPolicy包装，及无backoff策略</span></span><br><span class="line">            <span class="keyword">return</span> RetryInterceptorBuilder.circuitBreaker()</span><br><span class="line">                    .keyGenerator(<span class="keyword">new</span> <span class="title class_">FixedKeyGenerator</span>(<span class="string">&quot;circuit&quot;</span>))</span><br><span class="line">                    .retryOperations(template)</span><br><span class="line">                    .recoverer(getRecoverer(target, method))</span><br><span class="line">                    .label(label)</span><br><span class="line">                    .build();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 6. 如果不存在环路打断器则走原注解配置的重试策略：表达式重试策略，简单重试策略</span></span><br><span class="line">        <span class="type">RetryPolicy</span> <span class="variable">policy</span> <span class="operator">=</span> getRetryPolicy(retryable);</span><br><span class="line">        template.setRetryPolicy(policy);</span><br><span class="line">        <span class="comment">// 7. 根据注解配置设置backoff策略</span></span><br><span class="line">        template.setBackOffPolicy(getBackoffPolicy(retryable.backoff()));</span><br><span class="line">        <span class="type">String</span> <span class="variable">label</span> <span class="operator">=</span> retryable.label();</span><br><span class="line">        <span class="keyword">return</span> RetryInterceptorBuilder.stateful()</span><br><span class="line">                .keyGenerator(<span class="built_in">this</span>.methodArgumentsKeyGenerator)</span><br><span class="line">                .newMethodArgumentsIdentifier(<span class="built_in">this</span>.newMethodArgumentsIdentifier)</span><br><span class="line">                .retryOperations(template)</span><br><span class="line">                .label(label)</span><br><span class="line">                .recoverer(getRecoverer(target, method))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// .....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>RetryOperationsInterceptor 或 StatefulRetryOperationsInterceptor 拦截器进行拦截</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RetryOperationsInterceptor</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span> &#123;</span><br><span class="line">    <span class="comment">// ....</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(<span class="keyword">final</span> MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        String name;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(label)) &#123;</span><br><span class="line">            name = label;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            name = invocation.getMethod().toGenericString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">label</span> <span class="operator">=</span> name;</span><br><span class="line">        RetryCallback&lt;Object, Throwable&gt; retryCallback = <span class="keyword">new</span> <span class="title class_">RetryCallback</span>&lt;Object, Throwable&gt;() &#123;</span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">doWithRetry</span><span class="params">(RetryContext context)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                context.setAttribute(RetryContext.NAME, label);</span><br><span class="line">                <span class="keyword">if</span> (invocation <span class="keyword">instanceof</span> ProxyMethodInvocation) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> ((ProxyMethodInvocation) invocation).invocableClone().proceed();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> e;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">catch</span> (Error e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> e;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(</span><br><span class="line">                            <span class="string">&quot;MethodInvocation of the wrong type detected - this should not happen with Spring AOP, &quot;</span> +</span><br><span class="line">                                    <span class="string">&quot;so please raise an issue if you see this exception&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">if</span> (recoverer != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">ItemRecovererCallback</span> <span class="variable">recoveryCallback</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ItemRecovererCallback</span>(</span><br><span class="line">                    invocation.getArguments(), recoverer);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.retryOperations.execute(retryCallback, recoveryCallback);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.retryOperations.execute(retryCallback);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>调用 RetryTemplate 重试模板类进行重试</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RetryTemplate</span> <span class="keyword">implements</span> <span class="title class_">RetryOperations</span> &#123;</span><br><span class="line">    <span class="comment">// ....</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> &lt;T, E <span class="keyword">extends</span> <span class="title class_">Throwable</span>&gt; T <span class="title function_">doExecute</span><span class="params">(RetryCallback&lt;T, E&gt; retryCallback,</span></span><br><span class="line"><span class="params">            RecoveryCallback&lt;T&gt; recoveryCallback, RetryState state)</span></span><br><span class="line">            <span class="keyword">throws</span> E, ExhaustedRetryException &#123;</span><br><span class="line">        <span class="type">RetryPolicy</span> <span class="variable">retryPolicy</span> <span class="operator">=</span> <span class="built_in">this</span>.retryPolicy;</span><br><span class="line">        <span class="type">BackOffPolicy</span> <span class="variable">backOffPolicy</span> <span class="operator">=</span> <span class="built_in">this</span>.backOffPolicy;</span><br><span class="line"></span><br><span class="line">        <span class="type">RetryContext</span> <span class="variable">context</span> <span class="operator">=</span> open(retryPolicy, state);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.logger.isTraceEnabled()) &#123;</span><br><span class="line">            <span class="built_in">this</span>.logger.trace(<span class="string">&quot;RetryContext retrieved: &quot;</span> + context);</span><br><span class="line">        &#125;</span><br><span class="line">        RetrySynchronizationManager.register(context);</span><br><span class="line">        <span class="type">Throwable</span> <span class="variable">lastException</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">exhausted</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">running</span> <span class="operator">=</span> doOpenInterceptors(retryCallback, context);</span><br><span class="line">            <span class="keyword">if</span> (!running) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TerminatedRetryException</span>(</span><br><span class="line">                        <span class="string">&quot;Retry terminated abnormally by interceptor before first attempt&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">BackOffContext</span> <span class="variable">backOffContext</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">resource</span> <span class="operator">=</span> context.getAttribute(<span class="string">&quot;backOffContext&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (resource <span class="keyword">instanceof</span> BackOffContext) &#123;</span><br><span class="line">                backOffContext = (BackOffContext) resource;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (backOffContext == <span class="literal">null</span>) &#123;</span><br><span class="line">                backOffContext = backOffPolicy.start(context);</span><br><span class="line">                <span class="keyword">if</span> (backOffContext != <span class="literal">null</span>) &#123;</span><br><span class="line">                    context.setAttribute(<span class="string">&quot;backOffContext&quot;</span>, backOffContext);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (canRetry(retryPolicy, context) &amp;&amp; !context.isExhaustedOnly()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line">                        <span class="built_in">this</span>.logger.debug(<span class="string">&quot;Retry: count=&quot;</span> + context.getRetryCount());</span><br><span class="line">                    &#125;</span><br><span class="line">                    lastException = <span class="literal">null</span>;</span><br><span class="line">                    <span class="keyword">return</span> retryCallback.doWithRetry(context);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                    lastException = e;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        registerThrowable(retryPolicy, state, context, e);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TerminatedRetryException</span>(<span class="string">&quot;Could not register throwable&quot;</span>,</span><br><span class="line">                                ex);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">finally</span> &#123;</span><br><span class="line">                        doOnErrorInterceptors(retryCallback, context, e);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (canRetry(retryPolicy, context) &amp;&amp; !context.isExhaustedOnly()) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            backOffPolicy.backOff(backOffContext);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">catch</span> (BackOffInterruptedException ex) &#123;</span><br><span class="line">                            lastException = e;</span><br><span class="line">                            <span class="keyword">if</span> (<span class="built_in">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line">                                <span class="built_in">this</span>.logger</span><br><span class="line">                                        .debug(<span class="string">&quot;Abort retry because interrupted: count=&quot;</span></span><br><span class="line">                                                + context.getRetryCount());</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">throw</span> ex;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line">                        <span class="built_in">this</span>.logger.debug(</span><br><span class="line">                                <span class="string">&quot;Checking for rethrow: count=&quot;</span> + context.getRetryCount());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (shouldRethrow(retryPolicy, context, state)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line">                            <span class="built_in">this</span>.logger.debug(<span class="string">&quot;Rethrow in retry for policy: count=&quot;</span></span><br><span class="line">                                    + context.getRetryCount());</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">throw</span> RetryTemplate.&lt;E&gt;wrapIfNecessary(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (state != <span class="literal">null</span> &amp;&amp; context.hasAttribute(GLOBAL_STATE)) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (state == <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line">                <span class="built_in">this</span>.logger.debug(</span><br><span class="line">                        <span class="string">&quot;Retry failed last attempt: count=&quot;</span> + context.getRetryCount());</span><br><span class="line">            &#125;</span><br><span class="line">            exhausted = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span> handleRetryExhausted(recoveryCallback, context, state);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> RetryTemplate.&lt;E&gt;wrapIfNecessary(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            close(retryPolicy, context, state, lastException == <span class="literal">null</span> || exhausted);</span><br><span class="line">            doCloseInterceptors(retryCallback, context, lastException);</span><br><span class="line">            RetrySynchronizationManager.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>通过 RetryPolicy 的实现类判断是否进行重试</li>
</ol>
<ul>
<li>SimpleRetryPolicy 重试策略</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleRetryPolicy</span> <span class="keyword">implements</span> <span class="title class_">RetryPolicy</span> &#123;</span><br><span class="line">    <span class="comment">// .....</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canRetry</span><span class="params">(RetryContext context)</span> &#123;</span><br><span class="line">        <span class="type">Throwable</span> <span class="variable">t</span> <span class="operator">=</span> context.getLastThrowable();</span><br><span class="line">        <span class="keyword">return</span> (t == <span class="literal">null</span> || retryForException(t)) &amp;&amp; context.getRetryCount() &lt; maxAttempts;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// .....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot（4-属性注入）</title>
    <url>/blog/2025/03/20/Java/SpringBoot/SpringBoot%EF%BC%884-%E5%B1%9E%E6%80%A7%E6%B3%A8%E5%85%A5%EF%BC%89/</url>
    <content><![CDATA[<h2 id="Value">@Value</h2>
<h3 id="读取配置参数">读取配置参数</h3>
<ol>
<li>在 application.properties 文件设置属性</li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">my.name</span>=<span class="string">mydlq</span></span><br><span class="line"><span class="attr">my.age</span>=<span class="string">18</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>使用 @Value 读取配置文件</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadProperties</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;my.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;my.age&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>并且还可以设置一个默认值，从配置文件读取不到时使用默认值</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadProperties</span> &#123;</span><br><span class="line">    <span class="comment">//:表示当取不到配置文件的值时使用默认值</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;my.name:默认姓名&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;my.age:18&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="给参数设定值">给参数设定值</h3>
<p>使用@Value 注解给参数设定值，达到跟 “=” 号一样的赋值效果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadProperties</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Value(&quot;#&#123;&#x27;test value&#x27;&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="读取系统属性">读取系统属性</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;#&#123;systemProperties[&#x27;os.name&#x27;]&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String systemPropertiesName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="读取-Bean-的属性">读取 Bean 的属性</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">user</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setName(<span class="string">&quot;测试&quot;</span>);</span><br><span class="line">        user.setAge(<span class="string">&quot;18&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;#&#123;user.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String value;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="使用-SPEL-表达式">使用 SPEL 表达式</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用SpEL表达式生成随机数</span></span><br><span class="line">    <span class="meta">@Value(&quot;#&#123; T(java.lang.Math).random() * 100.0 &#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> random;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="读取-Resource-资源文件">读取 Resource 资源文件</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;classpath:application.properties&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Resource resourceFile;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 如果文件存在，就输出文件名称</span></span><br><span class="line">        <span class="keyword">if</span>(resourceFile.exists())&#123;</span><br><span class="line">            System.out.println(resourceFile.getFilename());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="读取-List、Map">读取 List、Map</h3>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">test.list</span>=<span class="string">topic1,topic2,topic3</span></span><br><span class="line"><span class="attr">test.maps</span>=<span class="string">&quot;&#123;key1: &#x27;value1&#x27;, key2: &#x27;value2&#x27;&#125;&quot;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取List</span></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;test.list.ids:1,2,3&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; testList;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数组</span></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;test.list.ids:1,2,3&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String[] testList;</span><br><span class="line"></span><br><span class="line"><span class="comment">// list指定分隔符</span></span><br><span class="line"><span class="meta">@Value(&quot;#&#123;&#x27;$&#123;test.list&#125;&#x27;.split(&#x27;,&#x27;)&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取map</span></span><br><span class="line"><span class="meta">@Value(&quot;#&#123;$&#123;test.maps&#125;&#125;&quot;)</span>  </span><br><span class="line"><span class="keyword">private</span> Map&lt;String,String&gt; maps;</span><br></pre></td></tr></table></figure>
<h3 id="静态变量赋值">静态变量赋值</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 错误例子，spring 不允许/不支持把值注入到静态变量中，会得到null</span></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;ES.CLUSTER_NAME&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String CLUSTER_NAME;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String CLUSTER_NAME;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以利用非静态setter 方法注入静态变量</span></span><br><span class="line"><span class="comment">//@Value必须修饰在方法上，且set方法不能有static，这样就能获得值了</span></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;ES.CLUSTER_NAME&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setClusterName</span><span class="params">(String clusterName)</span> &#123;</span><br><span class="line">    CLUSTER_NAME = clusterName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ConfigurationProperties">@ConfigurationProperties</h2>
<h3 id="读取-String-类型">读取 String 类型</h3>
<ol>
<li>在 application.properties 文件设置属性</li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">my.name</span>=<span class="string">mydlq</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>使用 @ConfigurationProperties 注解读取对应配置</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//配置 prefix 来过滤对应前缀</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;my&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigurationReadConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="读取-List-类型">读取 List 类型</h3>
<ol>
<li>在 application.properties 文件设置属性</li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">my.list[0]</span>=<span class="string">a</span></span><br><span class="line"><span class="attr">my.list[1]</span>=<span class="string">b</span></span><br><span class="line"><span class="attr">my.list[2]</span>=<span class="string">c</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>使用 @ConfigurationProperties 注解读取对应配置</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;my&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigurationReadConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setList</span><span class="params">(List&lt;String&gt; list)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="读取-Map-类型">读取 Map 类型</h3>
<ol>
<li>在 application.properties 文件设置属性</li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">my.map.name</span>=<span class="string">xiao-li</span></span><br><span class="line"><span class="attr">my.map.sex</span>=<span class="string">man</span></span><br><span class="line"><span class="attr">my.map.age</span>=<span class="string">20</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>使用 @ConfigurationProperties 注解读取对应配置</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;my&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigurationReadConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; map;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String&gt; <span class="title function_">getMap</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMap</span><span class="params">(Map&lt;String, String&gt; map)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.map = map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="读取-Time-类型">读取 Time 类型</h3>
<ol>
<li>在 application.properties 文件设置属性</li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">my.time</span>=<span class="string">20s</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>使用 @ConfigurationProperties 注解读取对应配置</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;my&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigurationReadConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置以秒为单位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DurationUnit(ChronoUnit.SECONDS)</span></span><br><span class="line">    <span class="keyword">private</span> Duration time;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Duration <span class="title function_">getTime</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> time;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTime</span><span class="params">(Duration time)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.time = time;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="读取参数并进行-Valid-校验">读取参数并进行 Valid 校验</h3>
<ol>
<li>在 application.properties 文件设置属性</li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">my.name</span>=<span class="string">xiao-ming</span></span><br><span class="line"><span class="attr">my.age</span>=<span class="string">20</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>使用 @ConfigurationProperties 注解读取对应配置</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Validated</span>  <span class="comment">// 引入效验注解</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;my&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigurationReadConfigAndValid</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;姓名不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Max(value = 20L,message = &quot;年龄不能超过 20 岁&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="读取配置到新建-Bean-中">读取配置到新建 Bean 中</h3>
<ol>
<li>在 application.properties 文件设置属性</li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">user.name</span>=<span class="string">mydlq</span></span><br><span class="line"><span class="attr">user.age</span>=<span class="string">22</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>使用 @ConfigurationProperties 注解读取对应配置到新建的 Bean 对象中</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigurationReadObject</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;user&quot;)</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">createUser</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="从指定配置文件读取">从指定配置文件读取</h3>
<p>使用 @ConfigurationProperties 注解是默认从 application.properties 或者 application.yaml 中读取配置，有时候我们需要将特定的配置放到单独的配置文件中，这时候需要 @PropertySource 与 ConfigurationProperties 配置使用，使用 @PropertySource 注解指定要读取的文件，使用 @ConfigurationProperties 相关属性</p>
<ol>
<li>在 test.txt 文件设置属性</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">my.name=mydlq</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>使用 @ConfigurationProperties 注解读取对应配置</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;my&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(encoding = &quot;UTF-8&quot;, ignoreResourceNotFound = true, value = &quot;classpath:test.txt&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigurationReadConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Environment">Environment</h2>
<ol>
<li>在 application.properties 文件设置属性</li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">my.name</span>=<span class="string">mydlq</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>使用 Environment 读取配置</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnvironmentReadConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Environment environment;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">readConfig</span><span class="params">()</span>&#123;</span><br><span class="line">        name = environment.getProperty(<span class="string">&quot;my.name&quot;</span>, <span class="string">&quot;默认值&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="comment">// 该注解的作用是使 MyConfigurationProperties 这个类上标注的 @ConfigurationProperties 注解生效,并且会自动将这个类注入到 IOC 容器中</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(MyConfigurationProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">HelloService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="PropertiesLoaderUtils">PropertiesLoaderUtils</h2>
<ol>
<li>在 application.properties 文件设置属性</li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">my.name</span>=<span class="string">mydlq</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>使用 PropertiesLoaderUtils 读取配置</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PropertiesReadConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ClassPathResource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;application.properties&quot;</span>);</span><br><span class="line">            <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> PropertiesLoaderUtils.loadProperties(resource);</span><br><span class="line">            name = properties.getProperty(<span class="string">&quot;my.name&quot;</span>, <span class="string">&quot;默认值&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Properties</strong></p>
<ol>
<li>setProperty(String  key, String  value)：调用 Hashtable 的方法 put</li>
<li>getProperty(String  key)：用指定的键在此属性列表中搜索属性</li>
<li>getProperty(String  key, String  defaultValue)：用指定的键在属性列表中搜索属性，没有则输出 defaultValue</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    Properties properties=<span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">    <span class="comment">//与map使用方法相同</span></span><br><span class="line">    properties.put(<span class="string">&quot;das&quot;</span>,<span class="string">&quot;fsdf&quot;</span>);</span><br><span class="line">    properties.put(<span class="string">&quot;ds&quot;</span>,<span class="string">&quot;czx&quot;</span>);</span><br><span class="line">    properties.put(<span class="string">&quot;czx&quot;</span>,<span class="string">&quot;fds&quot;</span>);</span><br><span class="line">    Set&lt;Object&gt; objects = properties.keySet();</span><br><span class="line">    <span class="keyword">for</span> (Object key:objects)&#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> properties.get(key);</span><br><span class="line">        System.out.println(key+<span class="string">&quot; &quot;</span>+o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    Properties properties=<span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">    properties.setProperty(<span class="string">&quot;fasf&quot;</span>,<span class="string">&quot;cz&quot;</span>);</span><br><span class="line">    properties.setProperty(<span class="string">&quot;czx&quot;</span>,<span class="string">&quot;vc&quot;</span>);</span><br><span class="line">    properties.setProperty(<span class="string">&quot;vxc&quot;</span>,<span class="string">&quot;gfd&quot;</span>);</span><br><span class="line">    System.out.println(properties.getProperty(<span class="string">&quot;vxc&quot;</span>));</span><br><span class="line">    System.out.println(properties);</span><br><span class="line">    <span class="comment">//把key值转换成set 的形式，遍历set</span></span><br><span class="line">    Set&lt;String&gt; strings = properties.stringPropertyNames();</span><br><span class="line">    <span class="keyword">for</span> (String s:strings)&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">property</span> <span class="operator">=</span> properties.getProperty(s);</span><br><span class="line">        System.out.println(s+<span class="string">&quot; &quot;</span>+property);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>load(InputStream  inStream)：从输入流中读取属性列表（键和元素对）</li>
<li>load(Reader  reader)：按简单的面向行的格式从输入字符流中读取属性列表（键和元素对）</li>
<li>loadFromXML(InputStream  in)：将指定输入流中由 XML 文档所表示的所有属性加载到此属性表中</li>
<li>store(OutputStream  out, String  comments)：以适合使用 load(InputStream) 方法加载到 Properties 表中的格式，将此 Properties 表中的属性列表（键和元素对）写入输出流</li>
<li>store(Writer  writer, String  comments)：以适合使用 load(Reader) 方法的格式，将此 Properties 表中的属性列表（键和元素对）写入输出字符</li>
<li>storeToXML(OutputStream  os, String  comment)：发出一个表示此表中包含的所有属性的 XML 文档</li>
<li>storeToXML(OutputStream  os, String  comment, String  encoding)：使用指定的编码发出一个表示此表中包含的所有属性的 XML 文档</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    myStore();</span><br><span class="line">    mtLoad();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取文件内容</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mtLoad</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">    Properties properties=<span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">    FileReader fileReader=<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">    properties.load(fileReader);</span><br><span class="line">    fileReader.close();</span><br><span class="line">    System.out.println(properties);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将内容写到文件</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">myStore</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">    Properties properties=<span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">    properties.setProperty(<span class="string">&quot;das&quot;</span>,<span class="string">&quot;cz&quot;</span>);</span><br><span class="line">    properties.setProperty(<span class="string">&quot;czx&quot;</span>,<span class="string">&quot;vxc&quot;</span>);</span><br><span class="line">    properties.setProperty(<span class="string">&quot;cz&quot;</span>,<span class="string">&quot;vcx&quot;</span>);</span><br><span class="line">    FileWriter fileWriter=<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">    properties.store(fileWriter,<span class="string">&quot;test1&quot;</span>);</span><br><span class="line">    fileWriter.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot（5-@Conditional条件注解）</title>
    <url>/blog/2025/03/21/Java/SpringBoot/SpringBoot%EF%BC%885-@Conditional%E6%9D%A1%E4%BB%B6%E6%B3%A8%E8%A7%A3%EF%BC%89/</url>
    <content><![CDATA[<h2 id="属性注入">属性注入</h2>
<h3 id="ConfigurationProperties-Component">@ConfigurationProperties+@Component</h3>
<p>如果一个类只配置了@ConfigurationProperties 注解，而没有使用@Component 注解将该类加入到 IOC 容器中，那么它就不能完成 xxx.properties 文件和 Java Bean 的数据绑定</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">xiaomao.name</span>=<span class="string">xiaomaomao</span></span><br><span class="line"><span class="attr">xiaomao.age</span>=<span class="string">27</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;xiaomao&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfigurationProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="EnableConfigurationProperties">@EnableConfigurationProperties</h3>
<p>@EnableConfigurationProperties(A.class)的作用就是如果 A 这个类上使用了@ConfigurationProperties 注解，那么 A 这个类就会与 xxx.properties 进行动态绑定，并且会将 A 这个类加入 IOC 容器中，并交由 IOC 容器进行管理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;xiaomao&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfigurationProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="comment">// 该注解的作用是使 MyConfigurationProperties 这个类上标注的 @ConfigurationProperties 注解生效,并且会自动将这个类注入到 IOC 容器中</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(MyConfigurationProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">HelloService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Conditional-扩展注解">@Conditional 扩展注解</h2>
<table>
<thead>
<tr>
<th>Condition 处理类</th>
<th>条件注解</th>
<th>实例</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>OnBeanCondition</td>
<td>@ConditionalOnBean</td>
<td>@ConditionalOnBean(DataSource.class)</td>
<td>Spring 容器中不存在对应的实例生效</td>
</tr>
<tr>
<td>OnBeanCondition</td>
<td>@ConditionalOnMissingBean</td>
<td>@ConditionalOnMissingBean(name = “redisTemplate”)</td>
<td>Spring 容器中不存在对应的实例生效</td>
</tr>
<tr>
<td>OnBeanCondition</td>
<td>@ConditionalOnSingleCandidate</td>
<td>@ConditionalOnSingleCandidate(FilteringNotifier.class)</td>
<td>Spring 容器中是否存在且只存在一个对应的实例，或者虽然有多个但 是指定首选的 Bean 生效</td>
</tr>
<tr>
<td>OnClassCondition</td>
<td>@ConditionalOnClass</td>
<td>@ConditionalOnClass(RedisOperations.class)</td>
<td>类加载器中存在对应的类生效</td>
</tr>
<tr>
<td>OnClassCondition</td>
<td>@ConditionalOnMissingClass</td>
<td>@ConditionalOnMissingClass(RedisOperations.class)</td>
<td>类加载器中不存在对应的类生效</td>
</tr>
<tr>
<td>OnExpressionCondition</td>
<td>@ConditionalOnExpression</td>
<td>@ConditionalOnExpression(“‘’${server.host}'==‘localhost’”)</td>
<td>判断 SpEL 表达式成立生效</td>
</tr>
<tr>
<td>@ConditionalOnJava</td>
<td>OnJavaCondition</td>
<td>@ConditionalOnJava(JavaVersion.EIGHT)</td>
<td>指定 Java 版本符合要求生效</td>
</tr>
<tr>
<td>@ConditionalOnProperty</td>
<td>OnPropertyCondition</td>
<td>@ConditionalOnProperty(prefix = “spring.aop”, name = “auto”, havingValue = “true”, matchIfMissing = true)</td>
<td>应用环境中的属性满足条件生效</td>
</tr>
<tr>
<td>@ConditionalOnResource</td>
<td>OnResourceCondition</td>
<td>@ConditionalOnResource(resources =“mybatis.xml”)</td>
<td>存在指定的资源文件生效</td>
</tr>
<tr>
<td>@ConditionalOnWebApplication</td>
<td>OnWebApplicationCondition</td>
<td></td>
<td>当前应用是 Web 应用生效</td>
</tr>
<tr>
<td>@ConditionalOnNotWebApplication</td>
<td>OnWebApplicationCondition</td>
<td></td>
<td>当前应用不是 Web 应用生效</td>
</tr>
</tbody>
</table>
<p>上面的扩展注解我们可以简单的分为以下几类：</p>
<ul>
<li>Bean 作为条件：@ConditionalOnBean、@ConditionalOnMissingBean、@ConditionalOnSingleCandidate。</li>
<li>类作为条件：@ConditionalOnClass、@ConditionalOnMissingClass。</li>
<li>SpEL 表达式作为条件：@ConditionalOnExpression。</li>
<li>JAVA 版本作为条件：@ConditionalOnJava</li>
<li>配置属性作为条件：@ConditionalOnProperty。</li>
<li>资源文件作为条件：@ConditionalOnResource。</li>
<li>是否 Web 应用作为判断条件：@ConditionalOnWebApplication、@ConditionalOnNotWebApplication。</li>
</ul>
<h3 id="ConditionalOnBean">@ConditionalOnBean</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123; ElementType.TYPE, ElementType.METHOD &#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Conditional(OnBeanCondition.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ConditionalOnBean &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要作为条件的类的Class对象数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Class&lt;?&gt;[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要作为条件的类的Name, Class.getName()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String[] type() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * (用于指定注解修饰的Bean)条件所需的注解类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt;[] annotation() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Spring容器中Bean的名字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String[] name() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 搜索容器层级，当前容器，父容器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SearchStrategy <span class="title function_">search</span><span class="params">()</span> <span class="keyword">default</span> SearchStrategy.ALL;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可能在其泛型参数中包含指定Bean类型的其他类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Class&lt;?&gt;[] parameterizedContainer() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>@ConditionalOnBean 对应的 Condition 处理类是 OnBeanCondition，如果 Spring 容器里面存在指定的 Bean 则生效。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当容器中存在指定的 Bean 时，创建该 Bean</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(DataSource.class)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">onBeanCondition</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;DataSource 存在时该 Bean 被创建&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ConditionalOnMissingBean">@ConditionalOnMissingBean</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123; ElementType.TYPE, ElementType.METHOD &#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Conditional(OnBeanCondition.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ConditionalOnMissingBean &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要作为条件的类的Class对象数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Class&lt;?&gt;[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要作为条件的类的Name, Class.getName()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String[] type() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 匹配Bean的时候需要忽视的Class对象数组，一般是父类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@ConditionalOnMissingBean</span>(value = JdbcFactory.class, ignored = MySqlDefaultFactory.class)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Class&lt;?&gt;[] ignored() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 匹配Bean的时候需要忽视的类的Name, Class.getName()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String[] ignoredType() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * (用于指定注解修饰的Bean)条件所需的注解类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt;[] annotation() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Spring容器中Bean的名字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String[] name() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 搜索容器层级，当前容器，父容器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SearchStrategy <span class="title function_">search</span><span class="params">()</span> <span class="keyword">default</span> SearchStrategy.ALL;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可能在其泛型参数中包含指定Bean类型的其他类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Class&lt;?&gt;[] parameterizedContainer() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>@ConditionalOnMissingBean 对应的 Condition 实现类是 OnBeanCondition，如果 Spring 容器里面不存在指定的 Bean 则生效。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当容器里面不存在redisTemplate对应的Bean的时候，就会创建一个RedisTemplate添加到容器里面去。</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(name = &quot;redisTemplate&quot;)</span></span><br><span class="line"><span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span></span><br><span class="line">        <span class="keyword">throws</span> UnknownHostException &#123;</span><br><span class="line">    RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">    template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">    <span class="keyword">return</span> template;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ConditionalOnSingleCandidate">@ConditionalOnSingleCandidate</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123; ElementType.TYPE, ElementType.METHOD &#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Conditional(OnBeanCondition.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ConditionalOnSingleCandidate &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要作为条件的类的Class对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Class&lt;?&gt; value() <span class="keyword">default</span> Object.class;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要作为条件的类的Name, Class.getName()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">type</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 搜索容器层级，当前容器，父容器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SearchStrategy <span class="title function_">search</span><span class="params">()</span> <span class="keyword">default</span> SearchStrategy.ALL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>@ConditionalOnSingleCandidate 对应的 Condition 处理类是 OnBeanCondition，如果当指定 Bean 在容器中只有一个，或者虽然有多个但是指定首选 Bean 的时候则生效。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当存在唯一符合条件的 Bean 时创建</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnSingleCandidate(DataSource.class)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">onSingleCandidate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;存在唯一的 DataSource 实例时，该 Bean 被创建&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ConditionalOnClass">@ConditionalOnClass</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123; ElementType.TYPE, ElementType.METHOD &#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Conditional(OnClassCondition.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ConditionalOnClass &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要作为条件的类的Class对象数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Class&lt;?&gt;[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要作为条件的类的Name, Class.getName()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String[] name() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>@ConditionalOnClass 对应的 Condition 处理类是 OnClassCondition，如果当前类路径下面有指定的类的时候则生效。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当类存在于 classpath 时，创建该 Bean</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(name = &quot;com.mysql.cj.jdbc.Driver&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">onClassCondition</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;MySQL Driver 存在于 classpath 时，该 Bean 被创建&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ConditionalOnMissingClass">@ConditionalOnMissingClass</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123; ElementType.TYPE, ElementType.METHOD &#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Conditional(OnClassCondition.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ConditionalOnMissingClass &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要作为条件的类的Name, Class.getName()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>@ConditionalOnMissingClass 对应的 Condition 处理类是 OnClassCondition，如果当前类路径下面没有指定的类的时候则生效。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当类不存在于 classpath 时，创建该 Bean</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingClass(&quot;com.mysql.cj.jdbc.Driver&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">onMissingClassCondition</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;MySQL Driver 不存在于 classpath 时，该 Bean 被创建&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ConditionalOnExpression">@ConditionalOnExpression</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123; ElementType.TYPE, ElementType.METHOD &#125;)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Conditional(OnExpressionCondition.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ConditionalOnExpression &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 要作为条件的SpEL表达式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;true&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>@ConditionalOnExpression 对应的 Condition 处理类是 OnExpressionCondition，只有当 SpEL 表达式满足条件的时候则生效。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基于 SpEL 表达式的条件判断</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnExpression(&quot;&#x27;$&#123;custom.feature.enabled:false&#125;&#x27; == &#x27;true&#x27;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">onExpressionCondition</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;SpEL 表达式结果为 true 时，该 Bean 被创建&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ConditionalOnJava">@ConditionalOnJava</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123; ElementType.TYPE, ElementType.METHOD &#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Conditional(OnJavaCondition.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ConditionalOnJava &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 比较方式，Range.EQUAL_OR_NEWER:当前版本等于或高于、Range.OLDER_THAN:当前版本老于，越早的版本越老</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Range <span class="title function_">range</span><span class="params">()</span> <span class="keyword">default</span> Range.EQUAL_OR_NEWER;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定JAVA版本</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    JavaVersion <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Range options.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">Range</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Equal to, or newer than the specified &#123;<span class="doctag">@link</span> JavaVersion&#125;.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        EQUAL_OR_NEWER,</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Older than the specified &#123;<span class="doctag">@link</span> JavaVersion&#125;.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        OLDER_THAN</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>@ConditionalOnJava 对应的 Condition 处理类是 OnJavaCondition，只有当指定的 JAVA 版本条件满足的时候，才会创建对应的 Bean。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基于 Java 版本的条件判断</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnJava(range = ConditionalOnJava.Range.EQUAL_OR_NEWER, value = ConditionalOnJava.JavaVersion.ELEVEN)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">onJavaVersionCondition</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Java 版本 &gt;= 11 时，该 Bean 被创建&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ConditionalProperty">@ConditionalProperty</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123; ElementType.TYPE, ElementType.METHOD &#125;)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Conditional(OnPropertyCondition.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ConditionalOnProperty &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//name的别名，和value不可同时使用</span></span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 配置项的前缀，例如完整的配置是config.person.enable=true，那 prefix=“config.person”</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    String <span class="title function_">prefix</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    配置项的属性，例如完整的配置是config.person.enable=true</span></span><br><span class="line"><span class="comment">    在前面已经设置 prefix=“config.person”，那么 name=“enable”；</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    如果prefix没有设置，那么name可以是整个配置项，例如下面：</span></span><br><span class="line"><span class="comment">    name=“config.person.enable”，效果和上面的一样</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String[] name() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 会将配置文件中的值和havingValue的值对比，如果一样则加载Bean，例如：</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * config.person.enable=true，havingValue=“true”，加载Bean</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * config.person.enable=false，havingValue=“false”，加载Bean</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * config.person.enable=ok，havingValue=“ok”，加载Bean</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * config.person.enable=false，havingValue=“true”，不加载Bean</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * config.person.enable=ok，havingValue=“no”，不加载Bean</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 当然havingValue也可以不设置，只要配置项的值不是false或“false”，都加载Bean，例如：</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * config.person.enable=ok，不设置havingValue，加载Bean</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * config.person.enable=false，不设置havingValue，不加载Bean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">havingValue</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果在配置文件中没有该配置项，是否加载Bean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">matchIfMissing</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>指定 prefix 和 name</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">config:</span></span><br><span class="line">  <span class="attr">person:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnProperty(prefix = &quot;config.person&quot;, name = &quot;enable&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Person <span class="title function_">person1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Bill Gates&quot;</span>, <span class="number">66</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>只指定 name 或 value</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnProperty(value = &quot;config.person.enable&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Person <span class="title function_">person1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Bill Gates&quot;</span>, <span class="number">66</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>指定 havingValue</li>
</ol>
<p>指定了 havingValue，要把配置项的值与 havingValue 对比，一致则加载 Bean</p>
<p>注意：havingValue 可以不设置，只要配置项的值不是 false 或 “false”，都加载 Bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnProperty(prefix = &quot;config.person&quot;, name = &quot;enable&quot;, havingValue = &quot;true&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Person <span class="title function_">person1</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Bill Gates&quot;</span>, <span class="number">66</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>指定 matchIfMissing</li>
</ol>
<p>配置文件缺少配置，但配置了 matchIfMissing = true，加载 Bean，否则不加载</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnProperty(prefix = &quot;config.person&quot;, name = &quot;enable&quot;, havingValue = &quot;true&quot;, matchIfMissing = true)</span></span><br><span class="line">    <span class="keyword">public</span> Person <span class="title function_">person1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Bill Gates&quot;</span>, <span class="number">66</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ConditionalOnResource">@ConditionalOnResource</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123; ElementType.TYPE, ElementType.METHOD &#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Conditional(OnResourceCondition.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ConditionalOnResource &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 要作为判断条件的资源文件名称  <span class="doctag">@ConditionalOnResource</span>(resources=”mybatis.xml”)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String[] resources() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>@ConditionalOnResource 对应的 Condition 处理类 OnResourceCondition，只有当指定的资源文件出现在 classpath 中则生效。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基于资源文件的条件判断</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnResource(resources = &quot;classpath:config/application.yaml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">onResourceCondition</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;classpath 下存在 application.yaml 文件时，该 Bean 被创建&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ConditionalOnWebApplication">@ConditionalOnWebApplication</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123; ElementType.TYPE, ElementType.METHOD &#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Conditional(OnWebApplicationCondition.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ConditionalOnWebApplication &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要作为条件的Web应用程序的必需类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Type <span class="title function_">type</span><span class="params">()</span> <span class="keyword">default</span> Type.ANY;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Available application types.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">Type</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 任何web应用都将匹配</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ANY,</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 仅基于servlet的Web应用程序将匹配</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        SERVLET,</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 仅基于反应式的Web应用程序将匹配</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        REACTIVE</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>@ConditionalOnWebApplication 对应的 Condition 处理类是 OnWebApplicationCondition，只有当当前项目是 Web 项目的时候则生效。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当应用是 Web 应用时，创建该 Bean</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">onWebApplicationCondition</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Web 应用环境下，该 Bean 被创建&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ConditionalOnNotWebApplication">@ConditionalOnNotWebApplication</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123; ElementType.TYPE, ElementType.METHOD &#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Conditional(OnWebApplicationCondition.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ConditionalOnNotWebApplication &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>@ConditionalOnNotWebApplication 对应的 Condition 处理类是 OnWebApplicationCondition，只有当当前项目不是 Web 项目的时候则生效。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当应用不是 Web 应用时，创建该 Bean</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnNotWebApplication</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">onNotWebApplicationCondition</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;非 Web 应用环境下，该 Bean 被创建&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Conditional-自定义">@Conditional 自定义</h2>
<p>仿照 OnPropertyCondition 源码进行修改，扩展注解 ConditionalOnPropertyExist，指定我们的 Condition 实现类 OnPropertyExistCondition，并且指定两个参数，一个是参数 name 用于指定属性，另一个参数 exist 用于指定是判断存在还是不存在。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Conditional(OnPropertyExistCondition.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ConditionalOnPropertyExist &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置文件里面对应的key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否有配置的时候判断通过</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">exist</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OnPropertyExistCondition</span> <span class="keyword">implements</span> <span class="title class_">Condition</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(ConditionContext conditionContext, AnnotatedTypeMetadata annotatedTypeMetadata)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; annotationAttributes = annotatedTypeMetadata.getAnnotationAttributes(ConditionalOnPropertyExist.class.getName());</span><br><span class="line">        <span class="keyword">if</span> (annotationAttributes == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 简单的判断下属性存在与否</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">propertyName</span> <span class="operator">=</span> (String) annotationAttributes.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">values</span> <span class="operator">=</span> (<span class="type">boolean</span>) annotationAttributes.get(<span class="string">&quot;exist&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">propertyValue</span> <span class="operator">=</span> conditionContext.getEnvironment().getProperty(propertyName);</span><br><span class="line">        <span class="keyword">if</span>(values) &#123;</span><br><span class="line">            <span class="keyword">return</span> !StringUtils.isEmpty(propertyValue);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> StringUtils.isEmpty(propertyValue);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="源码详解">源码详解</h2>
<h3 id="条件判断的触发时机">条件判断的触发时机</h3>
<p>Spring 在以下阶段触发条件判断：</p>
<table>
<thead>
<tr>
<th style="text-align:left"><strong>阶段</strong></th>
<th style="text-align:left"><strong>触发场景</strong></th>
<th style="text-align:left"><strong>相关源码位置</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">配置类解析阶段</td>
<td style="text-align:left">解析 <code>@Configuration</code> 类时</td>
<td style="text-align:left"><code>ConfigurationClassParser</code></td>
</tr>
<tr>
<td style="text-align:left">Bean 方法注册阶段</td>
<td style="text-align:left">处理 <code>@Bean</code> 方法时</td>
<td style="text-align:left"><code>ConfigurationClassBeanDefinitionReader</code></td>
</tr>
<tr>
<td style="text-align:left">组件扫描阶段</td>
<td style="text-align:left">扫描 <code>@Component</code> 及其派生注解时</td>
<td style="text-align:left"><code>ClassPathBeanDefinitionScanner</code></td>
</tr>
</tbody>
</table>
<h3 id="ConditionEvaluator">ConditionEvaluator</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ConditionEvaluator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConditionContextImpl context;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConditionEvaluator</span><span class="params">(<span class="meta">@Nullable</span> BeanDefinitionRegistry registry,</span></span><br><span class="line"><span class="params">            <span class="meta">@Nullable</span> Environment environment, <span class="meta">@Nullable</span> ResourceLoader resourceLoader)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.context = <span class="keyword">new</span> <span class="title class_">ConditionContextImpl</span>(registry, environment, resourceLoader);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">shouldSkip</span><span class="params">(AnnotatedTypeMetadata metadata)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> shouldSkip(metadata, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 判断是否应跳过当前元素的处理（如类或方法）</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">shouldSkip</span><span class="params">(<span class="meta">@Nullable</span> AnnotatedTypeMetadata metadata, <span class="meta">@Nullable</span> ConfigurationPhase phase)</span> &#123;</span><br><span class="line">        <span class="comment">// 检查是否存在 @Conditional 注解</span></span><br><span class="line">        <span class="keyword">if</span> (metadata == <span class="literal">null</span> || !metadata.isAnnotated(Conditional.class.getName())) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (phase == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (metadata <span class="keyword">instanceof</span> AnnotationMetadata &amp;&amp;</span><br><span class="line">                    ConfigurationClassUtils.isConfigurationCandidate((AnnotationMetadata) metadata)) &#123;</span><br><span class="line">                <span class="keyword">return</span> shouldSkip(metadata, ConfigurationPhase.PARSE_CONFIGURATION);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取所有 Condition 实现类</span></span><br><span class="line">        List&lt;Condition&gt; conditions = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String[] conditionClasses : getConditionClasses(metadata)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String conditionClass : conditionClasses) &#123;</span><br><span class="line">                <span class="comment">// 通过反射实例化 Condition 对象</span></span><br><span class="line">                <span class="type">Condition</span> <span class="variable">condition</span> <span class="operator">=</span> getCondition(conditionClass, <span class="built_in">this</span>.context.getClassLoader());</span><br><span class="line">                conditions.add(condition);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        AnnotationAwareOrderComparator.sort(conditions);</span><br><span class="line">        <span class="comment">// 按顺序执行所有条件判断</span></span><br><span class="line">        <span class="keyword">for</span> (Condition condition : conditions) &#123;</span><br><span class="line">            <span class="type">ConfigurationPhase</span> <span class="variable">requiredPhase</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (condition <span class="keyword">instanceof</span> ConfigurationCondition) &#123;</span><br><span class="line">                requiredPhase = ((ConfigurationCondition) condition).getConfigurationPhase();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 检查条件是否匹配</span></span><br><span class="line">            <span class="keyword">if</span> ((requiredPhase == <span class="literal">null</span> || requiredPhase == phase) &amp;&amp; !condition.matches(<span class="built_in">this</span>.context, metadata)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="SpringBootCondition">SpringBootCondition</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">SpringBootCondition</span> <span class="keyword">implements</span> <span class="title class_">Condition</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Log</span> <span class="variable">logger</span> <span class="operator">=</span> LogFactory.getLog(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取类名或方法名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">classOrMethodName</span> <span class="operator">=</span> getClassOrMethodName(metadata);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取匹配结果</span></span><br><span class="line">            <span class="type">ConditionOutcome</span> <span class="variable">outcome</span> <span class="operator">=</span> getMatchOutcome(context, metadata);</span><br><span class="line">            <span class="comment">// 日志记录</span></span><br><span class="line">            logOutcome(classOrMethodName, outcome);</span><br><span class="line">            <span class="comment">// 评估结果记录</span></span><br><span class="line">            recordEvaluation(context, classOrMethodName, outcome);</span><br><span class="line">            <span class="keyword">return</span> outcome.isMatch();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NoClassDefFoundError ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Could not evaluate condition on &quot;</span> + classOrMethodName + <span class="string">&quot; due to &quot;</span></span><br><span class="line">                    + ex.getMessage() + <span class="string">&quot; not found. Make sure your own configuration does not rely on &quot;</span></span><br><span class="line">                    + <span class="string">&quot;that class. This can also happen if you are &quot;</span></span><br><span class="line">                    + <span class="string">&quot;@ComponentScanning a springframework package (e.g. if you &quot;</span></span><br><span class="line">                    + <span class="string">&quot;put a @ComponentScan in the default package by mistake)&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (RuntimeException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Error processing condition on &quot;</span> + getName(metadata), ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getName</span><span class="params">(AnnotatedTypeMetadata metadata)</span> &#123;</span><br><span class="line">        <span class="comment">// 如果注解在类上，返回类名</span></span><br><span class="line">        <span class="keyword">if</span> (metadata <span class="keyword">instanceof</span> AnnotationMetadata) &#123;</span><br><span class="line">            <span class="keyword">return</span> ((AnnotationMetadata) metadata).getClassName();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果注解在方法上，返回方法名</span></span><br><span class="line">        <span class="keyword">if</span> (metadata <span class="keyword">instanceof</span> MethodMetadata) &#123;</span><br><span class="line">            <span class="type">MethodMetadata</span> <span class="variable">methodMetadata</span> <span class="operator">=</span> (MethodMetadata) metadata;</span><br><span class="line">            <span class="keyword">return</span> methodMetadata.getDeclaringClassName() + <span class="string">&quot;.&quot;</span> + methodMetadata.getMethodName();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> metadata.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getClassOrMethodName</span><span class="params">(AnnotatedTypeMetadata metadata)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (metadata <span class="keyword">instanceof</span> ClassMetadata) &#123;</span><br><span class="line">            <span class="type">ClassMetadata</span> <span class="variable">classMetadata</span> <span class="operator">=</span> (ClassMetadata) metadata;</span><br><span class="line">            <span class="keyword">return</span> classMetadata.getClassName();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">MethodMetadata</span> <span class="variable">methodMetadata</span> <span class="operator">=</span> (MethodMetadata) metadata;</span><br><span class="line">        <span class="keyword">return</span> methodMetadata.getDeclaringClassName() + <span class="string">&quot;#&quot;</span> + methodMetadata.getMethodName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 日志记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">logOutcome</span><span class="params">(String classOrMethodName, ConditionOutcome outcome)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.logger.isTraceEnabled()) &#123;</span><br><span class="line">            <span class="built_in">this</span>.logger.trace(getLogMessage(classOrMethodName, outcome));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StringBuilder <span class="title function_">getLogMessage</span><span class="params">(String classOrMethodName, ConditionOutcome outcome)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        message.append(<span class="string">&quot;Condition &quot;</span>);</span><br><span class="line">        message.append(ClassUtils.getShortName(getClass()));</span><br><span class="line">        message.append(<span class="string">&quot; on &quot;</span>);</span><br><span class="line">        message.append(classOrMethodName);</span><br><span class="line">        message.append(outcome.isMatch() ? <span class="string">&quot; matched&quot;</span> : <span class="string">&quot; did not match&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasLength(outcome.getMessage())) &#123;</span><br><span class="line">            message.append(<span class="string">&quot; due to &quot;</span>);</span><br><span class="line">            message.append(outcome.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 记录评估结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">recordEvaluation</span><span class="params">(ConditionContext context, String classOrMethodName, ConditionOutcome outcome)</span> &#123;</span><br><span class="line">        <span class="comment">// 如果启用了条件评估报告（通过配置 spring.boot.enableautoconfigreport）</span></span><br><span class="line">        <span class="keyword">if</span> (context.getBeanFactory() != <span class="literal">null</span>) &#123;</span><br><span class="line">            ConditionEvaluationReport.get(context.getBeanFactory()).recordConditionEvaluation(classOrMethodName, <span class="built_in">this</span>,</span><br><span class="line">                    outcome);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> ConditionOutcome <span class="title function_">getMatchOutcome</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 全部匹配</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">anyMatches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata,</span></span><br><span class="line"><span class="params">            Condition... conditions)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Condition condition : conditions) &#123;</span><br><span class="line">            <span class="keyword">if</span> (matches(context, metadata, condition)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 任一匹配</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata, Condition condition)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (condition <span class="keyword">instanceof</span> SpringBootCondition) &#123;</span><br><span class="line">            <span class="keyword">return</span> ((SpringBootCondition) condition).getMatchOutcome(context, metadata).isMatch();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> condition.matches(context, metadata);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="OnPropertyCondition">OnPropertyCondition</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Order(Ordered.HIGHEST_PRECEDENCE + 40)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OnPropertyCondition</span> <span class="keyword">extends</span> <span class="title class_">SpringBootCondition</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取比对结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ConditionOutcome <span class="title function_">getMatchOutcome</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取@ConditionalOnProperty注解的所有属性值，属性值是MultiValueMap类型</span></span><br><span class="line">        List&lt;AnnotationAttributes&gt; allAnnotationAttributes = annotationAttributesFromMultiValueMap(</span><br><span class="line">                metadata.getAllAnnotationAttributes(ConditionalOnProperty.class.getName()));</span><br><span class="line">        <span class="comment">// 初始化【比对不成功】列表</span></span><br><span class="line">        List&lt;ConditionMessage&gt; noMatch = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 初始化【比对成功】列表</span></span><br><span class="line">        List&lt;ConditionMessage&gt; match = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 循环计算每一个属性的比对结果</span></span><br><span class="line">        <span class="keyword">for</span> (AnnotationAttributes annotationAttributes : allAnnotationAttributes) &#123;</span><br><span class="line">            <span class="comment">// 计算比对结果</span></span><br><span class="line">            <span class="type">ConditionOutcome</span> <span class="variable">outcome</span> <span class="operator">=</span> determineOutcome(annotationAttributes, context.getEnvironment());</span><br><span class="line">            <span class="comment">// 判断匹配结果是否成功，如果成功将结果的ConditionMessage加入【比对成功】列表，否则加入【比对不成功】列表</span></span><br><span class="line">            (outcome.isMatch() ? match : noMatch).add(outcome.getConditionMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果【比对不成功】列表不为空，返回“匹配失败”的ConditionOutcome，条件不成立</span></span><br><span class="line">        <span class="keyword">if</span> (!noMatch.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> ConditionOutcome.noMatch(ConditionMessage.of(noMatch));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回“匹配成功”的ConditionOutcome，条件成立</span></span><br><span class="line">        <span class="keyword">return</span> ConditionOutcome.match(ConditionMessage.of(match));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将MultiValueMap中的属性数据转成AnnotationAttributes类型。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;AnnotationAttributes&gt; <span class="title function_">annotationAttributesFromMultiValueMap</span><span class="params">(</span></span><br><span class="line"><span class="params">            MultiValueMap&lt;String, Object&gt; multiValueMap)</span> &#123;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; maps = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        multiValueMap.forEach((key, value) -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; value.size(); i++) &#123;</span><br><span class="line">                Map&lt;String, Object&gt; map;</span><br><span class="line">                <span class="keyword">if</span> (i &lt; maps.size()) &#123;</span><br><span class="line">                    map = maps.get(i);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">                    maps.add(map);</span><br><span class="line">                &#125;</span><br><span class="line">                map.put(key, value.get(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        List&lt;AnnotationAttributes&gt; annotationAttributes = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(maps.size());</span><br><span class="line">        <span class="keyword">for</span> (Map&lt;String, Object&gt; map : maps) &#123;</span><br><span class="line">            annotationAttributes.add(AnnotationAttributes.fromMap(map));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> annotationAttributes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算比对结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ConditionOutcome <span class="title function_">determineOutcome</span><span class="params">(AnnotationAttributes annotationAttributes, PropertyResolver resolver)</span> &#123;</span><br><span class="line">        <span class="comment">// 用属性值实例化一个内部类Spec</span></span><br><span class="line">        <span class="type">Spec</span> <span class="variable">spec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Spec</span>(annotationAttributes);</span><br><span class="line">        <span class="comment">// 初始化【未配置属性】列表</span></span><br><span class="line">        List&lt;String&gt; missingProperties = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 初始化【匹配失败属性】列表</span></span><br><span class="line">        List&lt;String&gt; nonMatchingProperties = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 匹配属性(传入missingProperties和nonMatchingProperties)</span></span><br><span class="line">        spec.collectProperties(resolver, missingProperties, nonMatchingProperties);</span><br><span class="line">        <span class="comment">// 如果【未配置属性】列表不为空，返回实例化匹配失败的ConditionOutcome</span></span><br><span class="line">        <span class="keyword">if</span> (!missingProperties.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> ConditionOutcome.noMatch(ConditionMessage.forCondition(ConditionalOnProperty.class, spec)</span><br><span class="line">                    .didNotFind(<span class="string">&quot;property&quot;</span>, <span class="string">&quot;properties&quot;</span>).items(Style.QUOTE, missingProperties));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果【匹配失败属性】列表不为空，返回实例化匹配失败的ConditionOutcome</span></span><br><span class="line">        <span class="keyword">if</span> (!nonMatchingProperties.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> ConditionOutcome.noMatch(ConditionMessage.forCondition(ConditionalOnProperty.class, spec)</span><br><span class="line">                    .found(<span class="string">&quot;different value in property&quot;</span>, <span class="string">&quot;different value in properties&quot;</span>)</span><br><span class="line">                    .items(Style.QUOTE, nonMatchingProperties));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回实例化匹配成功的ConditionOutcome</span></span><br><span class="line">        <span class="keyword">return</span> ConditionOutcome</span><br><span class="line">                .match(ConditionMessage.forCondition(ConditionalOnProperty.class, spec).because(<span class="string">&quot;matched&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Spec</span> &#123;</span><br><span class="line">        <span class="comment">// 每个要匹配的属性前缀。如果没有指定前缀，前缀将自动以&quot;.&quot;结尾。</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String prefix;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 属性的预期值。如果没有指定预期值，属性不能等于false字符串。</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String havingValue;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 要匹配的属性的名称。如果定义了前缀prefix，那么将使用prefix+name的形式进行匹配。</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String[] names;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// names是否松散的，默认为true。</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">boolean</span> matchIfMissing;</span><br><span class="line"></span><br><span class="line">        Spec(AnnotationAttributes annotationAttributes) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">prefix</span> <span class="operator">=</span> annotationAttributes.getString(<span class="string">&quot;prefix&quot;</span>).trim();</span><br><span class="line">            <span class="comment">// 如果前缀有值，且不是以&quot;.&quot;结尾，在结尾加&quot;.&quot;</span></span><br><span class="line">            <span class="keyword">if</span> (StringUtils.hasText(prefix) &amp;&amp; !prefix.endsWith(<span class="string">&quot;.&quot;</span>)) &#123;</span><br><span class="line">                prefix = prefix + <span class="string">&quot;.&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.prefix = prefix;</span><br><span class="line">            <span class="built_in">this</span>.havingValue = annotationAttributes.getString(<span class="string">&quot;havingValue&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.names = getNames(annotationAttributes);</span><br><span class="line">            <span class="built_in">this</span>.matchIfMissing = annotationAttributes.getBoolean(<span class="string">&quot;matchIfMissing&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String[] getNames(Map&lt;String, Object&gt; annotationAttributes) &#123;</span><br><span class="line">            String[] value = (String[]) annotationAttributes.get(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">            String[] name = (String[]) annotationAttributes.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">            <span class="comment">// name和value必须指定，不能同时为空</span></span><br><span class="line">            Assert.state(value.length &gt; <span class="number">0</span> || name.length &gt; <span class="number">0</span>,</span><br><span class="line">                    <span class="string">&quot;The name or value attribute of @ConditionalOnProperty must be specified&quot;</span>);</span><br><span class="line">            <span class="comment">// name和value是互斥的，不能同时有值</span></span><br><span class="line">            Assert.state(value.length == <span class="number">0</span> || name.length == <span class="number">0</span>,</span><br><span class="line">                    <span class="string">&quot;The name and value attributes of @ConditionalOnProperty are exclusive&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> (value.length &gt; <span class="number">0</span>) ? value : name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 判断属性是否匹配</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">collectProperties</span><span class="params">(PropertyResolver resolver, List&lt;String&gt; missing, List&lt;String&gt; nonMatching)</span> &#123;</span><br><span class="line">            <span class="comment">// 循环配置属性是否匹配</span></span><br><span class="line">            <span class="keyword">for</span> (String name : <span class="built_in">this</span>.names) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="built_in">this</span>.prefix + name;</span><br><span class="line">                <span class="comment">// 如果处理器(理解为配置文件application.yml)中包含这个属性名，判断属性名对应的值是否和预期值匹配</span></span><br><span class="line">                <span class="keyword">if</span> (resolver.containsProperty(key)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!isMatch(resolver.getProperty(key), <span class="built_in">this</span>.havingValue)) &#123;</span><br><span class="line">                        nonMatching.add(name);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 如果处理器中(理解为配置文件application.yml)中未包含这个属性，且matchIfMissing为false，将属性名加入【未配置属性】列表</span></span><br><span class="line">                    <span class="keyword">if</span> (!<span class="built_in">this</span>.matchIfMissing) &#123;</span><br><span class="line">                        missing.add(name);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isMatch</span><span class="params">(String value, String requiredValue)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.hasLength(requiredValue)) &#123;</span><br><span class="line">                <span class="keyword">return</span> requiredValue.equalsIgnoreCase(value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> !<span class="string">&quot;false&quot;</span>.equalsIgnoreCase(value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            result.append(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">            result.append(<span class="built_in">this</span>.prefix);</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.names.length == <span class="number">1</span>) &#123;</span><br><span class="line">                result.append(<span class="built_in">this</span>.names[<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                result.append(<span class="string">&quot;[&quot;</span>);</span><br><span class="line">                result.append(StringUtils.arrayToCommaDelimitedString(<span class="built_in">this</span>.names));</span><br><span class="line">                result.append(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.hasLength(<span class="built_in">this</span>.havingValue)) &#123;</span><br><span class="line">                result.append(<span class="string">&quot;=&quot;</span>).append(<span class="built_in">this</span>.havingValue);</span><br><span class="line">            &#125;</span><br><span class="line">            result.append(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> result.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot（7-组合注解）</title>
    <url>/blog/2025/03/23/Java/SpringBoot/SpringBoot%EF%BC%887-%E7%BB%84%E5%90%88%E6%B3%A8%E8%A7%A3%EF%BC%89/</url>
    <content><![CDATA[<h2 id="Java-注解">Java 注解</h2>
<h3 id="基本注解">基本注解</h3>
<ol>
<li>内置标准注解</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span>       <span class="comment">// 表示方法重写父类方法</span></span><br><span class="line"><span class="meta">@Deprecated</span>    <span class="comment">// 表示元素已过时</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span> <span class="comment">// 抑制编译器警告</span></span><br><span class="line"><span class="meta">@SafeVarargs</span>   <span class="comment">// 表示可变参数使用是安全的</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span> <span class="comment">// 表示接口是函数式接口</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>元注解（用于注解其他注解）</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>        <span class="comment">// 指定注解可以应用的元素类型</span></span><br><span class="line"><span class="meta">@Retention</span>     <span class="comment">// 指定注解的保留策略</span></span><br><span class="line"><span class="meta">@Documented</span>    <span class="comment">// 表示注解应包含在Javadoc中</span></span><br><span class="line"><span class="meta">@Inherited</span>     <span class="comment">// 表示注解可以被子类继承</span></span><br><span class="line"><span class="meta">@Repeatable</span>    <span class="comment">// 表示注解可以重复使用</span></span><br></pre></td></tr></table></figure>
<h3 id="注解分类">注解分类</h3>
<ol>
<li>按保留策略（即声明注解的生命周期，@Retention）</li>
</ol>
<ul>
<li>SOURCE：仅保留在源码中，编译时丢弃</li>
<li>CLASS：保留到 class 文件，但 JVM 不加载（默认）</li>
<li>RUNTIME：保留到运行时，可通过反射读取</li>
</ul>
<ol start="2">
<li>按作用目标（即声明可以注解在哪些元素之上，@Target）</li>
</ol>
<table>
<thead>
<tr>
<th>元素</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>ElementType.TYPE</td>
<td>注解在类、接口、枚举上</td>
</tr>
<tr>
<td>ElementType.FIELD</td>
<td>注解在类中的字段上</td>
</tr>
<tr>
<td>ElementType.METHOD</td>
<td>注解在类中的方法上</td>
</tr>
<tr>
<td>ElementType.PARAMETER</td>
<td>注解在方法的参数前</td>
</tr>
<tr>
<td>ElementType.CONSTRUCTOR</td>
<td>注解在类中构造方法上</td>
</tr>
<tr>
<td>ElementType.LOCAL_VARIABLE</td>
<td>注解在局部变量前</td>
</tr>
<tr>
<td>ElementType.ANNOTATION_TYPE</td>
<td>注解在注解上</td>
</tr>
<tr>
<td>ElementType.PACKAGE</td>
<td>注解在包名前</td>
</tr>
</tbody>
</table>
<h3 id="组合注解">组合注解</h3>
<p>@Controller 注解用来配置访问路径等，@ResponseBody 注解用来表明不做视图渲染，直接展示方法的运行结果（一般是转成 json 返回），而@RestController 组合了两者的功能，可以配置访问路径，同时也可以直接展示方法的运行结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Controller</span>  <span class="comment">//组合 Controller 使其实现 Bean 注册</span></span><br><span class="line"><span class="meta">@ResponseBody</span>  <span class="comment">//组合 ResponseBody 使其支持将结果转化为 json</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RestController &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@AliasFor(annotation = Controller.class)</span></span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>使用案例</strong></p>
<p>简化 Web 层配置，需求：统一 Controller 层的公共配置（如日志、权限校验）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/v1&quot;)</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@Tag(name = &quot;API接口&quot;)</span> <span class="comment">// 例如 OpenAPI 的注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RestApiController &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestApiController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/users&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getUsers</span><span class="params">()</span> &#123; </span><br><span class="line">        <span class="comment">//... </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="AliasFor">@AliasFor</h2>
<h3 id="显式别名">显式别名</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Mapping</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RequestMapping &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@AliasFor(&quot;path&quot;)</span></span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@AliasFor(&quot;value&quot;)</span></span><br><span class="line">    String[] path() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>value 和 path 互为别名，互为别名的限制条件如下：</p>
<ol>
<li>互为别名的属性其属性值类型、默认值，都是相同的。</li>
<li>互为别名的属性必须定义默认值。</li>
<li>互为别名的注解必须成对出现。</li>
</ol>
<h3 id="隐式别名">隐式别名</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ContextConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyTestConfig &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@AliasFor(annotation = ContextConfiguration.class, attribute = &quot;locations&quot;)</span></span><br><span class="line">   String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@AliasFor(annotation = ContextConfiguration.class, attribute = &quot;locations&quot;)</span></span><br><span class="line">   String[] groovyScripts() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@AliasFor(annotation = ContextConfiguration.class, attribute = &quot;locations&quot;)</span></span><br><span class="line">   String[] xmlFiles() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为 value、groovyScripts、xmlFiles 都定义了别名@AliasFor(annotation = ContextConfiguration.class, attribute = “locations”)，所以 value、groovyScripts 和 xmlFiles 也互为别名。</p>
<h3 id="传递式隐式别名">传递式隐式别名</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MyTestConfig</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> GroovyOrXmlTestConfig &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@AliasFor(annotation = MyTestConfig.class, attribute = &quot;groovyScripts&quot;)</span></span><br><span class="line">   String[] groovy() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@AliasFor(annotation = ContextConfiguration.class, attribute = &quot;locations&quot;)</span></span><br><span class="line">   String[] xml() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ContextConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyTestConfig &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@AliasFor(annotation = ContextConfiguration.class, attribute = &quot;locations&quot;)</span></span><br><span class="line">   String[] groovyScripts() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>@AliasFor 注解是允许别名之间的传递的，简单理解，如果 A 是 B 的别名，并且 B 是 C 的别名，那么 A 是 C 的别名</p>
<p>因为 MyTestConfig 中的 groovyScripts 属性是 ContextConfiguration 中的 locations 属性的别名；所以 xml 属性和 groovy 属性也互为别名</p>
<h2 id="自定义注解">自定义注解</h2>
<h3 id="继承">继承</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SynthesizedAnnotationTest</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Target(&#123; ANNOTATION_TYPE, FIELD, TYPE &#125;)</span></span><br><span class="line">    <span class="meta">@Retention(RUNTIME)</span></span><br><span class="line">    <span class="meta">@interface</span> Test1 &#123;</span><br><span class="line">        String <span class="title function_">test1</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;test1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Target(&#123; ANNOTATION_TYPE, FIELD, TYPE &#125;)</span></span><br><span class="line">    <span class="meta">@Retention(RUNTIME)</span></span><br><span class="line">    <span class="meta">@interface</span> Test2 &#123;</span><br><span class="line">        String <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;test2&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Target(&#123; ANNOTATION_TYPE, FIELD, TYPE &#125;)</span></span><br><span class="line">    <span class="meta">@Retention(RUNTIME)</span></span><br><span class="line">    <span class="meta">@Test2</span></span><br><span class="line">    <span class="meta">@interface</span> Test3 &#123;</span><br><span class="line">        String <span class="title function_">test3</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;test3&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 只有<span class="doctag">@Test</span>3 注解，但是 Test3 注解上组合了<span class="doctag">@Test</span>2 注解，故就可以通过 Spring 的工具类获取到 Test2 注解的内容，详见 main 方法</span></span><br><span class="line"><span class="comment">     * 当然也可以将组合注解作用于更高层次，如 Test3 组合 Test2, Test2 组合 Test1，然后将 Test3 作用于元素，通过工具类获取 Test1 注解功能</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test3</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Element</span> &#123;&#125;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test2</span> <span class="variable">test2</span> <span class="operator">=</span> AnnotatedElementUtils.getMergedAnnotation(Element.class, Test2.class);</span><br><span class="line">        System.out.println(test2);</span><br><span class="line">        <span class="comment">// 输出&#x27;@mayfly.sys.common.utils.SynthesizedAnnotationTest$Test2(test2 = test2)&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="覆盖">覆盖</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SynthesizedAnnotationTest</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Target(&#123; ANNOTATION_TYPE, FIELD, TYPE &#125;)</span></span><br><span class="line">    <span class="meta">@Retention(RUNTIME)</span></span><br><span class="line">    <span class="meta">@interface</span> Test1 &#123;</span><br><span class="line">        String <span class="title function_">test1</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;test1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Target(&#123; ANNOTATION_TYPE, FIELD, TYPE &#125;)</span></span><br><span class="line">    <span class="meta">@Retention(RUNTIME)</span></span><br><span class="line">    <span class="meta">@interface</span> Test2 &#123;</span><br><span class="line">        String <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;test2&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Target(&#123; ANNOTATION_TYPE, FIELD, TYPE &#125;)</span></span><br><span class="line">    <span class="meta">@Retention(RUNTIME)</span></span><br><span class="line">    <span class="meta">@Test2</span></span><br><span class="line">    <span class="meta">@interface</span> Test3 &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * AliasFor 注解用来表示要覆盖 Test2 注解中的 test2()属性方法，</span></span><br><span class="line"><span class="comment">         * annotation 属性声明的注解类必须存在于该注解的元注解上</span></span><br><span class="line"><span class="comment">         * attribute 属性声明的值必须存在于 Test2 注解属性方法中(即 Test2 注解的 test2 方法)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@AliasFor(annotation = Test2.class, attribute = &quot;test2&quot;)</span></span><br><span class="line">        String <span class="title function_">test3</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;test3&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 只有<span class="doctag">@Test</span>3 注解，但是 Test3 注解上组合了<span class="doctag">@Test</span>2 注解，并将该注解的 test3 方法值用来覆盖 Test2 注解中的 test2 方法</span></span><br><span class="line"><span class="comment">     * 即更低层次声明的覆盖规则，会覆盖更高层次的属性方法值，即调用高层次的注解方法值实际显示的是低层所赋的值</span></span><br><span class="line"><span class="comment">     * 当然也可以将组合注解作用于更高层次，如 Test3 组合 Test2, Test2 组合 Test1，然后将 Test3 作用于元素，通过工具类获取 Test1 注解覆盖的属性值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test3(test3 = &quot;覆盖Test2属性中的test2方法&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Element</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test2</span> <span class="variable">test2</span> <span class="operator">=</span> AnnotatedElementUtils.getMergedAnnotation(Element.class, Test2.class);</span><br><span class="line">        <span class="comment">// 虽然调用了 Test2 注解的 test2 方法，但是实际显示的是 Test3 注解中的 test3 属性声明的值</span></span><br><span class="line">        <span class="comment">// 则说明 Test2 的 test2 属性被覆盖了 </span></span><br><span class="line">        System.out.println(test2.test2());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="合并">合并</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@A</span></span><br><span class="line"><span class="meta">@B</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@Interface</span> C&#123;   <span class="comment">// 合并了 A, B 注解</span></span><br><span class="line">    <span class="meta">@AliasFor(annotation = A.class, attribute = &quot;value&quot;)</span></span><br><span class="line">    String <span class="title function_">aValue</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@AliasFor(annotation = B.class, attribute = &quot;value&quot;)</span></span><br><span class="line">    String <span class="title function_">bValue</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot（8-项目启动初始化数据）</title>
    <url>/blog/2025/04/12/Java/SpringBoot/SpringBoot%EF%BC%888-%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8%E5%88%9D%E5%A7%8B%E5%8C%96%E6%95%B0%E6%8D%AE%EF%BC%89/</url>
    <content><![CDATA[<h2 id="PostConstruct">@PostConstruct</h2>
<p>@PostConstruct 是 JSR-250 规范中的注解，用于标记一个方法在依赖注入完成后立即执行。</p>
<p><strong>特点</strong></p>
<ol>
<li>在 bean 完全初始化后（依赖注入完成后）执行</li>
<li>方法可以有任意访问修饰符，但不能有参数</li>
</ol>
<p><strong>使用案例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyComponent</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;@PostConstruct方法执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="InitializingBean">InitializingBean</h2>
<p>InitializingBean 是 Spring 框架提供的接口，包含一个 afterPropertiesSet() 方法。</p>
<p><strong>特点</strong></p>
<ol>
<li>在 bean 属性设置完成后执行</li>
<li>需要实现接口，是 Spring 特有的，与框架耦合</li>
</ol>
<p><strong>使用案例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBean</span> <span class="keyword">implements</span> <span class="title class_">InitializingBean</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;InitializingBean的afterPropertiesSet()执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="CommandLineRunner">CommandLineRunner</h2>
<p>CommandLineRunner 是 Spring Boot 提供的接口，用于在应用启动后执行代码。</p>
<p><strong>特点</strong></p>
<ol>
<li>在所有 bean 初始化完成后执行</li>
<li>可以访问原始的应用程序参数（String [] args）</li>
<li>可以有多个实现，通过@Order 或实现 Ordered 接口指定顺序</li>
<li>在应用上下文完全准备好之后运行</li>
</ol>
<p><strong>使用案例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCommandLineRunner</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CommandLineRunner执行，参数: &quot;</span> + Arrays.toString(args));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ApplicationRunner">ApplicationRunner</h2>
<p>ApplicationRunner 与 CommandLineRunner 类似，但提供了更丰富的 ApplicationArguments 来访问参数。</p>
<p><strong>特点</strong></p>
<ol>
<li>功能与 CommandLineRunner 相似</li>
<li>提供了更结构化的参数访问方式</li>
<li>同样可以有多个实现并指定顺序</li>
<li>执行时机与 CommandLineRunner 相同</li>
</ol>
<p><strong>使用案例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(2)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyApplicationRunner</span> <span class="keyword">implements</span> <span class="title class_">ApplicationRunner</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ApplicationRunner执行&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;源参数: &quot;</span> + Arrays.toString(args.getSourceArgs()));</span><br><span class="line">        System.out.println(<span class="string">&quot;选项参数: &quot;</span> + args.getOptionNames());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="执行顺序">执行顺序</h2>
<ol>
<li>@PostConstruct</li>
<li>InitializingBean.afterPropertiesSet()</li>
<li>ApplicationRunner/CommandLineRunner（可以通过@Order 控制它们之间的顺序）</li>
</ol>
<p>注意：@PostConstruct 和 InitializingBean.afterPropertiesSet()会根据类名称进行 ASCII 比较，根据顺序执行</p>
<p><strong>使用案例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyComponent</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;@PostConstruct方法执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBean</span> <span class="keyword">implements</span> <span class="title class_">InitializingBean</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;InitializingBean的afterPropertiesSet()执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AComponent</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;@PostConstruct方法执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用场景">使用场景</h2>
<ol>
<li>@PostConstruct：简单的初始化逻辑，不依赖其他 bean 的完全初始化</li>
<li>InitializingBean：Spring 特有的初始化</li>
<li>CommandLineRunner/ApplicationRunner： 需要在应用完全启动后执行的逻辑，特别是需要访问命令行参数时</li>
</ol>
<h2 id="区别">区别</h2>
<p><strong>@PostConstruct 和 afterPropertiesSet</strong></p>
<p>afterPropertiesSet，顾名思义「在属性设置之后」，调用该方法时，该 bean 的所有属性已经被 Spring 填充。如果我们在某些属性上使用 @Autowired（常规操作应该使用构造函数注入），那么 Spring 将在调用 afterPropertiesSet 之前将 bean 注入这些属性。但 @PostConstruct 并没有这些属性填充限制</p>
<p>所以 InitializingBean.afterPropertiesSet 比使用 @PostConstruct 更安全，因为如果我们依赖尚未自动注入的 @Autowired 字段，则 @PostConstruct 方法可能会遇到 NullPointerExceptions</p>
<p><strong>CommandLineRunner 和 ApplicationRunner</strong></p>
<ol>
<li>CommandLineRunner 和 ApplicationRunner 在容器启动的时候会执行一些内容，比如：读取配置文件、数据库连接</li>
<li>CommandLineRunner 接口的 run()方法接收 String 数组作为参数，即是最原始的参数，没有做任何处理；而 ApplicationRunner 接口的 run()方法接收 ApplicationArguments 对象作为参数，是对原始参数做了进一步的封装</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(value = 1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDDRunner</span> <span class="keyword">implements</span> <span class="title class_">ApplicationRunner</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这个是测试ApplicationRunner接口&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">strArgs</span> <span class="operator">=</span> Arrays.stream(arg0.getSourceArgs()).collect(Collectors.joining(<span class="string">&quot;|&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;Application started with arguments:&quot;</span> + strArgs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动时指定参数：java -jar xxxx.jar data1 data2 data3</span></span><br><span class="line"><span class="comment">// Application started with arguments: data1|data2|data3</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCommandLineRunner</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这个是测试CommandLineRunn接口&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">strArgs</span> <span class="operator">=</span> Arrays.stream(args).collect(Collectors.joining(<span class="string">&quot;|&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;Application started with arguments:&quot;</span> + strArgs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动时指定参数：java -jar xxxx.jar data1 data2 data3</span></span><br><span class="line"><span class="comment">// Application started with arguments: data1|data2|data3</span></span><br></pre></td></tr></table></figure>
<p>注意：</p>
<ol>
<li>可以使用@Order 注解或实现 Ordered 接口按一定顺序执行</li>
<li>在 ApplicationContext 容器加载完成之后，会调用 SpringApplication 类的 callRunners 方法，该方法中会获取所有实现了 ApplicationRunner 和 CommandLineRunner 的接口 bean，然后依次执行对应的 run 方法，并且是在同一个线程中执行。如果有某个实现了 ApplicationRunner 或 CommandLineRunner 的接口的 bean 的 run 方法一直循环不返回的话，后续的代码将不会被执行</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">callRunners</span><span class="params">(ApplicationContext context, ApplicationArguments args)</span> &#123;</span><br><span class="line">    List&lt;Object&gt; runners = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//从上下文获取 ApplicationRunner 类型的 bean</span></span><br><span class="line">    runners.addAll(context.getBeansOfType(ApplicationRunner.class).values());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从上下文获取 CommandLineRunner 类型的 bean</span></span><br><span class="line">    runners.addAll(context.getBeansOfType(CommandLineRunner.class).values());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对二者进行排序，这也就是为什么二者的 order 是可以共享的了</span></span><br><span class="line">    AnnotationAwareOrderComparator.sort(runners);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历对其进行调用</span></span><br><span class="line">    <span class="keyword">for</span> (Object runner : <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;(runners)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (runner <span class="keyword">instanceof</span> ApplicationRunner) &#123;</span><br><span class="line">            callRunner((ApplicationRunner) runner, args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (runner <span class="keyword">instanceof</span> CommandLineRunner) &#123;</span><br><span class="line">            callRunner((CommandLineRunner) runner, args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot（9-日志设置和属性详解）</title>
    <url>/blog/2025/04/13/Java/SpringBoot/SpringBoot%EF%BC%889-%E6%97%A5%E5%BF%97%E8%AE%BE%E7%BD%AE%E5%92%8C%E5%B1%9E%E6%80%A7%E8%AF%A6%E8%A7%A3%EF%BC%89/</url>
    <content><![CDATA[<h2 id="日志类型">日志类型</h2>
<p>日志类型有很多，比如 JUL、JCL、Jboss-logging、logback、log4j、log4j2、slf4j…，主要分为抽象层和实现层：</p>
<ol>
<li>抽象层：</li>
</ol>
<ul>
<li>
<p>JCL：不使用，从 2014 年开始就没更新过了。</p>
</li>
<li>
<p>jboss-logging：不使用，使用场景有限。</p>
</li>
<li>
<p>SLF4j：Springboot 中使用的日志抽象层。</p>
</li>
</ul>
<ol start="2">
<li>实现层：</li>
</ol>
<ul>
<li>Log4j</li>
<li>Log4j2：apache 借 Log4j 之名写的一个日志框架，并不是 Log4j 的升级版，太高端了，很多框架适配不了。</li>
<li>Logback：Log4j 的升级版本，和 SLF4j 出自同一个人之手（Spring Boot 约定的默认配置）。</li>
</ul>
<p>SpringBoot 选用 SLF4j 和 Logback，大部分场景推荐 Spring Boot 自带的日志 logback，在 Spring Boot 中，logback 是基于 slf4j 实现的。</p>
<h2 id="日志级别">日志级别</h2>
<p>日志级别从低到高分为：TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL</p>
<p>如果设置为 WARN ，则低于 WARN 的信息都不会输出。同理，当我们指定日志级别为 INFO 级别，那么 TRACE、DEBUG 级别的日志就不会被输出打印。</p>
<p>Spring Boot 中默认配置 ERROR、WARN 和 INFO 级别的日志输出到控制台。</p>
<h2 id="SpringBoot-整合-logback-日志">SpringBoot 整合 logback 日志</h2>
<h3 id="基本使用">基本使用</h3>
<p><strong>使用方法 1</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>但是实际开发中不需要直接添加该依赖，spring-boot-starter 包含了 spring-boot-starter-logging，该依赖内容就是 Spring Boot 默认的日志框架 logback。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(LogApplication.class);</span><br><span class="line">        SpringApplication.run(LogApplication.class, args);</span><br><span class="line">        <span class="comment">// 注意：spring 默认日志输出级别为 info，所以默认情况下这句不会打印到控制台</span></span><br><span class="line">        logger.debug(<span class="string">&quot;This is a debug message&quot;</span>);</span><br><span class="line">        logger.info(<span class="string">&quot;This is an info message&quot;</span>);</span><br><span class="line">        logger.warn(<span class="string">&quot;This is a warn message&quot;</span>);</span><br><span class="line">        logger.error(<span class="string">&quot;This is an error message&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>使用方法 2</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;====&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="文件配置">文件配置</h3>
<p><strong>日志级别设置</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 格式为：logging.level.* = LEVEL</span></span><br><span class="line"><span class="comment"># logging.level：日志级别控制前缀，*为包名或Logger名</span></span><br><span class="line"><span class="comment"># LEVEL：选项 TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># com.dudu包下所有class以DEBUG级别输出</span></span><br><span class="line"><span class="attr">logging.level.com.dudu</span> = <span class="string">DEBUG </span></span><br><span class="line"><span class="comment"># root日志以WARN级别输出</span></span><br><span class="line"><span class="attr">logging.level.root</span> = <span class="string">WARN</span></span><br></pre></td></tr></table></figure>
<p><strong>日志输出格式设置</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在控制台输出的日志的格式</span></span><br><span class="line"><span class="attr">logging.pattern.console</span> = <span class="string">%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 指定文件中日志输出的格式</span></span><br><span class="line"><span class="attr">logging.pattern.file</span> = <span class="string">%d&#123;yyyy-MM-dd&#125; === [%thread] === %-5level === %logger&#123;50&#125; ==== %msg%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 日志输出格式：</span></span><br><span class="line"><span class="comment"># %d：日期时间</span></span><br><span class="line"><span class="comment"># %thread：线程名</span></span><br><span class="line"><span class="comment"># %-5level：级别从左显示5个字符宽度</span></span><br><span class="line"><span class="comment"># %logger&#123;50&#125;：logger名字最长50个字符，否则按照句点分割。</span></span><br><span class="line"><span class="comment"># %msg：日志消息</span></span><br><span class="line"><span class="comment"># %n：换行符</span></span><br></pre></td></tr></table></figure>
<p><strong>指定日志配置文件</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging.config</span> = <span class="string">classpath:logging-config.xml</span></span><br></pre></td></tr></table></figure>
<p>根据不同的日志系统，你可以按如下规则组织配置文件名，就能被正确加载：</p>
<ol>
<li>
<p>Logback：logback-spring.xml、logback-spring.groovy、logback.xml、logback.groovy</p>
</li>
<li>
<p>Log4j：log4j-spring.properties、log4j-spring.xml、log4j.properties、log4j.xml</p>
</li>
<li>
<p>Log4j2：log4j2-spring.xml、log4j2.xml</p>
</li>
<li>
<p>JDK (Java Util Logging)：logging.properties</p>
</li>
</ol>
<p>Spring Boot 官方推荐优先使用带有-spring 的文件名作为日志配置（如使用 logback-spring.xml，而不是 logback.xml）。</p>
<p>因为命名为 logback-spring.xml 的日志配置文件，spring boot 可以为它添加一些 spring boot 特有的配置项。</p>
<p>logback.xml 直接就被日志框架识别了。如果使用 logback-spring.xml，日志框架就不直接加载日志的配置项，需要加上 springProfile 标签由 SpringBoot 解析日志配置，即可以使用 SpringBoot 的高级 Profile 功能</p>
<h3 id="配置文件加载顺序">配置文件加载顺序</h3>
<p>logback.xml-&gt; application.properties-&gt; logback-spring.xml</p>
<h2 id="logback-spring-xml">logback-spring.xml</h2>
<h3 id="完整文件样例">完整文件样例</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 日志级别从低到高分为TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，如果设置为WARN，则低于WARN的信息都不会输出 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- de<span class="doctag">bug:</span>当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>  <span class="attr">scan</span>=<span class="string">&quot;true&quot;</span> <span class="attr">scanPeriod</span>=<span class="string">&quot;10 seconds&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">contextName</span>&gt;</span>logback<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义变量后，可以使“$&#123;&#125;”来使用变量--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;log.path&quot;</span> <span class="attr">value</span>=<span class="string">&quot;F:/java基础学习/复习testcode/logs&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE_LOG_PATTERN&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg %n&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--输出到控制台--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>debug<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 设置字符集 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--输出到文件--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 时间滚动输出 level为 DEBUG 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;DEBUG_FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--先将今天的日志保存在这个文件中--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;/log_debug.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件输出格式   %-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n</span></span><br><span class="line"><span class="comment">            %d&#123;HH: mm:ss.SSS&#125;——日志输出时间</span></span><br><span class="line"><span class="comment">            %thread——输出日志的进程名字，这在Web应用以及异步任务处理中很有用</span></span><br><span class="line"><span class="comment">            %-5level——日志级别，并且使用5个字符靠左对齐</span></span><br><span class="line"><span class="comment">            %logger&#123;36&#125;——日志输出者的名字</span></span><br><span class="line"><span class="comment">            %msg——日志消息</span></span><br><span class="line"><span class="comment">            %n——平台的换行符</span></span><br><span class="line"><span class="comment">           --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span> <span class="comment">&lt;!-- 设置字符集 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- rollover daily --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--如果第二天输出日志,会将当天的日志记录在&lt;file&gt;$&#123;log.path&#125;/log_debug.log&lt;/file&gt;,然后将昨天的日志归档到下面的文件中--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--以分钟切分  %d&#123;yyyy-MM-dd_HH-mm&#125;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/debug/log-debug-%d&#123;yyyy-MM-dd_HH-mm&#125;.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- each file should be at most 100MB, keep 60 days worth of history, but at most 20GB --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--单个日志文件最大100M，到了这个值，就会再创建一个日志文件，日志文件的名字最后+1--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--所有的日志文件最大20G，超过就会删除旧的日志--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>20GB<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            此日志文件只记录debug级别的</span></span><br><span class="line"><span class="comment">            onMatch和onMismatch都有三个属性值，分别为Accept、DENY和NEUTRAL</span></span><br><span class="line"><span class="comment">            onMatch=&quot;ACCEPT&quot; 表示匹配该级别及以上</span></span><br><span class="line"><span class="comment">            onMatch=&quot;DENY&quot; 表示不匹配该级别及以上</span></span><br><span class="line"><span class="comment">            onMatch=&quot;NEUTRAL&quot; 表示该级别及以上的，由下一个filter处理，如果当前是最后一个，则表示匹配该级别及以上</span></span><br><span class="line"><span class="comment">            onMismatch=&quot;ACCEPT&quot; 表示匹配该级别以下</span></span><br><span class="line"><span class="comment">            onMismatch=&quot;NEUTRAL&quot; 表示该级别及以下的，由下一个filter处理，如果当前是最后一个，则不匹配该级别以下的</span></span><br><span class="line"><span class="comment">            onMismatch=&quot;DENY&quot; 表示不匹配该级别以下的</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>debug<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 时间滚动输出 level为 INFO 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;INFO_FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;/log_info.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件输出格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- rollover daily --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--如果第二天输出日志,会将当天的日志记录在&lt;file&gt;$&#123;log.path&#125;/log_debug.log&lt;/file&gt;,然后将昨天的日志归档到下面的文件中--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--以分钟切分  %d&#123;yyyy-MM-dd_HH-mm&#125;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/info/log-info-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- each file should be at most 100MB, keep 60 days worth of history, but at most 20GB --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--单个日志文件最大100M，到了这个值，就会再创建一个日志文件，日志文件的名字最后+1--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--所有的日志文件最大20G，超过就会删除旧的日志--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>20GB<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SizeAndTimeBasedRollingPolicy配置更灵活,所以改用SizeAndTimeBasedRollingPolicy--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</span></span><br><span class="line"><span class="comment">            &amp;lt;!&amp;ndash; 每天日志归档路径以及格式 &amp;ndash;&amp;gt;</span></span><br><span class="line"><span class="comment">            &lt;fileNamePattern&gt;$&#123;log.path&#125;/info/log-info-%d&#123;yyyy-MM-dd&#125;.%i.log&lt;/fileNamePattern&gt;</span></span><br><span class="line"><span class="comment">            &lt;timeBasedFileNamingAndTriggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;</span></span><br><span class="line"><span class="comment">                &lt;maxFileSize&gt;100MB&lt;/maxFileSize&gt;</span></span><br><span class="line"><span class="comment">            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;</span></span><br><span class="line"><span class="comment">            &amp;lt;!&amp;ndash;日志文件保留天数&amp;ndash;&amp;gt;</span></span><br><span class="line"><span class="comment">            &lt;maxHistory&gt;15&lt;/maxHistory&gt;</span></span><br><span class="line"><span class="comment">        &lt;/rollingPolicy&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 此日志文件只记录info级别的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>info<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 时间滚动输出 level为 WARN 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;WARN_FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;/log_warn.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件输出格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span> <span class="comment">&lt;!-- 此处设置字符集 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- rollover daily --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--如果第二天输出日志,会将当天的日志记录在&lt;file&gt;$&#123;log.path&#125;/log_debug.log&lt;/file&gt;,然后将昨天的日志归档到下面的文件中--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--以分钟切分  %d&#123;yyyy-MM-dd_HH-mm&#125;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/warn/log-warn-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- each file should be at most 100MB, keep 60 days worth of history, but at most 20GB --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--单个日志文件最大100M，到了这个值，就会再创建一个日志文件，日志文件的名字最后+1--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--所有的日志文件最大20G，超过就会删除旧的日志--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>20GB<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 此日志文件只记录warn级别的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>warn<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 时间滚动输出 level为 ERROR 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;ERROR_FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;/log_error.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件输出格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span> <span class="comment">&lt;!-- 此处设置字符集 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- rollover daily --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--如果第二天输出日志,会将当天的日志记录在&lt;file&gt;$&#123;log.path&#125;/log_debug.log&lt;/file&gt;,然后将昨天的日志归档到下面的文件中--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--以分钟切分  %d&#123;yyyy-MM-dd_HH-mm&#125;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/error/log-error-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- each file should be at most 100MB, keep 60 days worth of history, but at most 20GB --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--单个日志文件最大100M，到了这个值，就会再创建一个日志文件，日志文件的名字最后+1--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--所有的日志文件最大20G，超过就会删除旧的日志--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>20GB<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 此日志文件只记录ERROR级别的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--root配置必须在appender下边--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--root节点是对所有appender的管理,添加哪个appender就会打印哪个appender的日志--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--root节点的level是总的日志级别控制,如果appender的日志级别设定比root的高,会按照appender的日志级别打印日志,--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--如果appender的日志级别比root的低,会按照root设定的日志级别进行打印日志--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--也就是说root设定的日志级别是最低限制,如果root设定级别为最高ERROR,那么所有appender只能打印最高级别的日志--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;DEBUG_FILE&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;INFO_FILE&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;WARN_FILE&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;ERROR_FILE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--name:用来指定受此loger约束的某一个包或者具体的某一个类。--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--addtivity:是否向上级loger传递打印信息。默认是true。--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.pikaiqu.logbackdemo.LogbackdemoApplicationTests&quot;</span> <span class="attr">level</span>=<span class="string">&quot;debug&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;INFO_FILE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置多环境日志输出  可以在application.properties中配置选择哪个profiles : spring.profiles.active=dev--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--生产环境:输出到文件--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;springProfile name=&quot;pro&quot;&gt;</span></span><br><span class="line"><span class="comment">        &lt;root level=&quot;info&quot;&gt;</span></span><br><span class="line"><span class="comment">            &lt;appender-ref ref=&quot;DEBUG_FILE&quot; /&gt;</span></span><br><span class="line"><span class="comment">            &lt;appender-ref ref=&quot;INFO_FILE&quot; /&gt;</span></span><br><span class="line"><span class="comment">            &lt;appender-ref ref=&quot;ERROR_FILE&quot; /&gt;</span></span><br><span class="line"><span class="comment">            &lt;appender-ref ref=&quot;WARN_FILE&quot; /&gt;</span></span><br><span class="line"><span class="comment">        &lt;/root&gt;</span></span><br><span class="line"><span class="comment">    &lt;/springProfile&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开发环境:打印控制台--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;springProfile name=&quot;dev&quot;&gt;</span></span><br><span class="line"><span class="comment">        &lt;root level=&quot;debug&quot;&gt;</span></span><br><span class="line"><span class="comment">            &lt;appender-ref ref=&quot;STDOUT&quot; /&gt;</span></span><br><span class="line"><span class="comment">        &lt;/root&gt;</span></span><br><span class="line"><span class="comment">    &lt;/springProfile&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="文件配置项">文件配置项</h3>
<ol>
<li>一个父标签：configuration</li>
<li>两种属性：contextName 和 property</li>
<li>三个节点：appender、root、logger</li>
</ol>
<h3 id="父标签">父标签</h3>
<p>Configuration：</p>
<ol>
<li>scan：当此属性设置为 true 时，配置文件如果发生改变，将会被重新加载，默认为 true</li>
<li>scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当 scan 为 true 时，此属性生效，默认的时间间隔为 1 分钟</li>
<li>debug：当此属性设置为 true 时，将打印出 logback 内部日志信息，实时查看 logback 运行状态，默认为 false</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">&quot;true&quot;</span> <span class="attr">scanPeriod</span>=<span class="string">&quot;10 seconds&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="属性">属性</h3>
<h4 id="contextName">contextName</h4>
<ol>
<li>每个 logger 都关联到 logger 上下文，默认上下文名称为“default”，但可以设置成其他名字，用于区分不同应用程序的记录，可以通过%contextName 来打印日志上下文名称</li>
<li>如果同时存在 logback.xml 和 logback-spring.xml，或者同时存在 logback.xml 和自定义的配置文件，则先加载 logback.xml，再根据 application 配置加载指定配置文件，或加载 logback-spring.xml。</li>
</ol>
<p>注意：如果这两个文件的 contextName 不同就会报错</p>
<p><strong>使用案例</strong></p>
<ol>
<li>logback.xml</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">&quot;true&quot;</span> <span class="attr">scanPeriod</span>=<span class="string">&quot;60 seconds&quot;</span> <span class="attr">debug</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">contextName</span>&gt;</span>logback<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>logback-spring.xml</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">&quot;false&quot;</span> <span class="attr">scanPeriod</span>=<span class="string">&quot;60 seconds&quot;</span> <span class="attr">debug</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">contextName</span>&gt;</span>logback<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>application.properties</li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging.config</span>=<span class="string">classpath:logback-spring.xml</span></span><br></pre></td></tr></table></figure>
<h4 id="property">property</h4>
<p>用来定义变量值的标签，name 是变量的名称，value 是变量定义的指。通过定义的值会被插入到 logger 上下文中，定义变量后，可以使用 “${}” 来使用变量</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">&quot;true&quot;</span> <span class="attr">scanPeriod</span>=<span class="string">&quot;60 seconds&quot;</span> <span class="attr">debug</span>=<span class="string">&quot;false&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;APP_Name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;myAppName&quot;</span> /&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">contextName</span>&gt;</span>$&#123;APP_Name&#125;<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="节点">节点</h3>
<h4 id="appender">appender</h4>
<p>追加器，可以理解为一个日志的渲染器，有 name 和 class 两个属性，name 表示该渲染器的名字，class 表示使用的输出策略</p>
<ol>
<li>encoder：输出格式</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">%d：时间</span><br><span class="line">%thread：线程名</span><br><span class="line">%-5level：日志级别，允许以五个字符长度输出</span><br><span class="line">%logger&#123;50&#125;：具体的日志输出者，比如类名，括号内表示长度</span><br><span class="line">%msg：具体的日志消息，就是logger.info(&quot;xxx&quot;)中的xxx</span><br><span class="line">%n：换行</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>filter：过滤</li>
</ol>
<p>onMatch 和 onMismatch 都有三个属性值，分别为 Accept、DENY 和 NEUTRAL</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">onMatch=&quot;ACCEPT&quot;：表示匹配该级别及以上</span><br><span class="line">onMatch=&quot;DENY&quot;：表示不匹配该级别及以上</span><br><span class="line">onMatch=&quot;NEUTRAL&quot;：表示该级别及以上的，由下一个filter处理，如果当前是最后一个，则表示匹配该级别及以上</span><br><span class="line">onMismatch=&quot;ACCEPT&quot;：表示匹配该级别以下</span><br><span class="line">onMismatch=&quot;NEUTRAL&quot;：表示该级别及以下的，由下一个filter处理，如果当前是最后一个，则不匹配该级别以下的</span><br><span class="line">onMismatch=&quot;DENY&quot;：表示不匹配该级别以下的</span><br></pre></td></tr></table></figure>
<p><strong>控制台输出 appender</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE_LOG_PATTERN&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg %n&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--输出到控制台--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">level</span>&gt;</span>debug<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置字符集 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>文件输出 appender</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--输出到文件--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 时间滚动输出 level为 DEBUG 日志 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;DEBUG_FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--先将今天的日志保存在这个文件中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;/log_debug.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--日志文件输出格式   %-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n</span></span><br><span class="line"><span class="comment">        %d&#123;HH: mm:ss.SSS&#125;——日志输出时间</span></span><br><span class="line"><span class="comment">        %thread——输出日志的进程名字，这在Web应用以及异步任务处理中很有用</span></span><br><span class="line"><span class="comment">        %-5level——日志级别，并且使用5个字符靠左对齐</span></span><br><span class="line"><span class="comment">        %logger&#123;36&#125;——日志输出者的名字</span></span><br><span class="line"><span class="comment">        %msg——日志消息</span></span><br><span class="line"><span class="comment">        %n——平台的换行符</span></span><br><span class="line"><span class="comment">       --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置字符集 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- rollover daily --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--如果第二天输出日志,会将当天的日志记录在&lt;file&gt;$&#123;log.path&#125;/log_debug.log&lt;/file&gt;,然后将昨天的日志归档到下面的文件中--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--以分钟切分  %d&#123;yyyy-MM-dd_HH-mm&#125;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/debug/log-debug-%d&#123;yyyy-MM-dd_HH-mm&#125;.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- each file should be at most 100MB, keep 60 days worth of history, but at most 20GB --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--单个日志文件最大100M，到了这个值，就会再创建一个日志文件，日志文件的名字最后+1--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--所有的日志文件最大20G，超过就会删除旧的日志--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>20GB<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- 此日志文件只记录debug级别的 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span>&gt;</span>debug<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="root">root</h4>
<ol>
<li>root 配置必须在 appender 下边</li>
<li>root 节点是对所有 appender 的管理，添加哪个 appender 就会打印哪个 appender 的日志</li>
<li>root 节点的 level 是总的日志级别控制</li>
</ol>
<ul>
<li>如果 appender 的日志级别设定比 root 的高，会按照 appender 的日志级别打印日志</li>
<li>如果 appender 的日志级别比 root 的低， 会按照 root 设定的日志级别进行打印日志</li>
<li>总结：root 设定的日志级别是最低限制，如果 root 设定级别为最高 ERROR，那么所有 appender 只能打印最高级别的日志</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;DEBUG_FILE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;INFO_FILE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;WARN_FILE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;ERROR_FILE&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="logger">logger</h4>
<ol>
<li>name：用来指定受此 loger 约束的某一个包或者具体的某一个类。</li>
<li>addtivity：是否向上级 loger 传递打印信息。默认是 true。</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- logback为 com.pikaqiu.logbackdemo 中的包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.pikaqiu.logbackdemo&quot;</span> <span class="attr">level</span>=<span class="string">&quot;debug&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- logback为 com.pikaqiu.logbackdemo.LogbackdemoApplicationTests 这个类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.pikaiqu.logbackdemo.LogbackdemoApplicationTests&quot;</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>root 和 logger 的关系</strong></p>
<ol>
<li>root 和 logger 是父子的关系</li>
</ol>
<p>logger 的 appender 根据参数 additivity 决定是否要叠加 root 的 appender，logger 的级别是其自身定义的级别，和 root 的级别没关系</p>
<ol start="2">
<li>root 是全局配置，logger 对单个类或包配置，是局部配置</li>
</ol>
<p>如果 logger 里面配置了 additivity = “false”，就会覆盖 root 的，只打印一遍；如果 additivity = “true”，就会向上层再次传递，不会覆盖，而是打印两遍</p>
<h3 id="多环境配置">多环境配置</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>  <span class="attr">scan</span>=<span class="string">&quot;true&quot;</span> <span class="attr">scanPeriod</span>=<span class="string">&quot;10 seconds&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置多环境日志输出  可以在application.properties中配置选择哪个profiles : spring.profiles.active=dev--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--生产环境:输出到文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">&quot;pro&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;DEBUG_FILE&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;INFO_FILE&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;ERROR_FILE&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;WARN_FILE&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开发环境:打印控制台--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">&quot;dev&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;debug&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- spring.application.name需要配置到bootstrap中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">&quot;context&quot;</span> <span class="attr">name</span>=<span class="string">&quot;logLevel&quot;</span> <span class="attr">source</span>=<span class="string">&quot;log.level&quot;</span> <span class="attr">defaultValue</span>=<span class="string">&quot;info&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">&quot;context&quot;</span> <span class="attr">name</span>=<span class="string">&quot;immediateFlush&quot;</span> <span class="attr">source</span>=<span class="string">&quot;log.immediateFlush&quot;</span> <span class="attr">defaultValue</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">&quot;context&quot;</span> <span class="attr">name</span>=<span class="string">&quot;appName&quot;</span> <span class="attr">source</span>=<span class="string">&quot;spring.application.name&quot;</span> <span class="attr">defaultValue</span>=<span class="string">&quot;appName&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">&quot;context&quot;</span> <span class="attr">name</span>=<span class="string">&quot;APP_NAME&quot;</span> <span class="attr">source</span>=<span class="string">&quot;spring.application.name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;contextName&gt;$&#123;appName&#125;&lt;/contextName&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">&quot;context&quot;</span> <span class="attr">name</span>=<span class="string">&quot;logPattern&quot;</span> <span class="attr">source</span>=<span class="string">&quot;log.pattern&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">defaultValue</span>=<span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;| %tid | %-5level | $&#123;appName&#125; | %thread｜%logger&#123;20&#125;:%line:%method&#123;20&#125; - %msg%n&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>name：自定义别名</li>
<li>source：对应 SpringBoot 配置文件中属性名</li>
<li>defaultValue：默认值</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础（1-基本类型和包装类型）</title>
    <url>/blog/2024/12/17/%E5%BF%83%E5%BE%97/Java%E5%9F%BA%E7%A1%80/Java%E5%9F%BA%E7%A1%80%EF%BC%881-%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%8C%85%E8%A3%85%E7%B1%BB%E5%9E%8B%EF%BC%89/</url>
    <content><![CDATA[<h2 id="基本数据类型和包装类型">基本数据类型和包装类型</h2>
<table>
<thead>
<tr>
<th>基本类型</th>
<th>包装类型</th>
<th>位数</th>
<th>字节</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>byte</td>
<td>Byte</td>
<td>8</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>short</td>
<td>Short</td>
<td>16</td>
<td>2</td>
<td>0</td>
</tr>
<tr>
<td>int</td>
<td>Integer</td>
<td>32</td>
<td>4</td>
<td>0</td>
</tr>
<tr>
<td>long</td>
<td>Long</td>
<td>64</td>
<td>8</td>
<td>0L</td>
</tr>
<tr>
<td>char</td>
<td>Character</td>
<td>16</td>
<td>2</td>
<td>‘u0000’</td>
</tr>
<tr>
<td>float</td>
<td>Float</td>
<td>32</td>
<td>4</td>
<td>0f</td>
</tr>
<tr>
<td>double</td>
<td>Double</td>
<td>64</td>
<td>8</td>
<td>0d</td>
</tr>
<tr>
<td>boolean</td>
<td>Boolean</td>
<td>1</td>
<td></td>
<td>false</td>
</tr>
</tbody>
</table>
<p>注意：float 的精度为 6~7 位，double 的精度为 15~16</p>
<h3 id="区别">区别</h3>
<table>
<thead>
<tr>
<th>特性</th>
<th>基本数据类型</th>
<th>包装类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>类型</td>
<td>直接存储值</td>
<td>存储为对象</td>
</tr>
<tr>
<td>默认值</td>
<td>有默认值（如 <code>0</code>、<code>false</code> 等）</td>
<td><code>null</code></td>
</tr>
<tr>
<td>存储位置</td>
<td>栈内存</td>
<td>堆内存</td>
</tr>
<tr>
<td>性能</td>
<td>高效，访问速度快</td>
<td>较低，因为涉及对象的创建和拆箱</td>
</tr>
<tr>
<td>是否为对象</td>
<td>否</td>
<td>是</td>
</tr>
<tr>
<td>支持的功能</td>
<td>无</td>
<td>提供多种实用方法（如解析、转换等）</td>
</tr>
<tr>
<td>是否为可变对象</td>
<td>否（不可修改值）</td>
<td>否（包装类型对象不可变）</td>
</tr>
</tbody>
</table>
<h3 id="适用场景">适用场景</h3>
<ol>
<li>基本数据类型：</li>
</ol>
<ul>
<li>用于对性能要求较高的场景，如大规模的数值计算、循环处理等。</li>
<li>更适用于需要较少内存分配的简单数据存储。</li>
</ul>
<ol start="2">
<li>包装类型：</li>
</ol>
<ul>
<li>用于需要对象的场景，如需要存储在集合类（如 <code>List</code>、<code>Set</code>）中的数据，或者需要与其他类进行交互时。</li>
<li>包装类对象用于 Java 泛型类型，因为泛型不支持基本数据类型。</li>
</ul>
<h3 id="自动装箱拆箱">自动装箱拆箱</h3>
<p>对于 Java 基本数据类型，均对应一个包装类</p>
<ol>
<li>装箱：自动将基本数据类型转换为包装器类型，如 <code>int -&gt; Integer</code></li>
<li>拆箱：自动将包装器类型转换为基本数据类型，如 <code>Integer -&gt; int</code></li>
</ol>
<h2 id="缓存信息">缓存信息</h2>
<h3 id="Integer-缓存源码">Integer 缓存源码</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title function_">valueOf</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">IntegerCache</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> -<span class="number">128</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> high;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Integer cache[];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// high value may be configured by property</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">integerCacheHighPropValue</span> <span class="operator">=</span></span><br><span class="line">            sun.misc.VM.getSavedProperty(<span class="string">&quot;java.lang.Integer.IntegerCache.high&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (integerCacheHighPropValue != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> parseInt(integerCacheHighPropValue);</span><br><span class="line">                i = Math.max(i, <span class="number">127</span>);</span><br><span class="line">                <span class="comment">// Maximum array size is Integer.MAX_VALUE</span></span><br><span class="line">                h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span>( NumberFormatException nfe) &#123;</span><br><span class="line">                <span class="comment">// If the property cannot be parsed into an int, ignore it.</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        high = h;</span><br><span class="line"></span><br><span class="line">        cache = <span class="keyword">new</span> <span class="title class_">Integer</span>[(high - low) + <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> low;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; cache.length; k++)</span><br><span class="line">            cache[k] = <span class="keyword">new</span> <span class="title class_">Integer</span>(j++);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span></span><br><span class="line">        <span class="keyword">assert</span> IntegerCache.high &gt;= <span class="number">127</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">IntegerCache</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>优点：对-128 到 127 的 Integer 对象进行缓存，当创建新的 Integer 对象时，如果符合这个范围，并且已有存在的相同值的对象，则返回这个对象（地址），不需要再创建一个新的 Integer 对象，否则创建新的 Integer 对象。在做 == 运算时，Integer 会自动拆箱为 int 类型，然后再进行比较</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Integer a=<span class="number">123</span>;</span><br><span class="line">        Integer b=<span class="number">123</span>;</span><br><span class="line">        System.out.println(a==b);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        a=<span class="number">128</span>;</span><br><span class="line">        b=<span class="number">128</span>;</span><br><span class="line">        System.out.println(a==b);<span class="comment">//false     </span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> c=<span class="number">128</span>;</span><br><span class="line">        <span class="type">int</span> d=<span class="number">128</span>;</span><br><span class="line">        System.out.println(c==d);<span class="comment">//true</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">Integer</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">12</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">12</span>);</span><br><span class="line">        System.out.println(e==f);<span class="comment">//false</span></span><br><span class="line">        Integer g=<span class="number">12</span>;</span><br><span class="line">        System.out.println(e==g);<span class="comment">//false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Integer g = 12</code> 会发生装箱，等价于 <code>Integer g = Integer.valueOf(12)</code>，因此，g 直接使用的常量池中的对象，而 <code>Integer e = new Integer(40)</code> 会直接创建新的对象。所有整型包装类对象之间值的比较，全部使用 equals 方法比较</p>
<h3 id="Long-缓存源码">Long 缓存源码</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">valueOf</span><span class="params">(<span class="type">long</span> l)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= -<span class="number">128</span> &amp;&amp; l &lt;= <span class="number">127</span>) &#123; <span class="comment">// will cache</span></span><br><span class="line">        <span class="keyword">return</span> LongCache.cache[(<span class="type">int</span>)l + offset];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Long</span>(l);</span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">LongCache</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">LongCache</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Long cache[] = <span class="keyword">new</span> <span class="title class_">Long</span>[-(-<span class="number">128</span>) + <span class="number">127</span> + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; cache.length; i++)</span><br><span class="line">            cache[i] = <span class="keyword">new</span> <span class="title class_">Long</span>(i - <span class="number">128</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Short-缓存源码">Short 缓存源码</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Short <span class="title function_">valueOf</span><span class="params">(<span class="type">short</span> s)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sAsInt</span> <span class="operator">=</span> s;</span><br><span class="line">    <span class="keyword">if</span> (sAsInt &gt;= -<span class="number">128</span> &amp;&amp; sAsInt &lt;= <span class="number">127</span>) &#123; <span class="comment">// must cache</span></span><br><span class="line">        <span class="keyword">return</span> ShortCache.cache[sAsInt + offset];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Short</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ShortCache</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">ShortCache</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Short cache[] = <span class="keyword">new</span> <span class="title class_">Short</span>[-(-<span class="number">128</span>) + <span class="number">127</span> + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; cache.length; i++)</span><br><span class="line">            cache[i] = <span class="keyword">new</span> <span class="title class_">Short</span>((<span class="type">short</span>)(i - <span class="number">128</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Character-缓存源码">Character 缓存源码</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Character <span class="title function_">valueOf</span><span class="params">(<span class="type">char</span> c)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (c &lt;= <span class="number">127</span>) &#123; <span class="comment">// must cache</span></span><br><span class="line">      <span class="keyword">return</span> CharacterCache.cache[(<span class="type">int</span>)c];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Character</span>(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">CharacterCache</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">CharacterCache</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Character cache[] = <span class="keyword">new</span> <span class="title class_">Character</span>[<span class="number">127</span> + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; cache.length; i++)</span><br><span class="line">            cache[i] = <span class="keyword">new</span> <span class="title class_">Character</span>((<span class="type">char</span>)i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Byte-缓存源码">Byte 缓存源码</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Byte <span class="title function_">valueOf</span><span class="params">(<span class="type">byte</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">    <span class="keyword">return</span> ByteCache.cache[(<span class="type">int</span>)b + offset];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ByteCache</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">ByteCache</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Byte cache[] = <span class="keyword">new</span> <span class="title class_">Byte</span>[-(-<span class="number">128</span>) + <span class="number">127</span> + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; cache.length; i++)</span><br><span class="line">            cache[i] = <span class="keyword">new</span> <span class="title class_">Byte</span>((<span class="type">byte</span>)(i - <span class="number">128</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Boolean-缓存源码">Boolean 缓存源码</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title function_">valueOf</span><span class="params">(<span class="type">boolean</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (b ? TRUE : FALSE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="总结">总结</h3>
<ol>
<li>Integer 和 Long、Short 会缓存-128~127 的数据</li>
<li>Character 会缓存 0~127 的数据</li>
<li>Byte 会缓存-128~127 的数据</li>
</ol>
<p>注意：两种浮点数类型的包装类 Float，Double 并没有实现常量池技术。</p>
<h2 id="其他">其他</h2>
<h3 id="Integer-和-Double-类型比较">Integer 和 Double 类型比较</h3>
<p>Integer、Double 不能直接进行比较，这包括：</p>
<ol>
<li>不能用 == 进行直接比较，因为它们是不同的数据类型</li>
<li>不能转为字符串进行比较，因为转为字符串后，浮点数带小数点，整数值不带，这样它们永远都不相等</li>
<li>不能使用 compareTo 方法进行比较，虽然它们都有 compareTo 方法，但该方法只能对相同类型进行比较</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">Double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">100.00</span>;</span><br><span class="line">System.out.println(i.doubleValue() == d.doubleValue());</span><br></pre></td></tr></table></figure>
<h3 id="逃逸分析">逃逸分析</h3>
<p>逃逸分析的基本行为就是分析对象的动态作用域：当一个对象在方法中被定义后，它可能被外部方法所引用</p>
<ol>
<li>方法逃逸：在一个方法体内，定义一个局部变量，而它可能被外部方法引用。例如：作为调用参数传递到其他方法中</li>
<li>线程逃逸：这个对象有可能被外部线程访问到。例如：赋值给类变量或可以在其他线程中访问的实例变量</li>
</ol>
<p><strong>为什么说是几乎所有对象实例都存在于堆中呢？</strong></p>
<p>这是因为 HotSpot 虚拟机引入了 JIT 优化之后，会对对象进行逃逸分析，如果发现某一个对象并没有逃逸到方法外部，那么就可能通过标量替换来实现栈上分配，而避免堆上分配内存</p>
<p>注意：基本数据类型存放在栈中是一个常见的误区！基本数据类型的存储位置取决于它们的作用域和声明方式。如果它们是局部变量，那么它们会存放在栈中；如果它们是成员变量，那么它们会存放在堆/方法区/元空间中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="comment">// 成员变量，存放在堆中</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 被 static 修饰的成员变量，JDK 1.7 及之前位于方法区，1.8 后存放于元空间，均不存放于堆中。</span></span><br><span class="line">    <span class="comment">// 变量属于类，不属于对象。</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 局部变量，存放在栈中</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">static</span> <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">40</span>; <span class="comment">// 编译错误，不能在方法中使用 static 修饰局部变量</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础（2-equals与运算符==）</title>
    <url>/blog/2024/12/18/%E5%BF%83%E5%BE%97/Java%E5%9F%BA%E7%A1%80/Java%E5%9F%BA%E7%A1%80%EF%BC%882-equals%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6==%EF%BC%89/</url>
    <content><![CDATA[<h2 id="运算符">== 运算符</h2>
<ol>
<li>作用于基本数据类型时，是比较两个数值是否相等</li>
<li>作用于引用数据类型时，是比较两个对象的内存地址是否相同，即判断它们是否为同一个对象</li>
</ol>
<h2 id="equals-方法">equals()方法</h2>
<p>作用：</p>
<ol>
<li>没有重写时，Object 默认以 == 来实现，即比较两个对象的内存地址是否相同</li>
<li>进行重写后，一般会按照对象的内容来进行比较，若两个对象内容相同则认为对象相等，否则认为对象不等</li>
</ol>
<p>注意：</p>
<ol>
<li>equals 不能用于比较基本数据类型的变量；</li>
<li>如果没有对 equals 方法进行重写，则比较的是引用类型的变量所指向的对象的地址</li>
</ol>
<h3 id="java-lang-Object-equals">java.lang.Object: equals</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">    <span class="comment">// Java中==符号在比较复合型数据类型（类）比较的是对象在内存中的地址</span></span><br><span class="line">    <span class="comment">// 只有同个new出来的对象，它们在内存中的存放地址才一样，比较结果才为true</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="java-lang-String-equals">java.lang.String: equals</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object anObject)</span> &#123;</span><br><span class="line">    <span class="comment">// 首先看一下是不是比较同一个对象，如果是直接返回true</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span> == anObject) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断anObject是否为String的一个实例，如果不是直接返回false</span></span><br><span class="line">    <span class="comment">// 如果是再进一步判断两个字符串是否相等：将字符串转化为char数组进行一一比较</span></span><br><span class="line">    <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">anotherString</span> <span class="operator">=</span> (String) anObject;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> value.length;</span><br><span class="line">        <span class="keyword">if</span> (n == anotherString.value.length) &#123;</span><br><span class="line">            <span class="type">char</span> v1[] = value;</span><br><span class="line">            <span class="type">char</span> v2[] = anotherString.value;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (v1[i] != v2[i])</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="java-util-Arrays-equals">java.util.Arrays: equals</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span>[] b)</span> &#123;</span><br><span class="line">    <span class="comment">// 两个数组为同一对象返回true</span></span><br><span class="line">    <span class="keyword">if</span>(a == b)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 两个数组全为null返回false</span></span><br><span class="line">    <span class="keyword">if</span>(a == <span class="literal">null</span> || b == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// 两个数组长度不一致返回false</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> a.length;</span><br><span class="line">    <span class="keyword">if</span>(b.length != length)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// 两个数组不是同一对象，不为null且长度相同再比较数组中的每一个元素是否相等</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;length; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i] != b[i])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="java-util-Object-equals">java.util.Object: equals</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object a, Object b)</span> &#123;</span><br><span class="line">    <span class="comment">// 如果a,b都为null返回true，如果只有一个为null返回false，否则返回a.equals(b)的结果</span></span><br><span class="line">    <span class="keyword">return</span> (a == b) || (a != <span class="literal">null</span> &amp;&amp; a.equals(b));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="java-util-Date-equals">java.util.Date: equals</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">    <span class="comment">// obj必须是Date类型，在把两个时间转化为GMT 1970-01-01 00:00:00</span></span><br><span class="line">    <span class="comment">// 到此date对象上时间的毫秒数进行比较</span></span><br><span class="line">    <span class="keyword">return</span> obj instance Date &amp;&amp; getTime == ((Date)obj).getTime();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="总结">总结</h2>
<table>
<thead>
<tr>
<th>特性</th>
<th><code>==</code> 比较运算符</th>
<th><code>equals()</code> 方法</th>
</tr>
</thead>
<tbody>
<tr>
<td>比较内容</td>
<td>比较对象的引用（内存地址）</td>
<td>比较对象的内容（由类重写方法决定）</td>
</tr>
<tr>
<td>适用类型</td>
<td>基本数据类型、对象引用</td>
<td>对象（通常需要重写 <code>equals</code> 方法）</td>
</tr>
<tr>
<td>默认行为</td>
<td>对象比较内存地址，基本类型比较值</td>
<td>默认比较对象引用；大多数类重写此方法</td>
</tr>
<tr>
<td>典型用法</td>
<td>用于比较基本数据类型和检查对象是否是同一实例</td>
<td>用于比较对象内容（如字符串、集合等）</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础（4-String）</title>
    <url>/blog/2024/12/22/%E5%BF%83%E5%BE%97/Java%E5%9F%BA%E7%A1%80/Java%E5%9F%BA%E7%A1%80%EF%BC%884-String%EF%BC%89/</url>
    <content><![CDATA[<h2 id="String、StringBuffer-与-StringBuilder">String、StringBuffer 与 StringBuilder</h2>
<p><strong>区别</strong></p>
<p>运行速度快慢：StringBuilder &gt; StringBuffer &gt; String</p>
<ol>
<li>String：采用 final 修饰的字符数组进行字符串保存，因此不可变。如果对 String 类型对象修改，需要新建对象，将老字符和新增加的字符一并存进去</li>
<li>StringBuilder：采用无 final 修饰的字符数组进行保存，因此可变，但线程不安全</li>
<li>StringBuffer：采用无 final 修饰的字符数组进行保存，可理解为实现线程安全的 StringBuilder，其实比 StringBuilder 多了 synchronized 修饰符</li>
</ol>
<p>StringBuilder 与 StringBuffer 都继承自 AbstractStringBuilder 类，在 AbstractStringBuilder 中也是使用字符数组保存字符串，不过没有使用 final 和 private 关键字修饰</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractStringBuilder</span> <span class="keyword">implements</span> <span class="title class_">Appendable</span>, CharSequence &#123;</span><br><span class="line">    <span class="type">char</span>[] value;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> count;	</span><br><span class="line"></span><br><span class="line">    AbstractStringBuilder() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    AbstractStringBuilder(<span class="type">int</span> capacity) &#123;</span><br><span class="line">        value = <span class="keyword">new</span> <span class="title class_">char</span>[capacity];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> AbstractStringBuilder <span class="title function_">append</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (str == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> appendNull();</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> str.length();</span><br><span class="line">        ensureCapacityInternal(count + len);</span><br><span class="line">        str.getChars(<span class="number">0</span>, len, value, count);</span><br><span class="line">        count += len;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>使用场景</strong></p>
<ol>
<li>
<p>当需要频繁修改字符串时，建议使用 StringBuilder（性能较好）。</p>
</li>
<li>
<p>如果在多线程环境下使用，则可以选择 StringBuffer。</p>
</li>
</ol>
<p><strong>final 修饰 StringBuffer 后还可以 append 吗？</strong></p>
<p>可以，final 修饰的是一个引用变量，那么这个引用始终只能指向这个对象，但是这个对象内部的属性是可以变化的</p>
<h2 id="String-字符串修改实现原理">String 字符串修改实现原理</h2>
<p>当用 String 类型来对字符串进行修改时，其实现方法是首先创建一个 StringBuilder，其次调用 StringBuilder 的 append()方法，最后调用 StringBuilder 的 toString()方法把结果返回</p>
<h2 id="String-intern">String.intern()</h2>
<p>String.intern 是一个 Native 方法，底层调用 C++的 StringTable:: intern 方法</p>
<p>作用：当调用 intern 方法时，如果常量池中已经存在该字符串，则返回池中的字符串；否则将此字符串添加到常量池中，并返回字符串的引用</p>
<p>优点：使用 intern 方法可以提高内存使用效率，减少重复的字符串</p>
<h2 id="String-类的不可变性">String 类的不可变性</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">String</span> <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable, Comparable&lt;String&gt;, CharSequence &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">char</span> value[];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>String 类由 final 修饰，所以不能被继承</p>
<ol>
<li>性能优化（字符串常量池的需要）：字符串常量池是 Java 堆内存中一个特殊的存储区域，当创建一个 String 对象时，假设此字符串值已经存在于常量池中，则不会创建一个新的对象，而是引用已经存在的对象。若字符串可变，基于常量池的 String.intern()方法也失效，每次创建新的字符串将在堆中开辟出新的空间，占据更多的内存</li>
<li>允许 String 对象缓存 HashCode：字符串不变性保证类 hash 码的唯一性，因此可以放心地进行缓存，意味着不必每次都去计算新的哈希码</li>
<li>安全性：例如：网络连接地址 URL 等，如果字符串是可变的，黑客就有可能改变字符串指向对象的值，那么会引起严重的安全问题</li>
<li>线程安全：在多线程中，只有不变的对象和值是线程安全的，可以在多个线程中共享数据。由于 String 的不可变，当一个线程修改了字符串的值，只会产生一个新的字符串对象，不会对其他线程的访问产生副作用，访问的都是同样的字符串数据，不需要任何同步操作</li>
</ol>
<h2 id="Java9-将-String-的底层实现由-char-改成了-byte">Java9 将 String 的底层实现由 char [] 改成了 byte []</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">String</span> <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable,Comparable&lt;String&gt;, CharSequence &#123;</span><br><span class="line">	<span class="comment">// 表示变量最多被修改一次，称为“稳定的”。</span></span><br><span class="line">    <span class="meta">@Stable</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">byte</span>[] value;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">byte</span> coder;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractStringBuilder</span> <span class="keyword">implements</span> <span class="title class_">Appendable</span>, CharSequence &#123;</span><br><span class="line">    <span class="type">byte</span>[] value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 Java9 之后，String、StringBuilder 与 StringBuffer 的实现改用 byte 数组存储字符串，并增加了 coder 来表示编码。这样做的好处是在 Latin1 字符为主的程序里，可以把 String 占用的内存减少一半</p>
<p>使用 char [] 来表示 String 就导致了即使 String 中的字符只用一个字节就能表示，也得占用两个字节，仅仅将 char [] 优化为 byte [] 是不够的，还要配合 Latin-1 的编码方式，该编码方式是用单个字节来表示字符的。为了区别编码方式，追加了一个 coder 字段来区分，Java 会根据字符串的内容自动设置为相应的编码，要么 Latin-1 要么 UTF-16</p>
<p><strong>为什么用 UTF-16 而不用 UTF-8？</strong></p>
<p>在 UTF-8 中，0-127 号的字符用 1 个字节来表示，使用和 ASCII 相同的编码，只有 128 号以上的字符才用 2 个、3 个或者 4 个字节来表示</p>
<ol>
<li>如果只有一个字节，那么最高的比特位为 0</li>
<li>如果有多个字节，那么第一个字节从最高位开始，连续有几个比特位的值为 1，就使用几个字节编码，剩下的字节均以 10 开头</li>
</ol>
<ul>
<li>0xxxxxxx：一个字节</li>
<li>110xxxxx 10xxxxxx：两个字节（开始两个 1）</li>
<li>1110xxxx 10xxxxxx 10xxxxxx：三个字节（开始三个 1）</li>
</ul>
<p>UTF-8 是变长的，对于 String 这种有随机访问方法的类来说，就很不方便。所谓的随机访问，就是 charAt、subString 这种方法，随便指定一个数字，String 就能给出结果。如果字符串中的每个字符占用的内存是不定长的，那么进行随机访问的时候，就需要从头开始数每个字符的长度，才能找到想要的字符</p>
<p><strong>UTF-16 使用 2 个或者 4 个字节来存储字符</strong></p>
<ol>
<li>对于 Unicode 编号范围在 0-FFFF 之间的字符，UTF-16 使用两个字节存储</li>
<li>对于 Unicode 编号范围在 10000-10FFFF 之间的字符，UTF-16 使用四个字节存储，具体来说就是：将字符编号的所有比特位分成两部分，较高的一些比特位用一个值介于 D800-DBFF 之间的双字节存储，较低的一些比特位（剩下的比特位）用一个值介于 DC00-DFFF 之间的双字节存储</li>
</ol>
<p>在 Java 中，一个字符（char）就是 2 个字节，占 4 个字节的字符，在 Java 里也是用两个 char 存储的，而 String 的各种操作，都是以 Java 的字符（char）为单位的，charAt 是取得第几个 char，subString 取的也是第几个到第几个 char 组成的子串，甚至 length 返回的都是 char 的个数。所以 UTF-16 在 Java 的世界里，就可以视为一个定长的编码</p>
<h2 id="拼接字符串">拼接字符串</h2>
<p><strong>采用+运算符时</strong></p>
<ol>
<li>如果拼接的都是字符串常量，则在编译时编译器会将其直接优化为一个完整的字符串，效率比较高</li>
<li>如果拼接的字符串中包含变量，则在编译时编译器采用 StringBuilder 对其进行优化，即自动创建 StringBuilder 实例并调用其 append()方法。引用的值在程序编译期是无法确定的，编译器无法对其进行优化</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;str&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;ing&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="string">&quot;str&quot;</span> + <span class="string">&quot;ing&quot;</span>;<span class="comment">//常量池中的对象</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> str1 + str2; <span class="comment">//在堆上创建的新的对象</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str5</span> <span class="operator">=</span> <span class="string">&quot;string&quot;</span>;<span class="comment">//常量池中的对象</span></span><br><span class="line">System.out.println(str3 == str4);<span class="comment">//false</span></span><br><span class="line">System.out.println(str3 == str5);<span class="comment">//true</span></span><br><span class="line">System.out.println(str4 == str5);<span class="comment">//false</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>字符串使用 final 关键字声明之后，可以让编译器当作常量来处理。被 final 关键字修饰之后的 String 会被编译器当作常量来处理，编译器在程序编译器就可以确定它的值，其效果就相当于访问常量</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;str&quot;</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;ing&quot;</span>;</span><br><span class="line"><span class="comment">// 下面两个表达式其实是等价的</span></span><br><span class="line"><span class="type">String</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&quot;str&quot;</span> + <span class="string">&quot;ing&quot;</span>;<span class="comment">// 常量池中的对象</span></span><br><span class="line"><span class="type">String</span> <span class="variable">d</span> <span class="operator">=</span> str1 + str2; <span class="comment">// 常量池中的对象</span></span><br><span class="line">System.out.println(c == d);<span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p><strong>采用 String 类的 concat 方法时</strong></p>
<ol>
<li>concat 方法的拼接逻辑是：先创建一个足以容纳待拼接的两个字符串的字节数组，然后先后将两个字符串拼到这个数组里，最后将此数组转换为字符串</li>
<li>在拼接大量字符串的时候，concat 方法的效率低于 StringBuilder。但是只拼接 2 个字符串时，concat 方法的效率要优于 StringBuilder</li>
</ol>
<h2 id="String-str-“i”-与-String-str-new-String-“i”">String str = “i” 与 String str = new String(“i”)</h2>
<p>不一样，String str = “i” 的方式，Java 虚拟机会将其分配到常量池中；String str = new String(“i”)则会分配到堆内存中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringTest</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        System.out.println(a == b);	<span class="comment">//true</span></span><br><span class="line">        System.out.println(a == c);	<span class="comment">//false</span></span><br><span class="line">        System.out.println(c == d);	<span class="comment">//false</span></span><br><span class="line">        System.out.println(c.equals(d));<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>在执行 String str1 = “abc” 的时候，JVM 会首先检查字符串常量池中是否已存在该字符串对象，如果已经存在，那么就不会再创建了，直接返回该字符串在字符串常量池中的内存地址；如果该字符串还不在字符串常量池中，那么就会在字符串常量池中创建该字符串对象然后再返回</li>
<li>String str3 = new String(“abc”)，则会创建一个新的对象，然后将新对象的地址值赋给 str3，虽然 str3 和 str1 的值相同但是地址值不同。当 JVM 遇到上述代码时，会先检索常量池中是否存在“abc”，如果不存在“abc”这个字符串，则会先在常量池中创建这个一个字符串。然后再执行 new 操作，会在堆内存中创建一个存储“abc”的 String 对象，对象的引用赋值给 str2。此过程创建了 2 个对象。当然，如果检索常量池时发现已经存在了对应的字符串，那么只会在堆内创建一个新的 String 对象，此过程只创建了 1 个对象。</li>
</ol>
<p>使用 new 会创建 1 或 2 个字符串，会多创建一个对象出来，占用更多的内存，所以一般建议使用直接量的方式创建字符串</p>
<h2 id="创建对象的个数">创建对象的个数</h2>
<ol>
<li>字面量+字面量</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>+<span class="string">&quot;def&quot;</span>;</span><br><span class="line"><span class="comment">//创建了1个对象。编译期已经把常量拼为 &quot;abcdef&quot; 放到常量池</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>字面量+对象+字面量</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span> + s1 + <span class="string">&quot;def&quot;</span>;</span><br><span class="line"><span class="comment">//创建了3个对象。常量池2个：abc、def，堆中1个：abcabcdef</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span> + s1 + <span class="string">&quot;def&quot;</span>; </span><br><span class="line"><span class="comment">//创建了2个对象，&quot;abc&quot;已经在池中了，直接取出，创建了一个&quot;def&quot;的String对象放入池中，创建一个&quot;abcabcdef&quot;的String对象放于堆中（不是常量池）</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>new String(“xx”)+new String(“xx”)</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>) + <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"><span class="comment">//创建了4个对象。先在常量池创建一个&quot;abc&quot;对象，再在内存堆上创建一个&quot;abc&quot;对象，第二个new语句不在池中创建对象，只在内存堆上创建一个对象，两个字符串相加会在堆上创建一个对象</span></span><br></pre></td></tr></table></figure>
<ol start="4">
<li>字面量+new String(“xx”)</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>+ <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;def&quot;</span>);</span><br><span class="line"><span class="comment">//创建了4个对象。先在常量池创建2个对象存储&quot;abc&quot;和&quot;def&quot;，new时再在内存堆上创建一个对象，两个字符串相加会在堆上创建一个对象</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础（3-hashCode）</title>
    <url>/blog/2024/12/19/%E5%BF%83%E5%BE%97/Java%E5%9F%BA%E7%A1%80/Java%E5%9F%BA%E7%A1%80%EF%BC%883-hashCode%EF%BC%89/</url>
    <content><![CDATA[<h2 id="作用">作用</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 获取哈希码（散列码），这个哈希码的作用是确定该对象在哈希表中的索引位置</span></span><br></pre></td></tr></table></figure>
<p>注意：hashCode 的值保存在对象中，只有第一次调用时产生 hashCode，并保存在 hash 中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">String</span></span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable, Comparable&lt;String&gt;, CharSequence &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// .....</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> hash;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> hash;</span><br><span class="line">        <span class="keyword">if</span> (h == <span class="number">0</span> &amp;&amp; value.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">char</span> val[] = value;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; value.length; i++) &#123;</span><br><span class="line">                h = <span class="number">31</span> * h + val[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 第一次调用时产生 hashCode，并保存在 hash</span></span><br><span class="line">            hash = h;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> h;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="特点">特点</h2>
<ol>
<li>相等（相同）的对象必须具有相等的哈希码（或者散列码）</li>
<li>如果两个对象的 hashCode 相等，它们不一定相等，可能不同对象的哈希码计算相同（哈希冲突）。</li>
<li>equals()方法被覆盖过，则 hashCode()方法也必须被覆盖（如果重写 equals 时没有重写 hashCode 方法的话，就可能导致 equals 方法判断是相等的两个对象，hashCode 值却不相等）</li>
</ol>
<h2 id="方法实现">方法实现</h2>
<p>实现 hashCode 方法时，应尽量确保：</p>
<ol>
<li>
<p>相等对象的哈希码相同：如通过对象的所有参与比较的字段来生成哈希码。</p>
</li>
<li>
<p>性能优化：避免使用过多的字段参与计算，选择合适的字段生成哈希值。</p>
</li>
</ol>
<p>通常的实现方式：</p>
<ol>
<li>使用对象的重要字段来计算哈希值，通常是 equals 方法中比较的字段。</li>
<li>使用素数和常数来混合哈希码值，减少哈希冲突的概率。</li>
</ol>
<h2 id="String-的-hashCode-计算方法">String 的 hashCode 计算方法</h2>
<p>选择 31 的理由：</p>
<ol>
<li>31 可以被 JVM 优化，31*i =（i &lt;&lt; 5）-i</li>
<li>31 是一个不大不小的质数，是作为 hashCode 乘子的优选质数之一</li>
</ol>
<ul>
<li>如果选择 2 时，哈希值会分布在一个较小的数值区间内，分布性不佳，最终可能会导致冲突率上升</li>
<li>如果选择 101 时，计算结果太大了，如果用 int 类型表示哈希值，结果会溢出，最终导致数值信息丢失</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> hash;</span><br><span class="line">    <span class="keyword">if</span> (h == <span class="number">0</span> &amp;&amp; value.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">char</span> val[] = value;        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; value.length; ++i) &#123;</span><br><span class="line">            h = <span class="number">31</span>*h + val[i];</span><br><span class="line">        &#125;</span><br><span class="line">        hash = h;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">公式为：s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]</span></span><br><span class="line"><span class="comment">假设 n=3</span></span><br><span class="line"><span class="comment">i=0 -&gt; h = 31 * 0 + val[0]</span></span><br><span class="line"><span class="comment">i=1 -&gt; h = 31 * (31 * 0 + val[0]) + val[1]</span></span><br><span class="line"><span class="comment">i=2 -&gt; h = 31 * (31 * (31 * 0 + val[0]) + val[1]) + val[2]</span></span><br><span class="line"><span class="comment">       h = 31*31*31*0 + 31*31*val[0] + 31*val[1] + val[2]</span></span><br><span class="line"><span class="comment">       h = 31^(n-1)*val[0] + 31^(n-2)*val[1] + val[2]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="hashCode-和-equals-的联系">hashCode()和 equals()的联系</h2>
<p>如果你重写了 equals 方法，通常也需要重写 hashCode 方法，以确保遵循 Java 的规范：当两个对象通过 equals 判断相等时，它们的 hashCode 也必须相等。否则，哈希表中的查找可能会失败。</p>
<p><strong>为什么要重写 equals()？</strong></p>
<p>例如：当把对象加入 HashSet 时，HashSet 会先计算对象的 hashCode 值来判断对象加入的位置，同时也会与其他已经加入的对象的 hashCode 值作比较，如果没有相符的 hashCode，HashSet 会假设对象没有重复出现。但是如果发现有相同 hashCode 值的对象，这时会调用 equals()方法来检查 hashCode 相等的对象是否真的相同。如果两者相同，HashSet 就不会让其加入操作成功；如果不同的话，就会重新散列到其他位置，这样我们就大大减少了 equals 的次数，相应就大大提高了执行速度</p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础（5-类详解）</title>
    <url>/blog/2024/12/23/%E5%BF%83%E5%BE%97/Java%E5%9F%BA%E7%A1%80/Java%E5%9F%BA%E7%A1%80%EF%BC%885-%E7%B1%BB%E8%AF%A6%E8%A7%A3%EF%BC%89/</url>
    <content><![CDATA[<h2 id="Java-访问修饰符">Java 访问修饰符</h2>
<ol>
<li>default：如果一个类、类属变量及方法没有用任何修饰符（即没有用 public、protected 及 private 中任何一种修饰），则其访问权限为 default（默认访问权限），在同一包内可见</li>
<li>private：在同一类内可见，不能修饰类</li>
<li>protected：对同一包内的类和所有包的子类可见，不能修饰类</li>
<li>public：对所有类可见</li>
</ol>
<h2 id="构造方法">构造方法</h2>
<p>特点：</p>
<ol>
<li>名字与类名相同</li>
<li>没有返回值，但不能用 void 声明构造函数</li>
<li>生成类的对象时自动执行，无需调用</li>
</ol>
<p>注意：</p>
<ol>
<li>如果一个类没有声明构造方法，也可以执行，因为一个类即使没有声明构造方法也会有默认的“不带参数的构造方法”</li>
<li>Java 程序在执行子类的构造方法之前，如果没有用 super()来调用父类特定的构造方法，则会调用父类中“没有参数的构造方法”</li>
<li>如果父类中只定义了有参数的构造方法，而在子类的构造方法中又没有用 super()来调用父类中特定的构造方法，则编译时将发生错误。解决方法是：在父类里加上一个不做事且没有参数的构造方法</li>
</ol>
<h2 id="super-关键字">super 关键字</h2>
<p>作用：</p>
<ol>
<li>访问父类的构造函数</li>
<li>访问父类的成员</li>
</ol>
<p>注意点：</p>
<ol>
<li>super()和 this()均需放在构造方法内第一行</li>
<li>调用 super()必须写在子类构造方法的第一行，否则编译不通过。每个子类的构造方法的第一条语句，都是隐含地调用 super()，如果父类没有这种形式的构造函数，那么在编译的时候就会报错</li>
<li>this 和 super 不能同时出现在一个构造函数里，因为 this 必然会调用其他的构造函数，其他的构造函数必然也会有 super 语句的存在，编译器不会通过</li>
<li>this()和 super()都指的是对象，所以均不可以在 static 环境中使用</li>
</ol>
<h2 id="static-关键字">static 关键字</h2>
<ol>
<li>
<p>静态变量：称为类变量，类所有的实例都共享静态变量，可以直接通过类名来访问它，静态变量在内存中只存在一份</p>
</li>
<li>
<p>静态方法：静态方法在类加载的时候就存在了，它不依赖于任何实例。静态方法必须有实现，它不能是抽象方法。只能访问所属类的静态字段和静态方法，方法中不能有 this 和 supper 关键字</p>
</li>
<li>
<p>静态语句块：静态语句块在类初始化时运行一次</p>
</li>
<li>
<p>静态内部类：非静态内部类依赖于外部类的实例，而静态内部类不需要。静态内部类不能访问外部类的非静态的变量和方法</p>
</li>
</ol>
<p>初始化顺序：静态变量和静态语句块优先于实例变量和普通语句块，静态变量和静态语句块的初始化顺序取决于它们在代码中的顺序</p>
<h2 id="Java-代码块">Java 代码块</h2>
<p>执行顺序：</p>
<ol>
<li>父类静态变量（只执行一次，其他每次 new 对象都要执行）</li>
<li>父类静态代码块（只执行一次，其他每次 new 对象都要执行）</li>
<li>子类静态变量（只执行一次，其他每次 new 对象都要执行）</li>
<li>子类静态代码块（只执行一次，其他每次 new 对象都要执行）</li>
<li>父类非静态变量</li>
<li>父类非静态代码块</li>
<li>父类构造函数</li>
<li>子类非静态变量</li>
<li>子类非静态代码块</li>
<li>子类构造函数</li>
</ol>
<p>注意：静态变量和静态代码块谁先声明的先执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeBlock01</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类静态代码块执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类代码块执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CodeBlock01</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类构造函数执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeBlock02</span> <span class="keyword">extends</span> <span class="title class_">CodeBlock01</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子类静态代码块执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子类代码块执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CodeBlock02</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子类构造函数执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">CodeBlock02</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行结果：</span></span><br><span class="line">父类静态代码块执行</span><br><span class="line">子类静态代码块执行</span><br><span class="line">父类代码块执行</span><br><span class="line">父类构造函数执行</span><br><span class="line">子类代码块执行</span><br><span class="line">子类构造函数执行</span><br></pre></td></tr></table></figure>
<h2 id="覆盖（重写）和重载">覆盖（重写）和重载</h2>
<table>
<thead>
<tr>
<th>区别</th>
<th>覆盖（Override）</th>
<th>重载（Overload）</th>
</tr>
</thead>
<tbody>
<tr>
<td>发生场所</td>
<td>在继承关系的子类和父类之间</td>
<td>在同一个类中</td>
</tr>
<tr>
<td></td>
<td>覆盖是针对父类方法的重写</td>
<td>同类中的方法均可重载</td>
</tr>
<tr>
<td>参数</td>
<td>与父类同名同参</td>
<td>与别的方法同名不同参</td>
</tr>
<tr>
<td>次数限制</td>
<td>父类一个方法只能在子类覆盖一次</td>
<td>重写只要参数不同，可以多次</td>
</tr>
<tr>
<td>返回类型</td>
<td>子类与父类返回类型要一致</td>
<td>可以不同</td>
</tr>
<tr>
<td>权限修饰符</td>
<td>子类不能覆盖父类的 private 方法</td>
<td>无</td>
</tr>
<tr>
<td>异常处理</td>
<td>重写要求子类比父类抛出更少的异常</td>
<td>无</td>
</tr>
</tbody>
</table>
<p>方法的重写要遵循“两同两小一大”</p>
<ol>
<li>“两同”：方法名相同、形参列表相同</li>
<li>“两小”：子类方法返回值类型应比父类方法返回值类型更小或相等，子类方法声明抛出的异常类应比父类方法声明抛出的异常类更小或相等</li>
<li>“一大”：子类的访问权限应比父类方法的访问权限更大或相等（例如：父类的方法是 protected，子类不能将其修改为 private，但可以改为 public）</li>
</ol>
<h2 id="变量">变量</h2>
<ol>
<li>
<p>成员变量：成员变量是在类的范围里定义的变量，有默认初始值</p>
</li>
<li>
<p>局部变量</p>
</li>
</ol>
<ul>
<li>局部变量是在方法里定义的变量，没有默认初始值</li>
<li>局部变量存储于栈内存中，作用的范围结束，变量空间会自动地释放</li>
<li>局部变量不能被访问控制修饰符及 static 所修饰，但是，成员变量和局部变量都能被 final 所修饰</li>
</ul>
<ol start="3">
<li>静态变量</li>
</ol>
<ul>
<li>被 static 修饰的变量称为类变量，它属于类，存储于方法区中，生命周期与当前类相同，因此不管创建多少个对象，静态变量在内存中有且仅有一个拷贝；</li>
<li>静态变量可以实现让多个对象共享内存</li>
</ul>
<ol start="4">
<li>实例变量</li>
</ol>
<ul>
<li>未被 static 修饰的成员变量叫实例变量，它存储于对象所在的堆内存中，生命周期与对象相同</li>
<li>属于某一实例，需要先创建对象，然后通过对象才能访问到它</li>
</ul>
<h2 id="静态方法和实例方法">静态方法和实例方法</h2>
<p>静态方法为什么不能调用非静态成员？</p>
<ol>
<li>静态方法是属于类的，在类加载的时候就会分配内存，可以通过类名直接访问。而非静态成员属于实例对象，只有在对象实例化之后才存在，需要通过类的实例对象去访问</li>
<li>在类的非静态成员不存在的时候静态成员就已经存在了，此时调用在内存中还不存在非静态成员，属于非法操作</li>
</ol>
<p>区别：</p>
<ol>
<li>调用方法：在外部调用静态方法时，可以使用类名.方法名的方式，也可以使用对象.方法名的方式，而实例方法只有后面这种方法，调用静态方法可以无需创建对象。一般不建议使用对象.方法名的方法来调用静态方法</li>
<li>访问类成员是否存在限制：静态方法在访问本类的成员时，只允许访问静态成员（即静态成员变量和静态方法），不允许访问实例成员（即实例成员变量和实例方法），而实例方法不存在这个限制</li>
</ol>
<h2 id="抽象类和接口">抽象类和接口</h2>
<p>共同点：</p>
<ol>
<li>都不能被实例化</li>
<li>都可以包含抽象方法</li>
<li>都可以有默认实现的方法（Java8 可以用 default 关键字在接口中定义默认方法）</li>
</ol>
<p>区别：</p>
<ol>
<li>抽象类中可以定义构造函数，接口不能定义构造函数</li>
<li>抽象类中可以有抽象方法和具体方法，而接口中只能有抽象方法（public abstract）</li>
<li>抽象类中的成员权限可以是 public、default、protected（抽象类中抽象方法就是为了重写，所以不能被 private 修饰）。而接口中的成员只可以是 public（方法默认：public abstract，成员变量默认：public static final）</li>
<li>抽象类中可以包含静态方法，而接口中不可以包含静态方法</li>
</ol>
<p><strong>JDK8 后的改变</strong></p>
<ol>
<li>允许在接口中包含带有具体实现的方法，使用 default 修饰，这类方法是默认方法</li>
<li>接口中可以包含静态方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">NewInterface</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">staticMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;staticMethod&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">defaultMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;defaultMethod&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getInfo</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="内部类">内部类</h2>
<p><strong>一个 Java 文件里可以有多个类吗（不含内部类）？</strong></p>
<ol>
<li>一个 Java 文件里可以有多个类，但最多只能有一个被 public 修饰的类</li>
<li>如果这个 Java 文件中包含 public 修饰的类，则这个类的名称必须和 Java 文件名一致</li>
</ol>
<h3 id="成员内部类">成员内部类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OutClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//成员内部类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">InnerClass</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">String</span> <span class="variable">testStrInner</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">testInner</span><span class="params">()</span> &#123;</span><br><span class="line">            test1();</span><br><span class="line">            test2();</span><br><span class="line">            test3();<span class="comment">//成员内部类可以访问外部类所有的属性和方法。静态方法直接访问。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="静态内部类">静态内部类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OutClass</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//静态内部类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">InnerClass</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">testStrInner</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testInner</span><span class="params">()</span> &#123;</span><br><span class="line">            test3();</span><br><span class="line">            <span class="type">String</span> <span class="variable">ss</span> <span class="operator">=</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>静态内部类可以包含静态成员，也可以包含非静态成员</li>
<li>静态内部类不能访问外部类的实例成员，只能访问它的静态成员</li>
<li>外部类的所有方法、初始化块都能访问其内部定义的静态内部类</li>
<li>在外部类的外部，也可以实例静态内部类，语法：外部类.内部类 变量名 = new 外部类.内部类构造方法()</li>
</ol>
<h3 id="匿名内部类">匿名内部类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//父类  Animal </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bellow</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//动物吼叫的类型</span></span><br><span class="line">        System.out.println(<span class="string">&quot;动物吼叫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Demo</span> <span class="variable">demo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo</span>();</span><br><span class="line">        demo.getDogBellow(<span class="keyword">new</span> <span class="title class_">Animal</span>()&#123;</span><br><span class="line">            <span class="comment">//匿名内部类，重写父类方法。当然接口也是一样</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bellow</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;狗 汪汪汪。。。。&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getDogBellow</span><span class="params">(Animal animal)</span>&#123;</span><br><span class="line">        animal.bellow();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="局部内部类">局部内部类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bellow</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">bellowStr</span> <span class="operator">=</span> <span class="string">&quot;动物吼叫&quot;</span>;</span><br><span class="line">        System.out.println(bellowStr);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;<span class="comment">//局部内部类</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">dogBellowStr</span> <span class="operator">=</span> bellowStr + <span class="string">&quot;；狗 ：汪汪汪&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dogBellow</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(dogBellowStr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="作用">作用</h3>
<ol>
<li>内部类可以很好地实现隐藏</li>
</ol>
<p>非内部类是不可以使用 private 和 protected 修饰的，但是内部类可以，从而达到隐藏的作用，同时也可以将一定逻辑关系的类组织在一起，增强可读性</p>
<ol start="2">
<li>间接的实现多继承</li>
</ol>
<p>每个内部类都能独立地继承一个接口的实现，所以无论外部类是否已经继承了某个接口的实现，对于内部类没有影响。如果没有内部类提供的可以继承多个具体的或抽象的类的能力，一些设计与编程问题就很难解决</p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础（6-Java与C++）</title>
    <url>/blog/2024/12/24/%E5%BF%83%E5%BE%97/Java%E5%9F%BA%E7%A1%80/Java%E5%9F%BA%E7%A1%80%EF%BC%886-Java%E4%B8%8EC+%EF%BC%89/</url>
    <content><![CDATA[<h2 id="Java-与-C">Java 与 C++</h2>
<p><strong>区别</strong></p>
<p>Java 和 C++都是面向对象的语言，都支持封装、继承和多态</p>
<ol>
<li>Java 不提供指针来直接访问内存，程序内存更加安全，C++需要手动释放内存</li>
<li>Java 的类是单继承的（接口可以多继承），C++支持多重继承</li>
<li>Java 有自动内存管理垃圾回收机制（GC），不需要程序员手动释放无用内存</li>
<li>Java 只支持方法重载（操作符重载增加了复杂性，与 Java 最初的设计思想不符），C++同时支持方法重载和操作符重载</li>
</ol>
<p><strong>Java 单继承的原因</strong></p>
<ol>
<li>如果在一个子类继承的多个父类中拥有相同名字的实例变量，子类在引用该变量时将产生歧义，无法判断应该使用哪个父类的变量</li>
<li>如果在一个子类继承的多个父类中拥有相同方法，子类中又没有覆盖该方法，那么调用该方法时将产生歧义，无法判断应该调用哪个父类的方法</li>
</ol>
<p><strong>为什么接口可以多实现？</strong></p>
<p>Java8 之前接口是无法定义具体方法实现的，所以即使有多个接口必须子类自己实现，所以并不会发生歧义</p>
<p>Java8 之后出了默认方法，可能会出现歧义的情况，所以 Java 强制规定，如果多个接口内有相同的默认方法，子类必须重写这个方法，否则编译期就会报错</p>
<h2 id="面向对象和面向过程">面向对象和面向过程</h2>
<p><strong>概念</strong></p>
<ol>
<li>面向过程 POP（步骤化）：分析出实现需求所需要的步骤，通过函数（方法）一步一步实现这些步骤，接着依次调用</li>
<li>面向对象 OOP（行为化）：把整个需求按照特点、功能划分，将这些存在共性的部分封装成类，创建对象不是为了完成某一个步骤，而是描述某个事物在解决问题的步骤中的行为</li>
</ol>
<p><strong>OOP 和 POP 的区别</strong></p>
<ol>
<li>编程思路不同：面向过程以实现功能的函数开发为主，而面向对象要首先抽象出类、属性及其方法，然后通过实例化类、执行方法来完成功能</li>
<li>封装性：都具有封装性，但是面向过程封装的是功能，而面向对象封装的是数据和功能</li>
<li>继承性和多态性：面向对象具有，而面向过程没有</li>
</ol>
<p><strong>面向对象特点</strong></p>
<ol>
<li>封装：把一个对象的状态信息（也就是属性）隐藏在对象内部，不允许外部对象直接访问对象的内部信息，但是可以提供一些可以被外界访问的方法来操作属性</li>
<li>继承：子类继承父类的属性和方法，它可以使用现有类的所有功能，并在无需重新编写原来的类的情况下对这些功能进行扩展</li>
<li>多态：指一个类实例的相同方法在不同情形有不同表现形式，多态机制使具有不同内部结构的对象可以共享相同的外部接口</li>
</ol>
<ul>
<li>编译时多态（静态多态）：在编译阶段确定方法的调用，主要是通过方法重载实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">display</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Integer: &quot;</span> + a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">display</span><span class="params">(<span class="type">double</span> a)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Double: &quot;</span> + a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">display</span><span class="params">(String a)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;String: &quot;</span> + a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Example</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Example</span>();</span><br><span class="line">        obj.display(<span class="number">5</span>);         <span class="comment">// 调用 display(int a)</span></span><br><span class="line">        obj.display(<span class="number">3.14</span>);      <span class="comment">// 调用 display(double a)</span></span><br><span class="line">        obj.display(<span class="string">&quot;Hello&quot;</span>);   <span class="comment">// 调用 display(String a)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>运行时多态（动态动态）：在运行时确定方法的调用，主要是通过方法重写实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal makes a sound&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog barks&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Cat meows&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">myDog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(); <span class="comment">// Animal reference but Dog object</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">myCat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>(); <span class="comment">// Animal reference but Cat object</span></span><br><span class="line"></span><br><span class="line">        myDog.sound(); <span class="comment">// 输出: Dog barks</span></span><br><span class="line">        myCat.sound(); <span class="comment">// 输出: Cat meows</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础（7-泛型）</title>
    <url>/blog/2024/12/25/%E5%BF%83%E5%BE%97/Java%E5%9F%BA%E7%A1%80/Java%E5%9F%BA%E7%A1%80%EF%BC%887-%E6%B3%9B%E5%9E%8B%EF%BC%89/</url>
    <content><![CDATA[<h2 id="类型擦除">类型擦除</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">list.add(<span class="string">&quot;yes&quot;</span>); <span class="comment">// 加入string</span></span><br><span class="line">list.add(<span class="number">233</span>); <span class="comment">// 加入int</span></span><br></pre></td></tr></table></figure>
<p>Java 集合有个缺点：把一个对象“丢进”集合里之后，集合就会“忘记”这个对象的数据类型，当再次取出该对象时，该对象的编译类型就变成了 Object 类型，还需要进行强制类型转换。从 Java 5 开始，Java 引入了“参数化类型”的概念，允许程序在创建集合时指定集合元素的类型，Java 的参数类型被称为泛型。例如：List &lt; String &gt; 只能保存 String 类型的对象</p>
<p>泛型信息只存在于代码编译阶段，在进入 JVM 之前，与泛型相关的信息会被擦除掉。例如：在代码中定义的 List &lt; Object &gt;、List &lt; String &gt; 等类型，在编译之后都会变成 List。在泛型类被类型擦除的时候，之前泛型类中的类型参数部分如果没有指定上限，如 &lt; T &gt; 则会被转译成普通的 Object 类型，如果指定了上限如 &lt; T extends String &gt; 则类型参数就被替换成类型上限</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="number">12</span>);</span><br><span class="line"><span class="comment">//这里直接添加会报错</span></span><br><span class="line">list.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"></span><br><span class="line">Class&lt;? <span class="keyword">extends</span> <span class="title class_">List</span>&gt; clazz = list.getClass();</span><br><span class="line"><span class="type">Method</span> <span class="variable">add</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;add&quot;</span>, Object.class);</span><br><span class="line"><span class="comment">//但是通过反射添加是可以的，这就说明在运行期间所有的泛型信息都会被擦掉</span></span><br><span class="line">add.invoke(list, <span class="string">&quot;kl&quot;</span>);</span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure>
<p><strong>为什么泛型的实现是类型擦除？</strong></p>
<p>主要原因是为了向下兼容，即兼容 Java5 之前的编译的 class 文件，例如：Java1.2 上正在跑的代码可以在 Java5 的 JRE 上运行</p>
<h2 id="常用的通配符">常用的通配符</h2>
<ol>
<li>?：表示不确定的 Java 类型</li>
<li>T（type）：表示具体的一个 Java 类型</li>
<li>K V（key value）：分别代表 Java 键值对中的 Key Value</li>
<li>E（element）：代表 Element</li>
</ol>
<h2 id="限定和非限定通配符">限定和非限定通配符</h2>
<ol>
<li>
<? extends T> 通过确保类型必须是 T 的子类来设定类型的上界
</li>
<li>
<? super T> 通过确保类型必须是 T 的父类来设定类型的下界
</li>
</ol>
<p><strong>List &lt;? extends T&gt; 和 List &lt;? super T&gt; 的区别</strong></p>
<ol>
<li>
<p>List &lt;? extends T&gt; 可以接收任何继承自 T 的类型的 List，通常用于读取操作，确保可以读取为 T 或 T 的子类的对象</p>
</li>
<li>
<p>List &lt;? super T&gt; 可以接收任何 T 的父类构成的 List，通常用于写入操作，确保可以安全地向泛型集合中插入 T 类型的对象</p>
</li>
</ol>
<p>注意：Array 不支持泛型，要用 List 代替 Array，因为 List 可以提供编译器的类型安全保证，而 Array 却不能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(List&lt;? extends Number&gt; list)</span> &#123;</span><br><span class="line">    <span class="type">Number</span> <span class="variable">num</span> <span class="operator">=</span> list.get(<span class="number">0</span>); <span class="comment">// 读取时是安全的，返回类型是 Number 或其子类</span></span><br><span class="line">    <span class="comment">// list.add(1); // 编译错误，不能往其中添加元素</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addToList</span><span class="params">(List&lt;? <span class="built_in">super</span> Integer&gt; list)</span> &#123;</span><br><span class="line">    list.add(<span class="number">1</span>); <span class="comment">// 可以安全地添加 Integer 类型的元素</span></span><br><span class="line">    <span class="comment">// Integer value = list.get(0); // 编译错误，不能安全地读取</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>PECS原则</strong></p>
<ol>
<li>Producer Extends：如果某个对象提供数据（即生产者），使用extends（上界限定符）</li>
<li>Consumer Super：如果某个对象使用数据（即消费者），使用super（下界限定符）</li>
</ol>
<h2 id="协变和逆变">协变和逆变</h2>
<ol>
<li>协变：子类型可以替换父类型</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">List&lt;? <span class="keyword">extends</span> <span class="title class_">Animal</span>&gt; animals;  <span class="comment">// 协变</span></span><br><span class="line">animals = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Dog&gt;();  <span class="comment">// 子类型（Dog）替换父类型（Animal）</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>逆变：父类型可以替换子类型</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">List&lt;? <span class="built_in">super</span> Dog&gt; dogs;       <span class="comment">// 逆变</span></span><br><span class="line">dogs = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Animal&gt;();  <span class="comment">// 父类型（Animal）替换子类型（Dog）</span></span><br></pre></td></tr></table></figure>
<h2 id="使用案例">使用案例</h2>
<h3 id="泛型类">泛型类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型</span></span><br><span class="line"><span class="comment">//在实例化泛型类时，必须指定T的具体类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Generic</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> T key;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Generic</span><span class="params">(T key)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实例化泛型类</span></span><br><span class="line">Generic&lt;Integer&gt; genericInteger = <span class="keyword">new</span> <span class="title class_">Generic</span>&lt;Integer&gt;(<span class="number">123456</span>);</span><br></pre></td></tr></table></figure>
<h3 id="泛型接口">泛型接口</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Generator</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">method</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不指定类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GeneratorImpl</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Generator</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GeneratorImpl</span> <span class="keyword">implements</span> <span class="title class_">Generator</span>&lt;String&gt;&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="泛型方法">泛型方法</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(E[] inputArray)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (E element : inputArray) &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;%s &quot;</span>, element);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建不同类型数组： Integer, Double 和 Character</span></span><br><span class="line">Integer[] intArray = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</span><br><span class="line">String[] stringArray = &#123; <span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;World&quot;</span> &#125;;</span><br><span class="line">printArray(intArray);</span><br><span class="line">printArray(stringArray);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础（8-其他）</title>
    <url>/blog/2025/01/29/%E5%BF%83%E5%BE%97/Java%E5%9F%BA%E7%A1%80/Java%E5%9F%BA%E7%A1%80%EF%BC%888-%E5%85%B6%E4%BB%96%EF%BC%89/</url>
    <content><![CDATA[<h2 id="JDK-和-JRE、JVM">JDK 和 JRE、JVM</h2>
<h3 id="区别">区别</h3>
<ol>
<li>JRE：Java 运行环境，提供了 Java 运行所需的环境，包含了 JVM、核心类库和其他支持运行 Java 程序的文件</li>
<li>JDK：Java 开发工具包，提供了 Java 的开发环境和运行环境。JDK 包含了 JRE，如果只运行 Java 程序，安装 JRE 即可，要编写 Java 程序需安装 JDK</li>
<li>JVM：Java 虚拟机，是整个 Java 实现跨平台的最核心的部分，能够运行以 Java 语言写作的软件程序。所有的 Java 程序会首先被编译为.class 的类文件，这种类文件可以在虚拟机上运行</li>
</ol>
<h3 id="字节码">字节码</h3>
<p>在 Java 中，JVM 可以理解的代码叫做字节码（即扩展名为.class 的文件），它不面向任何特定的处理器，只面向虚拟机。Java 语言通过字节码的方法，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。所以，Java 程序运行时相对来说还是高效的（不过，和 C++，Rust，Go 等语言还是有一定差距的），而且，由于字节码并不针对一种特定的机器，因此，Java 程序无需重新编译便可在多种不同操作系统的计算机上运行</p>
<p><img src="1.png" alt=""></p>
<p><img src="2.png" alt=""></p>
<h3 id="JIT">JIT</h3>
<p>.class-&gt; 机器码，在这一步 JVM 类加载器首先加载字节码文件，然后通过解释器逐行解释执行，这种方式的执行速度会相对比较慢。而且，有些方法和代码块是经常需要被调用的（也就是所谓的热点代码），所以后面引进了 JIT（just-in-time compilation）编译器，而 JIT 属于运行时编译。当 JIT 编译器完成第一次编译后，其会将字节码对应的机器码保存下来，下次可以直接使用</p>
<h2 id="引用和对象">引用和对象</h2>
<ol>
<li><font style="color:rgb(51, 51, 51);"> new Hero();：代表创建了一个 Hero 对象，但是也仅仅是创建了一个对象，没有办法访问它。</font></li>
<li><font style="color:rgb(51, 51, 51);"> Hero h = new Hero();：为了访问这个对象，会使用引用来代表这个对象，h 这个变量是 Hero 类型，又叫做引用。= 指的是 h 这个引用代表右侧创建的对象，在面向对象里，又叫做“指向”</font></li>
<li><font style="color:rgb(51, 51, 51);"> 一个对象引用可以指向 0 个或 1 个对象；一个对象可以有 n 个引用指向它 </font></li>
<li><font style="color:rgb(51, 51, 51);"> 对象的相等一般比较的是内存中存放的内容是否相等 </font></li>
<li><font style="color:rgb(51, 51, 51);"> 引用相等一般比较的是他们指向的内存地址是否相等 </font></li>
</ol>
<h3 id="创建对象的方法">创建对象的方法</h3>
<ol>
<li>使用 new 关键字</li>
<li>使用 Class 类的 newInstance 方法，该方法调用无参的构造器创建对象（反射）：Class.forName.newInstance()</li>
<li>使用 clone()方法</li>
<li>反序列化，例如：调用 ObjectInputStream 类的 readObject()方法</li>
</ol>
<h3 id="值传递和引用传递">值传递和引用传递</h3>
<ol>
<li>值传递是对基本型变量而言的，传递的是该变量的一个副本，改变副本不影响原变量</li>
<li>引用传递一般是对于对象型变量而言的，传递的是该对象地址的一个副本，并不是原对象本身，在方法中对其值进行改变的时候，他的地址没有变，值也就跟着改变了，对引用对象进行操作会同时改变原对象</li>
</ol>
<p>注意：Java 内的传递都是值传递</p>
<h3 id="传递基本类型参数">传递基本类型参数</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">    swap(num1, num2);</span><br><span class="line">    System.out.println(<span class="string">&quot;num1 = &quot;</span> + num1);</span><br><span class="line">    System.out.println(<span class="string">&quot;num2 = &quot;</span> + num2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">    System.out.println(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">    System.out.println(<span class="string">&quot;b = &quot;</span> + b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="3.png" alt=""></p>
<p>a、b 相当于 num1、num2 的副本，副本的内容无论怎么修改，都不会影响到原件本身</p>
<h3 id="传递引用类型参数-1">传递引用类型参数 1</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="type">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line">  System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">  change(arr);</span><br><span class="line">  System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(<span class="type">int</span>[] array)</span> &#123;</span><br><span class="line">  <span class="comment">// 将数组的第一个元素变为0</span></span><br><span class="line">  array[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="4.png" alt=""></p>
<h3 id="传递引用类型参数-2">传递引用类型参数 2</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="comment">// 省略构造函数、Getter&amp;Setter方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Person</span> <span class="variable">xiaoZhang</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;小张&quot;</span>);</span><br><span class="line">    <span class="type">Person</span> <span class="variable">xiaoLi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;小李&quot;</span>);</span><br><span class="line">    swap(xiaoZhang, xiaoLi);</span><br><span class="line">    System.out.println(<span class="string">&quot;xiaoZhang:&quot;</span> + xiaoZhang.getName());</span><br><span class="line">    System.out.println(<span class="string">&quot;xiaoLi:&quot;</span> + xiaoLi.getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(Person person1, Person person2)</span> &#123;</span><br><span class="line">    <span class="type">Person</span> <span class="variable">temp</span> <span class="operator">=</span> person1;</span><br><span class="line">    person1 = person2;</span><br><span class="line">    person2 = temp;</span><br><span class="line">    System.out.println(<span class="string">&quot;person1:&quot;</span> + person1.getName());</span><br><span class="line">    System.out.println(<span class="string">&quot;person2:&quot;</span> + person2.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="5.png" alt=""></p>
<p>swap 方法的参数 person1 和 person2 只是拷贝的实参 xiaoZhang 和 xiaoLi 的地址。因此，person1 和 person2 的互换只是拷贝的两个地址互换罢了，并不会影响到实参 xiaoZhang 和 xiaoLi</p>
<h2 id="克隆">克隆</h2>
<h3 id="为什么要克隆？">为什么要克隆？</h3>
<p>克隆的对象可能包含一些已经修改过的属性，而 new 出来的对象的属性都还是初始化时候的值，所以当需要一个新的对象来保存当前对象的“状态”就靠 clone 方法了，那么把这个对象的临时属性一个一个赋值给我新 new 的对象不也行吗？可以，但是操作麻烦，且 clone 是一个 native 方法，在底层实现的，效率快</p>
<h3 id="如何实现对象的克隆？">如何实现对象的克隆？</h3>
<ol>
<li>实现 Cloneable 接口（为标记接口），重写 Object 类中的 clone()方法（浅克隆）</li>
<li>实现 Serializable 接口，通过对象的序列化和反序列化实现克隆（深克隆）</li>
</ol>
<h3 id="深克隆和浅克隆">深克隆和浅克隆</h3>
<ol>
<li>浅克隆：被复制对象的所有变量都含有与原来的对象相同的值，而所有的对其他对象的引用仍然指向原来的对象</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(Integer id, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Student student;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, student=&quot;</span> + student +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">getStudent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> student;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStudent</span><span class="params">(Student student)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.student = student;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(Integer id, String name, Student student)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.student = student;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Person <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="keyword">return</span> (Person) <span class="built_in">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">1</span>, <span class="string">&quot;stu&quot;</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">per1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">1</span>, <span class="string">&quot;per&quot;</span>, stu);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">per2</span> <span class="operator">=</span> per1.clone();</span><br><span class="line">        System.out.println(per1);</span><br><span class="line">        System.out.println(per2);</span><br><span class="line">        System.out.println(per1.getStudent().getClass()==per2.getStudent().getClass());</span><br><span class="line"></span><br><span class="line">        per1.setName(<span class="string">&quot;person&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu2</span> <span class="operator">=</span> per1.getStudent();</span><br><span class="line">        stu2.setName(<span class="string">&quot;stu2&quot;</span>);</span><br><span class="line">        System.out.println(per1);</span><br><span class="line">        System.out.println(per2);</span><br><span class="line">        System.out.println(per1.getStudent().getClass()==per2.getStudent().getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">结果为：</span></span><br><span class="line"><span class="comment">Person&#123;id=1, name=&#x27;per&#x27;, student=Student&#123;id=1, name=&#x27;stu&#x27;&#125;&#125;</span></span><br><span class="line"><span class="comment">Person&#123;id=1, name=&#x27;per&#x27;, student=Student&#123;id=1, name=&#x27;stu&#x27;&#125;&#125;</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">Person&#123;id=1, name=&#x27;person&#x27;, student=Student&#123;id=1, name=&#x27;stu2&#x27;&#125;&#125;</span></span><br><span class="line"><span class="comment">Person&#123;id=1, name=&#x27;per&#x27;, student=Student&#123;id=1, name=&#x27;stu2&#x27;&#125;&#125;</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>注意：克隆后的值变量会开辟新的内存地址，克隆对象修改值不会影响原来对象。引用类型只会存在一份内存地址，执行 Object 的 clone 方法拷贝的也是引用的复制（这部分的内存空间不一样），但是引用指向的内存空间是一样的，原对象修改变量或者浅拷贝修改引用变量都会引起双方的变化</p>
<ol start="2">
<li>深克隆：拷贝对象和原始对象的引用类型引用不同对象。深拷贝是将对象及值复制过来，两个对象修改其中任意的值另一个值不会改变</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">clone</span><span class="params">()</span>  &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> Student student;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">(String name, <span class="type">int</span> age, Student student)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.student = student;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 覆盖</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">clone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Teacher</span> <span class="variable">t</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            t = (Teacher) <span class="built_in">super</span>.clone();</span><br><span class="line">            t.student = (Student)student.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">getStudent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> student;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStudent</span><span class="params">(Student student)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.student = student;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;学生1&quot;</span>, <span class="number">11</span>);</span><br><span class="line">        <span class="type">Teacher</span> <span class="variable">origin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;老师原对象&quot;</span>, <span class="number">23</span>, s);</span><br><span class="line">        System.out.println(<span class="string">&quot;克隆前的学生姓名：&quot;</span> + origin.getStudent().getName());</span><br><span class="line">        <span class="type">Teacher</span> <span class="variable">clone</span> <span class="operator">=</span> (Teacher) origin.clone();</span><br><span class="line">        <span class="comment">// 更改克隆后的学生信息 更改了姓名</span></span><br><span class="line">        clone.getStudent().setName(<span class="string">&quot;我是克隆对象更改后的学生2&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;克隆后的学生姓名：&quot;</span> + clone.getStudent().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">结果：</span></span><br><span class="line"><span class="comment">克隆前的学生姓名：学生1</span></span><br><span class="line"><span class="comment">克隆后的学生姓名：我是克隆对象更改后的学生2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="switch-语句">switch 语句</h2>
<p>在 switch(expr)中，expr 只能是一个整数表达式或者枚举常量。而整数表达式可以是 int 基本数据类型或者是 Integer 包装类型，由于 byte、short、char 都可以隐式转换为 int，而 long 和 String 类型都不符合 switch 的语法规定，并且不能被隐式地转换为 int 类型，所以它们都不能作用于 switch 语句中。JDK1.7 版本后 switch 就可以作用在 String 上了</p>
<h2 id="short-s1-1-s1-s1-1">short s1 = 1; s1 = s1+1;</h2>
<ol>
<li>对于 short s1 = 1; s1 = s1+1; 来说，在 s1+1 运算时会自动提升表达式的类型为 int，那么将 int 型值赋给 short 型变量，s1 会出现类型转换错误，应改为：s1 =(short)(s1+1)</li>
<li>对于 short s1 = 1; s1+= 1; 来说，+= 是 Java 语言规定的运算符，Java 编译器会对它进行特殊处理，因此可以正确编译</li>
</ol>
<p><strong>注意：(x+= i)不等于(x = x+i)</strong></p>
<ol>
<li>第一个表达式使用的是复合赋值操作符，复合赋值表达式自动地将所执行计算的结果转型为其左侧变量的类型，</li>
<li>如果结果的类型与该变量的类型相同，那么这个转型不会造成任何影响。</li>
<li>如果结果的类型比该变量的类型要宽，那么复合赋值操作符将悄悄地执行一个窄化原生类型转换</li>
</ol>
<h2 id="final、finally-和-finalize-的区别">final、finally 和 finalize 的区别</h2>
<ol>
<li>final 用于声明属性、方法和类，分别表示属性不可变、方法不可覆盖、类不可继承</li>
<li>finally 作为异常处理的一部分，只能在 try/catch 语句中使用，finally 附带一个语句块用来表示这个语句最终一定被执行，经常被用在需要释放资源的情况下</li>
<li>finalize 是 Object 类的一个方法，在垃圾收集器执行的时候会调用被回收对象的 finalize()方法。当垃圾收集器准备好释放对象占用空间时，首先会调用 finalize()方法，并在下一次垃圾回收动作发生时真正回收对象占用的内存</li>
</ol>
<h2 id="BigDecimal">BigDecimal</h2>
<h3 id="为什么会出现-4-0-3-6-0-4000001-这种现象？">为什么会出现 4.0-3.6 = 0.4000001 这种现象？</h3>
<p>2 进制的小数无法精确的表示 10 进制小数，计算机在计算 10 进制小数的过程中要先转换为 2 进制进行计算，这个过程中出现了误差</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">2.0f</span> - <span class="number">1.9f</span>;</span><br><span class="line"><span class="type">float</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">1.8f</span> - <span class="number">1.7f</span>;</span><br><span class="line">System.out.println(a);<span class="comment">// 0.100000024</span></span><br><span class="line">System.out.println(b);<span class="comment">// 0.099999905</span></span><br><span class="line">System.out.println(a == b);<span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<h3 id="使用-BigDecimal-解决精度丢失">使用 BigDecimal 解决精度丢失</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BigDecimal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;1.0&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.9&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">x</span> <span class="operator">=</span> a.subtract(b);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">y</span> <span class="operator">=</span> b.subtract(c);</span><br><span class="line"></span><br><span class="line">System.out.println(x); <span class="comment">/* 0.1 */</span></span><br><span class="line">System.out.println(y); <span class="comment">/* 0.1 */</span></span><br><span class="line">System.out.println(Objects.equals(x, y)); <span class="comment">/* true */</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BigDecimal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;1.0&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.9&quot;</span>);</span><br><span class="line">System.out.println(a.add(b));<span class="comment">// 1.9</span></span><br><span class="line">System.out.println(a.subtract(b));<span class="comment">// 0.1</span></span><br><span class="line">System.out.println(a.multiply(b));<span class="comment">// 0.90</span></span><br><span class="line">System.out.println(a.divide(b));<span class="comment">// 无法除尽，抛出 ArithmeticException 异常</span></span><br><span class="line">System.out.println(a.divide(b, <span class="number">2</span>, RoundingMode.HALF_UP));<span class="comment">// 1.11</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">RoundingMode</span> &#123;</span><br><span class="line">   <span class="comment">// 2.5 -&gt; 3 , 1.6 -&gt; 2</span></span><br><span class="line">   <span class="comment">// -1.6 -&gt; -2 , -2.5 -&gt; -3</span></span><br><span class="line">             UP(BigDecimal.ROUND_UP),</span><br><span class="line">   <span class="comment">// 2.5 -&gt; 2 , 1.6 -&gt; 1</span></span><br><span class="line">   <span class="comment">// -1.6 -&gt; -1 , -2.5 -&gt; -2</span></span><br><span class="line">             DOWN(BigDecimal.ROUND_DOWN),</span><br><span class="line">             <span class="comment">// 2.5 -&gt; 3 , 1.6 -&gt; 2</span></span><br><span class="line">   <span class="comment">// -1.6 -&gt; -1 , -2.5 -&gt; -2</span></span><br><span class="line">             CEILING(BigDecimal.ROUND_CEILING),</span><br><span class="line">             <span class="comment">// 2.5 -&gt; 2 , 1.6 -&gt; 1</span></span><br><span class="line">   <span class="comment">// -1.6 -&gt; -2 , -2.5 -&gt; -3</span></span><br><span class="line">             FLOOR(BigDecimal.ROUND_FLOOR),</span><br><span class="line">       <span class="comment">// 2.5 -&gt; 3 , 1.6 -&gt; 2</span></span><br><span class="line">   <span class="comment">// -1.6 -&gt; -2 , -2.5 -&gt; -3</span></span><br><span class="line">             HALF_UP(BigDecimal.ROUND_HALF_UP),</span><br><span class="line">   <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础（IO流）</title>
    <url>/blog/2025/01/12/%E5%BF%83%E5%BE%97/Java%E5%9F%BA%E7%A1%80/Java%E5%9F%BA%E7%A1%80%EF%BC%88IO%E6%B5%81%EF%BC%89/</url>
    <content><![CDATA[<h2 id="IO-流分类">IO 流分类</h2>
<table>
<thead>
<tr>
<th>分类</th>
<th>字节输入流</th>
<th>字节输出流</th>
<th>字符输入流</th>
<th>字符输出流</th>
</tr>
</thead>
<tbody>
<tr>
<td>抽象基类</td>
<td>InputStream</td>
<td>OutputStream</td>
<td>Reader</td>
<td>Writer</td>
</tr>
<tr>
<td>访问文件</td>
<td>FileInputStream</td>
<td>FileOutputStream</td>
<td>FileReader</td>
<td>FileWriter</td>
</tr>
<tr>
<td>访问数组</td>
<td>ByteArrayInputStream</td>
<td>ByteArrayOutputStream</td>
<td>CharArrayReader</td>
<td>CharArrayWriter</td>
</tr>
<tr>
<td>访问管道</td>
<td>PipedInputStream</td>
<td>PipedOutputStream</td>
<td>PipedReader</td>
<td>PipedWriter</td>
</tr>
<tr>
<td>访问字符串</td>
<td></td>
<td></td>
<td>StringReader</td>
<td>StringWriter</td>
</tr>
<tr>
<td>缓冲流</td>
<td>BufferedInputStream</td>
<td>BufferedOutputStream</td>
<td>BufferedReader</td>
<td>BufferedWriter</td>
</tr>
<tr>
<td>转换流</td>
<td></td>
<td></td>
<td>InputStreamReader</td>
<td>OutputStreamWriter</td>
</tr>
<tr>
<td>对象流</td>
<td>ObjectInputStream</td>
<td>ObjectOutputStream</td>
<td></td>
<td></td>
</tr>
<tr>
<td>打印流</td>
<td></td>
<td>PrintStream</td>
<td></td>
<td>PrintWriter</td>
</tr>
<tr>
<td>推回输入流</td>
<td>PushbackInputStream</td>
<td></td>
<td>PushbackReader</td>
<td></td>
</tr>
<tr>
<td>特殊流</td>
<td>DataInputStream</td>
<td>DataOutputStream</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="字节流和字符流的区别">字节流和字符流的区别</h2>
<p>字节流按 8 位传输，以字节为单位输入输出数据，字符流按 16 位传输，以字符为单位输入输出数据。但不管文件读写还是网络发送接收，信息的最小存储单元都是字节</p>
<table>
<thead>
<tr>
<th>项</th>
<th>字节流</th>
<th>字符流</th>
</tr>
</thead>
<tbody>
<tr>
<td>是否使用缓冲</td>
<td>否</td>
<td>是<br />若频繁对一个资源进行 IO 操作，会先把需要操作的数据暂时放入内存中，以后直接从内存中读取数据，这样可以避免多次的 IO 操作，提高效率</td>
</tr>
<tr>
<td>存在位置</td>
<td>可存在于文件、内存中<br />硬盘中的所有文件都是以字节形式存在的</td>
<td>只存在于内存中</td>
</tr>
<tr>
<td>使用场景</td>
<td>适合操作文本文件之外的文件<br />例如：图片、音频、视频</td>
<td>适合操作文本文件时使用（效率高，因为有缓存）</td>
</tr>
<tr>
<td>Java 相关类</td>
<td>InputStream、OutputStream</td>
<td>Reader、Writer</td>
</tr>
</tbody>
</table>
<h2 id="Java-序列化">Java 序列化</h2>
<ol>
<li>对象的序列化（Serialize），是指将对象转换为字节流的过程</li>
<li>对象的反序列化（Deserialize），则是指将字节流转换为对象的过程</li>
</ol>
<p>作用：序列化机制可以将对象转换成字节序列，这些字节序列可以保存在磁盘上，也可以在网络中传输，并允许程序将这些字节序列再次恢复成原来的对象。</p>
<h2 id="Serializable-接口">Serializable 接口</h2>
<p>若对象要支持序列化机制，则它的类需要实现 Serializable 接口，该接口是一个标记接口，它没有提供任何方法，只是标明类是可以序列化的（除了 String、数组和枚举之外，如果实现了这个接口就走 writerOrdinaryObject，否则序列化就抛出异常）。</p>
<p><strong>序列化实现方式</strong></p>
<p>若要实现序列化，则需要使用对象流 ObjectInputStream 和 ObjectOutputStream。其中，在序列化时需要调用 ObjectOutputStream 对象的 writeObject()方法，以输出对象序列。在反序列化时需要调用 OjectInputStream 对象的 readObject()方法，将对象序列恢复为对象</p>
<p><strong>Serializable 接口为什么需要定义 serialVersionUID 变量？</strong></p>
<p>serialVersionUID 代表序列化的版本，通过定义类的序列化版本，在反序列化时，只要对象中所存的版本和当前类的版本一致，就允许做恢复数据的操作，否则将会抛出序列化版本不一致的错误</p>
<p>serialVersionUID 的值并不重要，无论是 1L 还是 idea 自动生成的，只要序列化的时候对象的 serialVersionUID 和反序列化的时候对象的 serialVersionUID 一致的话就行</p>
<p>如果不定义序列化版本，在反序列化时可能出现冲突的情况：</p>
<ol>
<li>创建该类的实例，并将这个实例序列化，保存在磁盘上</li>
<li>升级这个类，例如：增加、删除、修改这个类的成员变量</li>
<li>反序列化该类的实例，即从磁盘上恢复修改之前保存的数据</li>
</ol>
<p>在第 3 步恢复数据的时候，当前的类已经和序列化的数据的格式产生了冲突，可能会发生各种意想不到的问题。增加了序列化版本之后，在这种情况下则可以抛出异常，以提示这种矛盾的存在，提高数据的安全性</p>
<h2 id="transient-关键字">transient 关键字</h2>
<p>作用：阻止实例中那些用此关键字修饰的变量序列化，当对象被反序列化时，被 transient 修饰的变量值不会被持久化和恢复（即对于不想进行序列化的字段，可以使用 transient 关键字修饰）</p>
<p>注意：</p>
<ol>
<li>transient 只能修饰变量，不能修饰类和方法</li>
<li>transient 修饰的变量，在反序列化后变量值将会被置成类型的默认值。例如，如果是修饰 int 类型，那么反序列化后结果就是 0</li>
<li>static 变量属于类而不属于任何对象，所以无论有没有 transient 关键字修饰，均不会被序列化</li>
</ol>
<h2 id="怎么用流打开一个大文件？">怎么用流打开一个大文件？</h2>
<p>打开大文件，应避免直接将文件中的数据全部读取到内存中，可以采取分次读取的方式</p>
<ol>
<li>使用缓冲流。缓冲流内部维护了一个缓冲区，通过与缓冲区的交互，减少与设备的交互次数。使用缓冲输入流时，它每次会读取一批数据将缓冲区填满，每次调用读取方法并不是直接从设备取值，而是从缓冲区取值，当缓冲区为空时，它会再一次读取数据，将缓冲区填满。使用缓冲输出流时，每次调用写入方法并不是直接写入到设备，而是写入缓冲区，当缓冲区填满时它会自动刷入设备</li>
<li>使用 NIO。NIO 采用内存映射文件的方式来处理输入/输出，NIO 将文件或文件的一段区域映射到内存中，这样就可以像访问内存一样来访问文件了（这种方式模拟了操作系统上的虚拟内存的概念），通过这种方式来进行输入/输出比传统的输入/输出要快得多</li>
</ol>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础（反射）</title>
    <url>/blog/2025/01/13/%E5%BF%83%E5%BE%97/Java%E5%9F%BA%E7%A1%80/Java%E5%9F%BA%E7%A1%80%EF%BC%88%E5%8F%8D%E5%B0%84%EF%BC%89/</url>
    <content><![CDATA[<h2 id="什么是反射？">什么是反射？</h2>
<p>Java 属于先编译再运行的语言，程序中对象的类型在编译期就确定下来了，而当程序在运行时可能需要动态加载某些类，这些类因为之前用不到，所以没有加载到 JVM。通过反射可以在运行时动态地创建对象并调用其属性，不需要提前在编译期知道运行的对象是谁</p>
<p>Java 反射机制的核心是在程序运行时动态加载类并获取类的详细信息，从而操作类或对象的属性或方法，本质是 JVM 得到 class 对象之后，从而获取对象的各种信息</p>
<h2 id="为什么需要反射？">为什么需要反射？</h2>
<ol>
<li>
<p>在编译阶段不知道哪个类名，要在运行期从配置文件读取类名，这时候就没有硬编码</p>
</li>
<li>
<p>Java 程序中的对象在运行时可以表现为两种类型，即编译时类型和运行时类型。</p>
</li>
</ol>
<p>例如 <code>Person p = new Student();</code> ，这行代码将会生成一个 p 变量，该变量的编译时类型为 Person，运行时类型为 Student。有时程序在运行时接收到外部传入的一个对象，该对象的编译时类型是 Object，但程序又需要调用该对象的运行时类型的方法，这就要求程序需要在运行时发现对象和类的真实信息</p>
<ul>
<li>假设在编译时和运行时都完全知道类型的具体信息，在这种情况下，可以先使用 instanceof 运算符进行判断，再利用强制类型转换将其转换成其运行时类型的变量即可。</li>
<li>编译时根本无法预知该对象和类可能属于哪些类，程序只依靠运行时信息来发现该对象和类的真实信息，这就必须使用反射。</li>
</ul>
<h2 id="使用场景">使用场景</h2>
<ol>
<li>不能明确接口调用哪个函数，需要根据传入的参数在运行时决定</li>
<li>不能明确传入函数的参数类型，需要在运行时处理任意对象</li>
<li>用 JDBC 连接数据库时使用 Class.forName()通过反射加载数据库的驱动程序</li>
</ol>
<p>项目底层有时用 MySQL，有时用 Oracle，需要动态地根据实际情况加载驱动类，假设 <code>com.java.dbtest.mysqlConnection</code>，<code>com.java.dbtest.oracleConnection</code> 要用这两个类，这时候程序就写得比较动态化，通过 <code>Class tc = Class.forName(&quot;com.java.dbtest.TestConnection&quot;);</code> 类的全类名让 JVM 在服务器中找到并加载这个类，而如果是 Oracle，则传入的参数就变成另一个了</p>
<ol start="4">
<li>Spring 框架也用到反射机制</li>
</ol>
<p>Spring 通过 XML 配置装载 Bean 的过程：</p>
<ul>
<li>将程序内所有 XML 或 Properties 配置文件加载入内存中</li>
<li>Java 类里面解析 XML 或 Properties 里面的内容，得到对应实体类的字节码字符串以及相关的属性信息</li>
<li>使用反射机制，根据这个字符串获得某个类的 Class 实例</li>
<li>动态配置实例的属性</li>
</ul>
<h2 id="类加载器">类加载器</h2>
<p>ClassLoader：负责加载类的对象</p>
<p>Java 运行时具有以下内置类加载器：</p>
<ol>
<li>Bootstrap class loader：虚拟机的内置类加载器，通常表示为 null，并且没有父加载器</li>
<li>Platform class loader：平台类加载器可以看到所有平台类，平台类包括由平台类加载器或其祖先定义的 Java  SE 平台 API，其实现类和 JDK 特定的运行时类</li>
<li>System class loader：应用程序类加载器，系统类加载器通常用于定义应用程序类路径，模块路径和 JDK 特定工具上的类</li>
</ol>
<p>类加载器的继承关系：System 的父加载器为 Platform，而 Platform 的父加载器为 Bootstrap</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 返回用于委派的系统类加载器</span></span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">systemClassLoader</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader();</span><br><span class="line">    System.out.println(systemClassLoader);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回父类加载器进行委派</span></span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">parent</span> <span class="operator">=</span> systemClassLoader.getParent();</span><br><span class="line">    System.out.println(parent);</span><br><span class="line"></span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">parent1</span> <span class="operator">=</span> parent.getParent();</span><br><span class="line">    System.out.println(parent1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用案例">使用案例</h2>
<h3 id="获取-Class-对象的方式">获取 Class 对象的方式</h3>
<ol>
<li>Class.forName(“全类名”)：将字节码文件加载进内存，返回 class 对象</li>
<li>类型.class：通过类名的属性 class 获取</li>
<li>对象.getClass()：getClass()方法在 Object 类中定义</li>
<li>类型.TYPE</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name=<span class="string">&quot;学生&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name=<span class="string">&quot;老师&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">aClass</span> <span class="operator">=</span> person.getClass();</span><br><span class="line">        System.out.println(aClass);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">aClass1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.reflect.Student&quot;</span>);</span><br><span class="line">        System.out.println(aClass1);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">aClass2</span> <span class="operator">=</span> Student.class;</span><br><span class="line">        System.out.println(aClass2);</span><br><span class="line"></span><br><span class="line">        System.out.println(aClass == aClass1);</span><br><span class="line">        System.out.println(aClass == aClass2);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">type</span> <span class="operator">=</span> Integer.TYPE;</span><br><span class="line">        System.out.println(type);</span><br><span class="line">        </span><br><span class="line">        <span class="type">Class</span> <span class="variable">integerClass</span> <span class="operator">=</span> Integer.class;</span><br><span class="line">        System.out.println(integerClass);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结论：同一个字节码文件（*.class）在一次程序运行过程中，只会被加载一次，不论通过哪一种方式获取的 Class 对象都是同一个</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//只要元素类型与维度一样，就是同一个class</span></span><br><span class="line"><span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span>[] b = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">100</span>];</span><br><span class="line">System.out.println(a.getClass().hashCode());</span><br><span class="line">System.out.println(b.getClass().hashCode());</span><br></pre></td></tr></table></figure>
<h3 id="获取成员变量">获取成员变量</h3>
<p>Field：成员变量</p>
<ol>
<li>Field [] getFields()：获取所有 public 修饰的成员变量</li>
<li>Field getField(String name)：获取指定名称的 public 修饰的成员变量</li>
<li>Field [] getDeclaredFields()：获取所有的成员变量，不考虑修饰符</li>
<li>Field getDeclaredField(String name)：获取指定名称的成员变量，不考虑修饰符</li>
<li>void set(Object obj, Object value)：设置值</li>
<li>get(Object obj)：获取值</li>
<li>setAccessible(true)：暴力反射（忽略访问权限修饰符的安全检查）</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> a;</span><br><span class="line">    <span class="keyword">public</span> String b;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">(String s)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃&quot;</span>+s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">personClass</span> <span class="operator">=</span> Person.class;</span><br><span class="line">    Field[] fields = personClass.getFields();</span><br><span class="line">    <span class="keyword">for</span> (Field field:fields)&#123;</span><br><span class="line">        System.out.println(field);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">Field</span> <span class="variable">a</span> <span class="operator">=</span> personClass.getField(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    System.out.println(a);</span><br><span class="line">    <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> a.get(person);</span><br><span class="line">    System.out.println(o);</span><br><span class="line">	System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    a.set(person,<span class="number">12</span>);</span><br><span class="line">    System.out.println(person);</span><br><span class="line">    System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Field[] declaredFields = personClass.getDeclaredFields();</span><br><span class="line">    <span class="keyword">for</span> (Field field:declaredFields)&#123;</span><br><span class="line">        System.out.println(field);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">Field</span> <span class="variable">a1</span> <span class="operator">=</span> personClass.getDeclaredField(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    a1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">o1</span> <span class="operator">=</span> a1.get(person);</span><br><span class="line">    System.out.println(o1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="获取构造方法">获取构造方法</h3>
<p>Constructor：构造方法</p>
<ol>
<li>Constructor &lt;?&gt; []  getConstructors()</li>
<li>Constructor &lt; T &gt;  getConstructor(类 &lt;?&gt;…  parameterTypes)</li>
<li>Constructor &lt; T &gt;  getDeclaredConstructor(类 &lt;?&gt;…  parameterTypes)</li>
<li>Constructor &lt;?&gt; []  getDeclaredConstructors()</li>
</ol>
<p>创建对象：T  newInstance(Object…  initargs)</p>
<p>如果使用空参数构造方法创建对象，操作可以简化：Class 对象.newInstance()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">personClass</span> <span class="operator">=</span> Person.class;</span><br><span class="line">    <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> personClass.getConstructor(String.class, <span class="type">int</span>.class);</span><br><span class="line">    System.out.println(constructor);</span><br><span class="line">    </span><br><span class="line">    <span class="type">Object</span> <span class="variable">dad</span> <span class="operator">=</span> constructor.newInstance(<span class="string">&quot;dad&quot;</span>, <span class="number">12</span>);</span><br><span class="line">    System.out.println(dad);</span><br><span class="line">    System.out.println(<span class="string">&quot;---------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">Constructor</span> <span class="variable">constructor1</span> <span class="operator">=</span> personClass.getConstructor();</span><br><span class="line">    System.out.println(constructor1);</span><br><span class="line">    </span><br><span class="line">    <span class="type">Object</span> <span class="variable">dad1</span> <span class="operator">=</span> constructor1.newInstance();</span><br><span class="line">    System.out.println(dad1);</span><br><span class="line">    System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> personClass.newInstance();</span><br><span class="line">    System.out.println(o);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="获取成员方法">获取成员方法</h3>
<p>Method：方法对象</p>
<ol>
<li>Method []  getMethods()：获取所有 public 修饰的方法</li>
<li>Method getMethod(String name, 类 &lt;?&gt;…  parameterTypes)</li>
<li>Method [] getDeclaredMethods()</li>
<li>Method getDeclaredMethod(String name, 类 &lt;?&gt;…  parameterTypes)</li>
</ol>
<p>执行方法：Object  invoke(Object  obj，Object…  args)</p>
<p>获取方法名称：String  getName()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">personClass</span> <span class="operator">=</span> Person.class;</span><br><span class="line">    <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> personClass.getMethod(<span class="string">&quot;eat&quot;</span>);</span><br><span class="line">    System.out.println(method);</span><br><span class="line">    </span><br><span class="line">    Person person=<span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    method.invoke(person);</span><br><span class="line">    </span><br><span class="line">    <span class="type">Method</span> <span class="variable">eat</span> <span class="operator">=</span> personClass.getMethod(<span class="string">&quot;eat&quot;</span>, String.class);</span><br><span class="line">    eat.invoke(person,<span class="string">&quot;饭&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Method[] methods = personClass.getMethods();</span><br><span class="line">    <span class="keyword">for</span> (Method method1:methods)&#123;</span><br><span class="line">        System.out.println(method1);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> method1.getName();</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">&quot;------------------&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> personClass.getName();</span><br><span class="line">    System.out.println(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="获取类名">获取类名</h3>
<ol>
<li>String  getName()：获取包名+类名</li>
<li>String  getSimpleName()：获取类名</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test06</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">aClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.reflect.Person&quot;</span>);</span><br><span class="line">        <span class="comment">//获取包名+类名</span></span><br><span class="line">        System.out.println(aClass.getName());</span><br><span class="line">        <span class="comment">//获取类名</span></span><br><span class="line">        System.out.println(aClass.getSimpleName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="反射效率">反射效率</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test07</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span>&#123;</span><br><span class="line">        User user=<span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100000000</span>; i++) &#123;</span><br><span class="line">            user.getName();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> end=System.currentTimeMillis();</span><br><span class="line">        System.out.println(end-start);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">        User user=<span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">aClass</span> <span class="operator">=</span> user.getClass();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">getName</span> <span class="operator">=</span> aClass.getDeclaredMethod(<span class="string">&quot;getName&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100000000</span>; i++) &#123;</span><br><span class="line">            getName.invoke(user,<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> end=System.currentTimeMillis();</span><br><span class="line">        System.out.println(end-start);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">        User user=<span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">aClass</span> <span class="operator">=</span> user.getClass();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">getName</span> <span class="operator">=</span> aClass.getDeclaredMethod(<span class="string">&quot;getName&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        getName.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100000000</span>; i++) &#123;</span><br><span class="line">            getName.invoke(user,<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> end=System.currentTimeMillis();</span><br><span class="line">        System.out.println(end-start);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InvocationTargetException, NoSuchMethodException, IllegalAccessException &#123;</span><br><span class="line">        test01();</span><br><span class="line">        test02();</span><br><span class="line">        test03();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：设置 setAccessible()能使加快速率</p>
<h3 id="获取父类类型">获取父类类型</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">aClass1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.reflect.Student&quot;</span>);</span><br><span class="line">System.out.println(aClass1);</span><br><span class="line"></span><br><span class="line"><span class="type">Class</span> <span class="variable">superclass</span> <span class="operator">=</span> aClass1.getSuperclass();</span><br><span class="line">System.out.println(superclass);</span><br></pre></td></tr></table></figure>
<p>注意：</p>
<ol>
<li>.getClass().getResource(fileName)：表示只会在当前调用类所在的同一路径下查找该 fileName 文件</li>
<li>.getClass().getClassLoader().getResource(fileName)：表示只会在根目录下（/）查找该文件</li>
<li>fileName 如果前面加“/”，如“/fileName”，则表示绝对路径，取/目录下的该文件；</li>
<li>fileName 如果前面没有加“/”，如“fileName”，则表示相对路径，取与调用类同一路径下的该文件</li>
<li>如果路径中包含包名，getClass().getResource(“com/xxx/1.xml”); 包名的层级使用“/”隔开，而非“.”</li>
</ol>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础（异常）</title>
    <url>/blog/2025/01/16/%E5%BF%83%E5%BE%97/Java%E5%9F%BA%E7%A1%80/Java%E5%9F%BA%E7%A1%80%EF%BC%88%E5%BC%82%E5%B8%B8%EF%BC%89/</url>
    <content><![CDATA[<p><img src="2.png" alt=""></p>
<h2 id="Throwable-常用方法">Throwable 常用方法</h2>
<ol>
<li>String getMessage()：返回异常发生时的简要描述</li>
<li>String toString()：返回异常发生时的详细信息</li>
<li>String getLocalizedMessage()：返回异常对象的本地化信息。使用 Throwable 的子类覆盖这个方法，可以生成本地化信息。如果子类没有覆盖该方法，则该方法返回的信息与 getMessage()返回的结果相同</li>
<li>void printStackTrace()：在控制台上打印 Throwable 对象封装的异常信息</li>
</ol>
<h2 id="Error-和-Exception-的区别">Error 和 Exception 的区别</h2>
<ol>
<li>Error 类：表示严重的错误，一般是指与虚拟机相关的问题，如：内存耗尽（OutOfMemoryError）、栈溢出（StackOverflowError）、系统崩溃、虚拟机错误等，这类错误将会导致应用程序中断，仅靠程序本身无法恢复和预防</li>
<li>Exception 类：表示程序可以处理的异常，可以捕获且可能恢复。遇到这类异常，应该尽可能处理异常，使程序恢复运行，而不应该随意终止异常。分为 Unchecked Exception（运行时异常，可以不处理）和 Checked Exception（检查时异常，必须处理）</li>
</ol>
<p><strong>运行时异常</strong></p>
<p>Java 编译器不会检查它，当程序中出现此类错误时，即使没有对异常进行显式处理，也能够编译通过</p>
<table>
<thead>
<tr>
<th>异常</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>ArithmeticException</td>
<td>算数运算异常，由于除数为 0 引起的异常</td>
</tr>
<tr>
<td>ClassCastException</td>
<td>当试图将对象强制转换为不是实例的子类时，抛出该异常</td>
</tr>
<tr>
<td>ArrayStoreException</td>
<td>由于数组存储空间不够引起的异常</td>
</tr>
<tr>
<td>IndexOutOfBoundsException</td>
<td>指示某排序索引（例如对数组、字符串或向量的排序）超出范围时抛出</td>
</tr>
<tr>
<td>ConcurrentModificationException</td>
<td>并发修改异常</td>
</tr>
<tr>
<td>NullPointerException</td>
<td>当应用程序试图访问空对象时，则抛出该异常</td>
</tr>
</tbody>
</table>
<p><strong>检查时异常（编译时异常）</strong></p>
<p>非 RuntimeException 及其子类的异常，都属于 Exception 及其子类。这类异常，是程序必须进行处理的异常，否则不能被编译，即需要显式处理</p>
<table>
<thead>
<tr>
<th>异常</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>SQLException</td>
<td>提供关于数据库访问错误或其他错误信息的异常</td>
</tr>
<tr>
<td>FileNotFoundException</td>
<td>当试图打开指定路径名表示的文件失败时，抛出此异常</td>
</tr>
<tr>
<td>IOException</td>
<td>当发生某种 I/O 异常时，抛出此异常。此类是失败或中断的 I/O 操作生成的异常的通用类</td>
</tr>
<tr>
<td>IllegalArgumentException</td>
<td>抛出的异常表明向方法传递了一个不合法或不正确的参数</td>
</tr>
<tr>
<td>ClassNotFoundExcepton</td>
<td>找不到具有指定名称的类的定义</td>
</tr>
</tbody>
</table>
<h2 id="throw-和-throws-的区别">throw 和 throws 的区别</h2>
<ol>
<li>throw：在方法体内部，表示抛出异常，由方法体内部的语句处理；throw 是具体向外抛出异常的动作，所以它抛出的是一个异常实例</li>
<li>throws：在方法声明后面，表示如果抛出异常，由该方法的调用者来进行异常的处理；表示出现异常的可能性，并不一定会发生这种异常</li>
</ol>
<h2 id="try-catch-finally">try-catch-finally</h2>
<h3 id="finally-代码块是否一定会执行？">finally 代码块是否一定会执行？</h3>
<p>当遇到下面情况不会执行：</p>
<ol>
<li>当程序在进入 try 语句块之前就出现异常时会直接结束</li>
<li>当程序在 try 块中强制退出时，如使用 System.exit(0)，也不会执行 finally 块中的代码</li>
</ol>
<p>注意：</p>
<ol>
<li>当有异常发生时，catch 和 finally 进行处理后程序就结束了；</li>
<li>当没有异常发生时，在执行完 finally 中的代码后，后面代码会继续执行；</li>
<li>当 try/catch 语句块中有 return 时，finally 语句块中的代码会在 return 之前执行；程序在执行到 return 时会首先将返回值存储在一个指定的位置，其次去执行 finally，最后在返回</li>
<li>当 try/catch/finally 块中都有 return 时，finally 块中的 return 语句会覆盖 try/catch 模块中的 return 语句。对基本数据类型，在 finally 块中改变 return 的值没有任何影响，直接覆盖掉；对引用类型有影响的，返回的是在 finally 对前面 return 语句返回对象的修改值</li>
</ol>
<h3 id="try-catch-finally-中哪个部分可以省略？">try-catch-finally 中哪个部分可以省略？</h3>
<p>可以的情况：</p>
<ol>
<li>try-catch</li>
<li>try-finally</li>
<li>try-catch-finally</li>
</ol>
<p>注意：可以省略 catch 或 finally，但是 catch 和 finally 不可以同时省略</p>
<h2 id="try-with-resources">try-with-resources</h2>
<ol>
<li>适用范围（资源的定义）：任何实现 java.lang.AutoCloseable 或者 java.io.Closeable 的对象</li>
<li>关闭资源和 finally 块的执行顺序：在 try-with-resources 语句中，任何 catch 或 finally 块在声明的资源关闭后运行</li>
</ol>
<p><strong>使用 try-catch-finally 需要手动关闭资源</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//读取文本文件的内容</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    scanner = <span class="keyword">new</span> <span class="title class_">Scanner</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D://read.txt&quot;</span>));</span><br><span class="line">    <span class="keyword">while</span> (scanner.hasNext()) &#123;</span><br><span class="line">        System.out.println(scanner.nextLine());</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (scanner != <span class="literal">null</span>) &#123;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>使用 Java7 之后的 try-with-resources 改造</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;test.txt&quot;</span>))) &#123;</span><br><span class="line">    <span class="keyword">while</span> (scanner.hasNext()) &#123;</span><br><span class="line">        System.out.println(scanner.nextLine());</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException fnfe) &#123;</span><br><span class="line">    fnfe.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过使用分号分隔，可以在 try-with-resources 块中声明多个资源</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">BufferedInputStream</span> <span class="variable">bin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;test.txt&quot;</span>)));</span><br><span class="line">    <span class="type">BufferedOutputStream</span> <span class="variable">bout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;out.txt&quot;</span>)))) &#123;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">    <span class="keyword">while</span> ((b = bin.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">        bout.write(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="其他">其他</h2>
<h3 id="主线程可以捕获到子线程的异常吗？">主线程可以捕获到子线程的异常吗？</h3>
<ol>
<li>线程设计的理念：“线程的问题应该线程自己本身来解决，而不要委托到外部”</li>
<li>正常情况下，如果不做特殊的处理，在主线程中是不能够捕获到子线程中的异常的。如果想要在主线程中捕获子线程的异常，可以使用 Thread 的静态方法 <code>Thread.setDefaultUncaughtExceptionHandler(new MyUncaughtExceptionHandle());</code></li>
</ol>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>List（2-LinkedList）</title>
    <url>/blog/2024/12/10/%E5%BF%83%E5%BE%97/Java%E9%9B%86%E5%90%88/List%EF%BC%882-LinkedList%EF%BC%89/</url>
    <content><![CDATA[<h2 id="属性和接口">属性和接口</h2>
<p>LinkedList 是双向链表，可通过头和尾节点遍历查询指定的数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedList</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractSequentialList</span>&lt;E&gt; </span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt;, Deque&lt;E&gt;, Cloneable, java.io.Serializable &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//表示链表的长度</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//链表的第一个节点</span></span><br><span class="line">    <span class="keyword">transient</span> Node&lt;E&gt; first;</span><br><span class="line">    <span class="comment">//链表的最后一个节点</span></span><br><span class="line">    <span class="keyword">transient</span> Node&lt;E&gt; last;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;E&gt; &#123;</span><br><span class="line">        <span class="comment">//数据域</span></span><br><span class="line">        E item;</span><br><span class="line">        <span class="comment">//指向下一个节点</span></span><br><span class="line">        Node&lt;E&gt; next;</span><br><span class="line">        <span class="comment">//指向上一个节点</span></span><br><span class="line">        Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造方法</span></span><br><span class="line">        Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">            <span class="built_in">this</span>.item = element;</span><br><span class="line">            <span class="built_in">this</span>.next = next;</span><br><span class="line">            <span class="built_in">this</span>.prev = prev;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="构造方法">构造方法</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedList</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>();</span><br><span class="line">    addAll(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>传入集合时，会调用 addAll 方法初始化链表信息</p>
<h2 id="插入">插入</h2>
<ol>
<li>从头部或尾部插入元素</li>
</ol>
<p><img src="1.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//从链表尾部插入元素</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    linkLast(e);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">linkLast</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">    <span class="comment">//e 的前驱节点为 l，后继节点为 null</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(l, e, <span class="literal">null</span>);</span><br><span class="line">    last = newNode;</span><br><span class="line">    <span class="comment">//如果头节点为 null，则设置为新节点</span></span><br><span class="line">    <span class="keyword">if</span> (l == <span class="literal">null</span>)</span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        l.next = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从链表头部插入元素</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFirst</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    linkFirst(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">linkFirst</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(<span class="literal">null</span>, e, f);</span><br><span class="line">    first = newNode;</span><br><span class="line">    <span class="keyword">if</span> (f == <span class="literal">null</span>)</span><br><span class="line">        last = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        f.prev = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从链表尾部插入元素</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addLast</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    linkLast(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>从指定位置插入元素</li>
</ol>
<p><img src="2.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">    <span class="comment">//判断 index 下标是否越界</span></span><br><span class="line">    checkPositionIndex(index);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断插入的位置</span></span><br><span class="line">    <span class="keyword">if</span> (index == size)</span><br><span class="line">        linkLast(element);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        linkBefore(element, node(index));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">checkPositionIndex</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isPositionIndex(index))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(outOfBoundsMsg(index));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isPositionIndex</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">linkBefore</span><span class="params">(E e, Node&lt;E&gt; succ)</span> &#123;</span><br><span class="line">    <span class="comment">//找到 succ 的上一个节点</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; pred = succ.prev;</span><br><span class="line">    <span class="comment">//新节点插入到前继节点 pred, 后继节点 succ 之间</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(pred, e, succ);</span><br><span class="line">    <span class="comment">//后继节点的 prev 指向新节点</span></span><br><span class="line">    succ.prev = newNode;</span><br><span class="line">    <span class="comment">//前继节点 pred 为空，则新节点作为首节点 first，否则把前一个节点的 next 指向新节点</span></span><br><span class="line">    <span class="keyword">if</span> (pred == <span class="literal">null</span>)</span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        pred.next = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Node&lt;E&gt; <span class="title function_">node</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="comment">//如果 index &lt; size/2，从前半部分找</span></span><br><span class="line">    <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">        Node&lt;E&gt; x = first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">            x = x.next;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;E&gt; x = last;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> size - <span class="number">1</span>; i &gt; index; i--)</span><br><span class="line">            x = x.prev;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="查找">查找</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="comment">//判断 index 下标是否越界</span></span><br><span class="line">    checkElementIndex(index);</span><br><span class="line">    <span class="keyword">return</span> node(index).item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">checkElementIndex</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isElementIndex(index))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(outOfBoundsMsg(index));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isElementIndex</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> index &gt;= <span class="number">0</span> &amp;&amp; index &lt; size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="删除">删除</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="comment">//判断 index 下标是否越界</span></span><br><span class="line">    checkElementIndex(index);</span><br><span class="line">    <span class="keyword">return</span> unlink(node(index));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">E <span class="title function_">unlink</span><span class="params">(Node&lt;E&gt; x)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">E</span> <span class="variable">element</span> <span class="operator">=</span> x.item;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; next = x.next;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; prev = x.prev;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//prev 为空，说明移除的节点是头节点</span></span><br><span class="line">    <span class="keyword">if</span> (prev == <span class="literal">null</span>) &#123;</span><br><span class="line">        first = next;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        prev.next = next;</span><br><span class="line">        x.prev = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//next 为空，说明移除的节点是尾结点</span></span><br><span class="line">    <span class="keyword">if</span> (next == <span class="literal">null</span>) &#123;</span><br><span class="line">        last = prev;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        next.prev = prev;</span><br><span class="line">        x.next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    x.item = <span class="literal">null</span>;</span><br><span class="line">    size--;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java集合</tag>
      </tags>
  </entry>
  <entry>
    <title>List（1-ArrayList）</title>
    <url>/blog/2024/12/09/%E5%BF%83%E5%BE%97/Java%E9%9B%86%E5%90%88/List%EF%BC%881-ArrayList%EF%BC%89/</url>
    <content><![CDATA[<h2 id="属性和接口">属性和接口</h2>
<ol>
<li>RandomAccess 是一个标志接口，表明实现这个接口的 List 集合是支持快速随机访问的。在 ArrayList 中，我们即可以通过元素的序号快速获取元素对象，这就是快速随机访问</li>
<li>ArrayList 实现了 Cloneable 接口，即覆盖了函数 clone()，能被克隆</li>
<li>ArrayList 实现了 Serializable 接口，这意味着 ArrayList 支持序列化，能通过序列化去传输</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayList</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractList</span>&lt;E&gt; </span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable&#123;</span><br><span class="line">    <span class="comment">// 默认初始容量大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_CAPACITY</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 空数组（用于空实例）。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用于默认大小空实例的共享空数组实例。</span></span><br><span class="line">    <span class="comment">//我们把它从 EMPTY_ELEMENTDATA 数组中区分出来，以知道在添加第一个元素时容量需要增加多少。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存 ArrayList 数据的数组</span></span><br><span class="line">    <span class="keyword">transient</span> Object[] elementData;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ArrayList 所包含的元素个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 要分配的最大数组大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_ARRAY_SIZE</span> <span class="operator">=</span> Integer.MAX_VALUE - <span class="number">8</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>RandomAccess 接口</strong></p>
<p>RandomAccess 接口中什么都没有定义，RandomAccess 接口不过是一个标识罢了，标识实现这个接口的类具有随机访问功能。在 binarySearch()方法中，它会判断传入的 list 是否 RandomAccess 的实例，如果是，调用 indexedBinarySearch()方法，如果不是，那么调用 iteratorBinarySearch()方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(List&lt;? extends Comparable&lt;? <span class="built_in">super</span> T&gt;&gt; list, T key)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (list <span class="keyword">instanceof</span> RandomAccess || list.size()&lt;BINARYSEARCH_THRESHOLD)</span><br><span class="line">        <span class="keyword">return</span> Collections.indexedBinarySearch(list, key);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> Collections.iteratorBinarySearch(list, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="type">int</span> <span class="title function_">indexedBinarySearch</span><span class="params">(List&lt;? extends Comparable&lt;? <span class="built_in">super</span> T&gt;&gt; list, T key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> list.size()-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (low + high) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        Comparable&lt;? <span class="built_in">super</span> T&gt; midVal = list.get(mid);</span><br><span class="line">        <span class="type">int</span> <span class="variable">cmp</span> <span class="operator">=</span> midVal.compareTo(key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> mid; <span class="comment">// key found</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -(low + <span class="number">1</span>);  <span class="comment">// key not found</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="type">int</span> <span class="title function_">iteratorBinarySearch</span><span class="params">(List&lt;? extends Comparable&lt;? <span class="built_in">super</span> T&gt;&gt; list, T key)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> list.size()-<span class="number">1</span>;</span><br><span class="line">    ListIterator&lt;? <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;? <span class="built_in">super</span> T&gt;&gt; i = list.listIterator();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (low + high) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        Comparable&lt;? <span class="built_in">super</span> T&gt; midVal = get(i, mid);</span><br><span class="line">        <span class="type">int</span> <span class="variable">cmp</span> <span class="operator">=</span> midVal.compareTo(key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> mid; <span class="comment">// key found</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -(low + <span class="number">1</span>);  <span class="comment">// key not found</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>为何 LinkedList 却没实现这个接口？</strong></p>
<p>ArrayList 用 for 循环遍历比 iterator 迭代器遍历快，LinkedList 用 iterator 迭代器遍历比 for 循环遍历快。做项目时，应该考虑到 List 集合的不同子类采用不同的遍历方式，能够提高性能</p>
<h2 id="构造方法">构造方法</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 默认构造函数，使用初始容量 10 构造一个空列表(无参数构造)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 带初始容量参数的构造函数。（用户自己指定容量）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 创建 initialCapacity 大小的数组</span></span><br><span class="line">        <span class="built_in">this</span>.elementData = <span class="keyword">new</span> <span class="title class_">Object</span>[initialCapacity];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 创建空数组</span></span><br><span class="line">        <span class="built_in">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 初始容量小于 0，抛出异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal Capacity: &quot;</span>+ initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构造包含指定 collection 元素的列表，这些元素利用该集合的迭代器按顺序返回</span></span><br><span class="line"><span class="comment"> * 如果指定的集合为 null，throws NullPointerException。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">    elementData = c.toArray();</span><br><span class="line">    <span class="keyword">if</span> ((size = elementData.length) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// c.toArray might (incorrectly) not return Object [] (see 6260652)</span></span><br><span class="line">        <span class="keyword">if</span> (elementData.getClass() != Object[].class)</span><br><span class="line">            elementData = Arrays.copyOf(elementData, size, Object[].class);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>当 ArrayList 的容量为 0 时，此时添加元素的话，需要扩容，三种构造方法创建的 ArrayList 在扩容时略有不同</li>
</ol>
<ul>
<li>无参构造，创建 ArrayList 后容量为 0，添加第一个元素后，容量变为 10，此后若需要扩容，则正常扩容</li>
<li>传容量构造，当参数为 0 时，创建 ArrayList 后容量为 0，添加第一个元素后，容量为 1，此时 ArrayList 是满的，下次添加元素时需正常扩容</li>
<li>传列表构造，当列表为空时，创建 ArrayList 后容量为 0，添加第一个元素后，容量为 1，此时 ArrayList 是满的，下次添加元素时需正常扩容</li>
</ul>
<ol start="2">
<li>当 ArrayList 的容量大于 0，并且 ArrayList 是满的，此时添加元素的话，进行正常扩容，每次扩容到原来的 1.5 倍</li>
</ol>
<h2 id="扩容机制">扩容机制</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 扩容的入口方法</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureCapacityInternal</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算最小容量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">calculateCapacity</span><span class="params">(Object[] elementData, <span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">         <span class="comment">// 获取默认的容量和传入参数的较大值</span></span><br><span class="line">        <span class="keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minCapacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否需要扩容</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureExplicitCapacity</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="comment">// 调用 grow 方法进行扩容，调用此方法代表已经开始扩容了</span></span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩容的核心方法</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">grow</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="comment">// oldCapacity 为旧容量，newCapacity 为新容量</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> elementData.length;</span><br><span class="line">    <span class="comment">// 将 oldCapacity 右移一位，其效果相当于 oldCapacity /2，</span></span><br><span class="line">    <span class="comment">// 位运算的速度远远快于整除运算，整句运算式的结果就是将新容量更新为旧容量的 1.5 倍，</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 检查新容量是否大于最小需要容量，若小于最小需要容量，那么就把最小需要容量当作数组的新容量，</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果新容量大于 MAX_ARRAY_SIZE, 进入(执行) `hugeCapacity()` 方法来比较 minCapacity 和 MAX_ARRAY_SIZE，</span></span><br><span class="line">    <span class="comment">// 如果 minCapacity 大于最大容量，则新容量则为 `Integer.MAX_VALUE`，</span></span><br><span class="line">    <span class="comment">// 否则，新容量大小则为 MAX_ARRAY_SIZE 即为 `Integer.MAX_VALUE - 8`。</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// 扩容</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">hugeCapacity</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OutOfMemoryError</span>();</span><br><span class="line">    <span class="comment">// 如果最小容量超过 MAX_ARRAY_SIZE，则将数组容量扩容至 Integer.MAX_VALUE</span></span><br><span class="line">    <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ? Integer.MAX_VALUE :MAX_ARRAY_SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 ArrayList 中，当空间用完，其会按照原数组空间的 1.5 倍进行扩容</p>
<ol>
<li>判断当前是否为空数组（即无参构造），如果是则比较 ArrayList 默认初始化的容量和传入参数大小，获取较大值（即扩容后的最小容量值）</li>
<li>判断最小容量值是否比原数组的元素个数大，是则进行扩容</li>
<li>使用位运算将原数组进行 1.5 倍扩容，然后判断扩容后的数量是否比最小容量值要小，是则将新数组的元素个数大小设置为最小容量值</li>
<li>如果新容量大于 Integer.MAX_VALUE - 8，则设置为 Integer.MAX_VALUE，否则为 Integer.MAX_VALUE - 8</li>
</ol>
<p><strong>为什么是 Integer.MAX_VALUE - 8？</strong></p>
<p>这是因为在 ArrayList 的内部实现中，预留了 8 个字节的额外空间，用于存储一些特殊的头部信息，以避免某些类型的内存溢出错误</p>
<p>在 Java 中，数组对象的存储结构包含对象头（Header）信息，用于存储元数据（如类型、长度等）。不同 JVM 实现的对象头大小可能不同，尤其是 64 位 JVM 可能占用更多空间。通过预留 8 个元素的余量（Integer.MAX_VALUE - 8），确保即使 JVM 需要额外的元数据存储，也不会导致数组长度溢出或分配失败。</p>
<h2 id="插入">插入</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在元素序列尾部插入</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 检测是否需要扩容</span></span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    <span class="comment">// 2. 将新元素插入序列尾部</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在元素序列 index 位置处插入</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">    rangeCheckForAdd(index);</span><br><span class="line">    <span class="comment">// 1. 检测是否需要扩容</span></span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    <span class="comment">// 2. 将 index 及其之后的所有元素都向后移一位</span></span><br><span class="line">    System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>, size - index);</span><br><span class="line">    <span class="comment">// 3. 将新元素插入至 index 处</span></span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rangeCheckForAdd</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt; size || index &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(outOfBoundsMsg(index));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在尾部插入，只需 2 个步骤：</p>
<ol>
<li>检测数组是否有足够的空间插入</li>
<li>将新元素插入至序列尾部</li>
</ol>
<p>在元素序列指定位置（假设该位置合理）插入，需要 3 个步骤：</p>
<ol>
<li>检测数组是否有足够的空间</li>
<li>将 index 及其之后的所有元素向后一位</li>
<li>将新元素插入至 index 处</li>
</ol>
<h2 id="删除">删除</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除指定位置的元素</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">// 返回被删除的元素值</span></span><br><span class="line">    <span class="type">E</span> <span class="variable">oldValue</span> <span class="operator">=</span> elementData(index);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">numMoved</span> <span class="operator">=</span> size - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="comment">// 将 index + 1 及之后的元素向前移动一位，覆盖被删除值</span></span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index, numMoved);</span><br><span class="line">    <span class="comment">// 将最后一个元素置空，并将 size 值减 1                </span></span><br><span class="line">    elementData[--size] = <span class="literal">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">E <span class="title function_">elementData</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (E) elementData[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除指定元素，若元素重复，则只删除下标最小的元素</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[index] == <span class="literal">null</span>) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 遍历数组，查找要删除元素的位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 快速删除，不做边界检查，也不返回删除的元素值</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">fastRemove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="type">int</span> <span class="variable">numMoved</span> <span class="operator">=</span> size - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index, numMoved);</span><br><span class="line">    elementData[--size] = <span class="literal">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>删除一个元素步骤：</p>
<ol>
<li>获取指定位置 index 处的元素值</li>
<li>将 index+1 及之后的元素向前移动一位</li>
<li>将最后一个元素置空，并将 size 值减 1</li>
<li>返回被删除值，完成删除操作</li>
</ol>
<h3 id="使用注意">使用注意</h3>
<p>遍历集合删除时，不要在 foreach 循环里进行元素的 remove/add 操作，remove 元素请使用 Iterator 方法，如果是并发操作，需要对 Iterator 对象加锁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">   list.add(<span class="string">&quot;add&quot;</span>);</span><br><span class="line">   list.add(<span class="string">&quot;delete&quot;</span>);</span><br><span class="line">   list.add(<span class="string">&quot;delete&quot;</span>);</span><br><span class="line">   list.add(<span class="string">&quot;update&quot;</span>);</span><br><span class="line">   list.add(<span class="string">&quot;query&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="fori-删除">fori 删除</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//顺序删除（会漏删）</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foriDelete</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;delete&quot;</span>.equals(list.get(i)))&#123;</span><br><span class="line">            list.remove(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;顺序删除之后的结果为--&gt;&quot;</span>+list.toString());</span><br><span class="line">    <span class="comment">//顺序删除之后的结果为--&gt; [add, delete, update, query]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//倒序删除</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foriDelete</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> list.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;delete&quot;</span>.equals(list.get(i)))&#123;</span><br><span class="line">            list.remove(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;倒序删除之后的结果为--&gt;&quot;</span>+list.toString());</span><br><span class="line">    <span class="comment">//倒序删除之后的结果为--&gt; [add, update, query]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ArrayList 在进行遍历的时候，如果删除某个元素，则后续的元素需要整体往前移动，当循环到 i = 1 的时候，找到了第 1 个 delete 字符串，然后删除，第 2 个 delete 以及之后的字符串会向前移动，这个时候第 2 个 delete 就在原数组的 1 位置了。当循环到 i = 2 的时候，正好把原来位置的 delete 给略过去了，导致漏删</p>
<h3 id="foreach-删除">foreach 删除</h3>
<p>删除一个元素后停止遍历可正常，多个元素删除有 CME 问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foreachDelete</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.equals(<span class="string">&quot;delete&quot;</span>)) &#123;</span><br><span class="line">            list.remove(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;foreach删除之后的结果为--&gt;&quot;</span>+list.toString());</span><br><span class="line">    <span class="comment">//删除出错：java.util.ConcurrentModificationException</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>foreach 的原理其实是编译器会将其编译为迭代器 Iterator 的形式进行遍历，以下是对.class 文件反编译之后的代码。与真正的使用迭代器遍历的方式有点不同，删除的时候不是使用迭代器的 remove 方法，而是用的 ArrayList 的 remove 方法。</p>
<p>产生异常的原因：ArrayList 本身不是线程安全的，在使用迭代器遍历查询的时候，会有一个检查机制，来确保一个线程在遍历的时候，其他线程不会删除该集合中的元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foreachDelete</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Iterator</span> <span class="variable">var1</span> <span class="operator">=</span> list.iterator();</span><br><span class="line">    <span class="keyword">while</span>(var1.hasNext()) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> (String)var1.next();</span><br><span class="line">        <span class="keyword">if</span> (s.equals(<span class="string">&quot;delete&quot;</span>)) &#123;</span><br><span class="line">            list.remove(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Itr</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="type">int</span> cursor;       <span class="comment">// index of next element to return</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">lastRet</span> <span class="operator">=</span> -<span class="number">1</span>; <span class="comment">// index of last element returned; -1 if no such</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">expectedModCount</span> <span class="operator">=</span> modCount;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cursor != size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 并发修改检测，检测不通过则抛出异常</span></span><br><span class="line">        checkForComodification();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> cursor;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">        Object[] elementData = ArrayList.<span class="built_in">this</span>.elementData;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">        cursor = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**确保 List 在同一时刻不会有多个线程进行删除**/</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">checkForComodification</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 foreach 方式删除元素的时候，调用 ArrayList 的 remove 方法如下：</p>
<p>当在第一次找到 delete 字符串，并进行删除的时候，会对 modCount++。如果没有停止该遍历，则在下次循环的时候，会校验 modCount 与 expectedModCount 是否相等。若不等，则抛出并发修改异常。foreach 循环删除元素是可以的，但是只能删除一个元素，并立即停止遍历，在 remove 下加上 break 即可</p>
<h3 id="iterator-删除">iterator 删除</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">iteratorDelete</span><span class="params">()</span>&#123;</span><br><span class="line">    Iterator&lt;String&gt; it = list.iterator();</span><br><span class="line">    <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">x</span> <span class="operator">=</span> it.next();</span><br><span class="line">        <span class="keyword">if</span>(x.equals(<span class="string">&quot;delete&quot;</span>))&#123;</span><br><span class="line">            it.remove();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;iterator删除之后的结果为--&gt;&quot;</span>+list.toString());</span><br><span class="line">    <span class="comment">//iterator 删除之后的结果为--&gt; [add, update, query]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可正常删除，ArrayList 在使用迭代器 Iterator 进行删除的时候，逻辑如下：在进行删除的时候，会将 modCount 赋值给 expectedModCount，所以不会导致两者不相等，只要不是数组越界，就不会报出 ConcurrentModificationException 了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>();</span><br><span class="line">    checkForComodification();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ArrayList.<span class="built_in">this</span>.remove(lastRet);</span><br><span class="line">        cursor = lastRet;</span><br><span class="line">        lastRet = -<span class="number">1</span>;</span><br><span class="line">        expectedModCount = modCount;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="其他">其他</h2>
<h3 id="trimToSize">trimToSize</h3>
<p>底层的 Object 数组是有一个最大容量的，假如容量为 10，但是只存放了 3 个元素，调用 trimToSize 就会将数组压缩为一个容量为 3 的新数组。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将数组容量缩小至元素数量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">trimToSize</span><span class="params">()</span> &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">if</span> (size &lt; elementData.length) &#123;</span><br><span class="line">        elementData = (size == <span class="number">0</span>) ? EMPTY_ELEMENTDATA : Arrays.copyOf(elementData, size);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ensureCapacity">ensureCapacity</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 如有必要，增加此 ArrayList 实例的容量，以确保它至少可以容纳由 minimum capacity 参数指定的元素数。</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span>   minCapacity   所需的最小容量</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ensureCapacity</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">minExpand</span> <span class="operator">=</span> (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA) ? <span class="number">0</span> : DEFAULT_CAPACITY;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (minCapacity &gt; minExpand) &#123;</span><br><span class="line">        ensureExplicitCapacity(minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最好在 add 大量元素之前用 ensureCapacity 方法，以减少扩容机制增量重新分配的次数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnsureCapacityTest</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;Object&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Object&gt;();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">10000000</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//list.ensureCapacity(N);</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            list.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;使用ensureCapacity方法前：&quot;</span>+(endTime - startTime));</span><br><span class="line">        <span class="comment">//System.out.println(&quot;使用 ensureCapacity 方法后：&quot;+(endTime1 - startTime1));</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行结果：</span></span><br><span class="line"><span class="comment">// 使用 ensureCapacity 方法前：2158</span></span><br><span class="line"><span class="comment">// 使用 ensureCapacity 方法后：1773</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java集合</tag>
      </tags>
  </entry>
  <entry>
    <title>Map（1-HashMap）</title>
    <url>/blog/2025/01/20/%E5%BF%83%E5%BE%97/Java%E9%9B%86%E5%90%88/Map%EF%BC%881-HashMap%EF%BC%89/</url>
    <content><![CDATA[<h2 id="底层原理">底层原理</h2>
<h3 id="实现方式">实现方式</h3>
<ol>
<li>JDK1.7：Entry 数组+链表</li>
<li>JDK1.8：Node 数组+链表/红黑树，当链表上的元素个数超过 8 个并且数组长度 &gt;= 64 时自动转化为红黑树，节点变成树节点。Entry 和 Node 都包含 key、value、hash、next 属性</li>
</ol>
<img src="Map（1-HashMap）/1.png" style="zoom: 50%;" />
<h3 id="JDK7-与-JDK8-区别">JDK7 与 JDK8 区别</h3>
<ol>
<li>
<p>JDK8 中添加了红黑树，当链表长度 &gt;= 8 且数组长度 &gt;= 64 的时候链表会变成红黑树</p>
</li>
<li>
<p>链表新节点插入链表的顺序不同（JDK7 是插入头结点，多线程进行扩容时会出现死循环，JDK8 因为要把链表变成红黑树所以采用插入尾结点，不会死循环）</p>
</li>
</ol>
<ul>
<li>假设在下标为 1 处有一个长度为 2 的链表，如果再次插入一个节点，就需要 resize()扩容。</li>
</ul>
<img src="Map（1-HashMap）/6.png" style="zoom:50%;" />
<ul>
<li>此时两个线程 A 和 B 执行 put()操作，A 线程先执行，执行完 transfer () 中的 Entry &lt;K,V&gt; next = e.next 被挂起，此时 e 指针指向 5，next 指向 7，如图所示。</li>
</ul>
<img src="Map（1-HashMap）/7.png" style="zoom:50%;" />
<ul>
<li>此时线程 B 执行，将数组扩大两倍，链表仍散列在下标为 1 处，由于使用了头插法，节点位置将会交换，如图所示。</li>
</ul>
<img src="Map（1-HashMap）/8.png" style="zoom:50%;" />
<ul>
<li>这时候线程 A 又执行，因为原先 e 指向 5，next 执行 7，继续执行下一条语句 e.next = newTable [i]，这时会出现 5 指向 7 的情况，如图所示。</li>
</ul>
<img src="Map（1-HashMap）/9.png" style="zoom:50%;" />
<ol start="3">
<li>hash 算法简化（JDK8）</li>
</ol>
<ul>
<li>JDK1.7 的 HashMap 的 hash 方法源码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(<span class="type">int</span> h)</span> &#123;</span><br><span class="line">    h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line">    <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>JDK1.8 的 HashMap 的 hash 方法源码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算键的 hash 值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>JDK7 中因为要让链表不要过长，所以进行了多次的异或和位运算，JDK8 中因为链表长度超过等于 8 会转红黑树，所以可以稍微减少元素的散列性，从而避免很多异或和位运算操作</p>
<ol start="4">
<li>resize 扩容机制的逻辑修改</li>
</ol>
<p>在扩容之前，key 取余之后留下了 n 位。扩容之后，容量变为 2 倍，所以 key 取余得到的就有 n+1 位。</p>
<p>在这 n+1 位里面，如果第 1 位是 0，那么扩容前后这个 key 的位置还是在相同的位置（因为 hash 相同，并且余数的第 1 位是 0，和之前 n 位的时候一样，所以余数还是一样，位置就一样了）；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">loTail.next = <span class="literal">null</span>;</span><br><span class="line">newTab[j] = loHead;</span><br></pre></td></tr></table></figure>
<p>如果这 n+1 位的第一位是 1，那么就和之前的不同，那么这个 key 就应该放在之前的位置再加上之前整个数组的长度的位置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">hiTail.next = <span class="literal">null</span>;</span><br><span class="line">newTab[j + oldCap] = hiHead;</span><br></pre></td></tr></table></figure>
<h2 id="属性和接口">属性和接口</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMap</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">AbstractMap</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>&lt;K,V&gt;, Cloneable, Serializable &#123;</span><br><span class="line">    <span class="comment">// HashMap 默认的初始容量是 16</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_INITIAL_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">4</span>;</span><br><span class="line">    <span class="comment">// 最大容量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAXIMUM_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line">    <span class="comment">// 默认的填充因子</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">float</span> <span class="variable">DEFAULT_LOAD_FACTOR</span> <span class="operator">=</span> <span class="number">0.75f</span>;</span><br><span class="line">    <span class="comment">// 当桶(bucket)上的结点数大于这个值时会转成红黑树</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TREEIFY_THRESHOLD</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line">    <span class="comment">// 当桶(bucket)上的结点数小于这个值时树转链表</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">UNTREEIFY_THRESHOLD</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line">    <span class="comment">// 桶中结构转化为红黑树对应的 table 的最小容量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MIN_TREEIFY_CAPACITY</span> <span class="operator">=</span> <span class="number">64</span>;</span><br><span class="line">    <span class="comment">// 存储元素的数组，总是 2 的幂次倍</span></span><br><span class="line">    <span class="keyword">transient</span> Node&lt;k,v&gt;[] table;</span><br><span class="line">    <span class="comment">// 存放具体元素的集</span></span><br><span class="line">    <span class="keyword">transient</span> Set&lt;map.entry&lt;k,v&gt;&gt; entrySet;</span><br><span class="line">    <span class="comment">// 存放元素的个数，注意这个不等于数组的长度。</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="type">int</span> size;</span><br><span class="line">    <span class="comment">// 每次扩容和更改 map 结构的计数器</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="type">int</span> modCount;</span><br><span class="line">    <span class="comment">// 当前 HashMap 所能容纳键值对数量的最大值(容量*填充因子)，超过这个值，则需扩容</span></span><br><span class="line">    <span class="type">int</span> threshold;</span><br><span class="line">    <span class="comment">// 加载因子</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">float</span> loadFactor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="构造方法">构造方法</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal initial capacity: &quot;</span> + initialCapacity);</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal load factor: &quot;</span> + loadFactor);</span><br><span class="line">    <span class="built_in">this</span>.loadFactor = loadFactor;</span><br><span class="line">    <span class="built_in">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">    putMapEntries(m, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>HashMap 的负载因子（loadFactor）为何默认是 0.75？</strong></p>
<ol>
<li>当负载因子是 1.0 时，意味着只有当数组的所有值全部填充了，才会发生扩容，此时会出现大量的 hash 冲突，底层的红黑树变得异常复杂，对于查询效率极其不利</li>
<li>当负载因子是 0.5 时，意味着当数组中的元素达到了一半就开始扩容，填充的元素少了，hash 冲突也会减少，那么底层的链表长度或者是红黑树的高度就会降低，查询效率就会增加。此时空间利用率就会大大地降低，原本存储 1M 的数据，现在意味着需要 2M 的空间</li>
<li>当负载因子是 0.75 时，空间利用率比较高，而且避免了相当多的 hash 冲突，使得底层链表或者是红黑树的高度比较低，提升了空间效率</li>
</ol>
<h2 id="查找">查找</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="literal">null</span> ? <span class="literal">null</span> : e.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title function_">getNode</span><span class="params">(<span class="type">int</span> hash, Object key)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="type">int</span> n; K k;</span><br><span class="line">    <span class="comment">// 1. 定位键值对所在桶的位置</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="literal">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// 1. 检查第一个节点</span></span><br><span class="line">            ((k = first.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">        <span class="keyword">if</span> ((e = first.next) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 2. 如果 first 是 TreeNode 类型，则调用黑红树查找方法</span></span><br><span class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">                </span><br><span class="line">            <span class="comment">// 3. 如果 first 不是 TreeNode 类型，对链表进行查找</span></span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">return</span> e;</span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>判断数组是否为空且长度是否为 0，定位键值所在桶的位置</li>
<li>检查第一个节点，如果相等就直接返回，不相等则执行下面的操作</li>
<li>如果 first 是 TreeNode 类型，则调用红黑树查找方法，否则对链表进行查找</li>
</ol>
<p><strong>位运算取模</strong></p>
<p><code>first = tab [(n-1)&amp;hash]</code>：算出桶在桶数组中的位置，length 总是 2 的幂，等价于对 length 取余，使用%没有位运算效率高</p>
<img src="Map（1-HashMap）/12.png" style="zoom: 33%;" />
<h2 id="插入">插入</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent, <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, i;</span><br><span class="line">    <span class="comment">// 初始化桶数组 table，table 被延迟到插入新数据时再进行初始化</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">// 如果桶中不包含键值对节点引用，则将新键值对节点的引用存入桶中即可</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="comment">// 如果键的值以及节点 hash 等于链表中的第一个键值对节点时，则将 e 指向该键值对</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">            </span><br><span class="line">        <span class="comment">// 如果桶中的引用类型为 TreeNode，则调用红黑树的插入方法</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)  </span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="built_in">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 对链表进行遍历，并统计链表长度</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="comment">// 链表中不包含要插入的键值对节点时，则将该节点接在链表的最后</span></span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">                    <span class="comment">// 如果链表长度大于或等于树化阈值，则进行树化操作</span></span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 条件为 true，表示当前链表包含要插入的键值对，终止遍历</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 判断要插入的键值对是否存在 HashMap 中</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">            <span class="comment">// onlyIfAbsent 表示是否仅在 oldValue 为 null 的情况下更新键值对的值</span></span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="literal">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="comment">// 键值对数量超过阈值时，则进行扩容</span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>首次扩容：先判断数组是否为空，若数组为空则进行第一次扩容</li>
<li>计算索引：通过 hash 算法，计算键值对在数组中的索引</li>
<li>插入数据</li>
</ol>
<ul>
<li>如果当前位置元素为空，则直接插入数据</li>
<li>如果当前位置元素非空，且 key 已存在，则直接覆盖其 value</li>
<li>如果当前位置元素非空，且 key 不存在，则将数据链到链表末端</li>
<li>若链表长度 &gt;= 8 且数组长度 &gt;= 64，则将链表转换成红黑树，并将数据插入树中</li>
</ul>
<ol start="4">
<li>再次扩容：如果数组中元素个数超过阈值，则再次进行扩容操作</li>
</ol>
<p><img src="13.png" alt=""></p>
<h2 id="扩容机制">扩容机制</h2>
<h3 id="哈希表计算">哈希表计算</h3>
<p>下面这个方法保证了 HashMap 总是使用 2 的幂作为哈希表的大小</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 找到大于或等于 cap 的最小 2 的幂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">tableSizeFor</span><span class="params">(<span class="type">int</span> cap)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> cap - <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="Map（1-HashMap）/10.png" style="zoom:67%;" />
<h3 id="扩容方法">扩容方法</h3>
<ol>
<li>在 HashMap 中，桶数组的长度均是 2 的幂，阈值大小为桶数组长度与负载因子的乘积（threshold = capacity*loadFactor），当 HashMap 中的键值对数量超过阈值时，进行扩容</li>
<li>HashMap 按当前桶数组长度的 2 倍进行扩容，阈值也变为原来的 2 倍（如果计算过程中，阈值溢出归零，则按阈值公式重新计算）。扩容之后，要重新计算键值对的位置，并把它们移动到合适的位置上去</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCap</span> <span class="operator">=</span> (oldTab == <span class="literal">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">oldThr</span> <span class="operator">=</span> threshold;</span><br><span class="line">    <span class="type">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 如果 table 不为空，表明已经初始化过了</span></span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 当 table 容量超过容量最大值，则不再扩容</span></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">// 按旧容量和阈值的 2 倍计算新容量和阈值的大小</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="comment">// 调用 HashMap(int)和 HashMap(int, float)构造方法时会产生这种情况</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 初始化时，将 threshold 的值赋值给 newCap，</span></span><br><span class="line"><span class="comment">         * HashMap 使用 threshold 变量暂时保存 initialCapacity 参数的值</span></span><br><span class="line"><span class="comment">         */</span> </span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    <span class="keyword">else</span> &#123;               </span><br><span class="line">        <span class="comment">// 调用 HashMap()构造方法会产生这种情况</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 调用无参构造方法时，桶数组容量为默认容量，阈值为默认容量与默认负载因子乘积</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        newThr = (<span class="type">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 特殊处理：第一个条件分支未计算 newThr 或嵌套分支在计算过程中导致 newThr 溢出归零</span></span><br><span class="line">    <span class="comment">// newThr 为 0 时，按阈值计算公式进行计算</span></span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">float</span> <span class="variable">ft</span> <span class="operator">=</span> (<span class="type">float</span>)newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="type">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                  (<span class="type">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    threshold = newThr;</span><br><span class="line">    <span class="comment">// 创建新的桶数组，桶数组的初始化也是在这里完成的</span></span><br><span class="line">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>[newCap];</span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果旧的桶数组不为空，则遍历桶数组，并将键值对映射到新的桶数组中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="literal">null</span>) &#123;</span><br><span class="line">                oldTab[j] = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="literal">null</span>)</span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    <span class="comment">// 重新映射时，需要对红黑树进行拆分</span></span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="built_in">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="literal">null</span>, loTail = <span class="literal">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="literal">null</span>, hiTail = <span class="literal">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="comment">// 遍历链表，并将链表节点按原顺序进行分组</span></span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        next = e.next;</span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="literal">null</span>)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="literal">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="literal">null</span>);</span><br><span class="line">                    <span class="comment">// 将分组后的链表映射到新桶中</span></span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="literal">null</span>) &#123;</span><br><span class="line">                        loTail.next = <span class="literal">null</span>;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="literal">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="literal">null</span>;</span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>扩容逻辑</strong></p>
<ol>
<li>计算新桶数组的容量 newCap 和新阈值 newThr</li>
<li>根据计算出的 newCap 创建新的桶数组，桶数组 table 也是在这里进行初始化的</li>
<li>将键值对节点重新映射到新的桶数组里，如果节点是 TreeNode 类型，则需要拆分红黑树；如果是普通节点，则节点按原顺序进行分组</li>
</ol>
<p><strong>注意</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 当 table 容量超过容量最大值，则不再扩容</span></span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">        threshold = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">return</span> oldTab;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 按旧容量和阈值的 2 倍计算新容量和阈值的大小</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">             oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">        newThr = oldThr &lt;&lt; <span class="number">1</span>; </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>)</span><br><span class="line">    <span class="comment">// 调用 HashMap(int)和 HashMap(int, float)构造方法时会产生这种情况</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 初始化时，将 threshold 的值赋值给 newCap，</span></span><br><span class="line"><span class="comment">     * HashMap 使用 threshold 变量暂时保存 initialCapacity 参数的值</span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    newCap = oldThr;</span><br><span class="line"><span class="keyword">else</span> &#123;               </span><br><span class="line">    <span class="comment">// 调用 HashMap()构造方法会产生这种情况</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 调用无参构造方法时，桶数组容量为默认容量，阈值为默认容量与默认负载因子乘积</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">    newThr = (<span class="type">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>新阈值 newThr = oldThr &lt;&lt; 1，移位可能会导致溢出</p>
<p>移位导致的溢出情况：当 loadFactor 小数位为 0，整数位可被 2 整除且大于等于 8 时，在某次计算中就可能导致 newThr 溢出归零</p>
<p><img src="11.png" alt=""></p>
<h2 id="删除">删除</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">remove</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">   Node&lt;K,V&gt; e;</span><br><span class="line">   <span class="keyword">return</span> (e = removeNode(hash(key), key, <span class="literal">null</span>, <span class="literal">false</span>, <span class="literal">true</span>)) == <span class="literal">null</span> ? <span class="literal">null</span> : e.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object key, Object value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> removeNode(hash(key), key, value, <span class="literal">true</span>, <span class="literal">true</span>) != <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">final</span> Node&lt;K,V&gt; <span class="title function_">removeNode</span><span class="params">(<span class="type">int</span> hash, Object key, Object value,</span></span><br><span class="line"><span class="params">                            <span class="type">boolean</span> matchValue, <span class="type">boolean</span> movable)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, index;</span><br><span class="line">    <span class="comment">//当 table 不为空，并且 hash 对应的桶不为空时</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="literal">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (p = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="literal">null</span>) &#123;</span><br><span class="line">        Node&lt;K,V&gt; node = <span class="literal">null</span>, e; K k; V v;</span><br><span class="line">        <span class="comment">//桶中的头节点就是我们要删除的节点</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="comment">//用 node 记录要删除的头节点</span></span><br><span class="line">            node = p;</span><br><span class="line">        <span class="comment">//头节点不是要删除的节点，并且头节点之后还有节点</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((e = p.next) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//头节点为树节点，则进入树查找要删除的节点</span></span><br><span class="line">            <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key);</span><br><span class="line">            <span class="comment">//头节点为链表节点</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//遍历链表</span></span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    <span class="comment">//hash 值相等，并且 key 地址相等或者 equals</span></span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key ||</span><br><span class="line">                         (key != <span class="literal">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">                         <span class="comment">//node 记录要删除的节点</span></span><br><span class="line">                        node = e;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//p 保存当前遍历到的节点</span></span><br><span class="line">                    p = e;</span><br><span class="line">                &#125; <span class="keyword">while</span> ((e = e.next) != <span class="literal">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//我们要找的节点不为空</span></span><br><span class="line">        <span class="keyword">if</span> (node != <span class="literal">null</span> &amp;&amp; (!matchValue || (v = node.value) == value ||</span><br><span class="line">                             (value != <span class="literal">null</span> &amp;&amp; value.equals(v)))) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                <span class="comment">//在树中删除节点</span></span><br><span class="line">                ((TreeNode&lt;K,V&gt;)node).removeTreeNode(<span class="built_in">this</span>, tab, movable);</span><br><span class="line">            <span class="comment">//我们要删除的是头节点</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (node == p)</span><br><span class="line">                tab[index] = node.next;</span><br><span class="line">            <span class="comment">//不是头节点，将当前节点指向删除节点的下一个节点</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                p.next = node.next;</span><br><span class="line">            ++modCount;</span><br><span class="line">            --size;</span><br><span class="line">            afterNodeRemoval(node);</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="其他">其他</h2>
<h3 id="get-能否判断元素是否在-map-中？">get 能否判断元素是否在 map 中？</h3>
<p>HashMap 的 get 函数的返回值不能判断一个 key 是否包含在 map 中，因为 HashMap 中允许 key 为 null，也允许 value 为 null</p>
<h3 id="为什么用红黑树而不用-B-或-AVL-树？">为什么用红黑树而不用 B 或 AVL 树？</h3>
<ol>
<li>红黑树和 AVL 树</li>
</ol>
<ul>
<li>AVL 树更加严格平衡，因此可以提供更快的査找效果，对于查找密集型任务使用 AVL 树没毛病，但是对于插入密集型任务，红黑树要好一些。（红黑树更通用，在添加删除来说表现较好，AVL 虽能提升一些速度但是代价太大了）</li>
<li>AVL 树的旋转比红黑树的旋转更难实现和调试。</li>
</ul>
<ol start="2">
<li>红黑树和 B 树</li>
</ol>
<p>HashMap 本来是数组+链表的形式，链表由于其查找慢的特点，所以需要被查找效率更高的树结构来替换。如果使用 B/B+树的话，在数据量不是很多的情况下，数据都会“挤在”一个结点里面，这个时候遍历效率就退化成了链表</p>
<h3 id="什么时候转为红黑树？">什么时候转为红黑树？</h3>
<ol>
<li>在链表长度大于 8 并且表的长度大于 64 的时候会转化红黑树</li>
<li>如果当前链表长度大于 8 但表的长度小于 64 时，会先进行扩容</li>
</ol>
<p>binCount 从 0 开始计算，大于等于 7 则触发 treeifyBin（树化方法）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ((e = p.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">    p.next = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">    <span class="comment">// 并且如果 链表的长度 大于 8 会尝试调用  treeifyBin 方法</span></span><br><span class="line">    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">        treeifyBin(tab, hash);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">treeifyBin</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="type">int</span> hash)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n, index; Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="comment">// 如果表的长度小于 64 会先扩容！！！ 否则 扩容</span></span><br><span class="line">    <span class="comment">// MIN_TREEIFY_CAPACITY = 64;</span></span><br><span class="line">    <span class="keyword">if</span> (tab == <span class="literal">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="line">        resize();</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((e = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="literal">null</span>) &#123;</span><br><span class="line">        TreeNode&lt;K,V&gt; hd = <span class="literal">null</span>, tl = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (tl == <span class="literal">null</span>)</span><br><span class="line">                hd = p;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                p.prev = tl;</span><br><span class="line">                tl.next = p;</span><br><span class="line">            &#125;</span><br><span class="line">            tl = p;</span><br><span class="line">        &#125; <span class="keyword">while</span> ((e = e.next) != <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">if</span> ((tab[index] = hd) != <span class="literal">null</span>)</span><br><span class="line">            hd.treeify(tab);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>为什么是链表长度为 8？</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">* <span class="number">0</span>:    <span class="number">0.60653066</span></span><br><span class="line">* <span class="number">1</span>:    <span class="number">0.30326533</span></span><br><span class="line">* <span class="number">2</span>:    <span class="number">0.07581633</span></span><br><span class="line">* <span class="number">3</span>:    <span class="number">0.01263606</span></span><br><span class="line">* <span class="number">4</span>:    <span class="number">0.00157952</span></span><br><span class="line">* <span class="number">5</span>:    <span class="number">0.00015795</span></span><br><span class="line">* <span class="number">6</span>:    <span class="number">0.00001316</span></span><br><span class="line">* <span class="number">7</span>:    <span class="number">0.00000094</span></span><br><span class="line">* <span class="number">8</span>:    <span class="number">0.00000006</span></span><br><span class="line">* more: less than <span class="number">1</span> in ten million</span><br></pre></td></tr></table></figure>
<p>当 hashCode 离散性很好的时候，树形 bin 用到的概率非常小，因为数据均匀分布在每个 bin 中，几乎不会有 bin 中链表长度会达到阈值，在理想情况下随机 hashCode 算法下所有 bin 节点的分布频率会遵循泊松分布，一个 bin 中链表长度达到 8 个元素的概率为 0.00000006，几乎是不可能事件</p>
<p>但是在随机 hashCode 下，离散性可能会变差，JDK 又不能阻止用户实现这种不好的 hash 算法，因此就可能导致不均匀的数据分布。链表长度超过 8 转为红黑树的设计，更多的是为了防止用户自己实现了不好的哈希算法时而导致链表过长，从而导致查询效率低</p>
<p><strong>为什么要数组长度大于等于 64？</strong></p>
<ol>
<li>避免频繁地树化</li>
<li>减少内存占用</li>
</ol>
<p>在数组比较小时如果出现红黑树结构，反而会降低效率，而红黑树需要进行左旋右旋、变色这些操作来保持平衡，同时数组长度小于 64 时，搜索时间相对要快些，总之是为了加快搜索速度，提高性能</p>
<p>红黑树相比链表需要更多的内存，尤其是在节点较少的情况下，红黑树的额外指针和结构占用更大。为了节省内存，HashMap 选择只有在数组容量达到一定规模后才树化，防止红黑树在小规模数据中带来额外的内存负担。</p>
<p><strong>转换为红黑树的操作</strong></p>
<p>先比较 key 的 hash 值决定插入方向，如果 hash 值相等的话，再比较 compare 方法，如果 key 所属对象没有直接实现 Comparable 接口，或者 compare 方法返回 0，执行 tieBreakOrder，比较两个 key 所属 Class 的 name，如果还相等，即两个对象是同一个类型，那么调用本地方法为两个对象生成 hashCode，再进行比较，hashCode 相等的话返回-1</p>
<h3 id="什么时候转为链表？">什么时候转为链表？</h3>
<p>若桶中元素小于等于 6 时，树结构还原成链表形式。红黑树的平均查找长度是 log(n)，长度为 8，查找长度为 log(8)= 3；链表的平均查找长度为 n/2，当长度为 8 时，平均查找长度为 8/2 = 4，这才有转换成树的必要</p>
<p><strong>选择 6 和 8 的原因</strong></p>
<p>中间有个差值 7 可以防止链表和树之间频繁的转换。如果涉及成链表个数超过 8 则链表转换为树结构，链表个数小于 8 则树结构转换成链表，如果一个 hashMap 不停的插入、删除元素，链表个数在 8 左右徘徊，就会频繁地发生树转链表、链表转树，效率很低</p>
<h3 id="线程不安全">线程不安全</h3>
<ol>
<li>put 数据覆盖：多线程同时执行 put 操作，如果计算出来的索引位置是相同的，那会造成前一个 key 被后一个 key 覆盖，从而导致元素的丢失。此问题在 JDK1.7 和 JDK1.8 中都存在</li>
<li>put 和 get 并发时，可能导致 get 为 null：线程 1 进行 put 时，因为元素个数超出 threshold 而导致扩容（new 一个新的 hash 表），线程 2 此时 get，有可能导致读出为 null（新 hash 表还没有值）。此问题在 JDK1.7 和 JDK1.8 中都存在</li>
<li>扩容死循环：JDK1.7 中的 HashMap 使用头插法插入元素，在多线程的环境下，扩容的时候有可能导致环形链表的出现，形成死循环。因此 JDK1.8 使用尾插法插入元素，在扩容时会保持链表元素原本的顺序，不会出现环形链表的问题</li>
</ol>
<h3 id="遍历">遍历</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Set&lt;K&gt; <span class="title function_">keySet</span><span class="params">()</span> &#123;</span><br><span class="line">    Set&lt;K&gt; ks = keySet;</span><br><span class="line">    <span class="keyword">if</span> (ks == <span class="literal">null</span>) &#123;</span><br><span class="line">        ks = <span class="keyword">new</span> <span class="title class_">KeySet</span>();</span><br><span class="line">        keySet = ks;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ks;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 键集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">KeySet</span> <span class="keyword">extends</span> <span class="title class_">AbstractSet</span>&lt;K&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>                 &#123; <span class="keyword">return</span> size; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span>               &#123; HashMap.<span class="built_in">this</span>.clear(); &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Iterator&lt;K&gt; <span class="title function_">iterator</span><span class="params">()</span>     &#123; <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">KeyIterator</span>(); &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object o)</span> &#123; <span class="keyword">return</span> containsKey(o); &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> removeNode(hash(key), key, <span class="literal">null</span>, <span class="literal">false</span>, <span class="literal">true</span>) != <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略部分代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 键迭代器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">KeyIterator</span> <span class="keyword">extends</span> <span class="title class_">HashIterator</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;K&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> K <span class="title function_">next</span><span class="params">()</span> &#123; <span class="keyword">return</span> nextNode().key; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">HashIterator</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt; next;        <span class="comment">// next entry to return</span></span><br><span class="line">    Node&lt;K,V&gt; current;     <span class="comment">// current entry</span></span><br><span class="line">    <span class="type">int</span> expectedModCount;  <span class="comment">// for fast-fail</span></span><br><span class="line">    <span class="type">int</span> index;             <span class="comment">// current slot</span></span><br><span class="line"></span><br><span class="line">    HashIterator() &#123;</span><br><span class="line">        expectedModCount = modCount;</span><br><span class="line">        Node&lt;K,V&gt;[] t = table;</span><br><span class="line">        current = next = <span class="literal">null</span>;</span><br><span class="line">        index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (t != <span class="literal">null</span> &amp;&amp; size &gt; <span class="number">0</span>) &#123; <span class="comment">// advance to first entry </span></span><br><span class="line">            <span class="comment">// 寻找第一个包含链表节点引用的桶</span></span><br><span class="line">            <span class="keyword">do</span> &#123;&#125; <span class="keyword">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> next != <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Node&lt;K,V&gt; <span class="title function_">nextNode</span><span class="params">()</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] t;</span><br><span class="line">        Node&lt;K,V&gt; e = next;</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">        <span class="keyword">if</span> (e == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">        <span class="keyword">if</span> ((next = (current = e).next) == <span class="literal">null</span> &amp;&amp; (t = table) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 寻找下一个包含链表节点引用的桶</span></span><br><span class="line">            <span class="keyword">do</span> &#123;&#125; <span class="keyword">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++) &#123;</span><br><span class="line">    map.put(i, i);</span><br><span class="line">&#125;</span><br><span class="line">Set&lt;Integer&gt; keySet = map.keySet();</span><br><span class="line"><span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="keyword">for</span> (Integer i : keySet) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> map.get(i);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(System.currentTimeMillis() - start);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Iterator&lt;Integer&gt; iterator = map.keySet().iterator();</span><br><span class="line">start = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">key</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">value</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(System.currentTimeMillis() - start);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Set&lt;Map.Entry&lt;Integer, Integer&gt;&gt; entries = map.entrySet();</span><br><span class="line">start = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : entries) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">    <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(System.currentTimeMillis() - start);</span><br></pre></td></tr></table></figure>
<p>keySet 和 entrySet 的区别：</p>
<ol>
<li>keySet：返回的是只存放 key 值的 Set 集合，使用迭代器方式遍历 Set 集合，使用 get 方法获取键对应的值时就需要遍历 Map 集合</li>
<li>entrySet：返回的是存放了映射关系的 Set 集合（一个映射关系就是一个键-值对），即把 key-value 作为一个整体一对一地存放到 Set 集合当中，然后使用迭代器方式遍历该 Set 集合就可以取出 Map 中存放的键值对</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java集合</tag>
      </tags>
  </entry>
  <entry>
    <title>Map（2-Hashtable）</title>
    <url>/blog/2025/01/23/%E5%BF%83%E5%BE%97/Java%E9%9B%86%E5%90%88/Map%EF%BC%882-Hashtable%EF%BC%89/</url>
    <content><![CDATA[<h2 id="属性和接口">属性和接口</h2>
<p>底层是基于数组+链表实现的，无序，且键和值都不允许为 null，Hashtable 是线程安全的（基于 synchronized 实现）</p>
<p><img src="1.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hashtable</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">Dictionary</span>&lt;K,V&gt; </span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Map</span>&lt;K,V&gt;, Cloneable, java.io.Serializable &#123;</span><br><span class="line">    <span class="comment">//存储键值对Entry的哈希桶数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Entry&lt;?,?&gt;[] table;</span><br><span class="line">    <span class="comment">//哈希桶数组table中存放的键值对Entry数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="type">int</span> count;</span><br><span class="line">    <span class="comment">//哈希桶数组table扩容阈值，threshold=capacity(数组容量) * loadFactor(加载因子)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> threshold;</span><br><span class="line">    <span class="comment">//加载因子</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> loadFactor;</span><br><span class="line">    <span class="comment">//Hashtable结构性修改次数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="type">int</span> <span class="variable">modCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//静态内部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Entry</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>.Entry&lt;K,V&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> hash;</span><br><span class="line">        <span class="keyword">final</span> K key;</span><br><span class="line">        V value;</span><br><span class="line">        Entry&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="title function_">Entry</span><span class="params">(<span class="type">int</span> hash, K key, V value, Entry&lt;K,V&gt; next)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.hash = hash;</span><br><span class="line">            <span class="built_in">this</span>.key =  key;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">            <span class="built_in">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="构造方法">构造方法</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Hashtable</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(<span class="number">11</span>, <span class="number">0.75f</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Hashtable</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(initialCapacity, <span class="number">0.75f</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Hashtable</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;</span><br><span class="line">    <span class="comment">//如果自定义初始容量小于0，则抛IllegalArgumentException</span></span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal Capacity: &quot;</span>+ initialCapacity);</span><br><span class="line">                                           </span><br><span class="line">    <span class="comment">//如果自定义的加载因子小于0或者为非数值类型，则抛IllegalArgumentException</span></span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal Load: &quot;</span>+loadFactor);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//如果自定义初始容量等于0，则使用1作为Hashtable的初始容量</span></span><br><span class="line">    <span class="keyword">if</span> (initialCapacity==<span class="number">0</span>)</span><br><span class="line">        initialCapacity = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">this</span>.loadFactor = loadFactor;</span><br><span class="line">    <span class="comment">//新建一个指定容量的Entry数组</span></span><br><span class="line">    table = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;?,?&gt;[initialCapacity];</span><br><span class="line">    <span class="comment">//计算扩容阈值</span></span><br><span class="line">    threshold = (<span class="type">int</span>)Math.min(initialCapacity * loadFactor, MAX_ARRAY_SIZE + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="插入">插入</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="comment">//判断value是否为null，确保不存在null值</span></span><br><span class="line">    <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//确定该键是否存在于哈希桶数组中</span></span><br><span class="line">    Entry&lt;?,?&gt; tab[] = table;</span><br><span class="line">    <span class="comment">//获取键的哈希值</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> key.hashCode();</span><br><span class="line">    <span class="comment">//计算键key在哈希桶数组table中的存储下标</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="comment">//将table数组index位置的值转换为Entry类型的数据</span></span><br><span class="line">    Entry&lt;K,V&gt; entry = (Entry&lt;K,V&gt;)tab[index];</span><br><span class="line">    <span class="comment">//如果index位置的键值对entry不为空，则遍历链表，找到键相同的Entry键值对</span></span><br><span class="line">    <span class="keyword">for</span>(; entry != <span class="literal">null</span> ; entry = entry.next) &#123;</span><br><span class="line">        <span class="comment">//如果Hashtable中原来的键值对的哈希值等于待插入的键值对的哈希值</span></span><br><span class="line">        <span class="comment">//并且两个键值对对应的键key相等，则覆盖原来的键值对的值，无需插入</span></span><br><span class="line">        <span class="keyword">if</span> ((entry.hash == hash) &amp;&amp; entry.key.equals(key)) &#123;</span><br><span class="line">            <span class="comment">//保存旧值</span></span><br><span class="line">            <span class="type">V</span> <span class="variable">old</span> <span class="operator">=</span> entry.value;</span><br><span class="line">            <span class="comment">//覆盖旧值</span></span><br><span class="line">            entry.value = value;</span><br><span class="line">            <span class="comment">//返回旧值</span></span><br><span class="line">            <span class="keyword">return</span> old;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//哈希桶数组中不存在相同的键，调用addEntry()方法实现添加</span></span><br><span class="line">    addEntry(hash, key, value, index);</span><br><span class="line">    <span class="comment">//添加新的键值对成功，返回null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addEntry</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="comment">//结构性修改次数+1</span></span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">//获取哈希桶数组table</span></span><br><span class="line">    Entry&lt;?,?&gt; tab[] = table;</span><br><span class="line">    <span class="comment">//如果哈希桶数组中Entry键值对的数量大于扩容阈值threshold</span></span><br><span class="line">    <span class="comment">//则调用rehash()进行扩容</span></span><br><span class="line">    <span class="keyword">if</span> (count &gt;= threshold) &#123;</span><br><span class="line">        <span class="comment">// Rehash the table if the threshold is exceeded</span></span><br><span class="line">        rehash();</span><br><span class="line">        <span class="comment">//获取扩容后哈希桶数组table</span></span><br><span class="line">        tab = table;</span><br><span class="line">        <span class="comment">//重新获取键的哈希值</span></span><br><span class="line">        hash = key.hashCode();</span><br><span class="line">        <span class="comment">//重新计算key在新的哈希桶数组中的下标index</span></span><br><span class="line">        index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="comment">//将index位置的值的类型转换为Entry&lt;K,V&gt;类型</span></span><br><span class="line">    Entry&lt;K,V&gt; e = (Entry&lt;K,V&gt;) tab[index];</span><br><span class="line">    <span class="comment">//新建一个Entry键值对，并将其存储到哈希表中index位置处</span></span><br><span class="line">    tab[index] = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;&gt;(hash, key, value, e);</span><br><span class="line">    <span class="comment">//哈希桶数组中键值对数量+1</span></span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>判断 value 是否为 null，不为空则执行下面的操作</li>
<li>计算键的哈希值，通过哈希值获取在哈希桶数组的下标</li>
<li>将 table 数组 index 位置的值转换为 Entry 类型的数据</li>
<li>如果 index 位置的键值对 entry 不为空，则遍历链表，找到键相同的 Entry 键值对进行替换；</li>
<li>如果没有，则调用 addEntry 进行添加，要先判断是否需要扩容（如果哈希桶数组中 Entry 键值对的数量大于扩容阈值 threshold，则调用 rehash()进行扩容）</li>
</ol>
<h2 id="删除">删除</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title function_">remove</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    Entry&lt;?,?&gt; tab[] = table;</span><br><span class="line">    <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> key.hashCode();</span><br><span class="line">    <span class="comment">// 计算哈希桶的下标位置</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    Entry&lt;K,V&gt; e = (Entry&lt;K,V&gt;)tab[index];</span><br><span class="line">    <span class="keyword">for</span>(Entry&lt;K,V&gt; prev = <span class="literal">null</span> ; e != <span class="literal">null</span> ; prev = e, e = e.next) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;</span><br><span class="line">            modCount++;</span><br><span class="line">            <span class="comment">// 判断是否为头节点，是则将头节点指向下一节点</span></span><br><span class="line">            <span class="keyword">if</span> (prev != <span class="literal">null</span>) &#123;</span><br><span class="line">                prev.next = e.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                tab[index] = e.next;</span><br><span class="line">            &#125;</span><br><span class="line">            count--;</span><br><span class="line">            <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">            e.value = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="查找">查找</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    Entry&lt;?,?&gt; tab[] = table;</span><br><span class="line">    <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> key.hashCode();</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;?,?&gt; e = tab[index] ; e != <span class="literal">null</span> ; e = e.next) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span> (V)e.value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="扩容方法">扩容方法</h2>
<p>扩容公式：（当前哈希桶数组的容量*2）+1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">rehash</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> table.length;</span><br><span class="line">    Entry&lt;?,?&gt;[] oldMap = table;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算新的数组容量</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> (oldCapacity &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//如果新数组的容量大于Hashtable的最大容量</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//如果原来数组的容量已经等于最大容量则结束扩容</span></span><br><span class="line">        <span class="keyword">if</span> (oldCapacity == MAX_ARRAY_SIZE)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//否则，原数组还未达最大允许容量，则将最大容量作为扩容后的新容量</span></span><br><span class="line">        newCapacity = MAX_ARRAY_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//新建容量为上面计算的newCapacity的Entry数组</span></span><br><span class="line">    Entry&lt;?,?&gt;[] newMap = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;?,?&gt;[newCapacity];</span><br><span class="line">    <span class="comment">//结构修改性次数+1</span></span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">//重新计算扩容阈值</span></span><br><span class="line">    threshold = (<span class="type">int</span>)Math.min(newCapacity * loadFactor, MAX_ARRAY_SIZE + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//将扩容后的entry数组赋值给table</span></span><br><span class="line">    table = newMap;</span><br><span class="line">    <span class="comment">//遍历原来的哈希桶数组，将原来数组中的键值对重新定位到新数组中    </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> oldCapacity ; i-- &gt; <span class="number">0</span> ;) &#123;</span><br><span class="line">        <span class="comment">//遍历链表</span></span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; old = (Entry&lt;K,V&gt;)oldMap[i] ; old != <span class="literal">null</span> ; ) &#123;</span><br><span class="line">            Entry&lt;K,V&gt; e = old;</span><br><span class="line">            old = old.next;</span><br><span class="line">            <span class="comment">//重新计算键值对在新数组的索引下标</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (e.hash &amp; <span class="number">0x7FFFFFFF</span>) % newCapacity;</span><br><span class="line">            e.next = (Entry&lt;K,V&gt;)newMap[index];</span><br><span class="line">            newMap[index] = e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java集合</tag>
      </tags>
  </entry>
  <entry>
    <title>Map（4-ConcurrentHashMap）</title>
    <url>/blog/2025/01/27/%E5%BF%83%E5%BE%97/Java%E9%9B%86%E5%90%88/Map%EF%BC%884-ConcurrentHashMap%EF%BC%89/</url>
    <content><![CDATA[<h2 id="ConcurrentHashMap1-7">ConcurrentHashMap1.7</h2>
<h3 id="属性和接口">属性和接口</h3>
<p>ConcurrentHashMap1.7 采用了数组+Segment+分段锁的方式实现，即 ConcurrentHashMap 把哈希桶数组切分成小数组（Segment），每个小数组有 n 个 HashEntry 组成</p>
<p>一个 ConcurrentHashMap 里包含一个 Segment 数组，Segment 的个数一旦初始化就不能改变。 Segment 数组的大小默认是 16，也就是说默认可以同时支持 16 个线程并发写。</p>
<p>Segment 的结构和 HashMap 类似，是一种数组和链表结构，一个 Segment 包含一个 HashEntry 数组，每个 HashEntry 是一个链表结构的元素，每个 Segment 守护着一个 HashEntry 数组里的元素，当对 HashEntry 数组的数据进行修改时，必须首先获得对应的 Segment 的锁。也就是说，对同一 Segment 的并发写入会被阻塞，不同 Segment 的写入是可以并发执行的。</p>
<p><img src="1.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcurrentHashMap</span>&lt;K, V&gt; <span class="keyword">extends</span> <span class="title class_">AbstractMap</span>&lt;K, V&gt;</span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">ConcurrentMap</span>&lt;K, V&gt;, Serializable &#123;</span><br><span class="line">	<span class="comment">//默认的初始容量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_INITIAL_CAPACITY</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line">	<span class="comment">//默认加载因子</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">float</span> <span class="variable">DEFAULT_LOAD_FACTOR</span> <span class="operator">=</span> <span class="number">0.75f</span>;</span><br><span class="line">	<span class="comment">//默认的并发度，也就是默认的Segment数组长度</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_CONCURRENCY_LEVEL</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line">    <span class="comment">//最大容量，ConcurrentMap最大容量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAXIMUM_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line">	<span class="comment">//每个segment中table数组的长度,必须是2^n,最小为2</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MIN_SEGMENT_TABLE_CAPACITY</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">	<span class="comment">//允许最大segment数量,用于限定concurrencyLevel的边界,必须是2^n</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_SEGMENTS</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">16</span>; <span class="comment">// slightly conservative</span></span><br><span class="line">	<span class="comment">//在size方法和containsValue方法，会优先采用乐观的方式不加锁，直到重试次数达到2，</span></span><br><span class="line">	<span class="comment">//才会对所有Segment加锁，这个值的设定，是为了避免无限次的重试</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">RETRIES_BEFORE_LOCK</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//.......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Segment</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">ReentrantLock</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1.segment的读操作不需要加锁，但需要volatile读</span></span><br><span class="line"><span class="comment">    2.当进行扩容时(调用reHash方法)，需要拷贝原始数据，在拷贝数据上操作，保证在扩容完成前读操作仍可以在原始数据上进行。</span></span><br><span class="line"><span class="comment">    3.只有引起数据变化的操作需要加锁。</span></span><br><span class="line"><span class="comment">    4.scanAndLock(删除、替换)/scanAndLockForPut(新增)两个方法提供了获取锁的途径，是通过自旋锁实现的。</span></span><br><span class="line"><span class="comment">    5.在等待获取锁的过程中，两个方法都会对目标数据进行查找，每次查找都会与上次查找的结果对比，虽然查找结果不会被调用它的方法使用，但是这样做可以减少后续操作可能的cache miss。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     自旋锁的等待次数上限，多处理器时64次，单处理器时1次。</span></span><br><span class="line"><span class="comment">     每次等待都会进行查询操作，当等待次数超过上限时，不再自旋，调用lock方法等待获取锁。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_SCAN_RETRIES</span> <span class="operator">=</span></span><br><span class="line">        Runtime.getRuntime().availableProcessors() &gt; <span class="number">1</span> ? <span class="number">64</span> : <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//segment中的hash表，与hashMap结构相同，表中每个元素都是一个链表。</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">volatile</span> HashEntry&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//表中元素个数</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="type">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//记录数据变化操作的次数。</span></span><br><span class="line">    <span class="comment">//这一数值主要为Map的isEmpty和size方法提供同步操作检查，这两个方法没有为全表加锁。</span></span><br><span class="line">    <span class="comment">//在统计segment.count前后，都会统计segment.modCount，如果前后两次值发生变化，</span></span><br><span class="line">    <span class="comment">//可以判断在统计count期间有segment发生了其它操作。</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="type">int</span> modCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//容量阈值，超过这一数值后segment将进行扩容，容量变为原来的两倍,threshold = loadFactor*table.length</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="type">int</span> threshold;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加载因子</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">float</span> loadFactor;</span><br><span class="line"></span><br><span class="line">    Segment(<span class="type">float</span> lf, <span class="type">int</span> threshold, HashEntry&lt;K,V&gt;[] tab) &#123;</span><br><span class="line">        <span class="built_in">this</span>.loadFactor = lf;</span><br><span class="line">        <span class="built_in">this</span>.threshold = threshold;</span><br><span class="line">        <span class="built_in">this</span>.table = tab;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">HashEntry</span>&lt;K,V&gt; &#123; </span><br><span class="line">   <span class="keyword">final</span> K key;                       <span class="comment">// 声明 key 为 final 型</span></span><br><span class="line">   <span class="keyword">final</span> <span class="type">int</span> hash;                   <span class="comment">// 声明 hash 值为 final 型 </span></span><br><span class="line">   <span class="keyword">volatile</span> V value;                 <span class="comment">// 声明 value 为 volatile 型</span></span><br><span class="line">   <span class="keyword">final</span> HashEntry&lt;K,V&gt; next;      <span class="comment">// 声明 next 为 final 型 </span></span><br><span class="line"></span><br><span class="line">   HashEntry(K key, <span class="type">int</span> hash, HashEntry&lt;K,V&gt; next, V value) &#123; </span><br><span class="line">       <span class="built_in">this</span>.key = key; </span><br><span class="line">       <span class="built_in">this</span>.hash = hash; </span><br><span class="line">       <span class="built_in">this</span>.next = next; </span><br><span class="line">       <span class="built_in">this</span>.value = value; </span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="构造方法">构造方法</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ConcurrentHashMap</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(DEFAULT_INITIAL_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_CONCURRENCY_LEVEL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过指定的容量，加载因子和并发等级创建一个新的ConcurrentHashMap</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ConcurrentHashMap</span><span class="params">(<span class="type">int</span> initialCapacity,<span class="type">float</span> loadFactor, <span class="type">int</span> concurrencyLevel)</span> &#123;</span><br><span class="line">    <span class="comment">// 参数校验</span></span><br><span class="line">    <span class="keyword">if</span> (!(loadFactor &gt; <span class="number">0</span>) || initialCapacity &lt; <span class="number">0</span> || concurrencyLevel &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">    <span class="comment">// 校验并发级别大小，大于 1&lt;&lt;16，重置为 65536</span></span><br><span class="line">    <span class="keyword">if</span> (concurrencyLevel &gt; MAX_SEGMENTS)</span><br><span class="line">        concurrencyLevel = MAX_SEGMENTS;</span><br><span class="line">    <span class="comment">// 下面即通过并发等级来确定Segment的大小</span></span><br><span class="line">    <span class="comment">// sshift用来记录向左按位移动的次数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">sshift</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// ssize用来记录Segment数组的大小</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">ssize</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 这个循环可以找到 concurrencyLevel 之上最近的 2的次方值</span></span><br><span class="line">    <span class="keyword">while</span> (ssize &lt; concurrencyLevel) &#123;</span><br><span class="line">        ++sshift;</span><br><span class="line">        ssize &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 记录段偏移量</span></span><br><span class="line">    <span class="built_in">this</span>.segmentShift = <span class="number">32</span> - sshift;</span><br><span class="line">    <span class="comment">// 记录段掩码</span></span><br><span class="line">    <span class="built_in">this</span>.segmentMask = ssize - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 设置容量</span></span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">    <span class="comment">// c = 容量 / ssize ，默认 16 / 16 = 1，这里是计算每个 Segment 中的类似于 HashMap 的容量</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> initialCapacity / ssize;</span><br><span class="line">    <span class="keyword">if</span> (c * ssize &lt; initialCapacity)</span><br><span class="line">        ++c;</span><br><span class="line">    <span class="type">int</span> <span class="variable">cap</span> <span class="operator">=</span> MIN_SEGMENT_TABLE_CAPACITY;</span><br><span class="line">    <span class="comment">//Segment 中的类似于 HashMap 的容量至少是2或者2的倍数</span></span><br><span class="line">    <span class="keyword">while</span> (cap &lt; c)</span><br><span class="line">        cap &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 创建 Segment 数组，设置 segments[0]</span></span><br><span class="line">    Segment&lt;K,V&gt; s0 = <span class="keyword">new</span> <span class="title class_">Segment</span>&lt;K,V&gt;(loadFactor, (<span class="type">int</span>)(cap * loadFactor),</span><br><span class="line">                         (HashEntry&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">HashEntry</span>[cap]);</span><br><span class="line">    Segment&lt;K,V&gt;[] ss = (Segment&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Segment</span>[ssize];</span><br><span class="line">    UNSAFE.putOrderedObject(ss, SBASE, s0); <span class="comment">// ordered write of segments[0]</span></span><br><span class="line">    <span class="built_in">this</span>.segments = ss;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>进行参数校验，成功则进行下面的操作</li>
<li>校验并发级别 concurrencyLevel 大小，如果大于最大值，重置为最大值，无参构造默认值是 16</li>
<li>寻找并发级别 concurrencyLevel 之上最近的 2 的幂次方值（ssize），作为初始化容量大小，默认是 16</li>
<li>记录 segmentShift 偏移量（segmentShift），这个值为【容量 = 2 的 N 次方】中的 N，在后面 put 时计算位置时会用到。默认是 32-sshift = 28</li>
<li>记录 segmentMask 段掩码（segmentMark = 2^n-1），默认是 ssize-1 = 16-1 = 15</li>
<li>计算每个 Segment 中的类似于 HashMap 的容量 c</li>
<li>Segment 中的类似于 HashMap 的容量 c 必须是 2 的倍数，计算出大于 c 的 2 的 n 次方（cap）</li>
<li>初始化 segment [0]，默认大小为 2，负载因子为 0.75，扩容阈值为 2 *0.75 = 1.5（cap* loadFactor），插入第二个值才会进行扩容</li>
</ol>
<h3 id="插入">插入</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    Segment&lt;K,V&gt; s;</span><br><span class="line">    <span class="keyword">if</span> (value == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> hash(key);</span><br><span class="line">    <span class="comment">// hash 值无符号右移 28位（初始化时获得），然后与 segmentMask=15 做与运算</span></span><br><span class="line">    <span class="comment">// 其实也就是把高4位与segmentMask（1111）做与运算</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> (hash &gt;&gt;&gt; segmentShift) &amp; segmentMask;</span><br><span class="line">    <span class="keyword">if</span> ((s = (Segment&lt;K,V&gt;)UNSAFE.getObject          <span class="comment">// nonvolatile; recheck</span></span><br><span class="line">         (segments, (j &lt;&lt; SSHIFT) + SBASE)) == <span class="literal">null</span>) <span class="comment">//  in ensureSegment</span></span><br><span class="line">        <span class="comment">// 如果查找到的 Segment 为空，初始化</span></span><br><span class="line">        s = ensureSegment(j);</span><br><span class="line">    <span class="keyword">return</span> s.put(key, hash, value, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Segment&lt;K,V&gt; <span class="title function_">ensureSegment</span><span class="params">(<span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> Segment&lt;K,V&gt;[] ss = <span class="built_in">this</span>.segments;</span><br><span class="line">    <span class="type">long</span> <span class="variable">u</span> <span class="operator">=</span> (k &lt;&lt; SSHIFT) + SBASE; <span class="comment">// raw offset</span></span><br><span class="line">    Segment&lt;K,V&gt; seg;</span><br><span class="line">    <span class="comment">// 判断 u 位置的 Segment 是否为null</span></span><br><span class="line">    <span class="keyword">if</span> ((seg = (Segment&lt;K,V&gt;)UNSAFE.getObjectVolatile(ss, u)) == <span class="literal">null</span>) &#123;</span><br><span class="line">        Segment&lt;K,V&gt; proto = ss[<span class="number">0</span>]; <span class="comment">// use segment 0 as prototype</span></span><br><span class="line">        <span class="comment">// 获取segment[0] 里的 HashEntry&lt;K,V&gt; 初始化长度</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">cap</span> <span class="operator">=</span> proto.table.length;</span><br><span class="line">        <span class="comment">// 获取segment[0] 里的 hash 表里的扩容负载因子，所有的 segment 的 loadFactor 是相同的</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">lf</span> <span class="operator">=</span> proto.loadFactor;</span><br><span class="line">        <span class="comment">// 计算扩容阀值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">threshold</span> <span class="operator">=</span> (<span class="type">int</span>)(cap * lf);</span><br><span class="line">        <span class="comment">// 创建一个 cap 容量的 HashEntry 数组</span></span><br><span class="line">        HashEntry&lt;K,V&gt;[] tab = (HashEntry&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">HashEntry</span>[cap];</span><br><span class="line">        <span class="comment">// 再次检查 u 位置的 Segment 是否为null，因为这时可能有其他线程进行了操作</span></span><br><span class="line">        <span class="keyword">if</span> ((seg = (Segment&lt;K,V&gt;)UNSAFE.getObjectVolatile(ss, u)) == <span class="literal">null</span>) &#123; <span class="comment">// recheck</span></span><br><span class="line">            Segment&lt;K,V&gt; s = <span class="keyword">new</span> <span class="title class_">Segment</span>&lt;K,V&gt;(lf, threshold, tab);</span><br><span class="line">            <span class="comment">// 自旋检查 u 位置的 Segment 是否为null</span></span><br><span class="line">            <span class="keyword">while</span> ((seg = (Segment&lt;K,V&gt;)UNSAFE.getObjectVolatile(ss, u)) == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 使用CAS 赋值，只会成功一次</span></span><br><span class="line">                <span class="keyword">if</span> (UNSAFE.compareAndSwapObject(ss, u, <span class="literal">null</span>, seg = s))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> seg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>计算要 put 的 key 的位置，获取指定位置的 Segment</li>
<li>如果指定位置的 Segment 为空，则初始化这个 Segment</li>
<li>Segment.put 插入 key，value 值</li>
</ol>
<p>初始化 Segment 流程：</p>
<ol>
<li>检查计算得到的位置的 Segment 是否为 null</li>
<li>为 null 则继续初始化，使用 Segment [0] 的容量和负载因子创建一个 cap 容量的 HashEntry 数组</li>
<li>再次检查计算得到的指定位置的 Segment 是否为 null，因为这时可能有其他线程进行了操作</li>
<li>为 null 则使用创建的 HashEntry 数组初始化这个 Segment</li>
<li>自旋判断计算得到的指定位置的 Segment 是否为 null，是的话使用 CAS 在这个位置赋值为 Segment</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> V <span class="title function_">put</span><span class="params">(K key, <span class="type">int</span> hash, V value, <span class="type">boolean</span> onlyIfAbsent)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取 ReentrantLock 独占锁，获取不到，scanAndLockForPut 获取。</span></span><br><span class="line">    HashEntry&lt;K,V&gt; node = tryLock() ? <span class="literal">null</span> : scanAndLockForPut(key, hash, value);</span><br><span class="line">    V oldValue;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        HashEntry&lt;K,V&gt;[] tab = table;</span><br><span class="line">        <span class="comment">// 计算要put的数据位置</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (tab.length - <span class="number">1</span>) &amp; hash;</span><br><span class="line">        <span class="comment">// CAS 获取 index 坐标的值</span></span><br><span class="line">        HashEntry&lt;K,V&gt; first = entryAt(tab, index);</span><br><span class="line">        <span class="keyword">for</span> (HashEntry&lt;K,V&gt; e = first;;) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 检查是否 key 已经存在，如果存在，则遍历链表寻找位置，找到后替换 value</span></span><br><span class="line">                K k;</span><br><span class="line">                <span class="keyword">if</span> ((k = e.key) == key || (e.hash == hash &amp;&amp; key.equals(k))) &#123;</span><br><span class="line">                    oldValue = e.value;</span><br><span class="line">                    <span class="keyword">if</span> (!onlyIfAbsent) &#123;</span><br><span class="line">                        e.value = value;</span><br><span class="line">                        ++modCount;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                e = e.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//node不为null,设置node的next为first，node为当前链表的头节点</span></span><br><span class="line">                <span class="keyword">if</span> (node != <span class="literal">null</span>)</span><br><span class="line">                    node.setNext(first);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                <span class="comment">//node为null,创建头节点,指定next为first，node为当前链表的头节点</span></span><br><span class="line">                    node = <span class="keyword">new</span> <span class="title class_">HashEntry</span>&lt;K,V&gt;(hash, key, value, first);</span><br><span class="line">                <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> count + <span class="number">1</span>;</span><br><span class="line">                <span class="comment">// 容量大于扩容阀值，小于最大容量，进行扩容</span></span><br><span class="line">                <span class="keyword">if</span> (c &gt; threshold &amp;&amp; tab.length &lt; MAXIMUM_CAPACITY)</span><br><span class="line">                    rehash(node);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="comment">// index 位置赋值 node，node 可能是一个元素，也可能是一个链表的表头</span></span><br><span class="line">                    setEntryAt(tab, index, node);</span><br><span class="line">                ++modCount;</span><br><span class="line">                count = c;</span><br><span class="line">                oldValue = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果指定的 Segment 不为空，由于 Segment 继承了 ReentrantLock，所以 Segment 内部可以很方便地获取锁</p>
<ol>
<li>tryLock()获取锁，获取不到使用 scanAndLockForPut 方法继续获取</li>
<li>计算 put 的数据要放入的 index 位置，然后获取这个位置上的 HashEntry</li>
<li>遍历 put 新元素，因为这里获取的 HashEntry 可能是一个空元素，也可能是链表已存在，所以要区别对待</li>
</ol>
<p>如果这个位置上的 HashEntry 不存在：</p>
<ul>
<li>如果当前容量大于扩容阈值，小于最大容量，进行扩容</li>
<li>直接头插法插入</li>
</ul>
<p>如果这个位置上的 HashEntry 存在：</p>
<ul>
<li>判断链表当前元素 key 和 hash 值是否和要 put 的 key 和 hash 值一致，一致则替换值；不一致则获取链表下一个节点，直到发现相同进行值替换，或者链表里没有相同的</li>
</ul>
<ol start="4">
<li>如果要插入的位置之前已经存在，替换后返回旧值，否则返回 null</li>
</ol>
<p><strong>scanAndLockForPut（自旋）</strong></p>
<p>在不超过最大重试次数 MAX_SCAN_RETRIES 通过 CAS 获取锁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> HashEntry&lt;K,V&gt; <span class="title function_">scanAndLockForPut</span><span class="params">(K key, <span class="type">int</span> hash, V value)</span> &#123;</span><br><span class="line">    <span class="comment">//first,e:键值对的hash值定位到数组tab的第一个键值对</span></span><br><span class="line">    HashEntry&lt;K,V&gt; first = entryForHash(<span class="built_in">this</span>, hash);</span><br><span class="line">    HashEntry&lt;K,V&gt; e = first;</span><br><span class="line">    HashEntry&lt;K,V&gt; node = <span class="literal">null</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">retries</span> <span class="operator">=</span> -<span class="number">1</span>; <span class="comment">// negative while locating node</span></span><br><span class="line">    <span class="comment">//线程尝试通过CAS获取锁</span></span><br><span class="line">    <span class="keyword">while</span> (!tryLock()) &#123;</span><br><span class="line">        HashEntry&lt;K,V&gt; f; <span class="comment">// to recheck first below</span></span><br><span class="line">        <span class="keyword">if</span> (retries &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//当e==null或key.equals(e.key)时retry=0，走出这个分支</span></span><br><span class="line">            <span class="keyword">if</span> (e == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (node == <span class="literal">null</span>) <span class="comment">// speculatively create node</span></span><br><span class="line">                    <span class="comment">//初始化键值对，next指向null</span></span><br><span class="line">                    node = <span class="keyword">new</span> <span class="title class_">HashEntry</span>&lt;K,V&gt;(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">                retries = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (key.equals(e.key))</span><br><span class="line">                retries = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                e = e.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//超过最大自旋次数，阻塞</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (++retries &gt; MAX_SCAN_RETRIES) &#123;</span><br><span class="line">            lock();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//头节点发生变化，重新遍历</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((retries &amp; <span class="number">1</span>) == <span class="number">0</span> &amp;&amp; (f = entryForHash(<span class="built_in">this</span>, hash)) != first) &#123;</span><br><span class="line">            e = first = f; <span class="comment">// re-traverse if entry changed</span></span><br><span class="line">            retries = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="rehash（扩容）">rehash（扩容）</h3>
<p>ConcurrentHahsMap 的扩容只会扩容到原来的两倍。老数组里的数据移动到新的数组时，位置要么不变，要么变为 index+oldSize，参数里的 node 会在扩容之后使用链表头插法插入到指定位置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rehash</span><span class="params">(HashEntry&lt;K,V&gt; node)</span> &#123;</span><br><span class="line">    HashEntry&lt;K,V&gt;[] oldTable = table;</span><br><span class="line">    <span class="comment">// 老容量</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> oldTable.length;</span><br><span class="line">    <span class="comment">// 新容量，扩大两倍</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> oldCapacity &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 新的扩容阀值 </span></span><br><span class="line">    threshold = (<span class="type">int</span>)(newCapacity * loadFactor);</span><br><span class="line">    <span class="comment">// 创建新的数组</span></span><br><span class="line">    HashEntry&lt;K,V&gt;[] newTable = (HashEntry&lt;K,V&gt;[]) <span class="keyword">new</span> <span class="title class_">HashEntry</span>[newCapacity];</span><br><span class="line">    <span class="comment">// 新的掩码，默认2扩容后是4，-1是3，二进制就是11。</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">sizeMask</span> <span class="operator">=</span> newCapacity - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; oldCapacity ; i++) &#123;</span><br><span class="line">        <span class="comment">// 遍历老数组</span></span><br><span class="line">        HashEntry&lt;K,V&gt; e = oldTable[i];</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">            HashEntry&lt;K,V&gt; next = e.next;</span><br><span class="line">            <span class="comment">// 计算元素在新数组的索引</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> e.hash &amp; sizeMask;</span><br><span class="line">            <span class="keyword">if</span> (next == <span class="literal">null</span>) </span><br><span class="line">                <span class="comment">// 如果当前位置还不是链表，只是一个元素，直接赋值</span></span><br><span class="line">                newTable[idx] = e;</span><br><span class="line">            <span class="keyword">else</span> &#123; </span><br><span class="line">                <span class="comment">// 如果是链表了</span></span><br><span class="line">                HashEntry&lt;K,V&gt; lastRun = e;</span><br><span class="line">                <span class="type">int</span> <span class="variable">lastIdx</span> <span class="operator">=</span> idx;</span><br><span class="line">                <span class="comment">// 新的位置只可能是不便或者是老的位置+老的容量。</span></span><br><span class="line">                <span class="comment">// 遍历结束后，lastRun 后面的元素位置都是相同的</span></span><br><span class="line">                <span class="keyword">for</span> (HashEntry&lt;K,V&gt; last = next; last != <span class="literal">null</span>; last = last.next) &#123;</span><br><span class="line">                    <span class="comment">// k是单链表元素在新数组的位置</span></span><br><span class="line">                    <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> last.hash &amp; sizeMask;</span><br><span class="line">                    <span class="comment">// lastRun是最后一个扩容后不在原桶处的Entry</span></span><br><span class="line">                    <span class="keyword">if</span> (k != lastIdx) &#123;</span><br><span class="line">                        lastIdx = k;</span><br><span class="line">                        lastRun = last;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// lastRun 后面的元素位置都是相同的，直接作为链表赋值到新位置。</span></span><br><span class="line">                newTable[lastIdx] = lastRun;</span><br><span class="line">                <span class="comment">// Clone remaining nodes</span></span><br><span class="line">                <span class="keyword">for</span> (HashEntry&lt;K,V&gt; p = e; p != lastRun; p = p.next) &#123;</span><br><span class="line">                    <span class="comment">// 遍历剩余元素，头插法到指定 k 位置。</span></span><br><span class="line">                    <span class="type">V</span> <span class="variable">v</span> <span class="operator">=</span> p.value;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> p.hash;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> h &amp; sizeMask;</span><br><span class="line">                    HashEntry&lt;K,V&gt; n = newTable[k];</span><br><span class="line">                    newTable[k] = <span class="keyword">new</span> <span class="title class_">HashEntry</span>&lt;K,V&gt;(h, p.key, v, n);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 头插法插入新的节点</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">nodeIndex</span> <span class="operator">=</span> node.hash &amp; sizeMask; <span class="comment">// add the new node</span></span><br><span class="line">    node.setNext(newTable[nodeIndex]);</span><br><span class="line">    newTable[nodeIndex] = node;</span><br><span class="line">    table = newTable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="查找">查找</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    Segment&lt;K,V&gt; s; <span class="comment">// manually integrate access methods to reduce overhead</span></span><br><span class="line">    HashEntry&lt;K,V&gt;[] tab;</span><br><span class="line">    <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> hash(key);</span><br><span class="line">    <span class="type">long</span> <span class="variable">u</span> <span class="operator">=</span> (((h &gt;&gt;&gt; segmentShift) &amp; segmentMask) &lt;&lt; SSHIFT) + SBASE;</span><br><span class="line">    <span class="comment">// 计算得到 key 的存放位置</span></span><br><span class="line">    <span class="keyword">if</span> ((s = (Segment&lt;K,V&gt;)UNSAFE.getObjectVolatile(segments, u)) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">        (tab = s.table) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (HashEntry&lt;K,V&gt; e = (HashEntry&lt;K,V&gt;) UNSAFE.getObjectVolatile</span><br><span class="line">                 (tab, ((<span class="type">long</span>)(((tab.length - <span class="number">1</span>) &amp; h)) &lt;&lt; TSHIFT) + TBASE);</span><br><span class="line">             e != <span class="literal">null</span>; e = e.next) &#123;</span><br><span class="line">            <span class="comment">// 如果是链表，遍历查找到相同 key 的 value。</span></span><br><span class="line">            K k;</span><br><span class="line">            <span class="keyword">if</span> ((k = e.key) == key || (e.hash == h &amp;&amp; key.equals(k)))</span><br><span class="line">                <span class="keyword">return</span> e.value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>通过 key 值的 hash 值定位到对应 Segment 对象，再通过 hash 值定位到具体的 entry 对象</li>
<li>遍历链表，通过 equals 取出数据</li>
<li>由于 HashEntry 中的 value 属性是用 volatile 关键字修饰的，保证了内存可见性，所以每次获取时都是最新值，整个过程不需要加锁</li>
</ol>
<h3 id="删除">删除</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">remove</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> hash(key);</span><br><span class="line">    Segment&lt;K,V&gt; s = segmentForHash(hash);</span><br><span class="line">    <span class="keyword">return</span> s == <span class="literal">null</span> ? <span class="literal">null</span> : s.remove(key, hash, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> V <span class="title function_">remove</span><span class="params">(Object key, <span class="type">int</span> hash, Object value)</span> &#123;</span><br><span class="line">    <span class="comment">//获取同步锁</span></span><br><span class="line">    <span class="keyword">if</span> (!tryLock())</span><br><span class="line">        scanAndLock(key, hash);</span><br><span class="line">    <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        HashEntry&lt;K,V&gt;[] tab = table;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (tab.length - <span class="number">1</span>) &amp; hash;</span><br><span class="line">        HashEntry&lt;K,V&gt; e = entryAt(tab, index);</span><br><span class="line">        <span class="comment">//遍历链表用来保存当前链表节点的前一个节点</span></span><br><span class="line">        HashEntry&lt;K,V&gt; pred = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">            K k;</span><br><span class="line">            HashEntry&lt;K,V&gt; next = e.next;</span><br><span class="line">            <span class="comment">//找到key对应的键值对</span></span><br><span class="line">            <span class="keyword">if</span> ((k = e.key) == key ||</span><br><span class="line">                    (e.hash == hash &amp;&amp; key.equals(k))) &#123;</span><br><span class="line">                <span class="type">V</span> <span class="variable">v</span> <span class="operator">=</span> e.value;</span><br><span class="line">                <span class="comment">//键值对的值与传入的value相等</span></span><br><span class="line">                <span class="keyword">if</span> (value == <span class="literal">null</span> || value == v || value.equals(v)) &#123;</span><br><span class="line">                    <span class="comment">//当前元素为头节点，把当前元素的下一个节点设为头节点</span></span><br><span class="line">                    <span class="keyword">if</span> (pred == <span class="literal">null</span>)</span><br><span class="line">                        setEntryAt(tab, index, next);</span><br><span class="line">                    <span class="comment">//不是头节点，把当前链表节点的前一个节点的next指向当前节点的下一个节点</span></span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        pred.setNext(next);</span><br><span class="line">                    ++modCount;</span><br><span class="line">                    --count;</span><br><span class="line">                    oldValue = v;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            pred = e;</span><br><span class="line">            e = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>scanAndLock（自旋）</strong></p>
<p>扫描是否含有指定的 key 并且获取同步锁，当方法执行完毕，即跳出循环成功获取到同步锁，跳出循环的方式：</p>
<ol>
<li>tryLock 方法尝试获取独占锁成功</li>
<li>尝试获取超过最大自旋次数 MAX_SCAN_RETRIES 线程堵塞，当线程从等待队列中被唤醒获取到锁跳出循环</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">scanAndLock</span><span class="params">(Object key, <span class="type">int</span> hash)</span> &#123;</span><br><span class="line">    <span class="comment">// similar to but simpler than scanAndLockForPut</span></span><br><span class="line">    HashEntry&lt;K,V&gt; first = entryForHash(<span class="built_in">this</span>, hash);</span><br><span class="line">    HashEntry&lt;K,V&gt; e = first;</span><br><span class="line">    <span class="type">int</span> <span class="variable">retries</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!tryLock()) &#123;</span><br><span class="line">        HashEntry&lt;K,V&gt; f;</span><br><span class="line">        <span class="keyword">if</span> (retries &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e == <span class="literal">null</span> || key.equals(e.key))</span><br><span class="line">                retries = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                e = e.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (++retries &gt; MAX_SCAN_RETRIES) &#123;</span><br><span class="line">            lock();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((retries &amp; <span class="number">1</span>) == <span class="number">0</span> &amp;&amp; (f = entryForHash(<span class="built_in">this</span>, hash)) != first) &#123;</span><br><span class="line">            e = first = f;</span><br><span class="line">            retries = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ConcurrentHashMap1-8">ConcurrentHashMap1.8</h2>
<h3 id="属性和接口-2">属性和接口</h3>
<p>ConcurrentHashMap 采用了数组+链表+红黑树的实现方法，内部大量采用 CAS 操作，只需要这个链表头节点（红黑树的根节点），就不会影响其他的哈希桶数组元素的读写</p>
<p><img src="2.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcurrentHashMap</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">AbstractMap</span>&lt;K,V&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">ConcurrentMap</span>&lt;K,V&gt;, Serializable &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// node数组最大容量：2^30=1073741824</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAXIMUM_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line">    <span class="comment">// 默认初始值，必须是2的幂数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_CAPACITY</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line">    <span class="comment">// 数组可能最大值，需要与toArray（）相关方法关联</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_ARRAY_SIZE</span> <span class="operator">=</span> Integer.MAX_VALUE - <span class="number">8</span>;</span><br><span class="line">    <span class="comment">// 并发级别，遗留下来的，为兼容以前的版本</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_CONCURRENCY_LEVEL</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line">    <span class="comment">// 负载因子</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">float</span> <span class="variable">LOAD_FACTOR</span> <span class="operator">=</span> <span class="number">0.75f</span>;</span><br><span class="line">    <span class="comment">// 链表转红黑树阀值,&gt; 8 链表转换为红黑树</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TREEIFY_THRESHOLD</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line">    <span class="comment">// 树转链表阀值，小于等于6（tranfer时，lc、hc=0两个计数器分别++记录原bin、新binTreeNode数量，&lt;=UNTREEIFY_THRESHOLD 则untreeify(lo)）</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">UNTREEIFY_THRESHOLD</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line">    <span class="comment">// 最小树容量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MIN_TREEIFY_CAPACITY</span> <span class="operator">=</span> <span class="number">64</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MIN_TRANSFER_STRIDE</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">RESIZE_STAMP_BITS</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line">    <span class="comment">// 2^15-1，help resize的最大线程数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_RESIZERS</span> <span class="operator">=</span> (<span class="number">1</span> &lt;&lt; (<span class="number">32</span> - RESIZE_STAMP_BITS)) - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 32-16=16，sizeCtl中记录size大小的偏移量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">RESIZE_STAMP_SHIFT</span> <span class="operator">=</span> <span class="number">32</span> - RESIZE_STAMP_BITS;</span><br><span class="line">    <span class="comment">// forwarding nodes的hash值</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MOVED</span>     <span class="operator">=</span> -<span class="number">1</span>; </span><br><span class="line">    <span class="comment">// 树根节点的hash值</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TREEBIN</span>   <span class="operator">=</span> -<span class="number">2</span>; </span><br><span class="line">    <span class="comment">// ReservationNode的hash值</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">RESERVED</span>  <span class="operator">=</span> -<span class="number">3</span>; </span><br><span class="line">    <span class="comment">// 可用处理器数量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">NCPU</span> <span class="operator">=</span> Runtime.getRuntime().availableProcessors();</span><br><span class="line">    <span class="comment">// 存放node的数组</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">volatile</span> Node&lt;K,V&gt;[] table;</span><br><span class="line">    <span class="comment">// 扩容总进度</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="type">int</span> transferIndex;</span><br><span class="line">    <span class="comment">// 转移的时候用的数组</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">volatile</span> Node&lt;K,V&gt;[] nextTable;</span><br><span class="line">    <span class="comment">// 控制标识符，用来控制table的初始化和扩容的操作，不同的值有不同的含义</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="type">int</span> sizeCtl;</span><br><span class="line">    <span class="comment">// 该属性保存着整个哈希表中存储的所有的结点的个数总和，有点类似于 HashMap 的 size 属性。</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="type">long</span> baseCount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="构造方法-2">构造方法</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ConcurrentHashMap</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ConcurrentHashMap</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">    <span class="type">int</span> <span class="variable">cap</span> <span class="operator">=</span> ((initialCapacity &gt;= (MAXIMUM_CAPACITY &gt;&gt;&gt; <span class="number">1</span>)) ?</span><br><span class="line">               MAXIMUM_CAPACITY :</span><br><span class="line">               tableSizeFor(initialCapacity + (initialCapacity &gt;&gt;&gt; <span class="number">1</span>) + <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">this</span>.sizeCtl = cap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ConcurrentHashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.sizeCtl = DEFAULT_CAPACITY;</span><br><span class="line">    putAll(m);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ConcurrentHashMap</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(initialCapacity, loadFactor, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ConcurrentHashMap</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor, <span class="type">int</span> concurrencyLevel)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!(loadFactor &gt; <span class="number">0.0f</span>) || initialCapacity &lt; <span class="number">0</span> || concurrencyLevel &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; concurrencyLevel)   </span><br><span class="line">        initialCapacity = concurrencyLevel;  </span><br><span class="line">    <span class="type">long</span> <span class="variable">size</span> <span class="operator">=</span> (<span class="type">long</span>)(<span class="number">1.0</span> + (<span class="type">long</span>)initialCapacity / loadFactor);</span><br><span class="line">    <span class="type">int</span> <span class="variable">cap</span> <span class="operator">=</span> (size &gt;= (<span class="type">long</span>)MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : tableSizeFor((<span class="type">int</span>)size);</span><br><span class="line">    <span class="comment">//初始化时根据这个值作为桶数组table的长度</span></span><br><span class="line">    <span class="built_in">this</span>.sizeCtl = cap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在调用构造方法创建 ConcurrentHashMap 对象时，只是根据传入参数计算桶数组初始长度赋值给 sizeCtl，并没有初始化 table 数组，只有在插入元素时才用 initTable 方法进行延迟加载</p>
<p><strong>initTable（初始化）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Node&lt;K,V&gt;[] initTable() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; <span class="type">int</span> sc;</span><br><span class="line">    <span class="keyword">while</span> ((tab = table) == <span class="literal">null</span> || tab.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//　如果 sizeCtl &lt; 0 ,说明另外的线程执行CAS 成功，正在进行初始化。</span></span><br><span class="line">        <span class="keyword">if</span> ((sc = sizeCtl) &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="comment">// 让出 CPU 使用权</span></span><br><span class="line">            Thread.<span class="keyword">yield</span>(); </span><br><span class="line">        <span class="comment">// sizeCtl设为-1，由当前线程负责桶数组的初始化</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="built_in">this</span>, SIZECTL, sc, -<span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || tab.length == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// 得出数组的大小</span></span><br><span class="line">                    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> (sc &gt; <span class="number">0</span>) ? sc : DEFAULT_CAPACITY;</span><br><span class="line">                    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>&lt;?,?&gt;[n];</span><br><span class="line">                    table = tab = nt;</span><br><span class="line">                    <span class="comment">// 计算数组中可用的大小：实际大小n*0.75（加载因子）</span></span><br><span class="line">                    sc = n - (n &gt;&gt;&gt; <span class="number">2</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                sizeCtl = sc;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ConcurrentHashMap 的初始化是通过自旋和 CAS 操作完成的。里面需要注意的是变量 sizeCtl，它的值决定着当前的初始化状态</p>
<ol>
<li>sizeCtl =-1：表示有线程正在进行真正的初始化操作</li>
<li>sizeCtl =-(1+nThreads)：表示有 nThreads 个线程正在扩容操作</li>
<li>sizeCtl &gt; 0：如果 table 数组还没有初始化，这就是初始化的长度；如果已经初始化了，sizeCtl 是 table 数组长度的 0.75 倍，代表扩容阈值</li>
<li>sizeCtl = 0：默认值，此时在真正的初始化操作中使用默认容量</li>
</ol>
<h3 id="插入-2">插入</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(key, value, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(K key, V value, <span class="type">boolean</span> onlyIfAbsent)</span> &#123;</span><br><span class="line">    <span class="comment">// key 和 value 不能为空</span></span><br><span class="line">    <span class="keyword">if</span> (key == <span class="literal">null</span> || value == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> spread(key.hashCode());</span><br><span class="line">    <span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class="line">        <span class="comment">// f = 目标位置元素</span></span><br><span class="line">        Node&lt;K,V&gt; f; <span class="type">int</span> n, i, fh;<span class="comment">// fh 后面存放目标位置的元素 hash 值</span></span><br><span class="line">        <span class="keyword">if</span> (tab == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            <span class="comment">// 数组桶为空，初始化数组桶（自旋+CAS)</span></span><br><span class="line">            tab = initTable();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; hash)) == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 桶内为空，CAS 放入，不加锁，成功了就直接 break 跳出</span></span><br><span class="line">            <span class="keyword">if</span> (casTabAt(tab, i, <span class="literal">null</span>,<span class="keyword">new</span> <span class="title class_">Node</span>&lt;K,V&gt;(hash, key, value, <span class="literal">null</span>)))</span><br><span class="line">                <span class="keyword">break</span>;  <span class="comment">// no lock when adding to empty bin</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//桶里的节点是ForwardingNode,ConcurrentHashMap处于扩容阶段，让当前线程帮助扩容</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">            tab = helpTransfer(tab, f);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">V</span> <span class="variable">oldVal</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="comment">// 使用 synchronized 加锁加入节点</span></span><br><span class="line">            <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                    <span class="comment">// 说明是链表</span></span><br><span class="line">                    <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        binCount = <span class="number">1</span>;</span><br><span class="line">                        <span class="comment">// 循环加入新的或者覆盖节点</span></span><br><span class="line">                        <span class="keyword">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</span><br><span class="line">                            K ek;</span><br><span class="line">                            <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                                ((ek = e.key) == key || (ek != <span class="literal">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class="line">                                oldVal = e.val;</span><br><span class="line">                                <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                    e.val = value;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            Node&lt;K,V&gt; pred = e;</span><br><span class="line">                            <span class="keyword">if</span> ((e = e.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">                                pred.next = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;K,V&gt;(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</span><br><span class="line">                        <span class="comment">// 红黑树</span></span><br><span class="line">                        Node&lt;K,V&gt; p;</span><br><span class="line">                        binCount = <span class="number">2</span>;</span><br><span class="line">                        <span class="keyword">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key, value)) != <span class="literal">null</span>) &#123;</span><br><span class="line">                            oldVal = p.val;</span><br><span class="line">                            <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                p.val = value;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//检查是否需要把链表转为红黑树</span></span><br><span class="line">            <span class="keyword">if</span> (binCount != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class="line">                    treeifyBin(tab, i);</span><br><span class="line">                <span class="keyword">if</span> (oldVal != <span class="literal">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> oldVal;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//更新ConcurrentHashMap中存放键值对个数</span></span><br><span class="line">    addCount(<span class="number">1L</span>, binCount);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>根据 key 计算出 hashCode，判断下面的 4 种情况</li>
</ol>
<ul>
<li>判断是否需要进行初始化，如果桶数组为空，初始化桶数组（CAS+自旋，即执行 initTable 方法）</li>
<li>判断当前 key 定位出的 Node，如果桶数组中的元素为空表示当前位置可以写入数据，利用 CAS 尝试写入，失败则自旋，保证成功</li>
<li>如果当前位置的 hashCode = MOVED（-1），说明其他线程在扩容，则需要进行扩容</li>
<li>如果都不满足，则利用 synchronized 锁写入数据</li>
</ul>
<ol start="2">
<li>如果数量大于 TREEIFY_THRESHOLD 则要执行树化方法，在 treeifyBin 中会首先判断当前数组长度 &gt;= 64 时才会将链表转换为红黑树</li>
<li>判断是否需要扩容，如果超过了临界值就需要扩容</li>
</ol>
<h3 id="触发扩容的情况">触发扩容的情况</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//新增元素时，也就是在调用 putVal 方法后，为了通用，增加了个 check 入参，用于指定是否可能会出现扩容的情况</span></span><br><span class="line"><span class="comment">//check &gt;= 0 即为可能出现扩容的情况，例如 putVal方法中的调用</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">addCount</span><span class="params">(<span class="type">long</span> x, <span class="type">int</span> check)</span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">if</span> (check &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab, nt; <span class="type">int</span> n, sc;</span><br><span class="line">        <span class="comment">//检查当前集合元素个数 s 是否达到扩容阈值 sizeCtl ，扩容时 sizeCtl 为负数，依旧成立，同时还得满足数组非空且数组长度不能大于允许的数组最大长度这两个条件才能继续</span></span><br><span class="line">        <span class="comment">//这个 while 循环除了判断是否达到阈值从而进行扩容操作之外还有一个作用就是当一条线程完成自己的迁移任务后，如果集合还在扩容，则会继续循环，继续加入扩容大军，申请后面的迁移任务</span></span><br><span class="line">        <span class="keyword">while</span> (s &gt;= (<span class="type">long</span>)(sc = sizeCtl) &amp;&amp; (tab = table) != <span class="literal">null</span> &amp;&amp; (n = tab.length) &lt; MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">rs</span> <span class="operator">=</span> resizeStamp(n);</span><br><span class="line">            <span class="comment">// sc &lt; 0 说明集合正在扩容当中</span></span><br><span class="line">            <span class="keyword">if</span> (sc &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//判断扩容是否结束或者并发扩容线程数是否已达最大值，如果是的话直接结束while循环</span></span><br><span class="line">                <span class="keyword">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class="number">1</span> || sc == rs + MAX_RESIZERS || (nt = nextTable) == <span class="literal">null</span> || transferIndex &lt;= <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">//扩容还未结束，并且允许扩容线程加入，此时加入扩容大军中</span></span><br><span class="line">                <span class="keyword">if</span> (U.compareAndSwapInt(<span class="built_in">this</span>, SIZECTL, sc, sc + <span class="number">1</span>))</span><br><span class="line">                    transfer(tab, nt);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果集合还未处于扩容状态中，则进入扩容方法，并首先初始化 nextTab 数组，也就是新数组</span></span><br><span class="line">            <span class="comment">//(rs &lt;&lt; RESIZE_STAMP_SHIFT) + 2 为首个扩容线程所设置的特定值，后面扩容时会根据线程是否为这个值来确定是否为最后一个线程</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="built_in">this</span>, SIZECTL, sc, (rs &lt;&lt; RESIZE_STAMP_SHIFT) + <span class="number">2</span>))</span><br><span class="line">                transfer(tab, <span class="literal">null</span>);</span><br><span class="line">            s = sumCount();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//扩容状态下其他线程对集合进行插入、修改、删除、合并、compute等操作时遇到 ForwardingNode 节点会调用该帮助扩容方法 (ForwardingNode 后面介绍)</span></span><br><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] helpTransfer(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt; f) &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] nextTab; <span class="type">int</span> sc;</span><br><span class="line">    <span class="keyword">if</span> (tab != <span class="literal">null</span> &amp;&amp; (f <span class="keyword">instanceof</span> ForwardingNode) &amp;&amp; (nextTab = ((ForwardingNode&lt;K,V&gt;)f).nextTable) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rs</span> <span class="operator">=</span> resizeStamp(tab.length);</span><br><span class="line">        <span class="comment">//此处的 while 循环是上面 addCount 方法的简版，可以参考上面的注释</span></span><br><span class="line">        <span class="keyword">while</span> (nextTab == nextTable &amp;&amp; table == tab &amp;&amp; (sc = sizeCtl) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class="number">1</span> ||</span><br><span class="line">                sc == rs + MAX_RESIZERS || transferIndex &lt;= <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span> (U.compareAndSwapInt(<span class="built_in">this</span>, SIZECTL, sc, sc + <span class="number">1</span>)) &#123;</span><br><span class="line">                transfer(tab, nextTab);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nextTab;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> table;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//putAll批量插入或者插入节点后发现链表长度达到8个或以上，但数组长度为64以下时触发的扩容会调用到这个方法</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">tryPresize</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> (size &gt;= (MAXIMUM_CAPACITY &gt;&gt;&gt; <span class="number">1</span>)) ? MAXIMUM_CAPACITY : tableSizeFor(size + (size &gt;&gt;&gt; <span class="number">1</span>) + <span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> sc;</span><br><span class="line">    <span class="comment">//如果不满足条件，也就是 sizeCtl &lt; 0 ，说明有其他线程正在扩容当中，这里也就不需要自己去扩容了，结束该方法</span></span><br><span class="line">    <span class="keyword">while</span> ((sc = sizeCtl) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab = table; <span class="type">int</span> n;</span><br><span class="line">        <span class="comment">//如果数组初始化则进行初始化，这个选项主要是为批量插入操作方法 putAll 提供的</span></span><br><span class="line">        <span class="keyword">if</span> (tab == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>) &#123;</span><br><span class="line">            n = (sc &gt; c) ? sc : c;</span><br><span class="line">            <span class="comment">//初始化时将 sizeCtl 设置为 -1 ，保证单线程初始化</span></span><br><span class="line">            <span class="keyword">if</span> (U.compareAndSwapInt(<span class="built_in">this</span>, SIZECTL, sc, -<span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (table == tab) &#123;</span><br><span class="line">                        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                        Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>&lt;?,?&gt;[n];</span><br><span class="line">                        table = nt;</span><br><span class="line">                        sc = n - (n &gt;&gt;&gt; <span class="number">2</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">//初始化完成后 sizeCtl 用于记录当前集合的负载容量值，也就是触发集合扩容的阈值</span></span><br><span class="line">                    sizeCtl = sc;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (c &lt;= sc || n &gt;= MAXIMUM_CAPACITY)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">//插入节点后发现链表长度达到8个或以上，但数组长度为64以下时触发的扩容会进入到下面这个 else if 分支</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (tab == table) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">rs</span> <span class="operator">=</span> resizeStamp(n);</span><br><span class="line">            <span class="comment">//下面的内容基本跟上面 addCount 方法的 while 循环内部一致，可以参考上面的注释</span></span><br><span class="line">            <span class="keyword">if</span> (sc &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                Node&lt;K,V&gt;[] nt;</span><br><span class="line">                <span class="keyword">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class="number">1</span> || sc == rs + MAX_RESIZERS || (nt = nextTable) == <span class="literal">null</span> || transferIndex &lt;= <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span> (U.compareAndSwapInt(<span class="built_in">this</span>, SIZECTL, sc, sc + <span class="number">1</span>))</span><br><span class="line">                    transfer(tab, nt);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="built_in">this</span>, SIZECTL, sc, (rs &lt;&lt; RESIZE_STAMP_SHIFT) + <span class="number">2</span>))</span><br><span class="line">                transfer(tab, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>在调用 addCount 方法增加集合元素计数后发现当前集合元素个数到达扩容阈值时就会触发扩容</li>
<li>扩容状态下其他线程对集合进行插入、修改、删除、合并、compute 等操作时遇到 ForwardingNode 节点会触发扩容</li>
<li>putAll 批量插入或者插入节点后发现存在链表长度达到 8 个以上，但数组长度为 64 以下时会触发扩容</li>
</ol>
<h3 id="扩容方法">扩容方法</h3>
<p>调用该扩容方法的地方：</p>
<ol>
<li>addCount：向集合中插入新数据后更新容量计数时发现到达扩容阈值而触发的扩容</li>
<li>helpTransfer：扩容状态下其他线程对集合进行插入、修改、删除、合并、compute 等操作时遇到 ForwardingNode 节点时触发的扩容</li>
<li>tryPresize：putAll 批量插入或者插入后发现链表长度达到 8 个或以上，但数组长度为 64 以下时触发的扩容</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt;[] nextTab)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> tab.length, stride;</span><br><span class="line">    <span class="comment">//计算每条线程处理的桶个数，每条线程处理的桶数量一样，如果CPU为单核，则使用一条线程处理所有桶</span></span><br><span class="line">    <span class="comment">//每条线程至少处理16个桶，如果计算出来的结果少于16，则一条线程处理16个桶</span></span><br><span class="line">    <span class="keyword">if</span> ((stride = (NCPU &gt; <span class="number">1</span>) ? (n &gt;&gt;&gt; <span class="number">3</span>) / NCPU : n) &lt; MIN_TRANSFER_STRIDE)</span><br><span class="line">        stride = MIN_TRANSFER_STRIDE; <span class="comment">// subdivide range</span></span><br><span class="line">    <span class="keyword">if</span> (nextTab == <span class="literal">null</span>) &#123;            <span class="comment">// 初始化新数组(原数组长度的2倍)</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">            Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>&lt;?,?&gt;[n &lt;&lt; <span class="number">1</span>];</span><br><span class="line">            nextTab = nt;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable ex) &#123;      <span class="comment">// try to cope with OOME</span></span><br><span class="line">            sizeCtl = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        nextTable = nextTab;</span><br><span class="line">        <span class="comment">//将 transferIndex 指向最右边的桶，也就是数组索引下标最大的位置</span></span><br><span class="line">        transferIndex = n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">nextn</span> <span class="operator">=</span> nextTab.length;</span><br><span class="line">    <span class="comment">//新建一个占位对象，该占位对象的 hash 值为 -1 该占位对象存在时表示集合正在扩容状态，key、value、next 属性均为 null ，nextTable 属性指向扩容后的数组</span></span><br><span class="line">    <span class="comment">//该占位对象主要有两个用途：</span></span><br><span class="line">    <span class="comment">//   1、占位作用，用于标识数组该位置的桶已经迁移完毕，处于扩容中的状态。</span></span><br><span class="line">    <span class="comment">//   2、作为一个转发的作用，扩容期间如果遇到查询操作，遇到转发节点，会把该查询操作转发到新的数组上去，不会阻塞查询操作。</span></span><br><span class="line">    ForwardingNode&lt;K,V&gt; fwd = <span class="keyword">new</span> <span class="title class_">ForwardingNode</span>&lt;K,V&gt;(nextTab);</span><br><span class="line">    <span class="comment">//该标识用于控制是否继续处理下一个桶，为 true 则表示已经处理完当前桶，可以继续迁移下一个桶的数据</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">advance</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">//该标识用于控制扩容何时结束，该标识还有一个用途是最后一个扩容线程会负责重新检查一遍数组查看是否有遗漏的桶</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">finishing</span> <span class="operator">=</span> <span class="literal">false</span>; <span class="comment">// to ensure sweep before committing nextTab</span></span><br><span class="line">    <span class="comment">//这个循环用于处理一个 stride 长度的任务，i 后面会被赋值为该 stride 内最大的下标，而 bound 后面会被赋值为该 stride 内最小的下标</span></span><br><span class="line">    <span class="comment">//通过循环不断减小 i 的值，从右往左依次迁移桶上面的数据，直到 i 小于 bound 时结束该次长度为 stride 的迁移任务</span></span><br><span class="line">    <span class="comment">//结束这次的任务后会通过外层 addCount、helpTransfer、tryPresize 方法的 while 循环达到继续领取其他任务的效果</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, bound = <span class="number">0</span>;;) &#123;</span><br><span class="line">        Node&lt;K,V&gt; f; <span class="type">int</span> fh;</span><br><span class="line">        <span class="keyword">while</span> (advance) &#123;</span><br><span class="line">            <span class="type">int</span> nextIndex, nextBound;</span><br><span class="line">            <span class="comment">//每处理完一个hash桶就将 bound 进行减 1 操作</span></span><br><span class="line">            <span class="keyword">if</span> (--i &gt;= bound || finishing)</span><br><span class="line">                advance = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((nextIndex = transferIndex) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//transferIndex &lt;= 0 说明数组的hash桶已被线程分配完毕，没有了待分配的hash桶，将 i 设置为 -1 ，后面的代码根据这个数值退出当前线的扩容操作</span></span><br><span class="line">                i = -<span class="number">1</span>;</span><br><span class="line">                advance = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//只有首次进入for循环才会进入这个判断里面去，设置 bound 和 i 的值，也就是领取到的迁移任务的数组区间</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="built_in">this</span>, TRANSFERINDEX, nextIndex, nextBound = (nextIndex &gt; stride ? nextIndex - stride : <span class="number">0</span>))) &#123;</span><br><span class="line">                bound = nextBound;</span><br><span class="line">                i = nextIndex - <span class="number">1</span>;</span><br><span class="line">                advance = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= n || i + n &gt;= nextn) &#123;</span><br><span class="line">            <span class="type">int</span> sc;</span><br><span class="line">            <span class="comment">//扩容结束后做后续工作，将 nextTable 设置为 null，表示扩容已结束，将 table 指向新数组，sizeCtl 设置为扩容阈值</span></span><br><span class="line">            <span class="keyword">if</span> (finishing) &#123;</span><br><span class="line">                nextTable = <span class="literal">null</span>;</span><br><span class="line">                table = nextTab;</span><br><span class="line">                sizeCtl = (n &lt;&lt; <span class="number">1</span>) - (n &gt;&gt;&gt; <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//每当一条线程扩容结束就会更新一次 sizeCtl 的值，进行减 1 操作</span></span><br><span class="line">            <span class="keyword">if</span> (U.compareAndSwapInt(<span class="built_in">this</span>, SIZECTL, sc = sizeCtl, sc - <span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="comment">//(sc - 2) != resizeStamp(n) &lt;&lt; RESIZE_STAMP_SHIFT 成立，说明该线程不是扩容大军里面的最后一条线程，直接return回到上层while循环</span></span><br><span class="line">                <span class="keyword">if</span> ((sc - <span class="number">2</span>) != resizeStamp(n) &lt;&lt; RESIZE_STAMP_SHIFT)</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                <span class="comment">//(sc - 2) == resizeStamp(n) &lt;&lt; RESIZE_STAMP_SHIFT 说明这条线程是最后一条扩容线程</span></span><br><span class="line">                <span class="comment">//之所以能用这个来判断是否是最后一条线程，因为第一条扩容线程进行了如下操作：</span></span><br><span class="line">                <span class="comment">//    U.compareAndSwapInt(this, SIZECTL, sc, (rs &lt;&lt; RESIZE_STAMP_SHIFT) + 2)</span></span><br><span class="line">                <span class="comment">//除了修改结束标识之外，还得设置 i = n; 以便重新检查一遍数组，防止有遗漏未成功迁移的桶</span></span><br><span class="line">                finishing = advance = <span class="literal">true</span>;</span><br><span class="line">                i = n; <span class="comment">// recheck before commit</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i)) == <span class="literal">null</span>)</span><br><span class="line">            <span class="comment">//遇到数组上空的位置直接放置一个占位对象，以便查询操作的转发和标识当前处于扩容状态</span></span><br><span class="line">            advance = casTabAt(tab, i, <span class="literal">null</span>, fwd);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">            <span class="comment">//数组上遇到hash值为MOVED，也就是 -1 的位置，说明该位置已经被其他线程迁移过了，将 advance 设置为 true ，以便继续往下一个桶检查并进行迁移操作</span></span><br><span class="line">            advance = <span class="literal">true</span>; <span class="comment">// already processed</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                    Node&lt;K,V&gt; ln, hn;</span><br><span class="line">                    <span class="comment">//该节点为链表结构</span></span><br><span class="line">                    <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">runBit</span> <span class="operator">=</span> fh &amp; n;</span><br><span class="line">                        Node&lt;K,V&gt; lastRun = f;</span><br><span class="line">                        <span class="comment">//遍历整条链表，找出 lastRun 节点</span></span><br><span class="line">                        <span class="keyword">for</span> (Node&lt;K,V&gt; p = f.next; p != <span class="literal">null</span>; p = p.next) &#123;</span><br><span class="line">                            <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> p.hash &amp; n;</span><br><span class="line">                            <span class="keyword">if</span> (b != runBit) &#123;</span><br><span class="line">                                runBit = b;</span><br><span class="line">                                lastRun = p;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//根据 lastRun 节点的高位标识(0 或 1)，首先将 lastRun设置为 ln 或者 hn 链的末尾部分节点，后续的节点使用头插法拼接</span></span><br><span class="line">                        <span class="keyword">if</span> (runBit == <span class="number">0</span>) &#123;</span><br><span class="line">                            ln = lastRun;</span><br><span class="line">                            hn = <span class="literal">null</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            hn = lastRun;</span><br><span class="line">                            ln = <span class="literal">null</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//使用高位和低位两条链表进行迁移，使用头插法拼接链表</span></span><br><span class="line">                        <span class="keyword">for</span> (Node&lt;K,V&gt; p = f; p != lastRun; p = p.next) &#123;</span><br><span class="line">                            <span class="type">int</span> <span class="variable">ph</span> <span class="operator">=</span> p.hash; <span class="type">K</span> <span class="variable">pk</span> <span class="operator">=</span> p.key; <span class="type">V</span> <span class="variable">pv</span> <span class="operator">=</span> p.val;</span><br><span class="line">                            <span class="keyword">if</span> ((ph &amp; n) == <span class="number">0</span>)</span><br><span class="line">                                ln = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;K,V&gt;(ph, pk, pv, ln);</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hn = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;K,V&gt;(ph, pk, pv, hn);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//setTabAt方法调用的是 Unsafe 类的 putObjectVolatile 方法</span></span><br><span class="line">                        <span class="comment">//使用 volatile 方式的 putObjectVolatile 方法，能够将数据直接更新回主内存，并使得其他线程工作内存的对应变量失效，达到各线程数据及时同步的效果</span></span><br><span class="line">                        <span class="comment">//使用 volatile 的方式将 ln 链设置到新数组下标为 i 的位置上</span></span><br><span class="line">                        setTabAt(nextTab, i, ln);</span><br><span class="line">                        <span class="comment">//使用 volatile 的方式将 hn 链设置到新数组下标为 i + n(n为原数组长度) 的位置上</span></span><br><span class="line">                        setTabAt(nextTab, i + n, hn);</span><br><span class="line">                        <span class="comment">//迁移完成后使用 volatile 的方式将占位对象设置到该 hash 桶上，该占位对象的用途是标识该hash桶已被处理过，以及查询请求的转发作用</span></span><br><span class="line">                        setTabAt(tab, i, fwd);</span><br><span class="line">                        <span class="comment">//advance 设置为 true 表示当前 hash 桶已处理完，可以继续处理下一个 hash 桶</span></span><br><span class="line">                        advance = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//该节点为红黑树结构</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</span><br><span class="line">                        TreeBin&lt;K,V&gt; t = (TreeBin&lt;K,V&gt;)f;</span><br><span class="line">                        <span class="comment">//lo 为低位链表头结点，loTail 为低位链表尾结点，hi 和 hiTail 为高位链表头尾结点</span></span><br><span class="line">                        TreeNode&lt;K,V&gt; lo = <span class="literal">null</span>, loTail = <span class="literal">null</span>;</span><br><span class="line">                        TreeNode&lt;K,V&gt; hi = <span class="literal">null</span>, hiTail = <span class="literal">null</span>;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">lc</span> <span class="operator">=</span> <span class="number">0</span>, hc = <span class="number">0</span>;</span><br><span class="line">                        <span class="comment">//同样也是使用高位和低位两条链表进行迁移</span></span><br><span class="line">                        <span class="comment">//使用for循环以链表方式遍历整棵红黑树，使用尾插法拼接 ln 和 hn 链表</span></span><br><span class="line">                        <span class="keyword">for</span> (Node&lt;K,V&gt; e = t.first; e != <span class="literal">null</span>; e = e.next) &#123;</span><br><span class="line">                            <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> e.hash;</span><br><span class="line">                            <span class="comment">//这里面形成的是以 TreeNode 为节点的链表</span></span><br><span class="line">                            TreeNode&lt;K,V&gt; p = <span class="keyword">new</span> <span class="title class_">TreeNode</span>&lt;K,V&gt;</span><br><span class="line">                                (h, e.key, e.val, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">                            <span class="keyword">if</span> ((h &amp; n) == <span class="number">0</span>) &#123;</span><br><span class="line">                                <span class="keyword">if</span> ((p.prev = loTail) == <span class="literal">null</span>)</span><br><span class="line">                                    lo = p;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    loTail.next = p;</span><br><span class="line">                                loTail = p;</span><br><span class="line">                                ++lc;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="keyword">if</span> ((p.prev = hiTail) == <span class="literal">null</span>)</span><br><span class="line">                                    hi = p;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    hiTail.next = p;</span><br><span class="line">                                hiTail = p;</span><br><span class="line">                                ++hc;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//形成中间链表后会先判断是否需要转换为红黑树：</span></span><br><span class="line">                        <span class="comment">//1、如果符合条件则直接将 TreeNode 链表转为红黑树，再设置到新数组中去</span></span><br><span class="line">                        <span class="comment">//2、如果不符合条件则将 TreeNode 转换为普通的 Node 节点，再将该普通链表设置到新数组中去</span></span><br><span class="line">                        <span class="comment">//(hc != 0) ? new TreeBin&lt;K,V&gt;(lo) : t 这行代码的用意在于，如果原来的红黑树没有被拆分成两份，那么迁移后它依旧是红黑树，可以直接使用原来的 TreeBin 对象</span></span><br><span class="line">                        ln = (lc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(lo) :</span><br><span class="line">                        (hc != <span class="number">0</span>) ? <span class="keyword">new</span> <span class="title class_">TreeBin</span>&lt;K,V&gt;(lo) : t;</span><br><span class="line">                        hn = (hc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(hi) :</span><br><span class="line">                        (lc != <span class="number">0</span>) ? <span class="keyword">new</span> <span class="title class_">TreeBin</span>&lt;K,V&gt;(hi) : t;</span><br><span class="line">                        <span class="comment">//setTabAt方法调用的是 Unsafe 类的 putObjectVolatile 方法</span></span><br><span class="line">                        <span class="comment">//使用 volatile 方式的 putObjectVolatile 方法，能够将数据直接更新回主内存，并使得其他线程工作内存的对应变量失效，达到各线程数据及时同步的效果</span></span><br><span class="line">                        <span class="comment">//使用 volatile 的方式将 ln 链设置到新数组下标为 i 的位置上</span></span><br><span class="line">                        setTabAt(nextTab, i, ln);</span><br><span class="line">                        <span class="comment">//使用 volatile 的方式将 hn 链设置到新数组下标为 i + n(n为原数组长度) 的位置上</span></span><br><span class="line">                        setTabAt(nextTab, i + n, hn);</span><br><span class="line">                        <span class="comment">//迁移完成后使用 volatile 的方式将占位对象设置到该 hash 桶上，该占位对象的用途是标识该hash桶已被处理过，以及查询请求的转发作用</span></span><br><span class="line">                        setTabAt(tab, i, fwd);</span><br><span class="line">                        <span class="comment">//advance 设置为 true 表示当前 hash 桶已处理完，可以继续处理下一个 hash 桶</span></span><br><span class="line">                        advance = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>扩容期间在未迁移到的 hash 桶插入数据会发生什么？</li>
</ol>
<p>只要插入的位置扩容线程还未迁移到，就可以插入，当迁移到该插入的位置时，就会阻塞等待插入操作完成再继续迁移</p>
<ol start="2">
<li>正在迁移的 hash 桶遇到 get 操作会发生什么？</li>
</ol>
<p>在扩容过程期间形成的 hn 和 ln 链是使用的类似于复制引用的方式，即 ln 和 hn 链是复制出来的，而非原来的链表迁移过去的，所以原来 hash 桶上的链表并没有受到影响，因此从迁移开始到迁移结束这段时间都是可以正常访问原数组 hash 桶上面的链表，迁移结束后放置上 fwd，往后的询问请求就直接转发到扩容后的数组去了</p>
<ol start="3">
<li>如果 lastRun 节点正好在一条全部都为高位或者都为低位的链表上，会不会形成死循环？</li>
</ol>
<p>在数组长度为 64 之前会导致一直扩容，但是到了 64 或者以上后就会转换为红黑树，因此不会一直死循环</p>
<ol start="4">
<li>扩容后 ln 和 hn 链不用经过 hash 取模运算，分别被直接放置在新数组的 i 和 n+1 的位置上，那么如何保证这种方式依旧可以用过 h&amp;(n-1)正确算出 hash 桶的位置？</li>
</ol>
<p>如果 fh&amp;(n-1)= i，那么扩容之后的 hash 计算方法应该是 fh&amp;(2n-1)，因此 n 是 2 的幂次方数组，所以如果 n = 16，n-1 就是 1111（二进制），那么 2n-1 就是 11111（二进制），所以说如果 fh 的第 5 位不是 1 的话，fh&amp;n = 0 可得出 fh&amp;(2n-1)== fh&amp;(n-1)= i；如果是 1 的话，fh&amp;n = n 可得出 fh&amp;(2n-1)= i+n</p>
<h3 id="查找-2">查找</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; e, p; <span class="type">int</span> n, eh; K ek;</span><br><span class="line">    <span class="comment">// key 所在的 hash 位置</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> spread(key.hashCode());</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="literal">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (e = tabAt(tab, (n - <span class="number">1</span>) &amp; h)) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果指定位置元素存在，头结点hash值相同</span></span><br><span class="line">        <span class="keyword">if</span> ((eh = e.hash) == h) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((ek = e.key) == key || (ek != <span class="literal">null</span> &amp;&amp; key.equals(ek)))</span><br><span class="line">                <span class="comment">// key hash 值相等，key值相同，直接返回元素 value</span></span><br><span class="line">                <span class="keyword">return</span> e.val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (eh &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="comment">// 头结点hash值小于0，说明正在扩容或者是红黑树，find查找</span></span><br><span class="line">            <span class="keyword">return</span> (p = e.find(h, key)) != <span class="literal">null</span> ? p.val : <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> ((e = e.next) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 是链表，遍历查找</span></span><br><span class="line">            <span class="keyword">if</span> (e.hash == h &amp;&amp;</span><br><span class="line">                ((ek = e.key) == key || (ek != <span class="literal">null</span> &amp;&amp; key.equals(ek))))</span><br><span class="line">                <span class="keyword">return</span> e.val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>根据 hash 值计算位置</li>
<li>查找到指定位置，如果头节点就是要找的，直接返回它的 value</li>
<li>如果头节点 hash 值小于 0，说明正在扩容或者是红黑树，find 查找</li>
<li>如果是链表，遍历查找</li>
</ol>
<h3 id="为什么不支持-Key-或-Value-为-null？">为什么不支持 Key 或 Value 为 null？</h3>
<ol>
<li>
<p>避免歧义：在多线程环境下，get(key)方法如果返回 null，不知道这个 null 是代表 key 不存在或者是值本来就是 null;</p>
</li>
<li>
<p>简化实现：如果允许 null，代码里面就需要频繁的去判断 null 到底是代表 key 不存在或者是值本来就是 null</p>
</li>
</ol>
<p><strong>HashMap 为什么可以?</strong></p>
<p>HashMap 设计的初衷是单线程，它有 containsKey 方法可以判断 key 是否存在。ConcurrentHashMap 不能用 containsKey，因为多线程环境下也会有歧义。比如：刚判断完 key 不存在，然后就有一个线程插入了这个 key</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java集合</tag>
      </tags>
  </entry>
  <entry>
    <title>List（3-CopyOnWriteArrayList）</title>
    <url>/blog/2024/12/11/%E5%BF%83%E5%BE%97/Java%E9%9B%86%E5%90%88/List%EF%BC%883-CopyOnWriteArrayList%EF%BC%89/</url>
    <content><![CDATA[<h2 id="实现原理">实现原理</h2>
<p>CopyOnWriteArrayList 允许线程并发访问读操作，这个时候是没有加锁限制的，性能较高。而写操作的时候，则首先将容器复制一份，然后再新的副本上执行写操作，这个时候写操作是上锁的，结束之后再将原容器的引用指向新容器。</p>
<p>注意：在上锁执行写操作的过程中，如果有需要读操作，会作用在原容器上。因此上锁的写操作不会影响到并发访问的读操作</p>
<h2 id="属性和接口">属性和接口</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CopyOnWriteArrayList</span>&lt;E&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable &#123;</span><br><span class="line">    <span class="comment">//互斥锁</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">transient</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//底层存储数据数组，只能通过 getArray/setArray 访问设置，volatile 动态数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Object[] array;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">setArray</span><span class="params">(Object[] a)</span> &#123;</span><br><span class="line">        array = a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="构造方法">构造方法</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">CopyOnWriteArrayList</span><span class="params">()</span> &#123;</span><br><span class="line">    setArray(<span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//传入 Collection 集合对象，将集合中元素存入 CopyOnWriteArrayList</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">CopyOnWriteArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">    Object[] elements;</span><br><span class="line">    <span class="keyword">if</span> (c.getClass() == CopyOnWriteArrayList.class)</span><br><span class="line">        elements = ((CopyOnWriteArrayList&lt;?&gt;)c).getArray();</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        elements = c.toArray();</span><br><span class="line">        <span class="comment">// c.toArray might (incorrectly) not return Object [] (see 6260652)</span></span><br><span class="line">        <span class="keyword">if</span> (elements.getClass() != Object[].class)</span><br><span class="line">            elements = Arrays.copyOf(elements, elements.length, Object[].class);</span><br><span class="line">    &#125;</span><br><span class="line">    setArray(elements);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//传入数组</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">CopyOnWriteArrayList</span><span class="params">(E[] toCopyIn)</span> &#123;</span><br><span class="line">    setArray(Arrays.copyOf(toCopyIn, toCopyIn.length, Object[].class));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="插入">插入</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="comment">//获得互斥锁</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="built_in">this</span>.lock;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//获取原始数组</span></span><br><span class="line">        Object[] elements = getArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> elements.length;</span><br><span class="line">        Object[] newElements = Arrays.copyOf(elements, len + <span class="number">1</span>);</span><br><span class="line">        newElements[len] = e;</span><br><span class="line">        <span class="comment">//用新的拷贝数组代替原始数组</span></span><br><span class="line">        setArray(newElements);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">    <span class="comment">//互斥锁</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="built_in">this</span>.lock;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//原始数组</span></span><br><span class="line">        Object[] elements = getArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> elements.length;</span><br><span class="line">        <span class="comment">//检查 index 有效性</span></span><br><span class="line">        <span class="keyword">if</span> (index &gt; len || index &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(<span class="string">&quot;Index: &quot;</span>+index+<span class="string">&quot;, Size: &quot;</span>+len);</span><br><span class="line">        <span class="comment">//拷贝数组</span></span><br><span class="line">        Object[] newElements;</span><br><span class="line">        <span class="comment">//从 index 到数组末尾要向后移动一位数组元素的个数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">numMoved</span> <span class="operator">=</span> len - index;</span><br><span class="line">        <span class="comment">//如果 index == length，直接把原数组复制到新数组</span></span><br><span class="line">        <span class="keyword">if</span> (numMoved == <span class="number">0</span>)</span><br><span class="line">            newElements = Arrays.copyOf(elements, len + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//否则分成两段复制，原始数组 index 前面的元素位置一一对应赋值到新数组，原数组 index 开始的元素复制到</span></span><br><span class="line">        <span class="comment">//新数组 index+1 到 length+1，相当于依次后移。空出来的 index 就是新元素插入的位置</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            newElements = <span class="keyword">new</span> <span class="title class_">Object</span>[len + <span class="number">1</span>];</span><br><span class="line">            System.arraycopy(elements, <span class="number">0</span>, newElements, <span class="number">0</span>, index);</span><br><span class="line">            System.arraycopy(elements, index, newElements, index + <span class="number">1</span>, numMoved);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//插入新元素</span></span><br><span class="line">        newElements[index] = element;</span><br><span class="line">        setArray(newElements);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>在写入过程中使用了互斥锁，所以同一时间只有一个线程在修改 CopyOnWriteArrayList</li>
<li>增加元素并不是直接在原数组操作，而是在原数组的拷贝数组上添加元素的，添加完元素再调用 setArray 方法用新数组代替原始数组</li>
</ol>
<h2 id="删除">删除</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据下标删除元素</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="built_in">this</span>.lock;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Object[] elements = getArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> elements.length;</span><br><span class="line">        <span class="comment">//数组 index 处要移除的元素</span></span><br><span class="line">        <span class="type">E</span> <span class="variable">oldValue</span> <span class="operator">=</span> get(elements, index);</span><br><span class="line">        <span class="type">int</span> <span class="variable">numMoved</span> <span class="operator">=</span> len - index - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (numMoved == <span class="number">0</span>)</span><br><span class="line">            setArray(Arrays.copyOf(elements, len - <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Object[] newElements = <span class="keyword">new</span> <span class="title class_">Object</span>[len - <span class="number">1</span>];</span><br><span class="line">            System.arraycopy(elements, <span class="number">0</span>, newElements, <span class="number">0</span>, index);</span><br><span class="line">            System.arraycopy(elements, index + <span class="number">1</span>, newElements, index, numMoved);</span><br><span class="line">            setArray(newElements);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据元素删除</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    Object[] snapshot = getArray();</span><br><span class="line">    <span class="comment">//查找指定元素下标</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> indexOf(o, snapshot, <span class="number">0</span>, snapshot.length);</span><br><span class="line">    <span class="keyword">return</span> (index &lt; <span class="number">0</span>) ? <span class="literal">false</span> : remove(o, snapshot, index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(Object o, Object[] elements, <span class="type">int</span> index, <span class="type">int</span> fence)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> index; i &lt; fence; i++)</span><br><span class="line">            <span class="keyword">if</span> (elements[i] == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> index; i &lt; fence; i++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elements[i]))</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o, Object[] snapshot, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="built_in">this</span>.lock;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Object[] current = getArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> current.length;</span><br><span class="line">        <span class="comment">//判断当前数组元素是否相同，如果不相同则重新查找元素的下标</span></span><br><span class="line">        <span class="keyword">if</span> (snapshot != current) findIndex: &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">prefix</span> <span class="operator">=</span> Math.min(index, len);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; prefix; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (current[i] != snapshot[i] &amp;&amp; eq(o, current[i])) &#123;</span><br><span class="line">                    index = i;</span><br><span class="line">                    <span class="keyword">break</span> findIndex;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (index &gt;= len)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (current[index] == o)</span><br><span class="line">                <span class="keyword">break</span> findIndex;</span><br><span class="line">            index = indexOf(o, current, index, len);</span><br><span class="line">            <span class="keyword">if</span> (index &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Object[] newElements = <span class="keyword">new</span> <span class="title class_">Object</span>[len - <span class="number">1</span>];</span><br><span class="line">        System.arraycopy(current, <span class="number">0</span>, newElements, <span class="number">0</span>, index);</span><br><span class="line">        System.arraycopy(current, index + <span class="number">1</span>, newElements, index, len - index - <span class="number">1</span>);</span><br><span class="line">        setArray(newElements);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据指定范围删除删除</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">removeRange</span><span class="params">(<span class="type">int</span> fromIndex, <span class="type">int</span> toIndex)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="built_in">this</span>.lock;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Object[] elements = getArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> elements.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (fromIndex &lt; <span class="number">0</span> || toIndex &gt; len || toIndex &lt; fromIndex)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">newlen</span> <span class="operator">=</span> len - (toIndex - fromIndex);</span><br><span class="line">        <span class="type">int</span> <span class="variable">numMoved</span> <span class="operator">=</span> len - toIndex;</span><br><span class="line">        <span class="keyword">if</span> (numMoved == <span class="number">0</span>)</span><br><span class="line">            setArray(Arrays.copyOf(elements, newlen));</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Object[] newElements = <span class="keyword">new</span> <span class="title class_">Object</span>[newlen];</span><br><span class="line">            System.arraycopy(elements, <span class="number">0</span>, newElements, <span class="number">0</span>, fromIndex);</span><br><span class="line">            System.arraycopy(elements, toIndex, newElements, fromIndex, numMoved);</span><br><span class="line">            setArray(newElements);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：根据元素进行删除时，第一次获取元素下标后，拿到锁后会重新判断元素的下标（防止此时数组元素的顺序被修改而删错其他元素）</p>
<h2 id="查找">查找</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> get(getArray(), index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="keyword">private</span> E <span class="title function_">get</span><span class="params">(Object[] a, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="comment">//返回数组 index 处位置</span></span><br><span class="line">    <span class="keyword">return</span> (E) a[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="优缺点">优缺点</h2>
<ol>
<li>优点：读操作性能很高，因为无需任何同步措施，比较适用于读多写少的并发场景。在遍历传统的 List 时，若中途有别的线程对其进行修改，则会抛出 ConcurrentModificationException 异常。而 CopyOnWriteArrayList 由于其“读写分离”的思想，遍历和修改操作分别作用在不同的 List 容器，所以在使用迭代器进行遍历时候，也就不会抛出 ConcurrentModificationException 异常</li>
<li>缺点：一是内存占用问题，每次执行写操作都要将原容器拷贝一份，数据量大时，对内存压力较大，可能会引起频繁 GC。二是无法保证实时性，Vector 对于读写操作均加锁操作，可以保证读和写的一致性。而 CopyOnWriteArrayList 由于其实现策略的原因，写和读分别作用在新老不同容器上，在写操作执行过程中，读不会阻塞但读取到的却是老容器的数据</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java集合</tag>
      </tags>
  </entry>
  <entry>
    <title>Map（3-LinkedHashMap）</title>
    <url>/blog/2025/01/25/%E5%BF%83%E5%BE%97/Java%E9%9B%86%E5%90%88/Map%EF%BC%883-LinkedHashMap%EF%BC%89/</url>
    <content><![CDATA[<h2 id="接口和属性">接口和属性</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedHashMap</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">HashMap</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>&lt;K,V&gt; &#123;</span><br><span class="line">    <span class="comment">//双链表头节点</span></span><br><span class="line">    <span class="keyword">transient</span> Entry&lt;K,V&gt; head;</span><br><span class="line">    <span class="comment">//双链表尾节点</span></span><br><span class="line">    <span class="keyword">transient</span> Entry&lt;K,V&gt; tail;</span><br><span class="line">    <span class="comment">//为true则表示按照基于访问的顺序来排列，意思就是最近使用的entry，放在链表的最末尾，</span></span><br><span class="line">    <span class="comment">//为false表示按照基于插入的顺序来排列，后插入的放在链表末尾，不指定默认为false</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> accessOrder;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Entry</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">HashMap</span>.Node&lt;K,V&gt; &#123;</span><br><span class="line">        <span class="comment">//双链表前继、后继节点</span></span><br><span class="line">        Entry&lt;K,V&gt; before, after;</span><br><span class="line">        Entry(<span class="type">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            <span class="built_in">super</span>(hash, key, value, next);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="构造方法">构造方法</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//指定accessOrder的值</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedHashMap</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor, <span class="type">boolean</span> accessOrder)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(initialCapacity, loadFactor);</span><br><span class="line">    <span class="built_in">this</span>.accessOrder = accessOrder;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按照默认值初始化</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedHashMap</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    accessOrder = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedHashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    accessOrder = <span class="literal">false</span>;</span><br><span class="line">    putMapEntries(m, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定初始化时的容量</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedHashMap</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(initialCapacity);</span><br><span class="line">    accessOrder = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定初始化时的容量，和扩容的加载因子</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedHashMap</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(initialCapacity, loadFactor);</span><br><span class="line">    accessOrder = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="插入">插入</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HashMap 中实现</span></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HashMap 中实现</span></span><br><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent, <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, i;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>) &#123;...&#125;</span><br><span class="line">    <span class="comment">// 通过节点 hash 定位节点所在的桶位置，并检测桶中是否包含节点引用</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>) &#123;...&#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode) &#123;...&#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 遍历链表，并统计链表长度</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="comment">// 未在单链表中找到要插入的节点，将新节点接在单链表的后面</span></span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) &#123;...&#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 插入的节点已经存在于单链表中</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="literal">null</span>) &#123;...&#125;</span><br><span class="line">            afterNodeAccess(e);    <span class="comment">// 回调方法，后续说明</span></span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold) &#123;...&#125;</span><br><span class="line">    afterNodeInsertion(evict);    <span class="comment">// 回调方法，后续说明</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>LinkedHashMap 重写了 newNode 和回调方法 afterNodeAccess、afterNodeInsertion</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在构建新节点时，构建的是LinkedHashMap.Entry 不再是Node.</span></span><br><span class="line">Node&lt;K,V&gt; <span class="title function_">newNode</span><span class="params">(<span class="type">int</span> hash, K key, V value, Node&lt;K,V&gt; e)</span> &#123;</span><br><span class="line">    Entry&lt;K,V&gt; p = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;K,V&gt;(hash, key, value, e);</span><br><span class="line">    linkNodeLast(p);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将新增的节点，连接在链表的尾部</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">linkNodeLast</span><span class="params">(Entry&lt;K,V&gt; p)</span> &#123;</span><br><span class="line">    Entry&lt;K,V&gt; last = tail;</span><br><span class="line">    tail = p;</span><br><span class="line">    <span class="comment">//若集合是空的</span></span><br><span class="line">    <span class="keyword">if</span> (last == <span class="literal">null</span>)</span><br><span class="line">        head = p;</span><br><span class="line">    <span class="comment">//新节点插到链表顶部</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        p.before = last;</span><br><span class="line">        last.after = p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//仅仅在accessOrder为true时进行，把当前访问的元素移动到链表尾部</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">afterNodeAccess</span><span class="params">(Node&lt;K,V&gt; e)</span> &#123; <span class="comment">// move node to last</span></span><br><span class="line">    Entry&lt;K,V&gt; last;</span><br><span class="line">    <span class="comment">//当accessOrder的值为true，且e不是尾节点</span></span><br><span class="line">    <span class="keyword">if</span> (accessOrder &amp;&amp; (last = tail) != e) &#123;</span><br><span class="line">        <span class="comment">//将e赋值临时节点p， b是e的前一个节点， a是e的后一个节点</span></span><br><span class="line">        Entry&lt;K,V&gt; p = (Entry&lt;K,V&gt;)e, b = p.before, a = p.after;</span><br><span class="line">        <span class="comment">//设置p的后一个节点为null，因为执行后p在链表末尾，after肯定为null</span></span><br><span class="line">        p.after = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//p的前一个节点不存在，p就是头节点，那么把p放到最后，a就是头节点</span></span><br><span class="line">        <span class="keyword">if</span> (b == <span class="literal">null</span>)</span><br><span class="line">            head = a;</span><br><span class="line">        <span class="comment">//p的前一个节点存在，p放到最后，b的后一个节点指向a</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            b.after = a;</span><br><span class="line">        <span class="comment">//p的后一个节点存在，p放到最后，a的前一个节点指向a</span></span><br><span class="line">        <span class="keyword">if</span> (a != <span class="literal">null</span>)</span><br><span class="line">            a.before = b;</span><br><span class="line">        <span class="comment">//p的后一个节点不存在</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            last = b;</span><br><span class="line">        <span class="comment">//只有一个p节点</span></span><br><span class="line">        <span class="keyword">if</span> (last == <span class="literal">null</span>)</span><br><span class="line">            head = p;</span><br><span class="line">        <span class="comment">//last不为空，把p放到last节点后面</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            p.before = last;</span><br><span class="line">            last.after = p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//p为尾节点</span></span><br><span class="line">        tail = p;</span><br><span class="line">        ++modCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//回调函数，新节点插入之后回调，根据evict和accessOrder判断是否需要删除最老/早插入的节点。</span></span><br><span class="line"><span class="comment">//如果实现LruCache会用到这个方法。</span></span><br><span class="line"><span class="comment">//removeEldestEntry制定删除规则，JDK8中默认返回false</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">afterNodeInsertion</span><span class="params">(<span class="type">boolean</span> evict)</span> &#123; <span class="comment">// possibly remove eldest</span></span><br><span class="line">    Entry&lt;K,V&gt; first;</span><br><span class="line">    <span class="keyword">if</span> (evict &amp;&amp; (first = head) != <span class="literal">null</span> &amp;&amp; removeEldestEntry(first)) &#123;</span><br><span class="line">        <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> first.key;</span><br><span class="line">        removeNode(hash(key), key, <span class="literal">null</span>, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">removeEldestEntry</span><span class="params">(Map.Entry&lt;K,V&gt; eldest)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>LinkedHashMap 如何实现 LRU 缓存？</strong></p>
<p>将 accessOrder 设置为 true 并重写 removeEldestEntry 方法当链表大小超过容量时返回 true，使得每次访问一个元素时，该元素会被移动到链表的末尾。一旦插入操作让 removeEldestEntry 返回 true 时，视为缓存已满，LinkedHashMap 就会将链表首元素移除，由此我们就能实现一个 LRU 缓存。</p>
<h2 id="删除">删除</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HashMap 中实现</span></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">remove</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">return</span> (e = removeNode(hash(key), key, <span class="literal">null</span>, <span class="literal">false</span>, <span class="literal">true</span>)) == <span class="literal">null</span> ? <span class="literal">null</span> : e.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HashMap 中实现</span></span><br><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title function_">removeNode</span><span class="params">(<span class="type">int</span> hash, Object key, Object value, <span class="type">boolean</span> matchValue, <span class="type">boolean</span> movable)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, index;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="literal">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (p = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="literal">null</span>) &#123;</span><br><span class="line">        Node&lt;K,V&gt; node = <span class="literal">null</span>, e; K k; V v;</span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            node = p;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((e = p.next) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode) &#123;...&#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 遍历单链表，寻找要删除的节点，并赋值给 node 变量</span></span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key ||</span><br><span class="line">                         (key != <span class="literal">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">                        node = e;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    p = e;</span><br><span class="line">                &#125; <span class="keyword">while</span> ((e = e.next) != <span class="literal">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="literal">null</span> &amp;&amp; (!matchValue || (v = node.value) == value ||</span><br><span class="line">                             (value != <span class="literal">null</span> &amp;&amp; value.equals(v)))) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node <span class="keyword">instanceof</span> TreeNode) &#123;...&#125;</span><br><span class="line">            <span class="comment">// 将要删除的节点从单链表中移除</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (node == p)</span><br><span class="line">                tab[index] = node.next;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                p.next = node.next;</span><br><span class="line">            ++modCount;</span><br><span class="line">            --size;</span><br><span class="line">            afterNodeRemoval(node);    <span class="comment">// 调用删除回调方法进行后续操作</span></span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LinkedHashMap 中覆写</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">afterNodeRemoval</span><span class="params">(Node&lt;K,V&gt; e)</span> &#123; <span class="comment">// unlink</span></span><br><span class="line">    LinkedHashMap.Entry&lt;K,V&gt; p = (LinkedHashMap.Entry&lt;K,V&gt;)e, b = p.before, a = p.after;</span><br><span class="line">    <span class="comment">// 将 p 节点的前驱后后继引用置空</span></span><br><span class="line">    p.before = p.after = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// b 为 null，表明 p 是头节点</span></span><br><span class="line">    <span class="keyword">if</span> (b == <span class="literal">null</span>)</span><br><span class="line">        head = a;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        b.after = a;</span><br><span class="line">    <span class="comment">// a 为 null，表明 p 是尾节点</span></span><br><span class="line">    <span class="keyword">if</span> (a == <span class="literal">null</span>)</span><br><span class="line">        tail = b;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        a.before = b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>根据 hash 定位到桶位置</li>
<li>遍历链表或调用红黑树相关的删除方法</li>
<li>从 LinkedHashMap 维护的双链表中移除要删除的节点</li>
</ol>
<h2 id="查找">查找</h2>
<p>默认情况下，LinkedHashMap 是按插入顺序维护链表，不过我们可以在初始化 LinkedHashMap，指定 accessOrder 参数为 true，即可让它按访问顺序维护链表，当我们调用 get/getOrDefault/replace 等方法时，只要将这些方法访问的节点移动到链表的尾部即可（其前驱和后继也会跟着更新）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LinkedHashMap 中覆写</span></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">if</span> ((e = getNode(hash(key), key)) == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 如果 accessOrder 为 true，则调用 afterNodeAccess 将被访问节点移动到链表最后</span></span><br><span class="line">    <span class="keyword">if</span> (accessOrder)</span><br><span class="line">        afterNodeAccess(e);</span><br><span class="line">    <span class="keyword">return</span> e.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">getOrDefault</span><span class="params">(Object key, V defaultValue)</span> &#123;</span><br><span class="line">   Node&lt;K,V&gt; e;</span><br><span class="line">   <span class="keyword">if</span> ((e = getNode(hash(key), key)) == <span class="literal">null</span>)</span><br><span class="line">       <span class="keyword">return</span> defaultValue;</span><br><span class="line">   <span class="keyword">if</span> (accessOrder)</span><br><span class="line">       afterNodeAccess(e);</span><br><span class="line">   <span class="keyword">return</span> e.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">afterNodeAccess</span><span class="params">(Node&lt;K,V&gt; e)</span> &#123; <span class="comment">// move node to last</span></span><br><span class="line">    LinkedHashMap.Entry&lt;K,V&gt; last;</span><br><span class="line">    <span class="keyword">if</span> (accessOrder &amp;&amp; (last = tail) != e) &#123;</span><br><span class="line">        LinkedHashMap.Entry&lt;K,V&gt; p =</span><br><span class="line">            (LinkedHashMap.Entry&lt;K,V&gt;)e, b = p.before, a = p.after;</span><br><span class="line">        p.after = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="literal">null</span>)</span><br><span class="line">            head = a;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            b.after = a;</span><br><span class="line">        <span class="keyword">if</span> (a != <span class="literal">null</span>)</span><br><span class="line">            a.before = b;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            last = b;</span><br><span class="line">        <span class="keyword">if</span> (last == <span class="literal">null</span>)</span><br><span class="line">            head = p;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            p.before = last;</span><br><span class="line">            last.after = p;</span><br><span class="line">        &#125;</span><br><span class="line">        tail = p;</span><br><span class="line">        ++modCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>访问键值为 3 的节点前</li>
</ol>
<p><img src="5.png" alt=""></p>
<ol start="2">
<li>访问后，键值为 3 的节点将会被移动到双向链表的最后位置，其前驱和后继也会跟着更新</li>
</ol>
<p><img src="6.png" alt=""></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java集合</tag>
      </tags>
  </entry>
  <entry>
    <title>Set（1-HashSet）</title>
    <url>/blog/2025/01/26/%E5%BF%83%E5%BE%97/Java%E9%9B%86%E5%90%88/Set%EF%BC%881-HashSet%EF%BC%89/</url>
    <content><![CDATA[<h2 id="实现原理">实现原理</h2>
<ol>
<li>HashSet 的实现是依赖于 HashMap 的，HashSet 的值都是存储在 HashMap 中的。在 HashSet 的构造法中会初始化一个 HashMap 对象，HashSet 不允许值重复。因此，HashSet 的值是作为 HashMap 的 key 存储在 HashMap 中的，当存储的值已经存在时返回 false</li>
<li>HashSet 非线程安全，允许 null 值，添加值的时候会先获取对象的 hashCode 方法，如果 hashCode 方法返回的值一致，则再调用 equals 方法判断是否一致，如果不一致才 add 元素。HashSet 不保证迭代时顺序，也不保证存储的元素的顺序保持不变</li>
</ol>
<h2 id="接口和属性">接口和属性</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashSet</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractSet</span>&lt;E&gt; </span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Set</span>&lt;E&gt;, Cloneable, java.io.Serializable  &#123;  </span><br><span class="line">   <span class="comment">// 底层使用HashMap来保存HashSet中所有元素。  </span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">transient</span> HashMap&lt;E,Object&gt; map;  </span><br><span class="line">     </span><br><span class="line">   <span class="comment">// 定义一个虚拟的Object对象作为HashMap的value，将此对象定义为static final。  </span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">PRESENT</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>(); </span><br><span class="line"></span><br><span class="line">   <span class="comment">//........</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="构造方法">构造方法</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* 默认的无参构造器，构造一个空的HashSet。 </span></span><br><span class="line"><span class="comment">* 实际底层会初始化一个空的HashMap，并使用默认初始容量为16和加载因子0.75。 </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">()</span> &#123;  </span><br><span class="line">    map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;E,Object&gt;();  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* 构造一个包含指定collection中的元素的新set。 </span></span><br><span class="line"><span class="comment">* 实际底层使用默认的加载因子0.75和足以包含指定collection中所有元素的初始容量来创建一个HashMap。 </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;  </span><br><span class="line">    map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;E,Object&gt;(Math.max((<span class="type">int</span>) (c.size()/<span class="number">.75f</span>) + <span class="number">1</span>, <span class="number">16</span>));  </span><br><span class="line">    addAll(c);  </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* 以指定的initialCapacity和loadFactor构造一个空的HashSet。 </span></span><br><span class="line"><span class="comment">* 实际底层以相应的参数构造一个空的HashMap。 </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;  </span><br><span class="line">    map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;E,Object&gt;(initialCapacity, loadFactor);  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* 以指定的initialCapacity构造一个空的HashSet。 </span></span><br><span class="line"><span class="comment">* 实际底层以相应的参数及加载因子loadFactor为0.75构造一个空的HashMap。  </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;  </span><br><span class="line">    map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;E,Object&gt;(initialCapacity);  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* 以指定的initialCapacity和loadFactor构造一个新的空链接哈希集合。 </span></span><br><span class="line"><span class="comment">* 此构造函数为包访问权限，不对外公开，实际只是是对LinkedHashSet的支持。 </span></span><br><span class="line"><span class="comment">* 实际底层会以指定的参数构造一个空LinkedHashMap实例来实现。 </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor, <span class="type">boolean</span> dummy)</span> &#123;  </span><br><span class="line">    map = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;E,Object&gt;(initialCapacity, loadFactor);  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h2 id="插入">插入</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* 如果此set中尚未包含指定元素，则添加指定元素。 </span></span><br><span class="line"><span class="comment">* 更确切地讲，如果此 set 没有包含满足(e==null?e2==null:e.equals(e2))的元素e2，则向此set添加指定的元素e。 </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* 底层实际将将该元素作为key放入HashMap。 </span></span><br><span class="line"><span class="comment">* 当新放入HashMap的Entry中key与集合中原有Entry的key相同</span></span><br><span class="line"><span class="comment">* 新添加的Entry的value会将覆盖原来Entry的value，但key不会有任何改变， </span></span><br><span class="line"><span class="comment">* 因此如果向HashSet中添加一个已经存在的元素时，新添加的集合元素将不会被放入HashMap中， </span></span><br><span class="line"><span class="comment">* 原来的元素也不会有任何改变，这也就满足了Set中元素不重复的特性。 </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> map.put(e, PRESENT)==<span class="literal">null</span>;  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h2 id="删除">删除</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* 如果指定元素存在于此set中，则将其移除。 </span></span><br><span class="line"><span class="comment">* 更确切地讲，如果此set包含一个满足(o==null?e==null:o.equals(e))的元素e，则将其移除。如果此set已包含该元素，则返回true </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* 底层实际调用HashMap的remove方法删除指定Entry。 </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> map.remove(o)==PRESENT;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h2 id="包含">包含</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> map.containsKey(o);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="其他">其他</h2>
<h3 id="怎么保证元素不重复？">怎么保证元素不重复？</h3>
<p>元素值作为的是 map 的 key，map 的 value 则是 PRESENT 变量，这个变量只作为放入 map 时的一个占位符而存在，没实际用处。HashMap 的 key 是不能重复的，而 HashSet 的元素又作为 map 的 key，所以也不能重复</p>
<p><strong>为什么 val 要放上一个静态常量 present？</strong></p>
<ol>
<li>HashMap 使用 put 的时候，会把 put 的数据放在其位置上，如果该位置上已经存在当前 key，会对其 key 映射的 val 给替换掉，并且返回之前的 val；如果没有 key，则返回 null</li>
<li>val 放了一个 hashset 类的静态常量 present，如果 put 返回的是 null，不是 present，就说明 put 的 key 是不存在的，add 也会返回 true。如果 put 返回的是 present 就说明之前的 key 是存在的，并不是没有 put 上，所以 add 方法返回的 false 并不是存失败的意思</li>
</ol>
<h3 id="HashSet-是有序的吗？">HashSet 是有序的吗？</h3>
<p>HashSet 是无序的，它不能保证存储和取出顺序一致</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetOfInteger</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">rand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>(<span class="number">47</span>);</span><br><span class="line">        Set&lt;Integer&gt; intset = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;<span class="number">10000</span>; i++) &#123;</span><br><span class="line">            intset.add(rand.nextInt(<span class="number">30</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(intset);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行结果：</span></span><br><span class="line"><span class="comment">// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HashSet 源码节选-JKD8</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> map.put(e, PRESENT)==<span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HashMap 源码节选-JDK8</span></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HashMap 源码节选-JDK8</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里因为value的类型是Integer，所以使用的是Integer的hashCode</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Integer 中 hashCode 方法的返回值就是这个数本身，当数值小于 65536 时，得到的 hash 值是本身，插入到 HashMap 中的顺序即 hash 的顺序，所以是有序的；当超过该值时，HashSet 是无序的</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java集合</tag>
      </tags>
  </entry>
  <entry>
    <title>定时任务工具类（Cron Util）</title>
    <url>/blog/2024/11/19/Java/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/Cron%20Util/</url>
    <content><![CDATA[<h2 id="依赖">依赖</h2>
<p>cron-utils 的 github 地址：<a href="https://github.com/jmrozanec/cron-utils">https://github.com/jmrozanec/cron-utils</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.cronutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cron-utils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="基本使用">基本使用</h2>
<h3 id="定义-cron-表达式的支持范围">定义 cron 表达式的支持范围</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建 cron 定义，自定义 cron 表达式支持的范围</span></span><br><span class="line"><span class="type">CronDefinition</span> <span class="variable">cronDefinition</span> <span class="operator">=</span></span><br><span class="line">    CronDefinitionBuilder.defineCron()</span><br><span class="line">        .withSeconds().and()</span><br><span class="line">        .withMinutes().and()</span><br><span class="line">        .withHours().and()</span><br><span class="line">        .withDayOfMonth()</span><br><span class="line">            .supportsHash().supportsL().supportsW().and()</span><br><span class="line">        .withMonth().and()</span><br><span class="line">        .withDayOfWeek()</span><br><span class="line">            .withIntMapping(<span class="number">7</span>, <span class="number">0</span>) </span><br><span class="line">            .supportsHash().supportsL().supportsW().and()</span><br><span class="line">        .withYear().optional().and()</span><br><span class="line">        .instance();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入要生成的 cron 表达式类型获取 cron 定义</span></span><br><span class="line">cronDefinition = CronDefinitionBuilder.instanceDefinitionFor(CronType.QUARTZ);</span><br></pre></td></tr></table></figure>
<p>支持定时任务的类型：</p>
<ol>
<li>CRON4J</li>
<li>QUARTZ</li>
<li>UNIX</li>
<li>SPRING</li>
<li>SPRING53</li>
</ol>
<h3 id="生成-cron-表达式">生成 cron 表达式</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.cronutils.model.field.expression.FieldExpressionFactory.*;</span><br><span class="line"></span><br><span class="line"><span class="type">Cron</span> <span class="variable">cron</span> <span class="operator">=</span> CronBuilder.cron(CronDefinitionBuilder.instanceDefinitionFor(CronType.QUARTZ))</span><br><span class="line">    .withYear(always())</span><br><span class="line">    .withDoM(between(SpecialChar.L, <span class="number">3</span>))</span><br><span class="line">    .withMonth(always())</span><br><span class="line">    .withDoW(questionMark())</span><br><span class="line">    .withHour(always())</span><br><span class="line">    .withMinute(always())</span><br><span class="line">    .withSecond(on(<span class="number">0</span>))</span><br><span class="line">    .instance();</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">cronAsString</span> <span class="operator">=</span> cron.asString(); <span class="comment">// 0 * * L-3 * ? *</span></span><br></pre></td></tr></table></figure>
<p>各方法对应 cron 表达式关系：</p>
<ol>
<li>always：表示*</li>
<li>questionMark：表示?</li>
<li>on：表示具体值</li>
<li>between：表示-，例如，between(0,5)表示 0-5</li>
<li>and：表示,，例如，and(on(1), on(5))表示 0,5</li>
<li>every：表示/，例如，every(on(2),3)表示 2/3</li>
</ol>
<h3 id="获取-cron-表达式描述">获取 cron 表达式描述</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建 cron 描述器</span></span><br><span class="line">        <span class="type">CronDescriptor</span> <span class="variable">descriptor</span> <span class="operator">=</span> CronDescriptor.instance();</span><br><span class="line">        <span class="comment">// 创建 cron 定义</span></span><br><span class="line">        <span class="type">CronDefinition</span> <span class="variable">cronDefinition</span> <span class="operator">=</span> CronDefinitionBuilder.instanceDefinitionFor(QUARTZ);</span><br><span class="line">        <span class="comment">// 创建 cron 解析器</span></span><br><span class="line">        <span class="type">CronParser</span> <span class="variable">cronParser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CronParser</span>(cronDefinition);</span><br><span class="line">        <span class="type">String</span> <span class="variable">describe</span> <span class="operator">=</span> descriptor.describe(cronParser.parse(<span class="string">&quot;0 0 12 ? * 6&quot;</span>));</span><br><span class="line">        System.out.println(describe);</span><br><span class="line">        describe = descriptor.describe(cronParser.parse(<span class="string">&quot;*/45 * * * * ?&quot;</span>));</span><br><span class="line">        System.out.println(describe);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置语言</span></span><br><span class="line">		descriptor = CronDescriptor.instance(Locale.CHINESE);</span><br><span class="line">        describe = descriptor.describe(cronParser.parse(<span class="string">&quot;0 0 12 ? * 6&quot;</span>));</span><br><span class="line">        System.out.println(describe);</span><br><span class="line">        describe = descriptor.describe(cronParser.parse(<span class="string">&quot;*/45 * * * * ?&quot;</span>));</span><br><span class="line">        System.out.println(describe);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 运行结果：</span></span><br><span class="line">at <span class="number">12</span>:<span class="number">00</span> at Friday day</span><br><span class="line">every <span class="number">45</span> seconds</span><br><span class="line">在 <span class="number">12</span>:<span class="number">00</span> 在 星期五 天</span><br><span class="line">每 <span class="number">45</span> 秒</span><br></pre></td></tr></table></figure>
<h3 id="校验-cron-表达式的正确性">校验 cron 表达式的正确性</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">CronDefinition</span> <span class="variable">cronDefinition</span> <span class="operator">=</span> CronDefinitionBuilder.instanceDefinitionFor(QUARTZ);</span><br><span class="line">        <span class="type">CronParser</span> <span class="variable">cronParser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CronParser</span>(cronDefinition);</span><br><span class="line">        <span class="type">Cron</span> <span class="variable">cron</span> <span class="operator">=</span> cronParser.parse(<span class="string">&quot;0 0 12 ? * 6&quot;</span>);</span><br><span class="line">        <span class="comment">// 校验 cron 表达式</span></span><br><span class="line">        cron.validate();</span><br><span class="line">        cron = cronParser.parse(<span class="string">&quot;0 0 12 ? * ?&quot;</span>);</span><br><span class="line">        cron.validate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="工具类">工具类</h2>
<h3 id="WeekEnum">WeekEnum</h3>
<p>定义星期的枚举类信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">WeekEnum</span> &#123;</span><br><span class="line"></span><br><span class="line">    SUNDAY(<span class="number">1</span>, <span class="string">&quot;星期天&quot;</span>),</span><br><span class="line">    MONDAY(<span class="number">2</span>, <span class="string">&quot;星期一&quot;</span>),</span><br><span class="line">    TUESDAY(<span class="number">3</span>, <span class="string">&quot;星期二&quot;</span>),</span><br><span class="line">    WEDNESDAY(<span class="number">4</span>, <span class="string">&quot;星期三&quot;</span>),</span><br><span class="line">    THURSDAY(<span class="number">5</span>, <span class="string">&quot;星期四&quot;</span>),</span><br><span class="line">    FRIDAY(<span class="number">6</span>, <span class="string">&quot;星期五&quot;</span>),</span><br><span class="line">    SATURDAY(<span class="number">7</span>, <span class="string">&quot;星期六&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="CycleTypeEnum">CycleTypeEnum</h3>
<p>定义要生成的 cron 表达式类型枚举类信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">CycleTypeEnum</span> &#123;</span><br><span class="line"></span><br><span class="line">    MINUTE(<span class="number">1</span>, <span class="string">&quot;分钟&quot;</span>),</span><br><span class="line">    HOUR(<span class="number">2</span>, <span class="string">&quot;小时&quot;</span>),</span><br><span class="line">    DAY(<span class="number">3</span>, <span class="string">&quot;日&quot;</span>),</span><br><span class="line">    WEEK(<span class="number">4</span>, <span class="string">&quot;周&quot;</span>),</span><br><span class="line">    MONTH(<span class="number">5</span>, <span class="string">&quot;月&quot;</span>),</span><br><span class="line">    QUARTER(<span class="number">6</span>, <span class="string">&quot;季度&quot;</span>),</span><br><span class="line">    YEAR(<span class="number">7</span>, <span class="string">&quot;年&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="RepeatRuleEnum">RepeatRuleEnum</h3>
<p>定义要生成月、季度的 cron 表达式循环规则枚举类信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">RepeatRuleEnum</span> &#123;</span><br><span class="line"></span><br><span class="line">    WEEK(<span class="number">1</span>, <span class="string">&quot;周&quot;</span>),</span><br><span class="line">    DATE(<span class="number">2</span>, <span class="string">&quot;日期&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="CronDto">CronDto</h3>
<p>定义 cron 表达式工具类的请求体信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CronDto</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 周期类型 minute: 分钟 hour: 小时; day: 天; week: 周; month: 月; quarter: 季; year: 年</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer cycleType;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime executionTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定一周哪几天</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; weekDays;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定一个月哪几天</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; monthDays;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定一年哪几月</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; quartzMonths;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一周的星期几</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer dayOfWeek;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第几周</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer week;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重复规则：周 天</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer repeatRule;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="CronUtils">CronUtils</h3>
<p>根据年、月、日、时、分、秒、星期、季度实现不同的 cron 表达式</p>
<p>注意：生成年、月、季度的 cron 表达式时可以根据日或者星期额外判断</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CronUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 星期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;Integer&gt; WEEKS = Arrays.stream(WeekEnum.values()).map(WeekEnum::getCode).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createCron</span><span class="params">(CronDto cronDto)</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">cycleType</span> <span class="operator">=</span> cronDto.getCycleType();</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">executionTime</span> <span class="operator">=</span> cronDto.getExecutionTime();</span><br><span class="line">        <span class="type">CronBuilder</span> <span class="variable">cronBuilder</span> <span class="operator">=</span> CronBuilder.cron(CronDefinitionBuilder.instanceDefinitionFor(CronType.QUARTZ));</span><br><span class="line">        <span class="comment">// 每分钟一次</span></span><br><span class="line">        <span class="keyword">if</span> (Objects.equals(CycleTypeEnum.MINUTE.getCode(), cycleType)) &#123;</span><br><span class="line">            <span class="keyword">return</span> getSecondCron(cronBuilder, executionTime);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 每小时一次</span></span><br><span class="line">        <span class="keyword">if</span> (Objects.equals(CycleTypeEnum.HOUR.getCode(), cycleType)) &#123;</span><br><span class="line">            <span class="keyword">return</span> getMinuteCron(cronBuilder, executionTime);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 每日一次</span></span><br><span class="line">        <span class="keyword">if</span> (Objects.equals(CycleTypeEnum.DAY.getCode(), cycleType)) &#123;</span><br><span class="line">            <span class="keyword">return</span> getDayCron(cronBuilder, executionTime);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 每周一次</span></span><br><span class="line">        <span class="keyword">if</span> (Objects.equals(CycleTypeEnum.WEEK.getCode(), cycleType)) &#123;</span><br><span class="line">            <span class="keyword">return</span> getWeekCron(cronDto, cronBuilder, executionTime);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 每月一次</span></span><br><span class="line">        <span class="keyword">if</span> (Objects.equals(CycleTypeEnum.MONTH.getCode(), cycleType)) &#123;</span><br><span class="line">            <span class="keyword">return</span> getMonthCron(cronDto, cronBuilder, executionTime);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 每季度一次</span></span><br><span class="line">        <span class="keyword">if</span> (Objects.equals(CycleTypeEnum.QUARTER.getCode(), cycleType)) &#123;</span><br><span class="line">            <span class="keyword">return</span> getQuarterCron(cronDto, cronBuilder, executionTime);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 每年一次</span></span><br><span class="line">        <span class="keyword">if</span> (Objects.equals(CycleTypeEnum.YEAR.getCode(), cycleType)) &#123;</span><br><span class="line">            <span class="keyword">return</span> getYearCron(cronBuilder, executionTime);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getYearCron</span><span class="params">(CronBuilder cronBuilder, LocalDateTime executionTime)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cronBuilder.withSecond(on(executionTime.getSecond()))</span><br><span class="line">                .withMinute(on(executionTime.getMinute()))</span><br><span class="line">                .withHour(on(executionTime.getHour()))</span><br><span class="line">                .withDoM(on(executionTime.getDayOfMonth()))</span><br><span class="line">                .withMonth(on(executionTime.getMonthValue()))</span><br><span class="line">                .withDoW(questionMark())</span><br><span class="line">                .instance()</span><br><span class="line">                .asString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getQuarterCron</span><span class="params">(CronDto cronDto, CronBuilder cronBuilder, LocalDateTime executionTime)</span> &#123;</span><br><span class="line">        List&lt;FieldExpression&gt; flist = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        cronDto.getQuartzMonths().forEach(e -&gt; flist.add(FieldExpressionFactory.on(e)));</span><br><span class="line">        <span class="keyword">return</span> cronBuilder.withSecond(on(executionTime.getSecond()))</span><br><span class="line">                .withMinute(on(executionTime.getMinute()))</span><br><span class="line">                .withHour(on(executionTime.getHour()))</span><br><span class="line">                .withDoM(questionMark())</span><br><span class="line">                .withMonth(and(flist))</span><br><span class="line">                .withDoW(on(WEEKS.get(cronDto.getDayOfWeek()), SpecialChar.HASH, cronDto.getWeek()))</span><br><span class="line">                .instance()</span><br><span class="line">                .asString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getMonthCron</span><span class="params">(CronDto cronDto, CronBuilder cronBuilder, LocalDateTime executionTime)</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">repeatRule</span> <span class="operator">=</span> cronDto.getRepeatRule();</span><br><span class="line">        <span class="comment">// 按周</span></span><br><span class="line">        <span class="keyword">if</span> (Objects.equals(RepeatRuleEnum.WEEK.getCode(), repeatRule)) &#123;</span><br><span class="line">            List&lt;FieldExpression&gt; weekDays = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">if</span> (!CollectionUtils.isEmpty(cronDto.getWeekDays())) &#123;</span><br><span class="line">                cronDto.getWeekDays().forEach(e -&gt; weekDays.add(FieldExpressionFactory.on(WEEKS.get(cronDto.getDayOfWeek()),</span><br><span class="line">                        SpecialChar.HASH, e)));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> cronBuilder.withSecond(on(executionTime.getSecond()))</span><br><span class="line">                    .withMinute(on(executionTime.getMinute()))</span><br><span class="line">                    .withHour(on(executionTime.getHour()))</span><br><span class="line">                    .withDoM(questionMark())</span><br><span class="line">                    .withMonth(always())</span><br><span class="line">                    .withDoW(CollectionUtils.isEmpty(weekDays) ? on(WEEKS.get(cronDto.getDayOfWeek()), SpecialChar.HASH,</span><br><span class="line">                            cronDto.getWeek()) : and(weekDays))</span><br><span class="line">                    .instance()</span><br><span class="line">                    .asString();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 按天</span></span><br><span class="line">        <span class="keyword">if</span> (Objects.equals(RepeatRuleEnum.DATE.getCode(), repeatRule)) &#123;</span><br><span class="line">            List&lt;FieldExpression&gt; monthDays = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            cronDto.getMonthDays().forEach(e -&gt; monthDays.add(FieldExpressionFactory.on(e)));</span><br><span class="line">            <span class="keyword">return</span> cronBuilder.withSecond(on(executionTime.getSecond()))</span><br><span class="line">                    .withMinute(on(executionTime.getMinute()))</span><br><span class="line">                    .withHour(on(executionTime.getHour()))</span><br><span class="line">                    .withDoM(and(monthDays))</span><br><span class="line">                    .withMonth(always())</span><br><span class="line">                    .withDoW(questionMark())</span><br><span class="line">                    .instance()</span><br><span class="line">                    .asString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getWeekCron</span><span class="params">(CronDto cronDto, CronBuilder cronBuilder, LocalDateTime executionTime)</span> &#123;</span><br><span class="line">        List&lt;FieldExpression&gt; weekDays = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        cronDto.getWeekDays().forEach(e -&gt; weekDays.add(FieldExpressionFactory.on(e)));</span><br><span class="line">        <span class="keyword">return</span> cronBuilder.withSecond(on(executionTime.getSecond()))</span><br><span class="line">                .withMinute(on(executionTime.getMinute()))</span><br><span class="line">                .withHour(on(executionTime.getHour()))</span><br><span class="line">                .withDoM(questionMark())</span><br><span class="line">                .withMonth(always())</span><br><span class="line">                .withDoW(and(weekDays))</span><br><span class="line">                .instance()</span><br><span class="line">                .asString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getDayCron</span><span class="params">(CronBuilder cronBuilder, LocalDateTime executionTime)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cronBuilder.withSecond(on(executionTime.getSecond()))</span><br><span class="line">                .withMinute(on(executionTime.getMinute()))</span><br><span class="line">                .withHour(on(executionTime.getHour()))</span><br><span class="line">                .withDoM(always())</span><br><span class="line">                .withMonth(always())</span><br><span class="line">                .withDoW(questionMark())</span><br><span class="line">                .instance()</span><br><span class="line">                .asString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getMinuteCron</span><span class="params">(CronBuilder cronBuilder, LocalDateTime executionTime)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cronBuilder.withSecond(on(executionTime.getSecond()))</span><br><span class="line">                .withMinute(on(executionTime.getMinute()))</span><br><span class="line">                .withHour(always())</span><br><span class="line">                .withDoM(always())</span><br><span class="line">                .withMonth(always())</span><br><span class="line">                .withDoW(questionMark())</span><br><span class="line">                .instance()</span><br><span class="line">                .asString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getSecondCron</span><span class="params">(CronBuilder cronBuilder, LocalDateTime executionTime)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cronBuilder.withSecond(on(executionTime.getSecond()))</span><br><span class="line">                .withMinute(always())</span><br><span class="line">                .withHour(always())</span><br><span class="line">                .withDoM(always())</span><br><span class="line">                .withMonth(always())</span><br><span class="line">                .withDoW(questionMark())</span><br><span class="line">                .instance()</span><br><span class="line">                .asString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="使用案例">使用案例</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">CronDto</span> <span class="variable">cronDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CronDto</span>();</span><br><span class="line">        cronDto.setCycleType(<span class="number">1</span>);</span><br><span class="line">        cronDto.setExecutionTime(LocalDateTime.now());</span><br><span class="line">        <span class="type">String</span> <span class="variable">cron</span> <span class="operator">=</span> createCron(cronDto);</span><br><span class="line">        System.out.println(cron);</span><br><span class="line"></span><br><span class="line">        cronDto.setCycleType(<span class="number">2</span>);</span><br><span class="line">        cron = createCron(cronDto);</span><br><span class="line">        System.out.println(cron);</span><br><span class="line"></span><br><span class="line">        cronDto.setCycleType(<span class="number">3</span>);</span><br><span class="line">        cron = createCron(cronDto);</span><br><span class="line">        System.out.println(cron);</span><br><span class="line"></span><br><span class="line">        cronDto.setCycleType(<span class="number">4</span>);</span><br><span class="line">        cronDto.setWeekDays(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">        cron = createCron(cronDto);</span><br><span class="line">        System.out.println(cron);</span><br><span class="line"></span><br><span class="line">        cronDto.setCycleType(<span class="number">5</span>);</span><br><span class="line">        cronDto.setRepeatRule(<span class="number">1</span>);</span><br><span class="line">        cronDto.setDayOfWeek(<span class="number">1</span>);</span><br><span class="line">        cron = createCron(cronDto);</span><br><span class="line">        System.out.println(cron);</span><br><span class="line"></span><br><span class="line">        cronDto.setCycleType(<span class="number">5</span>);</span><br><span class="line">        cronDto.setRepeatRule(<span class="number">1</span>);</span><br><span class="line">        cronDto.setWeek(<span class="number">1</span>);</span><br><span class="line">        cronDto.setDayOfWeek(<span class="number">1</span>);</span><br><span class="line">        cronDto.setWeekDays(<span class="literal">null</span>);</span><br><span class="line">        cron = createCron(cronDto);</span><br><span class="line">        System.out.println(cron);</span><br><span class="line"></span><br><span class="line">        cronDto.setCycleType(<span class="number">5</span>);</span><br><span class="line">        cronDto.setRepeatRule(<span class="number">2</span>);</span><br><span class="line">        cronDto.setMonthDays(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">        cron = createCron(cronDto);</span><br><span class="line">        System.out.println(cron);</span><br><span class="line"></span><br><span class="line">        cronDto.setCycleType(<span class="number">6</span>);</span><br><span class="line">        cronDto.setQuartzMonths(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">        cron = createCron(cronDto);</span><br><span class="line">        System.out.println(cron);</span><br><span class="line"></span><br><span class="line">        cronDto.setCycleType(<span class="number">7</span>);</span><br><span class="line">        cron = createCron(cronDto);</span><br><span class="line">        System.out.println(cron);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 运行结果：</span></span><br><span class="line"><span class="number">14</span> * * * * ?</span><br><span class="line"><span class="number">14</span> <span class="number">28</span> * * * ?</span><br><span class="line"><span class="number">14</span> <span class="number">28</span> <span class="number">9</span> * * ?</span><br><span class="line"><span class="number">14</span> <span class="number">28</span> <span class="number">9</span> ? * <span class="number">1</span>,<span class="number">2</span></span><br><span class="line"><span class="number">14</span> <span class="number">28</span> <span class="number">9</span> ? * <span class="number">2</span>#<span class="number">1</span>,<span class="number">2</span>#<span class="number">2</span></span><br><span class="line"><span class="number">14</span> <span class="number">28</span> <span class="number">9</span> ? * <span class="number">2</span>#<span class="number">1</span></span><br><span class="line"><span class="number">14</span> <span class="number">28</span> <span class="number">9</span> <span class="number">1</span>,<span class="number">2</span> * ?</span><br><span class="line"><span class="number">14</span> <span class="number">28</span> <span class="number">9</span> ? <span class="number">1</span>,<span class="number">2</span> <span class="number">2</span>#<span class="number">1</span></span><br><span class="line"><span class="number">14</span> <span class="number">28</span> <span class="number">9</span> <span class="number">19</span> <span class="number">11</span> ?</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>定时任务</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot Task定时任务</title>
    <url>/blog/2024/11/08/Java/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/SpringBoot%20Task%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<h2 id="参数详解">参数详解</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.ANNOTATION_TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Repeatable(Schedules.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Scheduled &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">CRON_DISABLED</span> <span class="operator">=</span> <span class="string">&quot;-&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    String <span class="title function_">cron</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    String <span class="title function_">zone</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">long</span> <span class="title function_">fixedDelay</span><span class="params">()</span> <span class="keyword">default</span> -<span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    String <span class="title function_">fixedDelayString</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">long</span> <span class="title function_">fixedRate</span><span class="params">()</span> <span class="keyword">default</span> -<span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    String <span class="title function_">fixedRateString</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">long</span> <span class="title function_">initialDelay</span><span class="params">()</span> <span class="keyword">default</span> -<span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    String <span class="title function_">initialDelayString</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="fixedDelay">fixedDelay</h3>
<p>它的间隔时间是根据上次任务结束的时候开始计时的，只要盯紧上一次任务执行结束的时间即可，跟任务逻辑的执行时间无关，两个任务的间隔时间是固定的</p>
<p><img src="1.png" alt=""></p>
<h3 id="fixedDelayString">fixedDelayString</h3>
<p>与 fixedDalay 一样，不同的是使用的是 String 字符串，支持占位符方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Scheduled(fixedDelayString = &quot;$&#123;time.fixedDelay&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Execute at &quot;</span> + System.currentTimeMillis());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="fixedRate">fixedRate</h3>
<p>在理想情况下，下一次开始和上一次开始之间的时间间隔是一定的，但是默认情况下 SpringBoot 定时任务是单线程执行的。当下一轮的任务满足时间策略后任务就会加入队列，即当本次任务开始执行时下一次任务的时间就已经确定了，由于本次任务的“超时”执行，下一次任务的等待时间就会被压缩甚至阻塞</p>
<p><img src="2.png" alt=""></p>
<h3 id="fixedRateString">fixedRateString</h3>
<p>与 fixedRate 一样，不同的是使用的是 String 字符串，支持占位符方式</p>
<h3 id="initialDelay">initialDelay</h3>
<p>这个参数只能配合 fixedDelay 或 fixedRate 使用。如：@Scheduled(initialDelay = 10000, fixedRate = 15000)，意思是在容器启动后，延迟 10 秒再执行一次定时器，以后每 15 秒再执行一次该定时器</p>
<h3 id="initialDelayString">initialDelayString</h3>
<p>与 initialDelay 一样，不同的是使用的是 String 字符串，支持占位符方式</p>
<h3 id="cron-表达式">cron 表达式</h3>
<p>语法格式：</p>
<ol>
<li>
<p>秒 分 小时 月份中的日期 月份 星期中的日期 年份</p>
</li>
<li>
<p>秒 分 小时 月份中的日期 月份 星期中的日期</p>
</li>
</ol>
<table>
<thead>
<tr>
<th>字段</th>
<th>值</th>
<th>特殊字符</th>
</tr>
</thead>
<tbody>
<tr>
<td>秒（Seconds）</td>
<td>0~59 的整数</td>
<td>, - * /</td>
</tr>
<tr>
<td>分（Minutes）</td>
<td>0~59 的整数</td>
<td>, - * /</td>
</tr>
<tr>
<td>小时（Hours）</td>
<td>0~23 的整数</td>
<td>, - * /</td>
</tr>
<tr>
<td>日期（DayofMonth）</td>
<td>1~31 的整数（需要看月的天数）</td>
<td>, - * ? / L W C</td>
</tr>
<tr>
<td>月份（Month）</td>
<td>1~12 的整数</td>
<td>, - * /</td>
</tr>
<tr>
<td>星期（DayOfWeek）</td>
<td>1~7 的整数</td>
<td>, - * ? / L W C</td>
</tr>
<tr>
<td>年（Year）（可选）</td>
<td>1970~2099</td>
<td>, - * /</td>
</tr>
</tbody>
</table>
<ol>
<li>
<p>*：表示匹配该域的任意值。</p>
<p>例如：在 Minutes 域使用*，即表示每分钟都会触发事件</p>
</li>
<li>
<p>?：只能用在 DayofMonth 和 DayofWeek 两个域，它也匹配域的任意值，但实际不会，因为 DayofMonth 和 DayofWeek 会相互影响。</p>
<p>例如：在每月的 20 日触发任务，不管 20 日是星期几，只能使用如下写法：13 13 15 20 * ?，其中最后一位只能用?，而不能使用*，如果使用*表示不管星期几都会触发</p>
</li>
<li>
<p>-：表示范围。</p>
<p>例如：在 Minutes 域使用 5-20，表示从 5 到 20 分钟每分钟触发一次</p>
</li>
<li>
<p>/：表示起始时间开始触发，然后每隔固定时间触发一次。</p>
<p>例如：在 Minutes 域使用 5/20，则意味着从第 5 分钟开始，每隔 20 分钟触发一次</p>
</li>
<li>
<p>,：表示列出枚举值。</p>
<p>例如：在 Minutes 域使用 5,20，则意味着在 5 和 20 分都会触发一次</p>
</li>
<li>
<p>L：表示最后，只能出现在 DayofWeek 和 DayofMonth 域。</p>
<p>例如：在 DayofWeek 域使用 5L，意味着在最后的一个星期四触发</p>
</li>
<li>
<p>W：表示有效工作日（周一到周五），只能出现在 DayofMonth 域，系统将在离指定日期的最近的有效工作日触发事件。</p>
<p>例如：在 DayofMonth 使用 5W，如果 5 日是星期六，则将在最近的工作日（星期五，即 4 日触发）；如果 5 日是星期天，则在 6 日（星期一）触发；如果 5 日在星期一到星期五中的一天，则就在 5 日触发。注意：W 的最近寻找不会跨过月份</p>
</li>
<li>
<p>LW：这两个字符可以连用，表示在某个月最后一个工作日，即最后一个星期五</p>
</li>
<li>
<p>#：用于确定每个月第 n 个星期 x（x#n），只能出现在 DayofMonth 域。</p>
<p>例如：4#2 表示第 2 个星期三</p>
</li>
</ol>
<p><strong>常用表达式参考</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;*/5 * * * * ?&quot;</span>       # 每隔<span class="number">5</span>秒执行一次</span><br><span class="line"><span class="string">&quot;0 */1 * * * ?&quot;</span>       # 每隔<span class="number">1</span>分钟执行一次</span><br><span class="line"><span class="string">&quot;0 0 23 * * ?&quot;</span>        # 每天<span class="number">23</span>点执行一次</span><br><span class="line"><span class="string">&quot;0 0 1 * * ?&quot;</span>         # 每天凌晨<span class="number">1</span>点执行一次</span><br><span class="line"><span class="string">&quot;0 0 1 1 * ?&quot;</span>         # 每月<span class="number">1</span>号凌晨<span class="number">1</span>点执行一次</span><br><span class="line"><span class="string">&quot;0 0 23 L * ?&quot;</span>        # 每月最后一天<span class="number">23</span>点执行一次</span><br><span class="line"><span class="string">&quot;0 0 1 ? * L&quot;</span>         # 每周星期天凌晨<span class="number">1</span>点实行一次：</span><br><span class="line"><span class="string">&quot;0 26,29,33 * * * ?&quot;</span>  # 在<span class="number">26</span>分、<span class="number">29</span>分、<span class="number">33</span>分执行一次</span><br><span class="line"><span class="string">&quot;0 0 0,3,8,21 * * ?&quot;</span>  # 每天的<span class="number">0</span>点、<span class="number">3</span>点、<span class="number">8</span>点、<span class="number">21</span>点执行一次</span><br><span class="line"><span class="string">&quot;0 0 10,14,16 * * ?&quot;</span>  # 每天上午<span class="number">10</span>点，下午<span class="number">2</span>点，<span class="number">4</span>点</span><br><span class="line"><span class="string">&quot;0 0/30 9-17 * * ?&quot;</span>   # 朝九晚五工作时间内每半小时</span><br><span class="line"><span class="string">&quot;0 0 12 ? * WED&quot;</span>      # 表示每个星期三中午<span class="number">12</span>点</span><br><span class="line"><span class="string">&quot;0 0 12 * * ?&quot;</span>        # 每天中午<span class="number">12</span>点触发</span><br><span class="line"><span class="string">&quot;0 15 10 ? * *&quot;</span>       # 每天上午<span class="number">10</span>:<span class="number">15</span>触发</span><br><span class="line"><span class="string">&quot;0 15 10 * * ?&quot;</span>       # 每天上午<span class="number">10</span>:<span class="number">15</span>触发</span><br><span class="line"><span class="string">&quot;0 15 10 * * ? *&quot;</span>     # 每天上午<span class="number">10</span>:<span class="number">15</span>触发</span><br><span class="line"><span class="string">&quot;0 15 10 * * ?&quot;</span>       # <span class="number">2005</span><span class="string">&quot; 2005年的每天上午10:15触发</span></span><br><span class="line"><span class="string">&quot;</span><span class="number">0</span> * <span class="number">14</span> * * ?<span class="string">&quot;        # 在每天下午2点到下午2:59期间的每1分钟触发</span></span><br><span class="line"><span class="string">&quot;</span><span class="number">0</span> <span class="number">0</span>/<span class="number">5</span> <span class="number">14</span> * * ?<span class="string">&quot;      # 在每天下午2点到下午2:55期间的每5分钟触发</span></span><br><span class="line"><span class="string">&quot;</span><span class="number">0</span> <span class="number">0</span>/<span class="number">5</span> <span class="number">14</span>,<span class="number">18</span> * * ?<span class="string">&quot;   # 在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发</span></span><br><span class="line"><span class="string">&quot;</span><span class="number">0</span> <span class="number">0</span>-<span class="number">5</span> <span class="number">14</span> * * ?<span class="string">&quot;      # 在每天下午2点到下午2:05期间的每1分钟触发</span></span><br><span class="line"><span class="string">&quot;</span><span class="number">0</span> <span class="number">10</span>,<span class="number">44</span> <span class="number">14</span> ? <span class="number">3</span> WED<span class="string">&quot;  # 每年三月的星期三的下午2:10和2:44触发</span></span><br><span class="line"><span class="string">&quot;</span><span class="number">0</span> <span class="number">15</span> <span class="number">10</span> ? * MON-FRI<span class="string">&quot; # 周一至周五的上午10:15触发</span></span><br><span class="line"><span class="string">&quot;</span><span class="number">0</span> <span class="number">15</span> <span class="number">10</span> <span class="number">15</span> * ?<span class="string">&quot;      # 每月15日上午10:15触发</span></span><br><span class="line"><span class="string">&quot;</span><span class="number">0</span> <span class="number">15</span> <span class="number">10</span> L * ?<span class="string">&quot;       # 每月最后一日的上午10:15触发</span></span><br><span class="line"><span class="string">&quot;</span><span class="number">0</span> <span class="number">15</span> <span class="number">10</span> ? * <span class="number">6L</span><span class="string">&quot;      # 每月的最后一个星期五上午10:15触发</span></span><br><span class="line"><span class="string">&quot;</span><span class="number">0</span> <span class="number">15</span> <span class="number">10</span> ? * <span class="number">6</span>#<span class="number">3</span><span class="string">&quot;     # 每月的第三个星期五上午10:15触发</span></span><br><span class="line"><span class="string">&quot;</span><span class="number">0</span> <span class="number">15</span> <span class="number">10</span> ? * <span class="number">6L</span> <span class="number">2002</span>-<span class="number">2005</span><span class="string">&quot; # 2002年至2005年的每月的最后一个星期五上午10:15触发</span></span><br></pre></td></tr></table></figure>
<h2 id="基本使用">基本使用</h2>
<h3 id="基本方法">基本方法</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// 开启定时任务开关</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringtaskApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringtaskApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskService01</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Scheduled(fixedDelay = 1000)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task01</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;fixedDelay....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Scheduled(fixedRate = 1000)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task02</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;fixedRate....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Scheduled(initialDelay = 10000,fixedDelay = 1000)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task03</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;initialDelay&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;1 * * * * *&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task04</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;cron&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="定时任务开-关">定时任务开/关</h3>
<p>通过配置文件控制 Bean 的实例化，根据需要进行开启/关闭定时任务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;test.job&quot;, name = &quot;enable&quot;, havingValue = &quot;true&quot;, matchIfMissing = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJob</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;1 * * * * *&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task04</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;cron&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="定时任务配置">定时任务配置</h2>
<p>@EnableScheduling 注解引入了 ScheduledAnnotationBeanPostProcessor 其 setScheduler(Object scheduler) 有以下的注释：</p>
<p>如果 TaskScheduler 或者 ScheduledExecutorService 没有定义为该方法的参数，该方法将在 Spring IoC 中寻找唯一的 TaskScheduler 或者名称为 taskScheduler 的 Bean 作为参数，当然你按照查找 TaskScheduler 的方法找一个 ScheduledExecutorService 也可以。要是都找不到那么只能使用本地单线程调度器了</p>
<p><img src="5.png" alt=""></p>
<p><img src="3.png" alt=""></p>
<h3 id="执行器">执行器</h3>
<p>SpringBoot 内默认自动配置 TaskExecutor 任务执行器线程池，主要用于执行单次任务</p>
<h4 id="自动配置条件">自动配置条件</h4>
<ol>
<li>当类路径下存在 ThreadPoolTaskExecutor 类</li>
<li>当 Spring 容器中不存在 Executor 的 bean</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 仅在类 ThreadPoolTaskExecutor 存在于 classpath 时才应用</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(ThreadPoolTaskExecutor.class)</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(TaskExecutionProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskExecutionAutoConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">APPLICATION_TASK_EXECUTOR_BEAN_NAME</span> <span class="operator">=</span> <span class="string">&quot;applicationTaskExecutor&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="keyword">public</span> TaskExecutorBuilder <span class="title function_">taskExecutorBuilder</span><span class="params">(TaskExecutionProperties properties,</span></span><br><span class="line"><span class="params">            ObjectProvider&lt;TaskExecutorCustomizer&gt; taskExecutorCustomizers,</span></span><br><span class="line"><span class="params">            ObjectProvider&lt;TaskDecorator&gt; taskDecorator)</span> &#123;</span><br><span class="line">        TaskExecutionProperties.<span class="type">Pool</span> <span class="variable">pool</span> <span class="operator">=</span> properties.getPool();</span><br><span class="line">        <span class="type">TaskExecutorBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TaskExecutorBuilder</span>();</span><br><span class="line">        builder = builder.queueCapacity(pool.getQueueCapacity());</span><br><span class="line">        builder = builder.corePoolSize(pool.getCoreSize());</span><br><span class="line">        builder = builder.maxPoolSize(pool.getMaxSize());</span><br><span class="line">        builder = builder.allowCoreThreadTimeOut(pool.isAllowCoreThreadTimeout());</span><br><span class="line">        builder = builder.keepAlive(pool.getKeepAlive());</span><br><span class="line">        <span class="type">Shutdown</span> <span class="variable">shutdown</span> <span class="operator">=</span> properties.getShutdown();</span><br><span class="line">        builder = builder.awaitTermination(shutdown.isAwaitTermination());</span><br><span class="line">        builder = builder.awaitTerminationPeriod(shutdown.getAwaitTerminationPeriod());</span><br><span class="line">        builder = builder.threadNamePrefix(properties.getThreadNamePrefix());</span><br><span class="line">        builder = builder.customizers(taskExecutorCustomizers.orderedStream()::iterator);</span><br><span class="line">        builder = builder.taskDecorator(taskDecorator.getIfUnique());</span><br><span class="line">        <span class="keyword">return</span> builder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Lazy</span></span><br><span class="line">    <span class="meta">@Bean(name = &#123; APPLICATION_TASK_EXECUTOR_BEAN_NAME,</span></span><br><span class="line"><span class="meta">            AsyncAnnotationBeanPostProcessor.DEFAULT_TASK_EXECUTOR_BEAN_NAME &#125;)</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean(Executor.class)</span></span><br><span class="line">    <span class="keyword">public</span> ThreadPoolTaskExecutor <span class="title function_">applicationTaskExecutor</span><span class="params">(TaskExecutorBuilder builder)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> builder.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="线程池配置">线程池配置</h4>
<p>TaskExecutionProperties 默认值：</p>
<ol>
<li>线程名称前缀：threadNamePrefix = “task-”</li>
<li>核心线程数：coreSize = 8</li>
<li>最大线程数：maxSize = Integer.MAX_VALUE</li>
<li>非核心线程存活时长：keepAlive = Duration.ofSeconds(60)</li>
</ol>
<h3 id="调度器">调度器</h3>
<p>SpringBoot 内默认自动配置 TaskScheduler 任务调度器线程池，主要用于执行周期性任务</p>
<h4 id="自动配置条件-2">自动配置条件</h4>
<ol>
<li>当类路径下存在 ThreadPoolTaskScheduler 类</li>
<li>当 Spring 容器中不存在 SchedulingConfigurer 、 TaskScheduler 、ScheduledExecutorService 的 bean</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnClass(ThreadPoolTaskScheduler.class)</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(TaskSchedulingProperties.class)</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(TaskExecutionAutoConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskSchedulingAutoConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnBean(name = TaskManagementConfigUtils.SCHEDULED_ANNOTATION_PROCESSOR_BEAN_NAME)</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean(&#123; SchedulingConfigurer.class, TaskScheduler.class, ScheduledExecutorService.class &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> ThreadPoolTaskScheduler <span class="title function_">taskScheduler</span><span class="params">(TaskSchedulerBuilder builder)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> builder.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="keyword">public</span> TaskSchedulerBuilder <span class="title function_">taskSchedulerBuilder</span><span class="params">(TaskSchedulingProperties properties,</span></span><br><span class="line"><span class="params">            ObjectProvider&lt;TaskSchedulerCustomizer&gt; taskSchedulerCustomizers)</span> &#123;</span><br><span class="line">        <span class="type">TaskSchedulerBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TaskSchedulerBuilder</span>();</span><br><span class="line">        builder = builder.poolSize(properties.getPool().getSize());</span><br><span class="line">        <span class="type">Shutdown</span> <span class="variable">shutdown</span> <span class="operator">=</span> properties.getShutdown();</span><br><span class="line">        builder = builder.awaitTermination(shutdown.isAwaitTermination());</span><br><span class="line">        builder = builder.awaitTerminationPeriod(shutdown.getAwaitTerminationPeriod());</span><br><span class="line">        builder = builder.threadNamePrefix(properties.getThreadNamePrefix());</span><br><span class="line">        builder = builder.customizers(taskSchedulerCustomizers);</span><br><span class="line">        <span class="keyword">return</span> builder;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>当 Spring 容器中存在名字叫 org.springframework.context.annotation.internalScheduledAnnotationProcessor （需要配置 @EnableScheduling 注解将会注入这个名字的 bean）</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Import(SchedulingConfiguration.class)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableScheduling &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Role(BeanDefinition.ROLE_INFRASTRUCTURE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SchedulingConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = TaskManagementConfigUtils.SCHEDULED_ANNOTATION_PROCESSOR_BEAN_NAME)</span></span><br><span class="line">    <span class="meta">@Role(BeanDefinition.ROLE_INFRASTRUCTURE)</span></span><br><span class="line">    <span class="keyword">public</span> ScheduledAnnotationBeanPostProcessor <span class="title function_">scheduledAnnotationProcessor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ScheduledAnnotationBeanPostProcessor</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="线程池配置-2">线程池配置</h4>
<p>TaskSchedulingProperties 默认配置值：</p>
<ol>
<li>线程名称前缀：threadNamePrefix = “scheduling-”</li>
<li>线程数：size = 1</li>
</ol>
<p>该配置的自定义配置以 spring.task.scheduling 开头。同时它需要在任务执行器配置 TaskExecutionAutoConfiguration 配置后才生效。我们只需要在中对其配置属性 spring.task.execution 相关属性配置即可。</p>
<p>注意：定义任务默认用的是 TaskSchedulingAutoConfiguration 实例化的 Bean（applicationTaskExecutor、taskScheduler）</p>
<h3 id="Properties-配置">Properties 配置</h3>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">######任务调度线程池######</span></span><br><span class="line"><span class="comment"># 任务调度线程池大小 默认 1 建议根据任务加大</span></span><br><span class="line"><span class="attr">spring.task.scheduling.pool.size</span>=<span class="string">1</span></span><br><span class="line"><span class="comment"># 调度线程名称前缀 默认 scheduling-</span></span><br><span class="line"><span class="attr">spring.task.scheduling.thread-name-prefix</span>=<span class="string">scheduling-</span></span><br><span class="line"><span class="comment"># 线程池关闭时等待所有任务完成</span></span><br><span class="line"><span class="attr">spring.task.scheduling.shutdown.await-termination</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 调度线程关闭前最大等待时间，确保最后一定关闭</span></span><br><span class="line"><span class="attr">spring.task.scheduling.shutdown.await-termination-period</span>=<span class="string">60</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">######任务执行线程池配置######</span></span><br><span class="line"><span class="comment"># 是否允许核心线程超时。这样可以动态增加和缩小线程池</span></span><br><span class="line"><span class="attr">spring.task.execution.pool.allow-core-thread-timeout</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#  核心线程池大小 默认 8</span></span><br><span class="line"><span class="attr">spring.task.execution.pool.core-size</span>=<span class="string">8</span></span><br><span class="line"><span class="comment"># 线程空闲等待时间 默认 60s</span></span><br><span class="line"><span class="attr">spring.task.execution.pool.keep-alive</span>=<span class="string">60s</span></span><br><span class="line"><span class="comment"># 线程池最大数  根据任务定制</span></span><br><span class="line"><span class="attr">spring.task.execution.pool.max-size</span>=<span class="string">16</span></span><br><span class="line"><span class="comment">#  线程池 队列容量大小</span></span><br><span class="line"><span class="attr">spring.task.execution.pool.queue-capacity</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># 线程池关闭时等待所有任务完成</span></span><br><span class="line"><span class="attr">spring.task.execution.shutdown.await-termination</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 执行线程关闭前最大等待时间，确保最后一定关闭</span></span><br><span class="line"><span class="attr">spring.task.execution.shutdown.await-termination-period</span>=<span class="string">60</span></span><br><span class="line"><span class="comment"># 线程名称前缀</span></span><br><span class="line"><span class="attr">spring.task.execution.thread-name-prefix</span>=<span class="string">task-</span></span><br></pre></td></tr></table></figure>
<h4 id="TaskSchedulingAutoConfiguration-源码">TaskSchedulingAutoConfiguration 源码</h4>
<p>当 Spring Boot 应用程序中没有定义自定义的线程池 bean 时，Spring Boot 应用程序会根据自动配置类注入一个名为 applicationTaskExecutor 或 taskExecutor 的线程池对象，它的配置是在 TaskExecutionProperties 类中完成的，这个类使用 spring.task.execution 前缀进行配置，包含了很多线程池相关细节的配置选项，当我们容器中存在自定义线程池时，applicationTaskExecutor 或 taskExecutor 的线程池对象是不会被创建的。</p>
<h4 id="Async-注解相关配置">@Async 注解相关配置</h4>
<p>使用@Async 注解没有指定 value 属性时，项目启动的时候会有这样的提示：“在上下文中找到多个 TaskExecutor bean，并且没有一个名为’ taskExecutor’。将其中一个标记为 primary 或将其命名为’taskExecutor’（可能作为别名），以便将其用于异步处理”</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 标记为 Primary，即主要的线程</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="keyword">public</span> ThreadPoolTaskExecutor <span class="title function_">threadPoolTaskExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line">    executor.setThreadNamePrefix(<span class="string">&quot;my-free-style-&quot;</span>);</span><br><span class="line">    executor.setMaxPoolSize(maxPoolSize);</span><br><span class="line">    executor.setCorePoolSize(corePoolSize);</span><br><span class="line">    executor.setQueueCapacity(queueCapacity);</span><br><span class="line">    executor.setKeepAliveSeconds(keepAliveSeconds);</span><br><span class="line">    <span class="comment">// 线程池对拒绝任务(无线程可用)的处理策略</span></span><br><span class="line">    executor.setRejectedExecutionHandler(<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());</span><br><span class="line">    <span class="keyword">return</span> executor;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 直接起别名为 taskExecutor</span></span><br><span class="line"><span class="meta">@Bean(name = &quot;taskExecutor&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ThreadPoolTaskExecutor <span class="title function_">threadPoolTaskExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line">    executor.setThreadNamePrefix(<span class="string">&quot;my-free-style-&quot;</span>);</span><br><span class="line">    executor.setMaxPoolSize(maxPoolSize);</span><br><span class="line">    executor.setCorePoolSize(corePoolSize);</span><br><span class="line">    executor.setQueueCapacity(queueCapacity);</span><br><span class="line">    executor.setKeepAliveSeconds(keepAliveSeconds);</span><br><span class="line">    <span class="comment">// 线程池对拒绝任务(无线程可用)的处理策略</span></span><br><span class="line">    executor.setRejectedExecutionHandler(<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());</span><br><span class="line">    <span class="keyword">return</span> executor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="任务阻塞">任务阻塞</h2>
<h3 id="出现原因">出现原因</h3>
<p>Spring 中@EnableScheduling 和@Scheduled 标注的定时任务默认单线程同步执行，多个任务时，一个任务执行完毕以后才能执行下一个任务，可能会有阻塞现象发生（如果希望并发运行，需要配置线程池）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringbootTaskApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringbootTaskApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleTask1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;*/2 * * * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;我是task1，我需要执行 10s 钟的时间，我的线程的 id == &gt; &#123;&#125;，时间 == &gt;&#123;&#125;&quot;</span>, Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">        log.info(<span class="string">&quot;我是task1 ending ,我的线程的 id == &gt; &#123;&#125; , 时间 == &gt; &#123;&#125;&quot;</span>, Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;*/4 * * * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task2</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;我是task2，我需要执行 2s 钟的时间，我的线程的 id == &gt; &#123;&#125;，时间 == &gt;&#123;&#125;&quot;</span>, Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        log.info(<span class="string">&quot;我是task2 ending ,我的线程的 id == &gt; &#123;&#125; , 时间 == &gt; &#123;&#125;&quot;</span>,Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line">我是task1，我需要执行 10s 钟的时间，我的线程的 id == &gt; <span class="number">95</span>，时间 == &gt;Fri Feb <span class="number">01</span> <span class="number">15</span>:<span class="number">16</span>:<span class="number">52</span> CST <span class="number">2019</span></span><br><span class="line">我是task1 ending ,我的线程的 id == &gt; <span class="number">95</span> , 时间 == &gt; Fri Feb <span class="number">01</span> <span class="number">15</span>:<span class="number">17</span>:<span class="number">02</span> CST <span class="number">2019</span></span><br><span class="line">我是task2，我需要执行 2s 钟的时间，我的线程的 id == &gt; <span class="number">95</span>，时间 == &gt;Fri Feb <span class="number">01</span> <span class="number">15</span>:<span class="number">17</span>:<span class="number">02</span> CST <span class="number">2019</span></span><br><span class="line">task2 ending ,我的线程的 id == &gt; <span class="number">95</span> , 时间 == &gt; Fri Feb <span class="number">01</span> <span class="number">15</span>:<span class="number">17</span>:<span class="number">04</span> CST <span class="number">2019</span></span><br><span class="line">我是task1，我需要执行 10s 钟的时间，我的线程的 id == &gt; <span class="number">95</span>，时间 == &gt;Fri Feb <span class="number">01</span> <span class="number">15</span>:<span class="number">17</span>:<span class="number">04</span> CST <span class="number">2019</span></span><br><span class="line">task1 ending ,我的线程的 id == &gt; <span class="number">95</span> , 时间 == &gt; Fri Feb <span class="number">01</span> <span class="number">15</span>:<span class="number">17</span>:<span class="number">14</span> CST <span class="number">2019</span></span><br></pre></td></tr></table></figure>
<p>可以看出，从 task1 任务运行时，等到 4s 时，task2 任务没有执行，而是等到 task1 任务执行结束后才执行</p>
<h3 id="解决方法">解决方法</h3>
<h4 id="使用-Async-异步执行任务">使用@Async 异步执行任务</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringbootTaskApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringbootTaskApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>使用默认线程池配置</li>
</ol>
<p>@Async 默认的线程池配置是 Bean 名称为 taskExecutor 的类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleTask2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;*/2 * * * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;我是task1，我需要执行 10s 钟的时间，我的线程的 id == &gt; &#123;&#125;，时间 == &gt;&#123;&#125;&quot;</span>, Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">        log.info(<span class="string">&quot;我是task1 ending ,我的线程的 id == &gt; &#123;&#125; , 时间 == &gt; &#123;&#125;&quot;</span>, Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;*/4 * * * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task2</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;我是task2，我需要执行 2s 钟的时间，我的线程的 id == &gt; &#123;&#125;，时间 == &gt;&#123;&#125;&quot;</span>, Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        log.info(<span class="string">&quot;我是task2 ending ,我的线程的 id == &gt; &#123;&#125; , 时间 == &gt; &#123;&#125;&quot;</span>,Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>自定义线程池配置</li>
</ol>
<p>通过指定 Bean 名称来决定使用哪个线程池，用户可以自定义线程池配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleTask3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async(&quot;myPoolTaskExecutor&quot;)</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;*/2 * * * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;我是task1，我需要执行 10s 钟的时间，我的线程的 id == &gt; &#123;&#125;，时间 == &gt;&#123;&#125;&quot;</span>, Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">        log.info(<span class="string">&quot;我是task1 ending ,我的线程的 id == &gt; &#123;&#125; , 时间 == &gt; &#123;&#125;&quot;</span>, Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async(&quot;myPoolTaskExecutor&quot;)</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;*/4 * * * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task2</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;我是task2，我需要执行 2s 钟的时间，我的线程的 id == &gt; &#123;&#125;，时间 == &gt;&#123;&#125;&quot;</span>, Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        log.info(<span class="string">&quot;我是task2 ending ,我的线程的 id == &gt; &#123;&#125; , 时间 == &gt; &#123;&#125;&quot;</span>,Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 创建自定义线程池，提供异步调用时使用</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;myPoolTaskExecutor&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ThreadPoolTaskExecutor <span class="title function_">getMyPoolTaskExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">taskExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line">        <span class="comment">//核心线程数</span></span><br><span class="line">        taskExecutor.setCorePoolSize(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//线程池维护线程的最大数量, 只有在缓冲队列满了之后才会申请超过核心线程数的线程</span></span><br><span class="line">        taskExecutor.setMaxPoolSize(<span class="number">100</span>);</span><br><span class="line">        <span class="comment">//缓存队列</span></span><br><span class="line">        taskExecutor.setQueueCapacity(<span class="number">50</span>);</span><br><span class="line">        <span class="comment">//许的空闲时间, 当超过了核心线程出之外的线程在空闲时间到达之后会被销毁</span></span><br><span class="line">        taskExecutor.setKeepAliveSeconds(<span class="number">200</span>);</span><br><span class="line">        <span class="comment">//异步方法内部线程名称</span></span><br><span class="line">        taskExecutor.setThreadNamePrefix(<span class="string">&quot;poolTestThread-&quot;</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 当线程池的任务缓存队列已满并且线程池中的线程数目达到 maximumPoolSize，如果还有任务到来就会采取任务拒绝策略</span></span><br><span class="line"><span class="comment">         * 通常有以下四种策略：</span></span><br><span class="line"><span class="comment">         * ThreadPoolExecutor.AbortPolicy: 丢弃任务并抛出 RejectedExecutionException 异常。</span></span><br><span class="line"><span class="comment">         * ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常。</span></span><br><span class="line"><span class="comment">         * ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）</span></span><br><span class="line"><span class="comment">         * ThreadPoolExecutor.CallerRunsPolicy：重试添加当前的任务，自动重复调用 execute() 方法，直到成功</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 拒绝策略</span></span><br><span class="line">        taskExecutor.setRejectedExecutionHandler(<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());</span><br><span class="line">        taskExecutor.initialize();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;@Async 业务处理线程配置成功，核心线程池：[&#123;&#125;]，最大线程池：[&#123;&#125;]，队列容量：[&#123;&#125;]，线程名称前缀：[&#123;&#125;]&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> taskExecutor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>执行结果</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//运行结果：</span></span><br><span class="line">我是task2，我需要执行 2s 钟的时间，我的线程的 id == &gt; <span class="number">116</span>，时间 == &gt;Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">32</span> CST <span class="number">2019</span></span><br><span class="line">我是task1，我需要执行 10s 钟的时间，我的线程的 id == &gt; <span class="number">117</span>，时间 == &gt;Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">32</span> CST <span class="number">2019</span></span><br><span class="line">我是task1，我需要执行 10s 钟的时间，我的线程的 id == &gt; <span class="number">124</span>，时间 == &gt;Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">34</span> CST <span class="number">2019</span></span><br><span class="line">task2 ending ,我的线程的 id == &gt; <span class="number">116</span> , 时间 == &gt; Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">34</span> CST <span class="number">2019</span></span><br><span class="line">我是task1，我需要执行 10s 钟的时间，我的线程的 id == &gt; <span class="number">125</span>，时间 == &gt;Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">36</span> CST <span class="number">2019</span></span><br><span class="line">我是task2，我需要执行 2s 钟的时间，我的线程的 id == &gt; <span class="number">126</span>，时间 == &gt;Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">36</span> CST <span class="number">2019</span></span><br><span class="line">我是task1，我需要执行 10s 钟的时间，我的线程的 id == &gt; <span class="number">127</span>，时间 == &gt;Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">38</span> CST <span class="number">2019</span></span><br><span class="line">task2 ending ,我的线程的 id == &gt; <span class="number">126</span> , 时间 == &gt; Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">38</span> CST <span class="number">2019</span></span><br><span class="line">我是task2，我需要执行 2s 钟的时间，我的线程的 id == &gt; <span class="number">128</span>，时间 == &gt;Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">40</span> CST <span class="number">2019</span></span><br><span class="line">我是task1，我需要执行 10s 钟的时间，我的线程的 id == &gt; <span class="number">129</span>，时间 == &gt;Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">40</span> CST <span class="number">2019</span></span><br></pre></td></tr></table></figure>
<p>从日志可知：task1 和 task2 的确是并行执行的，因为开始的时间节点是一样的。</p>
<p>存在问题：当 task1 第一次任务执行时间过长时，此时 task1 又到了其第二次执行任务的调度时间，这时会并行执行两个任务</p>
<h4 id="实现-SchedulingConfigurer-接口">实现 SchedulingConfigurer 接口</h4>
<p>使用@Async 会导致第一次任务执行时间过长，从而第二次任务和第一次任务并发执行</p>
<p>解决方法：实现 SchedulingConfigurer 接口，这样自动装配中 TaskSchedulingAutoConfiguration 的 taskScheduler 就不会被实例化，替换原来的线程池配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleConfig</span> <span class="keyword">implements</span> <span class="title class_">SchedulingConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureTasks</span><span class="params">(ScheduledTaskRegistrar taskRegistrar)</span> &#123;</span><br><span class="line">        taskRegistrar.setScheduler(taskExecutor());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@Bean</span></span><br><span class="line">     <span class="keyword">public</span> Executor <span class="title function_">taskExecutor</span><span class="params">()</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> Executors.newScheduledThreadPool(<span class="number">10</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleTask4</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;*/2 * * * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;我是task1，我需要执行 10s 钟的时间，我的线程的 id == &gt; &#123;&#125;，时间 == &gt;&#123;&#125;&quot;</span>, Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">        log.info(<span class="string">&quot;我是task1 ending ,我的线程的 id == &gt; &#123;&#125; , 时间 == &gt; &#123;&#125;&quot;</span>, Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;*/4 * * * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task2</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;我是task2，我需要执行 2s 钟的时间，我的线程的 id == &gt; &#123;&#125;，时间 == &gt;&#123;&#125;&quot;</span>, Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        log.info(<span class="string">&quot;我是task2 ending ,我的线程的 id == &gt; &#123;&#125; , 时间 == &gt; &#123;&#125;&quot;</span>,Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>执行结果</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//执行结果：</span></span><br><span class="line">我是task2，我需要执行 2s 钟的时间，我的线程的 id == &gt; <span class="number">95</span>，时间 == &gt;Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">28</span>:<span class="number">16</span> CST <span class="number">2019</span></span><br><span class="line">我是task1，我需要执行 10s 钟的时间，我的线程的 id == &gt; <span class="number">96</span>，时间 == &gt;Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">28</span>:<span class="number">16</span> CST <span class="number">2019</span></span><br><span class="line">task2 ending ,我的线程的 id == &gt; <span class="number">95</span> , 时间 == &gt; Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">28</span>:<span class="number">18</span> CST <span class="number">2019</span></span><br><span class="line">我是task2，我需要执行 2s 钟的时间，我的线程的 id == &gt; <span class="number">95</span>，时间 == &gt;Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">28</span>:<span class="number">20</span> CST <span class="number">2019</span></span><br><span class="line">task2 ending ,我的线程的 id == &gt; <span class="number">95</span> , 时间 == &gt; Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">28</span>:<span class="number">22</span> CST <span class="number">2019</span></span><br><span class="line">我是task2，我需要执行 2s 钟的时间，我的线程的 id == &gt; <span class="number">121</span>，时间 == &gt;Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">28</span>:<span class="number">24</span> CST <span class="number">2019</span></span><br><span class="line">task1 ending ,我的线程的 id == &gt; <span class="number">96</span> , 时间 == &gt; Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">28</span>:<span class="number">26</span> CST <span class="number">2019</span></span><br><span class="line">task2 ending ,我的线程的 id == &gt; <span class="number">121</span> , 时间 == &gt; Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">28</span>:<span class="number">26</span> CST <span class="number">2019</span></span><br><span class="line">我是task1，我需要执行 10s 钟的时间，我的线程的 id == &gt; <span class="number">95</span>，时间 == &gt;Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">28</span>:<span class="number">28</span> CST <span class="number">2019</span></span><br><span class="line">我是task2，我需要执行 2s 钟的时间，我的线程的 id == &gt; <span class="number">122</span>，时间 == &gt;Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">28</span>:<span class="number">28</span> CST <span class="number">2019</span></span><br></pre></td></tr></table></figure>
<p>注意：此时每次定时任务执行的 traceId 是一致的，无法很好地追踪每次定时任务的情况，修改如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleConfig</span> <span class="keyword">implements</span> <span class="title class_">SchedulingConfigurer</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureTasks</span><span class="params">(ScheduledTaskRegistrar taskRegistrar)</span> &#123;</span><br><span class="line">        <span class="comment">// taskRegistrar.setScheduler(taskExecutor());  </span></span><br><span class="line">        <span class="type">ThreadPoolTaskScheduler</span> <span class="variable">taskScheduler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskScheduler</span>();</span><br><span class="line">		taskScheduler.setPoolSize(<span class="number">10</span>);</span><br><span class="line">		taskScheduler.initialize();</span><br><span class="line">        taskRegistrar.setScheduler(taskScheduler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 缺点：可能每次定时任务产生的 traceId 是一致的</span></span><br><span class="line">    <span class="comment">// @Bean</span></span><br><span class="line">    <span class="comment">// public Executor taskExecutor()&#123;</span></span><br><span class="line">    <span class="comment">//     return Executors.newScheduledThreadPool(10);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Properties-配置-2">Properties 配置</h4>
<p>修改默认的线程池配置，适当将调度线程池的配置修改，支持多任务并发执行</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">######任务调度线程池######</span></span><br><span class="line"><span class="comment"># 任务调度线程池大小 默认 1 建议根据任务加大</span></span><br><span class="line"><span class="attr">spring.task.scheduling.pool.size</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># 调度线程名称前缀 默认 scheduling-</span></span><br><span class="line"><span class="attr">spring.task.scheduling.thread-name-prefix</span>=<span class="string">scheduling-</span></span><br><span class="line"><span class="comment"># 线程池关闭时等待所有任务完成</span></span><br><span class="line"><span class="attr">spring.task.scheduling.shutdown.await-termination</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 调度线程关闭前最大等待时间，确保最后一定关闭</span></span><br><span class="line"><span class="attr">spring.task.scheduling.shutdown.await-termination-period</span>=<span class="string">60</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">######任务执行线程池配置######</span></span><br><span class="line"><span class="comment"># 是否允许核心线程超时。这样可以动态增加和缩小线程池</span></span><br><span class="line"><span class="attr">spring.task.execution.pool.allow-core-thread-timeout</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 核心线程池大小 默认 8</span></span><br><span class="line"><span class="attr">spring.task.execution.pool.core-size</span>=<span class="string">8</span></span><br><span class="line"><span class="comment"># 线程空闲等待时间 默认 60s</span></span><br><span class="line"><span class="attr">spring.task.execution.pool.keep-alive</span>=<span class="string">60s</span></span><br><span class="line"><span class="comment"># 线程池最大数 根据任务定制</span></span><br><span class="line"><span class="attr">spring.task.execution.pool.max-size</span>=<span class="string">16</span></span><br><span class="line"><span class="comment"># 线程池队列容量大小</span></span><br><span class="line"><span class="attr">spring.task.execution.pool.queue-capacity</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># 线程池关闭时等待所有任务完成</span></span><br><span class="line"><span class="attr">spring.task.execution.shutdown.await-termination</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 执行线程关闭前最大等待时间，确保最后一定关闭</span></span><br><span class="line"><span class="attr">spring.task.execution.shutdown.await-termination-period</span>=<span class="string">60</span></span><br><span class="line"><span class="comment"># 线程名称前缀</span></span><br><span class="line"><span class="attr">spring.task.execution.thread-name-prefix</span>=<span class="string">task-</span></span><br></pre></td></tr></table></figure>
<h2 id="缺点">缺点</h2>
<ol>
<li>不支持集群配置，在分布式环境下会出现多个任务并发执行的情况</li>
</ol>
<p>解决方法：通过分布式锁的方式预防任务并发执行的情况</p>
<ol start="2">
<li>不支持指定的时间范围执行任务（例如在 9 点到 11 点间执行任务，其他时间段不执行）</li>
<li>不支持分片执行任务</li>
</ol>
<h2 id="动态定时任务实现">动态定时任务实现</h2>
<h3 id="出现问题">出现问题</h3>
<p>用实现 SpringBoot + @Scheduled 实现了定时任务。但是也存在很多问题：</p>
<p>通常，@Scheduled 注解的所有属性只在 Spring Context 启动时解析和初始化一次。因此，当在 Spring 中使用 @Scheduled 注解时，无法在运行时更改 fixedDelay 或 fixedRate 值。</p>
<ol>
<li>在一个线程内执行，那么任务多了就可能被阻塞，导致任务延迟执行。</li>
<li>每次修改执行频率都要改代码，重启服务。</li>
<li>无法提供定时任务的启用、暂停、修改接口。</li>
</ol>
<p>实现方法：参考 ScheduledTaskRegistrar 源码提供的方法</p>
<h3 id="简单案例">简单案例</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `sys_task` (</span><br><span class="line">  `id` bigint(21) NOT NULL AUTO_INCREMENT COMMENT &#x27;主键&#x27;,</span><br><span class="line">  `task_uuid` varchar(50) DEFAULT NULL COMMENT &#x27;任务UUID&#x27;,</span><br><span class="line">  `task_name` varchar(50) DEFAULT NULL COMMENT &#x27;任务名称&#x27;,</span><br><span class="line">  `task_cron` varchar(50) DEFAULT NULL COMMENT &#x27;任务定时表达式&#x27;,</span><br><span class="line">  `class_name` varchar(100) DEFAULT NULL COMMENT &#x27;任务类&#x27;,</span><br><span class="line">  `method_name` varchar(100) DEFAULT NULL COMMENT &#x27;任务方法&#x27;,</span><br><span class="line">  `task_type` int(1) DEFAULT NULL COMMENT &#x27;任务类型&#x27;,</span><br><span class="line">  `remark` varchar(250) DEFAULT NULL,</span><br><span class="line">  `del_flag` int(1) DEFAULT &#x27;1&#x27;,</span><br><span class="line">  `create_user` varchar(50) DEFAULT NULL,</span><br><span class="line">  `create_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP,</span><br><span class="line">  `update_user` varchar(50) DEFAULT NULL,</span><br><span class="line">  `update_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduledConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ScheduledTaskRegistrar <span class="title function_">taskRegistrar</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ScheduledTaskRegistrar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleTask5</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;我是task1，我的线程的 id == &gt; &#123;&#125;，时间 == &gt;&#123;&#125;&quot;</span>, Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">        log.info(<span class="string">&quot;我是task1 ending ,我的线程的 id == &gt; &#123;&#125; , 时间 == &gt; &#123;&#125;&quot;</span>, Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysTask</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 主键</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 任务 UUID</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String taskUuid;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 任务名称</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String taskName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 任务定时表达式</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String taskCron;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 任务类</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String className;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 任务方法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String methodName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 任务类型</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> Integer taskType;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 备注</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String remark;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer delFlag;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建人</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String createUser;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改人</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String updateUser;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CronServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">CronService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, ScheduledTask&gt; scheduledTaskMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ScheduledTaskRegistrar taskRegistrar;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(SysTask sysTask)</span> &#123;</span><br><span class="line">        <span class="type">CronTask</span> <span class="variable">cronTask</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CronTask</span>(getRunnable(sysTask), sysTask.getTaskCron());</span><br><span class="line">        <span class="type">ScheduledTask</span> <span class="variable">scheduledTask</span> <span class="operator">=</span> taskRegistrar.scheduleCronTask(cronTask);</span><br><span class="line">        <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">        scheduledTaskMap.put(uuid, scheduledTask);</span><br><span class="line">        log.info(<span class="string">&quot;添加任务成功, uuid == &gt; &#123;&#125;, 任务名称 == &gt; &#123;&#125;, 任务表达式 == &gt; &#123;&#125;&quot;</span>, uuid, sysTask.getTaskName(), sysTask.getTaskCron());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Runnable <span class="title function_">getRunnable</span><span class="params">(SysTask sysTask)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> () -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Class&lt;?&gt; aClass = Class.forName(sysTask.getClassName());</span><br><span class="line">                Constructor&lt;?&gt; constructor = aClass.getConstructor();</span><br><span class="line">                <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor.newInstance();</span><br><span class="line">                <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> aClass.getMethod(sysTask.getMethodName());</span><br><span class="line">                method.invoke(o);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String uuid)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ScheduledTask</span> <span class="variable">scheduledTask</span> <span class="operator">=</span> scheduledTaskMap.get(uuid);</span><br><span class="line">            scheduledTask.cancel();</span><br><span class="line">            scheduledTaskMap.remove(uuid);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(SysTask sysTask)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.delete(sysTask.getTaskUuid());</span><br><span class="line">        <span class="built_in">this</span>.add(sysTask);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/cron&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CronController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> CronService cronService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> SysTask sysTask)</span> &#123;</span><br><span class="line">        cronService.add(sysTask);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/delete&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">delete</span><span class="params">(String uuid)</span> &#123;</span><br><span class="line">        cronService.delete(uuid);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/update&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> SysTask sysTask)</span> &#123;</span><br><span class="line">        cronService.update(sysTask);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>定时任务</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL（1-常用命令）</title>
    <url>/blog/2024/11/10/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL%EF%BC%881-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%EF%BC%89/</url>
    <content><![CDATA[<h2 id="DDL（定义数据库、表结构）">DDL（定义数据库、表结构）</h2>
<h3 id="操作数据库">操作数据库</h3>
<h4 id="创建数据库">创建数据库</h4>
<ol>
<li>创建数据库：create database 数据库名称;</li>
<li>创建数据库，判断是否存在：create database if not exists 数据库名称;</li>
<li>创建数据库，判断是否存在，并指定字符集：create database 数据库名称 character set 字符集;</li>
</ol>
<h4 id="查询数据库">查询数据库</h4>
<ol>
<li>查询所有数据库的名称：show databases;</li>
<li>查询某个数据库的字符集：show create database 数据库名称;</li>
</ol>
<h4 id="修改数据库">修改数据库</h4>
<p>修改数据库的字符集：alter database 数据库名称 character set 字符集;</p>
<h4 id="删除数据库">删除数据库</h4>
<ol>
<li>删除数据库：drop  database 数据库名称;</li>
<li>判断数据库是否存在，存在则删除：drop database if exists 数据库名称;</li>
</ol>
<h4 id="使用数据库">使用数据库</h4>
<ol>
<li>查询当前正在使用的数据库名称：select database();</li>
<li>使用数据库：use 数据库名称;</li>
</ol>
<h3 id="操作表">操作表</h3>
<h4 id="创建表">创建表</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">    列名1  数据类型1,</span><br><span class="line">    列名2  数据类型2,</span><br><span class="line">    ........</span><br><span class="line">    列名n  数据类型n </span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>注意：最后一列不需要加逗号</p>
<h4 id="复制表">复制表</h4>
<ol>
<li>只复制表结构：create table 表名 like 被复制的表名;</li>
<li>复制表结构及数据：create table 表名 select *  from 被复制的表名;</li>
</ol>
<h4 id="查询表">查询表</h4>
<ol>
<li>查询某个数据库中所有的表名称：show tables;</li>
<li>查询表结构：desc 表名;</li>
<li>查看建表语句：show create table 表名;</li>
</ol>
<h4 id="修改表">修改表</h4>
<ol>
<li>修改表名：alter table 表名 rename to 新表名;</li>
<li>修改表的字符集：alter table 表名 character set 字符集名称;</li>
<li>添加一列：alter table 表名 add 列名 数据类型;</li>
<li>修改列名称和类型：</li>
</ol>
<ul>
<li>alter table 表名 change 列名 新列名 新数据类型;</li>
<li>alter table 表名 modify 列名 新数据类型;</li>
</ul>
<ol start="5">
<li>删除列：alter table 表名 drop 列名;</li>
</ol>
<h4 id="删除表">删除表</h4>
<ol>
<li>删除表：drop table 表名;</li>
<li>如果存在表，则删除：drop table if exists 表名;</li>
</ol>
<h3 id="约束">约束</h3>
<h4 id="主键约束（primary-key）">主键约束（primary key）</h4>
<ol>
<li>创建表时添加约束</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table 表名 (</span><br><span class="line">    字段名 数据类型 primary key,</span><br><span class="line">    ......</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>
<p>创建表完后删除约束：alter table 表名 drop primary key;</p>
</li>
<li>
<p>创建表完后添加约束</p>
</li>
</ol>
<ul>
<li>
<p>alter table 表名 add primary key(字段名);</p>
</li>
<li>
<p>alter table 表名 modify 字段名 数据类型 primary key;</p>
</li>
<li>
<p>alter table 表名 change 旧字段名 新字段名 数据类型 primary key;</p>
</li>
<li>
<p>alter table 表名 add constraint 约束名称 primary key(字段名);</p>
</li>
</ul>
<p><strong>注意</strong></p>
<ol>
<li>非空且唯一（等于唯一约束+非空约束），一张表只能有一个字段为主键</li>
<li>表需有该字段才能添加约束，有自动增长时需先删除自动增长，然后才能删除主键，否则会报错</li>
</ol>
<h4 id="自动增长（auto-increment）">自动增长（auto_increment）</h4>
<p>如果某一列是数值类型的，使用 auto_increment 可以来实现自动增长</p>
<ol>
<li>创建表时添加自动增长</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">    字段名 数据类型 primary key auto_increment,</span><br><span class="line">    ......</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>创建表完后删除自动增长</li>
</ol>
<ul>
<li>
<p>alter table 表名 modify 字段名 数据类型;</p>
</li>
<li>
<p>alter table 表名 change 旧字段名 新字段名 数据类型;</p>
</li>
</ul>
<ol start="3">
<li>创建表完后添加自动增长</li>
</ol>
<ul>
<li>
<p>alter table 表名 modify 字段名 数据类型 auto_increment;</p>
</li>
<li>
<p>alter table 表名 change 旧字段名 新字段名 数据类型 auto_increment;</p>
</li>
</ul>
<p><strong>注意</strong></p>
<ol>
<li>一张表只能有一个自增列，并且该列必须定义了约束</li>
<li>必须为主键才可以设置为递增，并且只能在数字类型中使用，否则会报错</li>
</ol>
<h4 id="非空约束（not-null）">非空约束（not null）</h4>
<ol>
<li>创建表时添加约束</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">	字段名 数据类型 not null,</span><br><span class="line">	.......</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>创建表完后删除约束</li>
</ol>
<ul>
<li>
<p>alter table 表名 modify 字段名 数据类型;</p>
</li>
<li>
<p>alter table 表名 change 旧字段名 新字段名 数据类型;</p>
</li>
</ul>
<ol start="3">
<li>创建表完后添加约束</li>
</ol>
<ul>
<li>
<p>alter table 表名 modify 字段名 数据类型 not null;</p>
</li>
<li>
<p>alter table 表名 change 旧字段名 新字段名 数据类型 not null;</p>
</li>
</ul>
<h4 id="默认值约束（default）">默认值约束（default）</h4>
<ol>
<li>创建表时添加约束</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">    字段名 数据类型 default 值,</span><br><span class="line">    ......</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>创建表完后删除约束</li>
</ol>
<ul>
<li>
<p>alter table 表名 modify 字段名 数据类型;</p>
</li>
<li>
<p>alter table 表名 change 旧字段名 新字段名 数据类型;</p>
</li>
</ul>
<ol start="3">
<li>创建表完后添加约束</li>
</ol>
<ul>
<li>
<p>alter table 表名  modify 字段名 数据类型 default 值;</p>
</li>
<li>
<p>alter table 表名  change 旧字段名 新字段名 数据类型 default 值;</p>
</li>
</ul>
<h4 id="唯一约束（unique）">唯一约束（unique）</h4>
<ol>
<li>创建表时添加约束</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">    字段名 数据类型 unique,</span><br><span class="line">    ......</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>
<p>创建表完后删除约束：alter table 表名 drop index 字段名;</p>
</li>
<li>
<p>创建表完后添加约束</p>
</li>
</ol>
<ul>
<li>
<p>alter table 表名 add unique(字段名);</p>
</li>
<li>
<p>alter table 表名 add unique key(字段名);</p>
</li>
<li>
<p>alter table 表名 add constraint 约束名 unique(字段名);</p>
</li>
<li>
<p>alter table 表名 add constraint 约束名 unique key(字段名);</p>
</li>
<li>
<p>alter table 表名 modify 字段名 数据类型 unique;</p>
</li>
<li>
<p>alter table 表名 change 旧字段名 新字段名 数据类型 unique;</p>
</li>
</ul>
<p>注意：唯一约束可以有 null 值，null 值只能有一个</p>
<h4 id="外键约束（foreign-key）">外键约束（foreign key）</h4>
<p>foreign  key：让表与表之间产生联系，保证数据的正确性</p>
<ol>
<li>创建表时添加约束</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">    ......,</span><br><span class="line">    外键列,</span><br><span class="line">    constraint 外键名称(自定义) foreign key(外键列名称) references 主表名称(主表列名称)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>
<p>创建表完后删除约束：alter table 表名 drop foreign key 外键名称;</p>
</li>
<li>
<p>创建表完后添加约束：alter table 表名 add constraint 外键名称(自定义) foreign key (外键列名称) references 主表名称(主表列名称);</p>
</li>
<li>
<p>级联操作：alter table 表名 add constraint 外键名称 foreign key (外键字段名称) references 主表名称(主表列名称) on update cascade on delete cascade;</p>
</li>
</ol>
<ul>
<li>级联更新：on update cascade</li>
<li>级联删除：on delete cascade</li>
</ul>
<p>注意：从表的外键关联的必须是主表的主键，且主键和外键的类型必须一致</p>
<h3 id="索引">索引</h3>
<h4 id="创建索引">创建索引</h4>
<ol>
<li>创建表的时候创建索引</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 唯一索引</span><br><span class="line">CREATE TABLE t1(</span><br><span class="line">  id INT NOT NULL,</span><br><span class="line">  name CHAR(30) NOT NULL,</span><br><span class="line">  UNIQUE INDEX UniqIdx(id)</span><br><span class="line">);</span><br><span class="line"># 普通索引</span><br><span class="line">CREATE TABLE t1(</span><br><span class="line">  id INT NOT NULL,</span><br><span class="line">  name CHAR(30) NOT NULL,</span><br><span class="line">  INDEX UniqIdx(id)</span><br><span class="line">);</span><br><span class="line"># 全文索引</span><br><span class="line">CREATE TABLE t1(</span><br><span class="line">  id INT NOT NULL,</span><br><span class="line">  name TEXT NOT NULL,</span><br><span class="line">  FULLTEXT INDEX UniqIdx(id)</span><br><span class="line">);</span><br><span class="line"># 多列索引</span><br><span class="line">CREATE TABLE t1(</span><br><span class="line">  id INT NOT NULL,</span><br><span class="line">  name TEXT NOT NULL,</span><br><span class="line">  key INDEX UniqIdx(id,name)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>在已存在的表上建立索引</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 在已存在的表上建立索引</span><br><span class="line">ALTER TABLE mytable ADD UNIQUE INDEX UniqIdx(id);</span><br><span class="line">ALTER TABLE mytable ADD INDEX index_name(name(10),city,age);</span><br><span class="line">ALTER TABLE mytable ADD FULLTEXT INDEX UniqIdx(id);</span><br><span class="line">ALTER TABLE mytable ADD INDEX UniqIdx(id);</span><br><span class="line"># 组合索引，相当于分别建立了下面三组索引：</span><br><span class="line">username,city,age</span><br><span class="line">username,city</span><br><span class="line">username</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 只能增加普通索引INDEX和UNIQUE INDEX索引这两种，不能创建PRIMARY KEY索引</span><br><span class="line">CREATE INDEX index_name ON mytable(username);</span><br><span class="line">CREATE UNIQUE INDEX index_name ON mytable(username);</span><br><span class="line">CREATE FULLTEXT INDEX index_name ON mytable(username);</span><br><span class="line">CREATE INDEX index_name ON mytable(username,password);</span><br></pre></td></tr></table></figure>
<h4 id="查看索引">查看索引</h4>
<ol>
<li>查看表的索引：show index from 表名;</li>
<li>指定数据库查看表的索引：show index from 表名 from 数据库名;</li>
</ol>
<h4 id="删除索引">删除索引</h4>
<ol>
<li>删除表的索引：drop index 索引名 on 表名;</li>
<li>删除表的索引：alter table 表名 drop index 索引名;</li>
</ol>
<h2 id="DML（增删改表中数据）">DML（增删改表中数据）</h2>
<h3 id="添加数据">添加数据</h3>
<ol>
<li>指定列名添加数据：insert into 表名(列名 1, 列名 2,…列名 n) values (值 1, 值 2,…值 n);</li>
<li>给所有列添加值：insert into 表名 values (值 1, 值 2,…值 n);</li>
<li>从表 2 查询向表 1 添加数据：insert into 表名 1(列名 1, 列名 2,…列名 n) select 字段 1, 字段 2,…字段 n from 表名 2;</li>
</ol>
<p><strong>注意</strong></p>
<ol>
<li>列名和值要一一对应</li>
<li>除了数字类型，其他类型需要使用引号（单双引号）都可以</li>
</ol>
<h3 id="删除数据">删除数据</h3>
<ol>
<li>删除符合条件的数据：delete from 表名 where 条件;</li>
<li>删除所有数据：delete from 表名;</li>
<li>删除表结构和数据：truncate table 表名;（不可以加条件语句）</li>
</ol>
<h3 id="修改数据">修改数据</h3>
<ol>
<li>更新符合条件的数据：update 表名 set 列名 1 = 值 1, 列名 2 = 值 2, …  where 条件;</li>
<li>更新所有数据：update 表名 set 列名 1 = 值 1, 列名 2 = 值 2, …</li>
</ol>
<h2 id="DQL（查询表中的数据）">DQL（查询表中的数据）</h2>
<h3 id="语法结构">语法结构</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select 字段列表</span><br><span class="line">from 表名列表</span><br><span class="line">where 条件列表</span><br><span class="line">group by 分组列表</span><br><span class="line">having 分组之后的条件</span><br><span class="line">order by 排序方式</span><br><span class="line">limit 分页限定</span><br></pre></td></tr></table></figure>
<p>注意：执行顺序如下</p>
<ol>
<li>from</li>
<li>where</li>
<li>group by</li>
<li>having</li>
<li>select</li>
<li>order by</li>
<li>limit</li>
</ol>
<h3 id="基础查询">基础查询</h3>
<h4 id="多字段查询">多字段查询</h4>
<ol>
<li>查询指定字段数据：select 字段名 1, 字段名 2 …  from 表名;</li>
<li>查询所有数据：select * from 表名;</li>
</ol>
<h4 id="去除重复值（distinct）">去除重复值（distinct）</h4>
<ol>
<li>select distinct 字段名 1, 字段名 2 …  from 表名;</li>
<li>select distinct 字段名 1, distinct 字段名 2 …  from 表名;</li>
</ol>
<h4 id="计算列（ifnull）">计算列（ifnull）</h4>
<p>select 字段名 1, 字段名 2 …  字段名 1+字段名 2  from  表名;（一般只会进行数值型的计算）</p>
<p><strong>注意</strong></p>
<p>ifnull(表达式 1, 表达式 2)：null 参与的运算，计算结果都为 null，所以要使用 ifnull</p>
<ul>
<li>表达式 1：哪个字段需要判断是否为 null</li>
<li>表达式 2：如果该字段为 null 后的替换值</li>
</ul>
<h4 id="起别名（as）">起别名（as）</h4>
<ol>
<li>select  字段名 1 as 别名, 字段名 2 …  from 表名 as 别名;（注意：as 也可以省略）</li>
<li>select  字段名 1 别名, 字段名 2 …  from 表名 别名;</li>
</ol>
<h3 id="条件查询">条件查询</h3>
<p>运算符：</p>
<ol>
<li>
<p>&gt;、&lt;、&lt;=、&gt; =、=、&lt;&gt; 表示不等于</p>
</li>
<li>
<p>BETWEEN…AND</p>
</li>
<li>
<p>LIKE：模糊查询（占位符如下）</p>
</li>
</ol>
<ul>
<li>_：单个任意字符</li>
<li>%：任意字符</li>
<li>[]：用来指定一个字符集，它必须匹配指定位置（通配符的位置）的一个字符，可以用前缀字符^来否定</li>
</ul>
<ol start="4">
<li>IS  NULL</li>
<li>and 或&amp;&amp;</li>
<li>or 或||</li>
<li>not 或！</li>
<li>IN( 集合 )</li>
</ol>
<h3 id="排序查询">排序查询</h3>
<p>order by 字段 1 排序方式 1, …字段 n  排序方式 n</p>
<p>排序方式：</p>
<ol>
<li>ASC：升序，默认的</li>
<li>DESC：降序</li>
</ol>
<h3 id="聚合函数">聚合函数</h3>
<ol>
<li>count（计算个数）</li>
<li>max（计算最大值）</li>
<li>min（计算最小值）</li>
<li>sum（计算和）</li>
<li>avg（计算平均值）</li>
</ol>
<p><strong>注意</strong></p>
<p>聚合函数的计算，要排除 null 值时，可以使用下面解决方法：</p>
<ol>
<li>选择不包含非空的列进行计算</li>
<li>IFNULL 函数</li>
</ol>
<h3 id="分组查询">分组查询</h3>
<p>group by 字段 1, 字段 2…</p>
<p><strong>注意</strong></p>
<ol>
<li>分组之后查询的字段必须是：分组字段、聚合函数</li>
<li>where 和 having 的区别：</li>
</ol>
<ul>
<li>where 在分组之前进行限定，如果不满足条件，则不参与分组；having 在分组之后进行限定，如果不满足条件，则不会被查询出来</li>
<li>where 后不可以跟聚合函数；having 可以进行聚合函数的判断</li>
</ul>
<h3 id="分页查询">分页查询</h3>
<p>limit  开始的索引, 每页查询的条数</p>
<p>公式：开始的索引 =（当前的页码-1）* 每页显示的条数</p>
<h3 id="多表查询">多表查询</h3>
<h4 id="自然连接">自然连接</h4>
<p>select  …  from 表名 1 natural join 表名 2</p>
<p>注意：自然连接是一种特殊的等值连接，他要求两个关系表中进行连接的必须是相同的属性列（名字相同），无须添加连接条件，并且在结果中消除重复的属性列</p>
<h4 id="内连接查询">内连接查询</h4>
<ol>
<li>隐式内连接（使用 where 条件消除无用数据）</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select 别名.字段名,.....</span><br><span class="line">from 表名 别名,......</span><br><span class="line">where 别名.字段名=别名.字段名,.....;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>显式内连接</li>
</ol>
<p>select 字段列表 from 表名 1 inner(可选)  join 表名 2 on 条件;</p>
<h4 id="外连接查询">外连接查询</h4>
<ol>
<li>全外连接（看两边表）</li>
</ol>
<p>select 字段列表 from 表名 1 full outer(可选)  join 表 2 on 条件;</p>
<ol start="2">
<li>左外连接（看左边表）：查询的是左表所有数据以及其交集部分</li>
</ol>
<p>select 字段列表 from 表名 1 left outer(可选)  join  表 2 on 条件;</p>
<p>注意：若在左表的某行在右表中没有匹配的行，则在相关联的结果集行中右表的所有选择列均为空值</p>
<ol start="3">
<li>右外连接（看右边表）：查询的是右表所有数据以及其交集部分</li>
</ol>
<p>select 字段列表 from 表名 1 right outer(可选)  join 表 2 on 条件;</p>
<p>注意：若在右表的某行在左表中没有匹配的行，则在相关联的结果集行中左表的所有选择列均为空值</p>
<h4 id="子查询">子查询</h4>
<ol>
<li>子查询的结果是单行单列的</li>
</ol>
<p>子查询可以作为条件，使用运算符去判断，运算符：&gt;、&lt;、&gt; =、&lt;=、=</p>
<ol start="2">
<li>子查询的结果是多行单列的</li>
</ol>
<p>子查询可以作为条件，使用运算符 in 来判断</p>
<ol start="3">
<li>子查询的结果是多行多列的</li>
</ol>
<p>子查询可以作为一张虚拟表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 例子：查询工资最高的员工信息</span><br><span class="line">select * from emp where emp.&#x27;salary&#x27;=(select max(salary) from emp);</span><br></pre></td></tr></table></figure>
<h2 id="DCL（用户和权限管理）">DCL（用户和权限管理）</h2>
<h3 id="用户管理">用户管理</h3>
<h4 id="添加用户">添加用户</h4>
<p>create user ‘用户名’@‘主机名’ identified by ‘密码’;</p>
<h4 id="删除用户">删除用户</h4>
<p>drop user ‘用户名’@‘主机名’;</p>
<h4 id="修改用户密码">修改用户密码</h4>
<p><strong>MySQL5.7 之前</strong></p>
<ol>
<li>update user set password = password(‘新密码’) where user =‘用户名’;</li>
<li>set password for ‘用户名’@‘主机名’= password(‘新密码’);</li>
</ol>
<p>MySQL 中忘记了 root 用户的密码时：</p>
<ol>
<li>停止 MySQL 服务（需要管理员运行 cmd）：net  stop  mysql</li>
<li>使用无验证方式启动 MySQL 服务：mysqld  --skip-grant-tables</li>
<li>打开新的 cmd 窗口，直接输入 mysql 命令，敲回车，就可以登录成功</li>
<li>use  mysql;</li>
<li>update  user  set  password = password( ‘新密码’ )  where  user = ‘root’;</li>
<li>关闭两个窗口；</li>
<li>打开任务管理器，手动结束 mysqld.exe 的进程</li>
<li>启动 mysql 服务</li>
<li>使用新密码登录</li>
</ol>
<p><strong>MySQL5.7 之后</strong></p>
<p>update user set authentication_string = password(“新密码”) where user =‘用户名’;</p>
<h4 id="查询用户">查询用户</h4>
<ol>
<li>切换到 MySQL 数据库：use mysql;</li>
<li>查询 user 表：select *  from user;</li>
</ol>
<h3 id="权限管理">权限管理</h3>
<h4 id="查询权限">查询权限</h4>
<p>show grants for ‘用户名’@‘主机名’;</p>
<h4 id="授予权限">授予权限</h4>
<p>grant 权限列表 on 数据库名.表名 to ‘用户名’@‘主机名’;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 例子：给张三用户授予所有权限，在任意数据库任意表上</span><br><span class="line">grant all on *.* to &#x27;zhangsan&#x27;@&#x27;localhost&#x27;;</span><br></pre></td></tr></table></figure>
<h4 id="撤销权限">撤销权限</h4>
<p>revoke 权限列表 on 数据库名.表名 from ‘用户名’@‘主机名’;</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL（2-存储过程和函数）</title>
    <url>/blog/2025/04/23/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL%EF%BC%882-%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E5%87%BD%E6%95%B0%EF%BC%89/</url>
    <content><![CDATA[<h2 id="常用语法">常用语法</h2>
<h3 id="查看">查看</h3>
<ol>
<li>查看存储过程和函数的创建信息</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> &#123;<span class="keyword">procedure</span> <span class="operator">|</span> <span class="keyword">function</span>&#125; 存储过程名或函数名</span><br></pre></td></tr></table></figure>
<ul>
<li>procedure：指定存储过程</li>
<li>function：指定存储函数</li>
</ul>
<ol start="2">
<li>查看存储过程和函数的状态信息</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> &#123;<span class="keyword">procedure</span> <span class="operator">|</span> <span class="keyword">function</span>&#125; status [<span class="keyword">like</span> <span class="string">&#x27;pattern&#x27;</span>]</span><br></pre></td></tr></table></figure>
<ul>
<li>like  ‘pattern’：匹配存储过程或函数的名称，可以省略</li>
</ul>
<ol start="3">
<li>查看存储过程和函数的信息</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.Routines [<span class="keyword">where</span> ROUTINE_NAME <span class="operator">=</span> <span class="string">&#x27;存储过程或函数名&#x27;</span> <span class="keyword">AND</span> ROUTINE_TYPE <span class="operator">=</span> &#123;<span class="string">&#x27;PROCEDURE|FUNCTION&#x27;</span>&#125;];</span><br></pre></td></tr></table></figure>
<p>注意：如果在 MySQL 数据库中存在存储过程和函数名称相同的情况，最好指定 ROUTINE_TYPE 查询条件来指明查询的是存储过程还是函数</p>
<h3 id="修改">修改</h3>
<p>修改存储过程或函数，不影响存储过程或函数功能，只是修改相关特征</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> &#123;<span class="keyword">PROCEDURE</span> <span class="operator">|</span> <span class="keyword">FUNCTION</span>&#125; 存储过程或函数的名 [characteristic ...]</span><br></pre></td></tr></table></figure>
<p>characteristic 指定存储过程或函数的特性，其取值信息与创建存储过程、函数时的取值信息略有不同</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">COMMENT <span class="string">&#x27;string&#x27;</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">LANGUAGE</span> <span class="keyword">SQL</span></span><br><span class="line"><span class="operator">|</span> &#123; <span class="keyword">CONTAINS</span> <span class="keyword">SQL</span> <span class="operator">|</span> <span class="keyword">NO</span> <span class="keyword">SQL</span> <span class="operator">|</span> <span class="keyword">READS</span> <span class="keyword">SQL</span> DATA <span class="operator">|</span> <span class="keyword">MODIFIES</span> <span class="keyword">SQL</span> DATA &#125;</span><br><span class="line"><span class="operator">|</span> <span class="keyword">SQL</span> SECURITY &#123; DEFINER <span class="operator">|</span> INVOKER &#125;</span><br></pre></td></tr></table></figure>
<h3 id="删除">删除</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> &#123;<span class="keyword">procedure</span> <span class="operator">|</span> <span class="keyword">function</span>&#125; [if  <span class="keyword">exists</span>] 存储过程名或函数名</span><br></pre></td></tr></table></figure>
<p>注意：不能在一个存储过程中删除另一个存储过程，只能调用另一个存储过程</p>
<h3 id="使用案例">使用案例</h3>
<ol>
<li>修改存储过程</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">PROCEDURE</span> CountProc</span><br><span class="line"><span class="keyword">MODIFIES</span> <span class="keyword">SQL</span> DATA</span><br><span class="line"><span class="keyword">SQL</span> SECURITY INVOKER ;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>修改存储函数</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">FUNCTION</span> CountProc</span><br><span class="line"><span class="keyword">READS</span> <span class="keyword">SQL</span> DATA</span><br><span class="line">COMMENT <span class="string">&#x27;FIND NAME&#x27;</span> ;</span><br></pre></td></tr></table></figure>
<h2 id="存储过程">存储过程</h2>
<h3 id="优缺点">优缺点</h3>
<p>优点：</p>
<ol>
<li>存储过程可以一次编译多次使用。存储过程只在创建时进行编译，之后的使用都不需要重新编译，这就提升了 SQL 的执行效率。</li>
<li>可以减少开发工作量。将代码封装成模块，实际上是编程的核心思想之一，这样可以把复杂的问题拆解成不同的模块，然后模块之间可以重复使用，在减少开发工作量的同时，还能保证代码的结构清晰。</li>
<li>存储过程的安全性强。我们在设定存储过程的时候可以 设置对用户的使用权限，这样就和视图一样具有较强的安全性。</li>
<li>可以减少网络传输量。因为代码封装到存储过程中，每次使用只需要调用存储过程即可，这样就减少了网络传输量。</li>
<li>良好的封装性。在进行相对复杂的数据库操作时，原本需要使用一条一条的 SQL 语句，可能要连接多次数据库才能完成的操作，现在变成了一次存储过程，只需要 连接一次即可</li>
</ol>
<p>缺点：</p>
<ol>
<li>可移植性差。存储过程不能跨数据库移植，比如：在 MySQL、Oracle 和 SQL Server 里编写的存储过程，在换成其他数据库时都需要重新编写。</li>
<li>调试困难。只有少数 DBMS 支持存储过程的调试。对于复杂的存储过程来说，开发和维护都不容易。虽然也有一些第三方工具可以对存储过程进行调试，但要收费。</li>
<li>存储过程的版本管理很困难。比如：数据表索引发生变化了，可能会导致存储过程失效。我们在开发软件的时候往往需要进行版本管理，但是存储过程本身没有版本控制，版本迭代更新的时候很麻烦。</li>
<li>它不适合高并发的场景。高并发的场景需要减少数据库的压力，有时数据库会采用分库分表的方式，而且对可扩展性要求很高，在这种情况下，存储过程会变得难以维护， 增加数据库的压力 ，显然就不适用了。</li>
</ol>
<h3 id="创建">创建</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 存储过程名(<span class="keyword">IN</span><span class="operator">|</span><span class="keyword">OUT</span><span class="operator">|</span><span class="keyword">INOUT</span> 参数名 参数类型,...)</span><br><span class="line">[characteristics ...]</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	存储过程体</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br></pre></td></tr></table></figure>
<ol>
<li>IN：当前参数为输入参数（如果没有定义参数种类，默认是 IN）</li>
<li>OUT：当前参数为输出参数</li>
<li>INOUT：当前参数既可以为输入参数，也可以为输出参数</li>
</ol>
<p>characteristics 表示创建过程时指定的对存储过程的约束条件，其取值信息如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">LANGUAGE</span> <span class="keyword">SQL</span></span><br><span class="line"><span class="operator">|</span> [<span class="keyword">NOT</span>] <span class="keyword">DETERMINISTIC</span></span><br><span class="line"><span class="operator">|</span> &#123; <span class="keyword">CONTAINS</span> <span class="keyword">SQL</span> <span class="operator">|</span> <span class="keyword">NO</span> <span class="keyword">SQL</span> <span class="operator">|</span> <span class="keyword">READS</span> <span class="keyword">SQL</span> DATA <span class="operator">|</span> <span class="keyword">MODIFIES</span> <span class="keyword">SQL</span> DATA &#125;</span><br><span class="line"><span class="operator">|</span> <span class="keyword">SQL</span> SECURITY &#123; DEFINER <span class="operator">|</span> INVOKER &#125;</span><br><span class="line"><span class="operator">|</span> COMMENT <span class="string">&#x27;string&#x27;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>
<p>LANGUAGE SQL：说明存储过程执行体是由 SQL 语句组成的，当前系统支持的语言为 SQL</p>
</li>
<li>
<p>[NOT] DETERMINISTIC：指明存储过程执行的结果是否确定（默认为 NOT DETERMINISTIC）</p>
</li>
</ol>
<ul>
<li>DETERMINISTIC：表示结果是确定的，相同的输入会得到相同的输出</li>
<li>NOT DETERMINISTIC：表示结果是不确定的，相同的输入可能得到不同的输出</li>
</ul>
<ol start="3">
<li>{CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA}：指明子程序使用 SQL 语句的限制（默认为 CONTAINS SQL）</li>
</ol>
<ul>
<li>CONTAINS SQL：表示当前存储过程的子程序包含 SQL 语句，但是并不包含读写数据的 SQL 语句</li>
<li>NO SQL：表示当前存储过程的子程序中不包含任何 SQL 语句</li>
<li>READS SQL DATA：表示当前存储过程的子程序中包含读数据的 SQL 语句</li>
<li>MODIFIED SQL DATA：表示当前存储过程的子程序中包含写数据的 SQL 语句</li>
</ul>
<ol start="4">
<li>SQL SECURITY {DEFINER | INVOKER}：执行当前存储过程的权限，即指明哪些用户能够执行当前存储过程</li>
</ol>
<ul>
<li>DEFINER：表示只有当前存储过程的创建者或者定义这才能执行当前存储过程</li>
<li>INVOKER：表示只有拥有当前存储过程的访问权限的用户能够执行当前存储过程</li>
</ul>
<ol start="5">
<li>COMMENT ‘string’：注释信息，可以用来描述存储过程</li>
</ol>
<p><strong>注意</strong></p>
<ol>
<li>存储过程体中可以有多条 SQL 语句，如果仅仅一条 SQL 语句，则可以省略 BEGIN 和 END</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span> ... <span class="keyword">END</span> <span class="comment">-- 中间包含了多个语句，每个语句都以（;）号为结束符。</span></span><br><span class="line"><span class="keyword">DECLARE</span> <span class="comment">-- 用来声明变量，使用的位置在于 BEGIN…END 语句中间，而且需要在其他语句使用之前进行变量的声明。</span></span><br><span class="line"><span class="keyword">SET</span> <span class="comment">-- 赋值语句，用于对变量进行赋值。</span></span><br><span class="line"><span class="keyword">SELECT</span> ... <span class="keyword">INTO</span> <span class="comment">-- 把从数据表中查询的结果存放到变量中，也就是为变量赋值。</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>需要设置新的结束标记</li>
</ol>
<p>因为 MySQL 默认的语句结束符号为分号 <code>;</code>，为了避免与存储过程中 SQL 语句结束符相冲突，需要使用 DELIMITER 改变存储过程的结束符。当使用 DELIMITER 命令时，应该避免使用反斜杠（<code>\</code>）字符，因为反斜线是 MySQL 的转义字符。</p>
<p>例如：<code>DELIMITER //</code> 语句的作用是将 MySQL 的结束符设置为 <code>//</code>，并以 <code>END //</code> 结束存储过程。存储过程定义完毕之后再使用 <code>DELIMITER ;</code> 恢复默认结束符。DELIMITER 也可以指定其他符号作为结束符。</p>
<h3 id="调用">调用</h3>
<p>语法：<code>call 存储过程名(实参列表)</code></p>
<ol>
<li>调用 in 模式的参数</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CALL</span> sp1(<span class="string">&#x27;值&#x27;</span>);</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>调用 out 模式的参数</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="variable">@name</span>;</span><br><span class="line"><span class="keyword">CALL</span> sp1(<span class="variable">@name</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@name</span>;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>调用 inout 模式的参数</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="variable">@name</span><span class="operator">=</span>值;</span><br><span class="line"><span class="keyword">CALL</span> sp1(<span class="variable">@name</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@name</span>;</span><br></pre></td></tr></table></figure>
<h3 id="使用案例-2">使用案例</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> CountProc(<span class="keyword">IN</span> sid <span class="type">INT</span>,<span class="keyword">OUT</span> num <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">INTO</span> num <span class="keyword">FROM</span> fruits</span><br><span class="line"><span class="keyword">WHERE</span> s_id <span class="operator">=</span> sid;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CALL</span> CountProc (<span class="number">101</span>, <span class="variable">@num</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="variable">@num</span>;</span><br></pre></td></tr></table></figure>
<h2 id="存储函数">存储函数</h2>
<h3 id="创建-2">创建</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> 函数名(参数名 参数类型,...)</span><br><span class="line"><span class="keyword">RETURNS</span> type</span><br><span class="line">[characteristic ...] </span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	函数体 </span><br><span class="line">	#函数体中肯定有 <span class="keyword">RETURN</span> 语句 </span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br></pre></td></tr></table></figure>
<ol>
<li>参数类型可以是 mysql 所有支持的类型（FUNCTION 总是默认 IN 参数）</li>
<li>RETURNS type：RETURN 子句只能对 FUNCTION 做指定，对函数而言这是强制的。它用来指定函数的返回类型，而且函数体必须包含一个 RETURN value 语句。</li>
<li>characteristic：可选项，指定存储函数的特性（同存储过程一致）</li>
</ol>
<h3 id="调用-2">调用</h3>
<p>语法：<code>select 函数名(实参列表)</code></p>
<h3 id="使用案例-3">使用案例</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建用户信息表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> tb_user</span><br><span class="line">(</span><br><span class="line">	id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY COMMENT <span class="string">&#x27;用户编号&#x27;</span>,</span><br><span class="line">	name <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户姓名&#x27;</span></span><br><span class="line">) COMMENT <span class="operator">=</span> <span class="string">&#x27;用户信息表&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 添加数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_user(name) <span class="keyword">VALUES</span>(<span class="string">&#x27;pan_junbiao的博客&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_user(name) <span class="keyword">VALUES</span>(<span class="string">&#x27;KevinPan&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_user(name) <span class="keyword">VALUES</span>(<span class="string">&#x27;pan_junbiao&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_user(name) <span class="keyword">VALUES</span>(<span class="string">&#x27;阿标&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_user(name) <span class="keyword">VALUES</span>(<span class="string">&#x27;panjunbiao&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_user(name) <span class="keyword">VALUES</span>(<span class="string">&#x27;pan_junbiao的CSDN博客&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_user(name) <span class="keyword">VALUES</span>(<span class="string">&#x27;https://blog.csdn.net/pan_junbiao&#x27;</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建存储函数</span></span><br><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> func_user(in_id <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line">COMMENT <span class="string">&#x27;查询学生的姓名&#x27;</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">DECLARE</span> out_name <span class="type">VARCHAR</span>(<span class="number">50</span>);</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">SELECT</span> name <span class="keyword">INTO</span> out_name <span class="keyword">FROM</span> tb_user</span><br><span class="line">	<span class="keyword">WHERE</span> id <span class="operator">=</span> in_id;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">RETURN</span> out_name;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 调用存储函数</span></span><br><span class="line"><span class="keyword">SELECT</span> func_user(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">SELECT</span> func_user(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">SELECT</span> func_user(<span class="number">3</span>);</span><br></pre></td></tr></table></figure>
<h2 id="区别">区别</h2>
<table>
<thead>
<tr>
<th>名称</th>
<th>关键字</th>
<th>调用语法</th>
<th>返回值</th>
<th>应用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td>存储过程</td>
<td>PROCEDURE</td>
<td>CALL 存储过程()</td>
<td>理解为有 0 个或多个</td>
<td>一般用于更新</td>
</tr>
<tr>
<td>存储函数</td>
<td>FUNCTION</td>
<td>SELECT 函数()</td>
<td>只能是一个</td>
<td>一般用于查询结果为一个值并返回时</td>
</tr>
</tbody>
</table>
<ol>
<li>函数只能是 in 类型；存储过程可以使用 in、out、inout 类型。</li>
<li>函数只能通过 return 语句返回单个值或者表对象；而存储过程不允许执行 return，但是通过 out 参数返回多个值。</li>
<li>函数是可以嵌入在 sql 中使用的，可以在 select 中调用；而存储过程不行。</li>
<li>函数限制比较多，如不能用临时表，只能用表变量等；而存储过程的限制相对就比较少。</li>
<li>函数只能返回一个特定类型的值或者表对象；存储过程可以接受参数、输出参数、返回单个或多个结果集以及返回值，可以向程序返回错误原因。</li>
</ol>
<h2 id="变量">变量</h2>
<h3 id="定义变量">定义变量</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> var_name[,var_name]... data_type [<span class="keyword">DEFAULT</span> <span class="keyword">value</span>];</span><br></pre></td></tr></table></figure>
<ul>
<li>关键字 DECLARE 是用来声明变量的；</li>
<li>var_name 是变量的名称，可以同时定义多个变量；</li>
<li>type 用来指定变量的类型；</li>
<li>DEFAULT value 子句将变量默认值设置为 value，没有使用 DEFAULT 子句时，默认值为 NULL。</li>
</ul>
<h3 id="变量赋值">变量赋值</h3>
<ol>
<li>使用 set 关键词赋值</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> var_name<span class="operator">=</span>expr[,var_name<span class="operator">=</span>expr]…  #可以是确定值，也可以是表达式</span><br></pre></td></tr></table></figure>
<ul>
<li>关键字 SET 用来为变量赋值；</li>
<li>var_name 是变量的名称；</li>
<li>expr 是赋值表达式。一个 SET 语句可以同时为多个变量赋值，各个变量的赋值语句之间用逗号隔开。</li>
</ul>
<ol start="2">
<li>使用 SELECT…INTO 语句为变量赋值</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> col_name[,…] <span class="keyword">INTO</span> var_name[,…]     </span><br><span class="line"><span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> <span class="keyword">condition</span>  </span><br></pre></td></tr></table></figure>
<ul>
<li>col_name 表示查询的字段名称；</li>
<li>var_name 是变量的名称；</li>
<li>table_name 指表的名称；</li>
<li>condition 指查询条件。</li>
</ul>
<p><strong>使用案例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> proc_query_student(<span class="keyword">in</span> sid <span class="type">int</span>,<span class="keyword">out</span> cname <span class="type">varchar</span>(<span class="number">64</span>),<span class="keyword">out</span> ccount <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">declare</span> temp_cid <span class="type">int</span>;</span><br><span class="line">    <span class="keyword">declare</span> temp_cname <span class="type">varchar</span>(<span class="number">64</span>);</span><br><span class="line">    <span class="keyword">declare</span> temp_ccount <span class="type">int</span>;</span><br><span class="line">    <span class="keyword">select</span> class_id <span class="keyword">into</span> temp_cid <span class="keyword">from</span> student <span class="keyword">where</span> id<span class="operator">=</span>sid;</span><br><span class="line">    <span class="keyword">select</span> name,count <span class="keyword">into</span> temp_cname,temp_ccount <span class="keyword">from</span> class <span class="keyword">where</span> id<span class="operator">=</span>temp_cid;</span><br><span class="line">    <span class="keyword">set</span> cname<span class="operator">=</span>temp_cname,ccount<span class="operator">=</span>temp_ccount;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line">$$</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure>
<h3 id="使用-创建用户变量">使用@创建用户变量</h3>
<p>使用@关键字创建“用户变量”，“用户变量的作用范围”在整个当前对话中，其语法形式如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="variable">@var_name</span>;</span><br></pre></td></tr></table></figure>
<p>例如：创建“用户变量”调用上面的存储过程，并使用 select 语句查看变量</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">call</span> proc_query_student(<span class="number">3</span>,<span class="variable">@name</span>,<span class="variable">@count</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="variable">@name</span>,<span class="variable">@count</span>;</span><br></pre></td></tr></table></figure>
<h3 id="全局变量的持久化">全局变量的持久化</h3>
<p>MySQL 数据库中，全局变量可以通过 SET GLOBAL 语句来设置。</p>
<p>例如：设置服务器语句超时的限制</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> MAX_EXECUTION_TIME <span class="operator">=</span> <span class="number">2000</span>;</span><br></pre></td></tr></table></figure>
<h2 id="流程控制">流程控制</h2>
<h3 id="IF">IF</h3>
<p>其语法的基本形式如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">IF search_condition <span class="keyword">THEN</span> statement_list       </span><br><span class="line">[ELSEIF search_condition <span class="keyword">THEN</span> statement_list] ...</span><br><span class="line">[<span class="keyword">ELSE</span> statement_list]                           </span><br><span class="line"><span class="keyword">END</span>  IF</span><br></pre></td></tr></table></figure>
<ul>
<li>search_condition 表示条件判断语句；</li>
<li>statement_list 表示不同条件的执行语句。</li>
</ul>
<p><strong>使用案例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> proc_age(<span class="keyword">in</span> input <span class="type">int</span>,<span class="keyword">out</span> output <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    if input<span class="operator">&gt;</span><span class="number">20</span> <span class="keyword">then</span> </span><br><span class="line">        <span class="keyword">set</span> output<span class="operator">=</span>input<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line">    elseif input<span class="operator">=</span><span class="number">20</span> <span class="keyword">then</span> </span><br><span class="line">        <span class="keyword">set</span> output<span class="operator">=</span>input<span class="operator">+</span><span class="number">2</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">set</span> output<span class="operator">=</span>input<span class="operator">+</span><span class="number">3</span>;</span><br><span class="line">    <span class="keyword">end</span> if;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line">$$</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">call</span> proc_age(<span class="number">23</span>,<span class="variable">@out</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="variable">@out</span>;</span><br><span class="line"><span class="keyword">call</span> proc_age(<span class="number">4</span>,<span class="variable">@out</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="variable">@out</span>;</span><br></pre></td></tr></table></figure>
<h3 id="CASE">CASE</h3>
<p>其语法的基本形式如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CASE</span> case_value                                  </span><br><span class="line"><span class="keyword">WHEN</span> when_value <span class="keyword">THEN</span> statement_list            </span><br><span class="line">[<span class="keyword">WHEN</span> when_value <span class="keyword">THEN</span> statement_list]          </span><br><span class="line">[<span class="keyword">ELSE</span> statement_list]                               </span><br><span class="line"><span class="keyword">END</span> <span class="keyword">CASE</span>         </span><br></pre></td></tr></table></figure>
<ul>
<li>case_value 表示条件判断的变量；</li>
<li>when_value 表示变量的取值；</li>
<li>statement_list 表示不同 when_value 值的执行语句。</li>
</ul>
<p><strong>使用案例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CASE</span> level                                    </span><br><span class="line">    <span class="keyword">WHEN</span> <span class="number">20</span> <span class="keyword">THEN</span> </span><br><span class="line">    	<span class="keyword">SET</span> attack <span class="operator">=</span> attack <span class="operator">+</span> <span class="number">5</span>;  </span><br><span class="line">    <span class="keyword">WHEN</span> <span class="number">30</span> <span class="keyword">THEN</span> </span><br><span class="line">    	<span class="keyword">SET</span> attack <span class="operator">=</span> attack <span class="operator">+</span> <span class="number">10</span>; </span><br><span class="line">    <span class="keyword">WHEN</span> <span class="number">40</span> <span class="keyword">THEN</span> </span><br><span class="line">    	<span class="keyword">SET</span> attack <span class="operator">=</span> attack <span class="operator">+</span> <span class="number">15</span>; </span><br><span class="line">    <span class="keyword">ELSE</span> </span><br><span class="line">    	<span class="keyword">SET</span> attack <span class="operator">=</span> attack <span class="operator">+</span> <span class="number">1</span>; </span><br><span class="line"><span class="keyword">END</span> <span class="keyword">CASE</span>     </span><br></pre></td></tr></table></figure>
<h3 id="LOOP">LOOP</h3>
<p>LOOP 语句可以使某些特定的语句重复执行，实现一个简单的循环。LOOP 语句本身没有停止循环，只有遇到 LEAVE 语句等才能停止循环。LOOP 语句的语句形式如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[begin_label:] LOOP             </span><br><span class="line">statement_list                  </span><br><span class="line"><span class="keyword">END</span> LOOP [end_label] </span><br></pre></td></tr></table></figure>
<ul>
<li>begin_label 和 end_label 分别表示循环开始和结束的标志，这两个标志必须相同，而且都可以省略；</li>
<li>statement_list 表示需要循坏执行的语句。</li>
</ul>
<p><strong>使用案例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">add_num:LOOP                 </span><br><span class="line">    <span class="keyword">SET</span> <span class="variable">@count</span> <span class="operator">=</span> <span class="variable">@count</span> <span class="operator">+</span> <span class="number">1</span>; </span><br><span class="line"><span class="keyword">END</span> LOOP add_num;   </span><br></pre></td></tr></table></figure>
<h3 id="LEAVE">LEAVE</h3>
<p>LEAVE 语句主要用于跳出循环控制（相当于 C/C++ 的 break），其语法形式如下：</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">LEAVE label   </span><br></pre></td></tr></table></figure>
<ul>
<li>label 表示循环的标志。</li>
</ul>
<p><strong>使用案例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> proc_loop(<span class="keyword">in</span> input <span class="type">int</span>,<span class="keyword">out</span> ouput <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    add_num:loop</span><br><span class="line">        <span class="keyword">set</span> input<span class="operator">=</span>input<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line">        if input<span class="operator">=</span><span class="number">100</span> <span class="keyword">then</span></span><br><span class="line">            leave add_num;</span><br><span class="line">        <span class="keyword">end</span> if;</span><br><span class="line">    <span class="keyword">end</span> loop add_num;</span><br><span class="line">    <span class="keyword">set</span> ouput<span class="operator">=</span>input;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line">$$  </span><br><span class="line">delimiter ;  </span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">call</span> proc_loop(<span class="number">2</span>,<span class="variable">@num</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="variable">@num</span>;</span><br></pre></td></tr></table></figure>
<h3 id="ITERATE">ITERATE</h3>
<p>ITERATE 语句也是用来跳出循环的语句，但是 ITERATE 语句是跳出本次循环，然后直接进入下一次循环（相当于 C/C++ 的 continue），ITERATE 语句的语法形式如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">ITERATE label</span><br></pre></td></tr></table></figure>
<ul>
<li>label 表示循环的标志。</li>
</ul>
<p><strong>使用案例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="variable">@count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">delimiter $$</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> proc_iterate()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    add_num:loop</span><br><span class="line">        <span class="keyword">set</span> <span class="variable">@count</span> <span class="operator">=</span> <span class="variable">@count</span><span class="operator">+</span><span class="number">1</span>;</span><br><span class="line">        if <span class="variable">@count</span> <span class="operator">=</span> <span class="number">4</span> <span class="keyword">then</span></span><br><span class="line">            leave add_num;</span><br><span class="line">        elseif <span class="built_in">mod</span>(<span class="variable">@count</span>,<span class="number">2</span>) <span class="operator">=</span><span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">            iterate add_num;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student;</span><br><span class="line">        <span class="keyword">end</span> if;</span><br><span class="line">    <span class="keyword">end</span> loop add_num;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line">$$</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure>
<h3 id="REPEAT">REPEAT</h3>
<p>REPEAT 语句是有条件控制的循环语句（相当于 C/C++ 的 do …while）。当满足特定条件时，就会跳出循环语句。REPEAT 语句的基本语法形式如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[begin_label:] REPEAT        </span><br><span class="line">    statement_list;       </span><br><span class="line">    UNTIL search_condition</span><br><span class="line"><span class="keyword">END</span> REPEAT [end_label]      </span><br></pre></td></tr></table></figure>
<ul>
<li>statement_list 表示循环的执行语句；</li>
<li>search_condition 表示结束循环的条件，满足该条件时循环结束。</li>
</ul>
<p><strong>使用案例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">REPEAT                        </span><br><span class="line">    <span class="keyword">SET</span> <span class="variable">@count</span><span class="operator">=</span><span class="variable">@count</span><span class="operator">+</span><span class="number">1</span>;   </span><br><span class="line">    UNTIL <span class="variable">@count</span><span class="operator">=</span><span class="number">100</span>        </span><br><span class="line"><span class="keyword">END</span> REPEAT;         </span><br></pre></td></tr></table></figure>
<h3 id="WHILE">WHILE</h3>
<p>WHILE 语句也是有条件控制的循环语句，但 WHILE 语句和 REPEAT 语句是不一样的。WHILE 语句是当满足条件时执行循环内的语句。WHILE 语句的基本语法形式如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[begin_label:] WHILE search_condition DO   </span><br><span class="line">	statement_list                      </span><br><span class="line"><span class="keyword">END</span> WHILE [end_label]                     </span><br></pre></td></tr></table></figure>
<ul>
<li>search_condition 表示循环执行的条件，满足该条件时循环执行；</li>
<li>statement_list 表示循环的执行语句。</li>
</ul>
<p><strong>使用案例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">WHILE <span class="variable">@count</span><span class="operator">&lt;</span><span class="number">100</span> DO       </span><br><span class="line">    <span class="keyword">SET</span> <span class="variable">@count</span> <span class="operator">=</span> <span class="variable">@count</span> <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">END</span> WHILE;</span><br></pre></td></tr></table></figure>
<h2 id="光标">光标</h2>
<h3 id="什么是光标-？">什么是光标 ？</h3>
<p>查询语句可能查询出多条记录，在存储过程和函数中使用光标来逐条读取查询结果集中的记录，有些书上将光标称为游标。光标的使用包括声明光标、打开光标、使用光标和关闭光标，光标必须声明在处理程序之前，并且声明在变量和条件之后。</p>
<h3 id="声明光标">声明光标</h3>
<p>在 MySQL 中，可以使用 DECLARE 关键字来声明光标，其基本语法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> cursor_name <span class="keyword">CURSOR</span>         </span><br><span class="line"><span class="keyword">FOR</span> select_statement;                  </span><br></pre></td></tr></table></figure>
<ul>
<li>cursor_name 表示光标的名称；</li>
<li>select_statement 表示 SELECT 语句的内容。</li>
</ul>
<h3 id="打开光标">打开光标</h3>
<p>在 MySQL 中，使用关键字 OPEN 来打开光标，其基本语法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">OPEN</span> cursor_name;</span><br></pre></td></tr></table></figure>
<ul>
<li>cursor_name 表示光标的名称。</li>
</ul>
<h3 id="使用光标">使用光标</h3>
<p>在 MySQL 中，使用关键字 FETCH 来使用光标，其基本语法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FETCH</span> cursor_name</span><br><span class="line"><span class="keyword">INTO</span> var_name[,var_name…];</span><br></pre></td></tr></table></figure>
<ul>
<li>cursor_name 表示光标的名称；</li>
<li>var_name 表示将光标中的 SELECT 语句查询出来的信息存入该参数中。var_name 必须在声明光标之前就定义好。</li>
</ul>
<h3 id="关闭光标">关闭光标</h3>
<p>在 MySQL 中，使用关键字 CLOSE 来关闭光标，其基本语法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CLOSE</span> cursor_name;</span><br></pre></td></tr></table></figure>
<ul>
<li>cursor_name 表示光标的名称。</li>
</ul>
<h3 id="使用案例-4">使用案例</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> proc_query_student(<span class="keyword">in</span> sid <span class="type">int</span>,<span class="keyword">out</span> cname <span class="type">varchar</span>(<span class="number">64</span>) ,<span class="keyword">out</span> cid <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">declare</span> temp_name <span class="type">varchar</span>(<span class="number">64</span>);</span><br><span class="line">    <span class="keyword">declare</span> temp_cid <span class="type">int</span>;</span><br><span class="line">    #声明光标</span><br><span class="line">    <span class="keyword">declare</span> cur_student <span class="keyword">cursor</span> <span class="keyword">for</span> <span class="keyword">select</span> name ,class_id <span class="keyword">from</span> student <span class="keyword">where</span> id<span class="operator">=</span>sid;</span><br><span class="line">    <span class="keyword">open</span> cur_student;   #打开光标</span><br><span class="line">    <span class="keyword">fetch</span> cur_student <span class="keyword">into</span> temp_name,temp_cid;  #使用光标</span><br><span class="line">    <span class="keyword">select</span> temp_name,temp_cid;  #打印从光标中获得的值</span><br><span class="line">    <span class="keyword">close</span> cur_student;  #关闭光标</span><br><span class="line">    <span class="keyword">set</span> cname<span class="operator">=</span>temp_name,cid<span class="operator">=</span>temp_cid;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line">$$</span><br><span class="line"> </span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>定时任务分布式锁SchedulerLock</title>
    <url>/blog/2025/04/05/Java/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81SchedulerLock/</url>
    <content><![CDATA[<h2 id="作用">作用</h2>
<p>SchedulerLock 作用：确保任务在同一时刻最多执行一次。如果一个任务正在一个节点上执行，则它将获得一个锁，该锁将阻止从另一个节点（或线程）执行同一任务。如果一个任务已经在一个节点上执行，则在其他节点上的执行不会等待，只需跳过它即可 。</p>
<p>SchedulerLock 主要通过分布式锁实现，可以使用：</p>
<ol>
<li>数据库锁（基于数据库行锁或唯一约束）</li>
<li>Redis 分布式锁（利用 SET NX EX）</li>
<li>Zookeeper 分布式锁（基于临时节点）</li>
<li>基于 Quartz/ShedLock 的框架实现</li>
</ol>
<h2 id="相关注解">相关注解</h2>
<h3 id="EnableSchedulerLock">@EnableSchedulerLock</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Import(SchedulerLockConfigurationSelector.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableSchedulerLock &#123;</span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">InterceptMode</span> &#123;</span><br><span class="line">        PROXY_SCHEDULER,</span><br><span class="line"></span><br><span class="line">        PROXY_METHOD</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    InterceptMode <span class="title function_">interceptMode</span><span class="params">()</span> <span class="keyword">default</span> InterceptMode.PROXY_METHOD;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">defaultLockAtMostFor</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">defaultLockAtLeastFor</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;PT0S&quot;</span>;</span><br><span class="line"></span><br><span class="line">    AdviceMode <span class="title function_">mode</span><span class="params">()</span> <span class="keyword">default</span> AdviceMode.PROXY;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">proxyTargetClass</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">order</span><span class="params">()</span> <span class="keyword">default</span> Ordered.LOWEST_PRECEDENCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>指定在执行节点结束时应保留锁的默认时间使用 ISO8601 Duration 格式，作用就是在被加锁的节点挂了时，无法释放锁，造成其他节点无法进行下一任务，我们使用注解时候需要给定一个值。可以在每个 ScheduledLock 注解中被重写，也就是说每个定时任务都可以重新定义时间，来控制每个定时任务。</p>
<ol>
<li>
<p>defaultLockAtMostFor：设定默认最大锁持有时间</p>
</li>
<li>
<p>defaultLockAtLeastFor：设定默认最小锁持有时间</p>
</li>
</ol>
<h3 id="SchedulerLock">@SchedulerLock</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.ANNOTATION_TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SchedulerLock &#123;</span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="title function_">lockAtMostFor</span><span class="params">()</span> <span class="keyword">default</span> -<span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">lockAtMostForString</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="title function_">lockAtLeastFor</span><span class="params">()</span> <span class="keyword">default</span> -<span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">lockAtLeastForString</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>name：锁的名称，必须保证唯一，每个任务的锁名称应该唯一，因为它决定了这个锁在分布式环境中的唯一性</li>
<li>lockAtMostFor：成功执行任务的节点所能拥有的独占锁的最长时间，设置的值要保证比定时任务正常执行完成的时间大一些，此属性保证了如果 task 节点突然宕机，也能在超过设定值时释放任务锁</li>
<li>lockAtLeastFor：成功执行任务的节点所能拥有的独占锁的最短时间，在指定的时间内，即使任务执行完成，锁也不会释放，这有助于防止任务被频繁触发</li>
<li>lockAtMostForString：最大时间的字符串形式，允许通过 Spring 的属性占位符（例如：${lock.duration}）来动态配置值，例如“PT14M”表示为 14 分钟</li>
<li>lockAtLeastForString：最小时间的字符串形式</li>
</ol>
<h2 id="基本使用">基本使用</h2>
<h3 id="redis-整合">redis 整合</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.javacrumbs.shedlock<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shedlock-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.38.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.javacrumbs.shedlock<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shedlock-provider-redis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.38.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="comment">#数据库索引</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">password:</span></span><br><span class="line">    <span class="attr">jedis:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="comment">#最大连接数</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">8</span></span><br><span class="line">        <span class="comment">#最大阻塞等待时间(负数表示没限制)</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="number">-1</span></span><br><span class="line">        <span class="comment">#最大空闲</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">8</span></span><br><span class="line">        <span class="comment">#最小空闲</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span></span><br><span class="line">        <span class="comment">#连接超时时间</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 开启定时任务注解</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="comment">// 开启定时任务锁，默认设置锁最大占用时间为 30s</span></span><br><span class="line"><span class="meta">@EnableSchedulerLock(defaultLockAtMostFor = &quot;PT30S&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloSpringbootApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      SpringApplication.run(HelloSpringbootApplication.class, args);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> <span class="keyword">extends</span> <span class="title class_">CachingConfigurerSupport</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean(name = &quot;redisTemplate&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//参照 StringRedisTemplate 内部实现指定序列化器</span></span><br><span class="line">        redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        redisTemplate.setKeySerializer(keySerializer());</span><br><span class="line">        redisTemplate.setHashKeySerializer(keySerializer());</span><br><span class="line">        redisTemplate.setValueSerializer(valueSerializer());</span><br><span class="line">        redisTemplate.setHashValueSerializer(valueSerializer());</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RedisSerializer&lt;String&gt; <span class="title function_">keySerializer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用 Jackson 序列化器</span></span><br><span class="line">    <span class="keyword">private</span> RedisSerializer&lt;Object&gt; <span class="title function_">valueSerializer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> LockProvider <span class="title function_">lockProvider</span><span class="params">(RedisTemplate redisTemplate)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RedisLockProvider</span>(redisTemplate.getConnectionFactory());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestScheduled</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// @SchedulerLock 的作用是保证当前定时任务的方法执行时获得锁，忽略其他相同任务的执行</span></span><br><span class="line">    <span class="comment">// name 必须要指定，ShedLock 就是根据这个 name 进行相同任务判定的</span></span><br><span class="line">    <span class="comment">// name：定时任务的名字，就是数据库中的主键(name)</span></span><br><span class="line">    <span class="comment">// lockAtMostFor：锁的最大时间单位为毫秒</span></span><br><span class="line">    <span class="comment">// lockAtLeastFor：锁的最小时间单位为毫秒</span></span><br><span class="line">    <span class="meta">@Scheduled(fixedDelay = 30 * 1000)</span></span><br><span class="line">    <span class="meta">@SchedulerLock(name = &quot;evaluateUnsubmit&quot;,lockAtLeastFor = 5*60*1000,lockAtMostFor = 20*60*1000 )</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMethod</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始执行 &#123;&#125;&quot;</span>, DateFormatUtils.format(<span class="keyword">new</span> <span class="title class_">Date</span>(), <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            redisTemplate.opsForValue().set(<span class="string">&quot;test&quot;</span> + System.currentTimeMillis(),<span class="string">&quot;goodJob&quot;</span>,<span class="number">100</span>, TimeUnit.SECONDS);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;执行完成 &#123;&#125;&quot;</span>, DateFormatUtils.format(<span class="keyword">new</span> <span class="title class_">Date</span>(), <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;*/15 * * * * *&quot;)</span></span><br><span class="line">    <span class="meta">@SchedulerLock(name = &quot;TaskScheduler_scheduledTask&quot;, lockAtLeastForString = &quot;PT5M&quot;, lockAtMostForString = &quot;PT14M&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">scheduledTask</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="mysql-整合">mysql 整合</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.javacrumbs.shedlock<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shedlock-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.23.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--每个外部存储实例所需依赖包不一样，这里是jdbc--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.javacrumbs.shedlock<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shedlock-provider-jdbc-template<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.23.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># MySQL, MariaDB</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> shedlock(name <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, lock_until <span class="type">TIMESTAMP</span>(<span class="number">3</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    locked_at <span class="type">TIMESTAMP</span>(<span class="number">3</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>(<span class="number">3</span>), locked_by <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="keyword">PRIMARY</span> KEY (name));</span><br><span class="line"></span><br><span class="line"># Postgres</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> shedlock(name <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, lock_until <span class="type">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    locked_at <span class="type">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>, locked_by <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="keyword">PRIMARY</span> KEY (name));</span><br><span class="line"></span><br><span class="line"># Oracle</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> shedlock(name <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, lock_until <span class="type">TIMESTAMP</span>(<span class="number">3</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    locked_at <span class="type">TIMESTAMP</span>(<span class="number">3</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, locked_by <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="keyword">PRIMARY</span> KEY (name));</span><br><span class="line"></span><br><span class="line"># MS <span class="keyword">SQL</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> shedlock(name <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, lock_until datetime2 <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    locked_at datetime2 <span class="keyword">NOT</span> <span class="keyword">NULL</span>, locked_by <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="keyword">PRIMARY</span> KEY (name));</span><br><span class="line"></span><br><span class="line"># DB2</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> shedlock(name <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY, lock_until <span class="type">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    locked_at <span class="type">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>, locked_by <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">// 开启定时器</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="comment">// 开启定时任务锁，指定一个默认的锁的时间 30 秒</span></span><br><span class="line"><span class="meta">@EnableSchedulerLock(defaultLockAtMostFor = &quot;PT30S&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShedlockJdbcConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置锁的提供者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> LockProvider <span class="title function_">lockProvider</span><span class="params">(DataSource dataSource)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplateLockProvider</span>(</span><br><span class="line">                JdbcTemplateLockProvider.Configuration.builder()</span><br><span class="line">                        .withJdbcTemplate(<span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>(dataSource))</span><br><span class="line">                        .usingDbTime()</span><br><span class="line">                        .build()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimeTaskJob</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 任务 1 每 5 秒执行一次</span></span><br><span class="line"><span class="comment">     * lockAtLeastFor：虽然定时任务是每隔5秒执行一次, 但是分布式锁定义的是: 每次任务要锁住20秒，20秒是持有锁的最小时间，必须等20秒后才释放锁，并且确保在20秒钟内，该任务不会运行超过 1 次；</span></span><br><span class="line"><span class="comment">     * lockAtMostFor：锁最大持有时间30秒，表示最多锁定30秒钟，主要用于防止执行任务的节点挂掉（即使这个节点挂掉，在30秒钟后锁也被释放），一般将其设置为明显大于任务的最大执行时长；如果任务运行时间超过该值（即任务30秒钟没有执行完），则该任务可能被重复执行。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/5 * * * * ? &quot;)</span></span><br><span class="line">    <span class="meta">@SchedulerLock(name = &quot;testJob1&quot;,lockAtLeastFor = &quot;20000&quot;, lockAtMostFor = &quot;30000&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">scheduledTask1</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(Thread.currentThread().getName() + <span class="string">&quot;-&gt;&gt;&gt;任务1执行第：&quot;</span> + (count++) + <span class="string">&quot;次&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/5 * * * * ? &quot;)</span></span><br><span class="line">    <span class="meta">@SchedulerLock(name = &quot;testJob2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">scheduledTask2</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(Thread.currentThread().getName() + <span class="string">&quot;-&gt;&gt;&gt;任务2执行第：&quot;</span> + (count++) + <span class="string">&quot;次&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="实现原理">实现原理</h2>
<ol>
<li>使用@EnableSchedulerLock 注解后，会引入 SchedulerLockConfigurationSelector 类，根据其对应的模式（默认 InterceptMode.PROXY_METHOD）生成 LockConfigurationExtractorConfiguration 和 MethodProxyLockConfiguration 类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Import(SchedulerLockConfigurationSelector.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableSchedulerLock &#123;</span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">InterceptMode</span> &#123;</span><br><span class="line">        PROXY_SCHEDULER,</span><br><span class="line"></span><br><span class="line">        PROXY_METHOD</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    InterceptMode <span class="title function_">interceptMode</span><span class="params">()</span> <span class="keyword">default</span> InterceptMode.PROXY_METHOD;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">defaultLockAtMostFor</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">defaultLockAtLeastFor</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;PT0S&quot;</span>;</span><br><span class="line"></span><br><span class="line">    AdviceMode <span class="title function_">mode</span><span class="params">()</span> <span class="keyword">default</span> AdviceMode.PROXY;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">proxyTargetClass</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">order</span><span class="params">()</span> <span class="keyword">default</span> Ordered.LOWEST_PRECEDENCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SchedulerLockConfigurationSelector</span> <span class="keyword">implements</span> <span class="title class_">ImportSelector</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(<span class="meta">@NonNull</span> AnnotationMetadata metadata) &#123;</span><br><span class="line">        <span class="type">AnnotationAttributes</span> <span class="variable">attributes</span> <span class="operator">=</span> AnnotationAttributes.fromMap(metadata.getAnnotationAttributes(EnableSchedulerLock.class.getName(), <span class="literal">false</span>));</span><br><span class="line">        <span class="type">InterceptMode</span> <span class="variable">mode</span> <span class="operator">=</span> attributes.getEnum(<span class="string">&quot;interceptMode&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (mode == PROXY_METHOD) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;AutoProxyRegistrar.class.getName(), LockConfigurationExtractorConfiguration.class.getName(), MethodProxyLockConfiguration.class.getName()&#125;;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mode == PROXY_SCHEDULER) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;AutoProxyRegistrar.class.getName(), LockConfigurationExtractorConfiguration.class.getName(), SchedulerProxyLockConfiguration.class.getName(), RegisterDefaultTaskSchedulerPostProcessor.class.getName()&#125;;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(<span class="string">&quot;Unknown mode &quot;</span> + mode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>LockConfigurationExtractorConfiguration 会获取@EnableSchedulerLock 注解上的属性进行配置，生成 SpringLockConfigurationExtractor</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LockConfigurationExtractorConfiguration</span> <span class="keyword">extends</span> <span class="title class_">AbstractLockConfiguration</span> <span class="keyword">implements</span> <span class="title class_">EmbeddedValueResolverAware</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">StringToDurationConverter</span> <span class="variable">durationConverter</span> <span class="operator">=</span> StringToDurationConverter.INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StringValueResolver resolver;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    ExtendedLockConfigurationExtractor <span class="title function_">lockConfigurationExtractor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SpringLockConfigurationExtractor</span>(defaultLockAtMostForDuration(), defaultLockAtLeastForDuration(), resolver, durationConverter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Duration <span class="title function_">defaultLockAtLeastForDuration</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> toDuration(getDefaultLockAtLeastFor());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Duration <span class="title function_">defaultLockAtMostForDuration</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> toDuration(getDefaultLockAtMostFor());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getDefaultLockAtLeastFor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getStringFromAnnotation(<span class="string">&quot;defaultLockAtLeastFor&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getDefaultLockAtMostFor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getStringFromAnnotation(<span class="string">&quot;defaultLockAtMostFor&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Duration <span class="title function_">toDuration</span><span class="params">(String string)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> durationConverter.convert(resolver.resolveStringValue(string));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String <span class="title function_">getStringFromAnnotation</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> annotationAttributes.getString(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmbeddedValueResolver</span><span class="params">(<span class="meta">@NonNull</span> StringValueResolver resolver)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.resolver = resolver;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>MethodProxyLockConfiguration 类会根据 LockProvider 和 ExtendedLockConfigurationExtractor 进行自动装配，生成 MethodProxyScheduledLockAdvisor</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Role(BeanDefinition.ROLE_INFRASTRUCTURE)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MethodProxyLockConfiguration</span> <span class="keyword">extends</span> <span class="title class_">AbstractLockConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Role(BeanDefinition.ROLE_INFRASTRUCTURE)</span></span><br><span class="line">    MethodProxyScheduledLockAdvisor <span class="title function_">proxyScheduledLockAopBeanPostProcessor</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="meta">@Lazy</span> LockProvider lockProvider,</span></span><br><span class="line"><span class="params">        <span class="meta">@Lazy</span> ExtendedLockConfigurationExtractor lockConfigurationExtractor</span></span><br><span class="line"><span class="params">    )</span> &#123;</span><br><span class="line">        <span class="type">MethodProxyScheduledLockAdvisor</span> <span class="variable">advisor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MethodProxyScheduledLockAdvisor</span>(</span><br><span class="line">            lockConfigurationExtractor,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">DefaultLockingTaskExecutor</span>(lockProvider)</span><br><span class="line">        );</span><br><span class="line">        advisor.setOrder(getOrder());</span><br><span class="line">        <span class="keyword">return</span> advisor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>生成一个切面 MethodProxyScheduledLockAdvisor 类，对方法进行拦截</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MethodProxyScheduledLockAdvisor</span> <span class="keyword">extends</span> <span class="title class_">AbstractPointcutAdvisor</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">LockingInterceptor</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> ExtendedLockConfigurationExtractor lockConfigurationExtractor;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> LockingTaskExecutor lockingTaskExecutor;</span><br><span class="line"></span><br><span class="line">        LockingInterceptor(ExtendedLockConfigurationExtractor lockConfigurationExtractor, LockingTaskExecutor lockingTaskExecutor) &#123;</span><br><span class="line">            <span class="built_in">this</span>.lockConfigurationExtractor = lockConfigurationExtractor;</span><br><span class="line">            <span class="built_in">this</span>.lockingTaskExecutor = lockingTaskExecutor;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">            Class&lt;?&gt; returnType = invocation.getMethod().getReturnType();</span><br><span class="line">            <span class="keyword">if</span> (returnType.isPrimitive() &amp;&amp; !<span class="keyword">void</span>.class.equals(returnType)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">LockingNotSupportedException</span>(<span class="string">&quot;Can not lock method returning primitive value&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 查找@SchedulerLock 注解</span></span><br><span class="line">            <span class="type">LockConfiguration</span> <span class="variable">lockConfiguration</span> <span class="operator">=</span> lockConfigurationExtractor.getLockConfiguration(invocation.getThis(), invocation.getMethod()).get();</span><br><span class="line">            <span class="comment">// 执行加锁方法</span></span><br><span class="line">            TaskResult&lt;Object&gt; result = lockingTaskExecutor.executeWithLock(invocation::proceed, lockConfiguration);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (Optional.class.equals(returnType)) &#123;</span><br><span class="line">                <span class="keyword">return</span> toOptional(result);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> result.getResult();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Object <span class="title function_">toOptional</span><span class="params">(TaskResult&lt;Object&gt; result)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (result.wasExecuted()) &#123;</span><br><span class="line">                <span class="keyword">return</span> result.getResult();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> Optional.empty();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>SpringLockConfigurationExtractor 会查找方法上是否存在@SchedulerLock 注解</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SpringLockConfigurationExtractor</span> <span class="keyword">implements</span> <span class="title class_">ExtendedLockConfigurationExtractor</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Optional&lt;LockConfiguration&gt; <span class="title function_">getLockConfiguration</span><span class="params">(Object target, Method method)</span> &#123;</span><br><span class="line">        <span class="type">AnnotationData</span> <span class="variable">annotation</span> <span class="operator">=</span> findAnnotation(target, method);</span><br><span class="line">        <span class="keyword">if</span> (shouldLock(annotation)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Optional.of(getLockConfiguration(annotation));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Optional.empty();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    AnnotationData <span class="title function_">findAnnotation</span><span class="params">(Object target, Method method)</span> &#123;</span><br><span class="line">        <span class="type">AnnotationData</span> <span class="variable">annotation</span> <span class="operator">=</span> findAnnotation(method);</span><br><span class="line">        <span class="keyword">if</span> (annotation != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> annotation;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Class&lt;?&gt; targetClass = AopUtils.getTargetClass(target);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Method</span> <span class="variable">methodOnTarget</span> <span class="operator">=</span> targetClass</span><br><span class="line">                    .getMethod(method.getName(), method.getParameterTypes());</span><br><span class="line">                <span class="keyword">return</span> findAnnotation(methodOnTarget);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AnnotationData <span class="title function_">findAnnotation</span><span class="params">(Method method)</span> &#123;</span><br><span class="line">        net.javacrumbs.shedlock.core.<span class="type">SchedulerLock</span> <span class="variable">annotation</span> <span class="operator">=</span> AnnotatedElementUtils.getMergedAnnotation(method, net.javacrumbs.shedlock.core.SchedulerLock.class);</span><br><span class="line">        <span class="keyword">if</span> (annotation != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AnnotationData</span>(annotation.name(), annotation.lockAtMostFor(), annotation.lockAtMostForString(), annotation.lockAtLeastFor(), annotation.lockAtLeastForString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">SchedulerLock</span> <span class="variable">annotation2</span> <span class="operator">=</span> AnnotatedElementUtils.getMergedAnnotation(method, SchedulerLock.class);</span><br><span class="line">        <span class="keyword">if</span> (annotation2 != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AnnotationData</span>(annotation2.name(), -<span class="number">1</span>, annotation2.lockAtMostFor(), -<span class="number">1</span>, annotation2.lockAtLeastFor());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>DefaultLockingTaskExecutor 类对方法进行加解锁，执行 LockProvider 提供的加锁方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultLockingTaskExecutor</span> <span class="keyword">implements</span> <span class="title class_">LockingTaskExecutor</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; TaskResult&lt;T&gt; <span class="title function_">executeWithLock</span><span class="params">(<span class="meta">@NonNull</span> TaskWithResult&lt;T&gt; task, <span class="meta">@NonNull</span> LockConfiguration lockConfig)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        Optional&lt;SimpleLock&gt; lock = lockProvider.lock(lockConfig);</span><br><span class="line">        <span class="type">String</span> <span class="variable">lockName</span> <span class="operator">=</span> lockConfig.getName();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (alreadyLockedBy(lockName)) &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;Already locked &#x27;&#123;&#125;&#x27;&quot;</span>, lockName);</span><br><span class="line">            <span class="keyword">return</span> TaskResult.result(task.call());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lock.isPresent()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                LockAssert.startLock(lockName);</span><br><span class="line">                LockExtender.startLock(lock.get());</span><br><span class="line">                logger.debug(<span class="string">&quot;Locked &#x27;&#123;&#125;&#x27;, lock will be held at most until &#123;&#125;&quot;</span>, lockName, lockConfig.getLockAtMostUntil());</span><br><span class="line">                <span class="keyword">return</span> TaskResult.result(task.call());</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                LockAssert.endLock();</span><br><span class="line">                <span class="type">SimpleLock</span> <span class="variable">activeLock</span> <span class="operator">=</span> LockExtender.endLock();</span><br><span class="line">                <span class="keyword">if</span> (activeLock != <span class="literal">null</span>) &#123;</span><br><span class="line">                    activeLock.unlock();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// This should never happen, but I do not know any better way to handle the null case.</span></span><br><span class="line">                    logger.warn(<span class="string">&quot;No active lock, please report this as a bug.&quot;</span>);</span><br><span class="line">                    lock.get().unlock();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                    <span class="type">Instant</span> <span class="variable">lockAtLeastUntil</span> <span class="operator">=</span> lockConfig.getLockAtLeastUntil();</span><br><span class="line">                    <span class="type">Instant</span> <span class="variable">now</span> <span class="operator">=</span> ClockProvider.now();</span><br><span class="line">                    <span class="keyword">if</span> (lockAtLeastUntil.isAfter(now)) &#123;</span><br><span class="line">                        logger.debug(<span class="string">&quot;Task finished, lock &#x27;&#123;&#125;&#x27; will be released at &#123;&#125;&quot;</span>, lockName, lockAtLeastUntil);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        logger.debug(<span class="string">&quot;Task finished, lock &#x27;&#123;&#125;&#x27; released&quot;</span>, lockName);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;Not executing &#x27;&#123;&#125;&#x27;. It&#x27;s locked.&quot;</span>, lockName);</span><br><span class="line">            <span class="keyword">return</span> TaskResult.notExecuted();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>定时任务</tag>
      </tags>
  </entry>
  <entry>
    <title>Java IO流</title>
    <url>/blog/2025/04/09/Java/%E5%B7%A5%E4%BD%9C%E6%8A%80%E5%B7%A7/Java%20IO%E6%B5%81/</url>
    <content><![CDATA[<h2 id="基本概念">基本概念</h2>
<h3 id="流分类">流分类</h3>
<ol>
<li>字节流（Byte Streams）：以字节为单位进行操作，适用于处理二进制数据或不需要进行字符编码转换的场景。主要的字节流类包括 InputStream 和 OutputStream 及其子类。</li>
<li>字符流（Character Streams）：以字符为单位进行操作，适用于处理文本数据并支持字符编码转换。主要的字符流类包括 Reader 和 Writer 及其子类。</li>
</ol>
<h3 id="作用">作用</h3>
<ol>
<li>实现数据的输入和输出：通过 IO 流，可以从外部源中读取数据到程序中，或者将程序中的数据写入到外部源中。</li>
<li>处理文件操作：可以通过 IO 流读取、写入文件，实现文件的读取、写入和操作。</li>
<li>网络通信：通过 IO 流可以实现网络通信，包括建立 Socket 连接、传输数据等。</li>
</ol>
<h3 id="使用场景">使用场景</h3>
<ol>
<li>文件操作：读取、写入和处理文件。</li>
<li>网络编程：建立 Socket 连接，进行网络通信。</li>
<li>数据处理：通过 IO 流实现数据的输入、输出和处理，包括序列化、反序列化等操作。</li>
<li>图像处理：读取、写入图像文件，并进行图像处理操作。</li>
</ol>
<h2 id="字节流">字节流</h2>
<h3 id="常用类">常用类</h3>
<ol>
<li>InputStream 输入流</li>
</ol>
<ul>
<li>FileInputStream：用于从文件中读取数据的输入流。</li>
<li>ByteArrayInputStream：从内存中的字节数组中读取数据的输入流。</li>
<li>BufferedInputStream：带有缓冲区的输入流，可以提高读取性能。</li>
<li>DataInputStream：读取基本数据类型的输入流，例如 int、double 等。</li>
<li>ObjectInputStream：用于反序列化对象的输入流，可以将对象从字节流中恢复为原来的对象。</li>
</ul>
<ol start="2">
<li>OutputStream 输出流</li>
</ol>
<ul>
<li>FileOutputStream：用于向文件中写入数据的输出流。</li>
<li>ByteArrayOutputStream：将数据写入到内存中的字节数组的输出流。</li>
<li>BufferedOutputStream：带有缓冲区的输出流，可以提高写入性能。</li>
<li>DataOutputStream：写入基本数据类型的输出流，例如 int、double 等。</li>
<li>ObjectOutputStream：用于序列化对象的输出流，可以将对象转换为字节流进行持久化存储。</li>
</ul>
<h3 id="使用案例">使用案例</h3>
<h4 id="FileInputStream">FileInputStream</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileInputStreamExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;example.txt&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">int</span> data;</span><br><span class="line">            <span class="keyword">while</span> ((data = fis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print((<span class="type">char</span>) data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="FileOutputStream">FileOutputStream</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileOutputStreamExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="string">&quot;Hello, FileOutputStream!&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;output.txt&quot;</span>)) &#123;</span><br><span class="line">            fos.write(data.getBytes());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="ByteArrayInputStream">ByteArrayInputStream</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ByteArrayInputStreamExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = &#123;<span class="number">72</span>, <span class="number">101</span>, <span class="number">108</span>, <span class="number">108</span>, <span class="number">111</span>&#125;;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes)) &#123;</span><br><span class="line">            <span class="type">int</span> data;</span><br><span class="line">            <span class="keyword">while</span> ((data = bais.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print((<span class="type">char</span>) data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="ByteArrayOutputStream">ByteArrayOutputStream</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ByteArrayOutputStreamExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="string">&quot;Hello, ByteArrayOutputStream!&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>()) &#123;</span><br><span class="line">            baos.write(data.getBytes());</span><br><span class="line">            <span class="type">byte</span>[] result = baos.toByteArray();</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(result));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="BufferedInputStream">BufferedInputStream</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedInputStreamExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;example.txt&quot;</span>))) &#123;</span><br><span class="line">            <span class="type">int</span> data;</span><br><span class="line">            <span class="keyword">while</span> ((data = bis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print((<span class="type">char</span>) data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="BufferedOutputStream">BufferedOutputStream</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedOutputStreamExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="string">&quot;Hello, BufferedOutputStream!&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;output.txt&quot;</span>))) &#123;</span><br><span class="line">            bos.write(data.getBytes());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="DataInputStream">DataInputStream</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataInputStreamExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">DataInputStream</span> <span class="variable">dis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;data.bin&quot;</span>))) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">intValue</span> <span class="operator">=</span> dis.readInt();</span><br><span class="line">            <span class="type">double</span> <span class="variable">doubleValue</span> <span class="operator">=</span> dis.readDouble();</span><br><span class="line">            System.out.println(<span class="string">&quot;Int value: &quot;</span> + intValue);</span><br><span class="line">            System.out.println(<span class="string">&quot;Double value: &quot;</span> + doubleValue);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="DataOutputStream">DataOutputStream</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataOutputStreamExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">DataOutputStream</span> <span class="variable">dos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;data.bin&quot;</span>))) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">intValue</span> <span class="operator">=</span> <span class="number">42</span>;</span><br><span class="line">            <span class="type">double</span> <span class="variable">doubleValue</span> <span class="operator">=</span> <span class="number">3.14</span>;</span><br><span class="line">            dos.writeInt(intValue);</span><br><span class="line">            dos.writeDouble(doubleValue);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="ObjectInputStream">ObjectInputStream</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectInputStreamExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;object.bin&quot;</span>))) &#123;</span><br><span class="line">            <span class="comment">// 从文件中读取对象</span></span><br><span class="line">            <span class="type">MyClass</span> <span class="variable">obj</span> <span class="operator">=</span> (MyClass) ois.readObject();</span><br><span class="line">            System.out.println(<span class="string">&quot;Object read from file: &quot;</span> + obj);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="ObjectOutputStream">ObjectOutputStream</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectOutputStreamExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyClass</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClass</span>(<span class="string">&quot;John&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;object.bin&quot;</span>))) &#123;</span><br><span class="line">            <span class="comment">// 将对象写入文件</span></span><br><span class="line">            oos.writeObject(obj);</span><br><span class="line">            System.out.println(<span class="string">&quot;Object written to file: &quot;</span> + obj);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="字符流">字符流</h2>
<h3 id="常用类-2">常用类</h3>
<ol>
<li>Reader 读取字符流</li>
</ol>
<ul>
<li>FileReader：从文件中读取字符数据的字符输入流。</li>
<li>BufferedReader：带有缓冲区的字符输入流，提高读取性能。</li>
<li>InputStreamReader：将字节流转换为字符流的桥梁，支持指定字符编码。</li>
<li>StringReader：从字符串中读取字符数据的字符输入流。</li>
</ul>
<ol start="2">
<li>Writer 写入字符流</li>
</ol>
<ul>
<li>FileWriter：向文件中写入字符数据的字符输出流。</li>
<li>BufferedWriter：带有缓冲区的字符输出流，提高写入性能。</li>
<li>OutputStreamWriter：将字符流转换为字节流的桥梁，支持指定字符编码。</li>
<li>StringWriter：将字符数据写入到字符串中的字符输出流。</li>
</ul>
<h3 id="使用案例-2">使用案例</h3>
<h4 id="FileReader">FileReader</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileReaderExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">FileReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;example.txt&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">int</span> character;</span><br><span class="line">            <span class="keyword">while</span> ((character = reader.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print((<span class="type">char</span>) character);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="FileWriter">FileWriter</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileWriterExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="string">&quot;Hello, FileWriter!&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">FileWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;output.txt&quot;</span>)) &#123;</span><br><span class="line">            writer.write(data);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="BufferedReader">BufferedReader</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedReaderExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;example.txt&quot;</span>))) &#123;</span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                System.out.println(line);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="BufferedWriter">BufferedWriter</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedWriterExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="string">&quot;Hello, BufferedWriter!&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">BufferedWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;output.txt&quot;</span>))) &#123;</span><br><span class="line">            writer.write(data);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="InputStreamReader">InputStreamReader</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InputStreamReaderExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;example.txt&quot;</span>), <span class="string">&quot;UTF-8&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">int</span> character;</span><br><span class="line">            <span class="keyword">while</span> ((character = isr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print((<span class="type">char</span>) character);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="OutputStreamWriter">OutputStreamWriter</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OutputStreamWriterExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="string">&quot;Hello, OutputStreamWriter!&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">OutputStreamWriter</span> <span class="variable">osw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;output.txt&quot;</span>), <span class="string">&quot;UTF-8&quot;</span>)) &#123;</span><br><span class="line">            osw.write(data);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="StringReader">StringReader</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringReaderExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="string">&quot;Hello, StringReader!&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">StringReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringReader</span>(data)) &#123;</span><br><span class="line">            <span class="type">int</span> character;</span><br><span class="line">            <span class="keyword">while</span> ((character = reader.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print((<span class="type">char</span>) character);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="StringWriter">StringWriter</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringWriterExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">StringWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringWriter</span>()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="string">&quot;Hello, StringWriter!&quot;</span>;</span><br><span class="line">            writer.write(data);</span><br><span class="line">            System.out.println(writer.toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="其他">其他</h2>
<h3 id="FileOutputStream-和-BufferedOutputStream">FileOutputStream 和 BufferedOutputStream</h3>
<table>
<thead>
<tr>
<th></th>
<th>FileOutputStream</th>
<th>BufferedOutputStream</th>
</tr>
</thead>
<tbody>
<tr>
<td>是否含有缓存区</td>
<td>无</td>
<td>有，默认缓存区大小为 8192byte，可通过构造函数自定义缓存区大小</td>
</tr>
<tr>
<td>flush 方法</td>
<td>继承 OutputStream 类的 flush 方法，该类 flush 方法为空。</td>
<td>有 flush 方法，flush 方法调用 OutputStream 类的 write 方法，将缓存区中的数据写入文件</td>
</tr>
<tr>
<td>write 方法</td>
<td>write 一次写入文件一次</td>
<td>writre 方法将数据写入缓冲区，缓冲区满时将数据写入文件。</td>
</tr>
<tr>
<td>效率</td>
<td>低效，消耗资源</td>
<td>高效</td>
</tr>
</tbody>
</table>
<h3 id="计算文件-MD5">计算文件 MD5</h3>
<ol>
<li>使用 java.security.MessageDigest 类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MD5Util</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取一个文件的 md5 值(可处理大文件)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> md5 value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getMD5</span><span class="params">(File file)</span> &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">MessageDigest</span> <span class="variable">MD5</span> <span class="operator">=</span> MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">            fileInputStream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">8192</span>];</span><br><span class="line">            <span class="type">int</span> length;</span><br><span class="line">            <span class="keyword">while</span> ((length = fileInputStream.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                MD5.update(buffer, <span class="number">0</span>, length);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(Hex.encodeHex(MD5.digest()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fileInputStream != <span class="literal">null</span>)&#123;</span><br><span class="line">                    fileInputStream.close();</span><br><span class="line">				&#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>使用 Apache Commons Codec 库</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.codec.digest.DigestUtils;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MD5Util</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getFileMD5</span><span class="params">(String filePath)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(filePath);</span><br><span class="line">        <span class="type">byte</span>[] bytes = Files.readAllBytes(path);</span><br><span class="line">        <span class="keyword">return</span> DigestUtils.md5Hex(bytes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="逐行读取文件">逐行读取文件</h3>
<ol>
<li>BufferedReader：最快地读取每一行</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bufferReaderTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;D:\\aa.txt&quot;</span>))) &#123;</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = bufferedReader.readLine())  != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 处理每一行数据 .....</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>Scanner：相比较 Scanner 会慢一点</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">scannerTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\aa.txt&quot;</span>))) &#123;</span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNextLine()) &#123;</span><br><span class="line">            <span class="comment">// 处理每一行数据 .....</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>RandomAccessFile：行数达到一定规模，使用此方法读取会非常慢</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">randomAccessFileTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">RandomAccessFile</span> <span class="variable">accessFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="string">&quot;D:\\aa.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)) &#123;</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = accessFile.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 处理每一行数据 .....</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>Files：一次把所有数据都读到内存中，当文件非常大时，会消耗掉内存资源导致程序崩掉，文件规模小推荐使用</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">filesTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        List&lt;String&gt; lines = Files.readAllLines(Paths.get(<span class="string">&quot;D:\\aa.txt&quot;</span>));</span><br><span class="line">        lines.forEach(line -&gt; &#123;</span><br><span class="line">            <span class="comment">// 处理每一行数据 .....</span></span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="压缩和解压流">压缩和解压流</h3>
<h4 id="压缩文件">压缩文件</h4>
<table>
<thead>
<tr>
<th>方法名</th>
<th>介绍</th>
</tr>
</thead>
<tbody>
<tr>
<td>ZipOutputStream(OutputStream out)</td>
<td>构造方法：创建新的 ZIP 输出流</td>
</tr>
<tr>
<td>public void putNextEntry(ZipEntry e)</td>
<td>开始编写新的 ZIP 文件条目，并将流定位到条目数据的开头。</td>
</tr>
<tr>
<td>public synchronized void write(byte [] b, int off, int len)</td>
<td>将一个字节数组写入当前的 ZIP 条目数据</td>
</tr>
<tr>
<td>public void finish()</td>
<td>完成编写 ZIP 输出流的内容，而不关闭底层流</td>
</tr>
<tr>
<td>public void setComment(String comment)</td>
<td>设置 ZIP 文件注释</td>
</tr>
</tbody>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZipFilesExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 两个文件的路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">file1Path</span> <span class="operator">=</span> <span class="string">&quot;/path/to/file1.txt&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">file2Path</span> <span class="operator">=</span> <span class="string">&quot;/path/to/file2.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ZIP 文件的输出路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">zipOutputPath</span> <span class="operator">=</span> <span class="string">&quot;/path/to/output.zip&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(zipOutputPath);</span><br><span class="line">            <span class="type">ZipOutputStream</span> <span class="variable">zipOut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipOutputStream</span>(fos);</span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fis1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file1Path);</span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fis2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file2Path)) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 添加第一个文件到 ZIP 文件</span></span><br><span class="line">            addToZipFile(file1Path, fis1, zipOut);</span><br><span class="line">            <span class="comment">// 添加第二个文件到 ZIP 文件</span></span><br><span class="line">            addToZipFile(file2Path, fis2, zipOut);</span><br><span class="line">            System.out.println(<span class="string">&quot;文件成功打包成ZIP文件！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addToZipFile</span><span class="params">(String filePath, FileInputStream fis, ZipOutputStream zipOut)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 创建 ZIP 条目</span></span><br><span class="line">        <span class="type">ZipEntry</span> <span class="variable">zipEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipEntry</span>(<span class="keyword">new</span> <span class="title class_">File</span>(filePath).getName());</span><br><span class="line">        <span class="comment">// 将 ZIP 条目添加到 ZIP 文件</span></span><br><span class="line">        zipOut.putNextEntry(zipEntry);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从输入流读取数据并写入 ZIP 文件</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> length;</span><br><span class="line">        <span class="keyword">while</span> ((length = fis.read(bytes)) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            zipOut.write(bytes, <span class="number">0</span>, length);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭当前 ZIP 条目</span></span><br><span class="line">        zipOut.closeEntry();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="解压文件">解压文件</h4>
<table>
<thead>
<tr>
<th>方法名</th>
<th>介绍</th>
</tr>
</thead>
<tbody>
<tr>
<td>public ZipInputStream(InputStream in)</td>
<td>创建新的 ZIP 输入流。</td>
</tr>
<tr>
<td>public ZipEntry getNextEntry()</td>
<td>读取下一个 ZIP 文件条目并将流定位到该条目数据的开始处。</td>
</tr>
</tbody>
</table>
<p>假如要去压缩一个文件夹，每一个文件就是一个条目，每一个条目就是一个 ZipEntry，有多少个文件就要有多少个 ZipEntry ，然后 putNextEntry</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZipUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解压</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> zipFilePath 带解压文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> desDirectory 解压到的目录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unzip</span><span class="params">(String zipFilePath, String desDirectory)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">desDir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(desDirectory);</span><br><span class="line">        <span class="keyword">if</span> (!desDir.exists()) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">mkdirSuccess</span> <span class="operator">=</span> desDir.mkdir();</span><br><span class="line">            <span class="keyword">if</span> (!mkdirSuccess) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;创建解压目标文件夹失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 读入流</span></span><br><span class="line">        <span class="type">ZipInputStream</span> <span class="variable">zipInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(zipFilePath));</span><br><span class="line">        <span class="comment">// 遍历每一个文件</span></span><br><span class="line">        <span class="type">ZipEntry</span> <span class="variable">zipEntry</span> <span class="operator">=</span> zipInputStream.getNextEntry();</span><br><span class="line">        <span class="keyword">while</span> (zipEntry != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (zipEntry.isDirectory()) &#123; <span class="comment">// 文件夹</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">unzipFilePath</span> <span class="operator">=</span> desDirectory + File.separator + zipEntry.getName();</span><br><span class="line">                <span class="comment">// 直接创建</span></span><br><span class="line">                mkdir(<span class="keyword">new</span> <span class="title class_">File</span>(unzipFilePath));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 文件</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">unzipFilePath</span> <span class="operator">=</span> desDirectory + File.separator + zipEntry.getName();</span><br><span class="line">                <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(unzipFilePath);</span><br><span class="line">                <span class="comment">// 创建父目录</span></span><br><span class="line">                mkdir(file.getParentFile());</span><br><span class="line">                <span class="comment">// 写出文件流</span></span><br><span class="line">                <span class="type">BufferedOutputStream</span> <span class="variable">bufferedOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(unzipFilePath));</span><br><span class="line">                <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="type">int</span> readLen;</span><br><span class="line">                <span class="keyword">while</span> ((readLen = zipInputStream.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    bufferedOutputStream.write(bytes, <span class="number">0</span>, readLen);</span><br><span class="line">                &#125;</span><br><span class="line">                bufferedOutputStream.close();</span><br><span class="line">            &#125;</span><br><span class="line">            zipInputStream.closeEntry();</span><br><span class="line">            zipEntry = zipInputStream.getNextEntry();</span><br><span class="line">        &#125;</span><br><span class="line">        zipInputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果父目录不存在则创建</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mkdir</span><span class="params">(File file)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == file || file.exists()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mkdir(file.getParentFile());</span><br><span class="line">        file.mkdir();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">zipFilePath</span> <span class="operator">=</span> <span class="string">&quot;D:/test.zip&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">desDirectory</span> <span class="operator">=</span> <span class="string">&quot;D:/a&quot;</span>;</span><br><span class="line">        unzip(zipFilePath, desDirectory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="读取文件内容">读取文件内容</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">   <span class="comment">//获取文件输入流</span></span><br><span class="line">   <span class="type">FileInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;C:\\Users\\Administrator\\Desktop\\test\\test.zip&quot;</span>);</span><br><span class="line">   <span class="comment">//获取 ZIP 输入流(一定要指定字符集 Charset.forName(&quot;GBK&quot;)否则会报 java.lang.IllegalArgumentException: MALFORMED)</span></span><br><span class="line">   <span class="type">ZipInputStream</span> <span class="variable">zipInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipInputStream</span>(<span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(input), Charset.forName(<span class="string">&quot;GBK&quot;</span>));</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//定义 ZipEntry 置为 null, 避免由于重复调用 zipInputStream.getNextEntry 造成的不必要的问题</span></span><br><span class="line">   <span class="type">ZipEntry</span> <span class="variable">ze</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">   <span class="comment">//循环遍历</span></span><br><span class="line">   <span class="keyword">while</span> ((ze = zipInputStream.getNextEntry()) != <span class="literal">null</span>) &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;文件名：&quot;</span> + ze.getName() + <span class="string">&quot; 文件大小：&quot;</span> + ze.getSize() + <span class="string">&quot; bytes&quot;</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;文件内容：&quot;</span>);</span><br><span class="line">       <span class="comment">//读取</span></span><br><span class="line">       <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(zipInputStream,Charset.forName(<span class="string">&quot;GBK&quot;</span>)));</span><br><span class="line">       String line;</span><br><span class="line">       <span class="comment">//内容不为空，输出</span></span><br><span class="line">       <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">           System.out.println(line);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//一定记得关闭流</span></span><br><span class="line">   zipInputStream.closeEntry();</span><br><span class="line">   input.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>工作技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>Lambda表达式和方法引用</title>
    <url>/blog/2025/01/22/Java/%E5%B7%A5%E4%BD%9C%E6%8A%80%E5%B7%A7/Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8/</url>
    <content><![CDATA[<h2 id="Lambda-表达式">Lambda 表达式</h2>
<h3 id="什么是-Lambda-表达式？">什么是 Lambda 表达式？</h3>
<p>我们知道，对于一个 Java 变量，我们可以赋给一个值。</p>
<p><img src="1.png" alt=""></p>
<p>如果你想把一块代码赋给一个 Java 变量，应该怎么做呢？比如，我想把右边的代码块，赋值给一个叫做 blockOfCode 的 Java 变量</p>
<p><img src="2.png" alt=""></p>
<p>在 Java 8 之前这个是做不到的，但是 Java 8 问世之后，利用 Lambda 特性就可以做到了。</p>
<p><img src="3.png" alt=""></p>
<p>当然，这个并不是一个很简洁的写法，所以为了让这个赋值操作变得更加优雅，我们可以移除一些没有必要的声明。</p>
<p><img src="4.png" alt=""></p>
<p>这样，我们就非常优雅地把一块代码赋给了一个变量，而这块代码或者说这个被赋给一个变量的函数，就是一个 Lambda 表达式。但是这里仍然有一个问题，就是变量 blockOfCode 的类型应该是什么？</p>
<p>在 Java 8 里面，所有的 Lambda 的类型都是一个接口，而 Lambda 表达式本身，也就是那段代码，需要是这个接口的实现。这是理解 Lambda 的一个关键所在，简而言之就是，Lambda 表达式本身就是一个接口的实现。我们给上面的 blockOfCode 加上一个类型：</p>
<p><img src="5.png" alt=""></p>
<p>这种只有一个接口函数需要被实现的接口类型，我们叫它函数式接口。为了避免后来的人在这个接口中增加接口函数导致其有多个接口函数需要被实现，变成非函数接口，我们可以在这个上面加上一个声明 @FunctionalInterface，这样别人就无法在里面添加新的接口函数了</p>
<p><img src="6.png" alt=""></p>
<p>这样，我们就得到了一个完整的 Lambda 表达式声明：</p>
<p><img src="7.png" alt=""></p>
<h3 id="使用方法">使用方法</h3>
<ol>
<li>()：里面没有内容，可以看成是方法形式参数为空</li>
<li>-&gt;：用箭头指向后面要做的事情</li>
<li>{}：包含一段代码，可以看成是方法体的内容</li>
</ol>
<p>格式：(形式参数) -&gt; {代码块}</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">/* new Thread(new Runnable() &#123;</span></span><br><span class="line"><span class="comment">        @Override</span></span><br><span class="line"><span class="comment">        public void run() &#123;</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;123&quot;);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;).start();*/</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用前提：有一个接口，且接口中有且仅有一个抽象方法</p>
<p>注意：</p>
<ol>
<li>参数的类型可以省略，但是有多个参数的情况下，不能只省略一个</li>
<li>如果参数有且仅有一个，那么小括号可以省略</li>
<li>如果代码块的语句只有一条，可以省略大括号和分号。如果有 return，return 也可以省略</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Inter</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Runnable</span> <span class="variable">r</span> <span class="operator">=</span> ()-&gt; System.out.println(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(r).start();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt; System.out.println(<span class="string">&quot;456&quot;</span>)).start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">use</span><span class="params">(Inter inter)</span>&#123;</span><br><span class="line">    inter.show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Lambda 表达式与匿名内部类的区别</strong></p>
<ol>
<li>匿名内部类：</li>
</ol>
<ul>
<li>编译之后，产生一个单独的.class 字节码文件</li>
<li>可以是接口，也可以是抽象类，还可以是具体类</li>
</ul>
<ol start="2">
<li>Lambda 表达式：</li>
</ol>
<ul>
<li>编译之后，没有一个单独的.class 字节码文件，对应的字节码文件会在运行时动态生成</li>
<li>只能是接口</li>
</ul>
<h3 id="使用案例">使用案例</h3>
<p><strong>Eatable</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Eatable</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EatDemo</span> <span class="keyword">implements</span> <span class="title class_">Eatable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Eatable</span> <span class="variable">eatable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EatDemo</span>();</span><br><span class="line">    use(eatable);</span><br><span class="line">    use(<span class="keyword">new</span> <span class="title class_">Eatable</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;456&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    use( () -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">use</span><span class="params">(Eatable eatable)</span>&#123;</span><br><span class="line">    eatable.eat();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Add</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Add</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">     use( (<span class="type">int</span> x,<span class="type">int</span> y) -&gt; &#123;</span><br><span class="line">         <span class="comment">//return x+y;</span></span><br><span class="line">         <span class="keyword">return</span> x-y;</span><br><span class="line">     &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">use</span><span class="params">(Add add)</span>&#123;</span><br><span class="line">    System.out.println(add.add(<span class="number">10</span>,<span class="number">20</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="方法引用">方法引用</h2>
<p>方法引用是用来直接访问类或者实例的已经存在的方法或者构造方法。方法引用提供了一种引用而不执行方法的方式，它需要由兼容的函数式接口构成的目标类型上下文。计算时，方法引用会创建函数式接口的一个实例。当 Lambda 表达式中只是执行一个方法调用时，不用 Lambda 表达式，直接通过方法引用的形式可读性更高一些。方法引用是一种更简洁易懂的 Lambda 表达式。</p>
<h3 id="引用类方法">引用类方法</h3>
<p>类名:: 静态方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Test3</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">show</span><span class="params">(String i)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    use(s-&gt; Integer.parseInt(s));</span><br><span class="line">    use(Integer::parseInt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">use</span><span class="params">(Test3 test3)</span>&#123;</span><br><span class="line">    <span class="type">int</span> num= test3.show(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">    System.out.println(num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="引用对象实例方法">引用对象实例方法</h3>
<p>对象:: 成员方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Test4</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(String s)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exp6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        use(s-&gt; System.out.println(s.toUpperCase()));</span><br><span class="line">        <span class="type">Exp6</span> <span class="variable">exp6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Exp6</span>();</span><br><span class="line">        use(exp6::Upper);</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Upper</span><span class="params">(String s)</span>&#123;</span><br><span class="line">        System.out.println(s.toUpperCase());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">use</span><span class="params">(Test4 test4)</span>&#123;</span><br><span class="line">    	test4.show(<span class="string">&quot;dasf&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="引用类实例方法">引用类实例方法</h3>
<p>类名:: 成员方法</p>
<p>Lambda 表达式被类的实例方法替代的时候：第一个参数作为调用者，后面的参数全部传递给该方法作为参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Test5</span> &#123;</span><br><span class="line">    String <span class="title function_">mySubstring</span><span class="params">(String s,<span class="type">int</span> a,<span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    use((s,a,b) -&gt; s.substring(a,b));</span><br><span class="line">    use(String::substring);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">use</span><span class="params">(Test5 test5)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> test5.mySubstring(<span class="string">&quot;123456789&quot;</span>, <span class="number">2</span>, <span class="number">6</span>);</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="引用构造器">引用构造器</h3>
<p>类名:: new</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    Student <span class="title function_">build</span><span class="params">(String name,<span class="type">int</span> age)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        use( (name, age) -&gt; <span class="keyword">new</span> <span class="title class_">Student</span>(name,age));</span><br><span class="line">        use(Student::<span class="keyword">new</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">use</span><span class="params">(Test test)</span>&#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">da</span> <span class="operator">=</span> test.build(<span class="string">&quot;da&quot;</span>, <span class="number">13</span>);</span><br><span class="line">        System.out.println(da.getName()+<span class="string">&quot; &quot;</span>+ da.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>工作技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>Optional</title>
    <url>/blog/2025/01/01/Java/%E5%B7%A5%E4%BD%9C%E6%8A%80%E5%B7%A7/Optional/</url>
    <content><![CDATA[<h2 id="of">of</h2>
<p>通过一个非 null 的 value 来构造一个 Optional，返回的 Optional 包含了 value 这个值，对于该方法，传入的参数一定不能为 null，否则会抛出 NullPointerException</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Optional&lt;T&gt; <span class="title function_">of</span><span class="params">(T value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Optional</span>&lt;&gt;(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;String&gt; opt = Optional.of(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">System.out.println(opt.isPresent()); <span class="comment">// 输出：true</span></span><br></pre></td></tr></table></figure>
<h2 id="ofNullable">ofNullable</h2>
<p>与 of 的区别在于，传入的参数可以为 null，进行三目运算，判断传入的参数是否为 null，如果为 null 的话，返回的就是 Optional.empty()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Optional&lt;T&gt; <span class="title function_">ofNullable</span><span class="params">(T value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value == <span class="literal">null</span> ? empty() : of(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;String&gt; optOrNull = Optional.ofNullable(<span class="literal">null</span>);</span><br><span class="line">System.out.println(optOrNull.isPresent()); <span class="comment">// 输出：false</span></span><br></pre></td></tr></table></figure>
<h2 id="empty">empty</h2>
<p>用来构造一个空的 Optional，即该 Optional 中不包含值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; Optional&lt;T&gt; <span class="title function_">empty</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    Optional&lt;T&gt; t = (Optional&lt;T&gt;) EMPTY;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ifPresent">ifPresent</h2>
<p>如果 Optional 中有值，则对该值调用 consumer.accept，否则什么也不做</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPresent</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value != <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ifPresent</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> T&gt; consumer)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (value != <span class="literal">null</span>)</span><br><span class="line">        consumer.accept(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;User&gt; user = Optional.ofNullable(getUserById(id));</span><br><span class="line">user.ifPresent(u -&gt; System.out.println(<span class="string">&quot;Username is: &quot;</span> + u.getUsername()));</span><br></pre></td></tr></table></figure>
<h2 id="orElse">orElse</h2>
<p>如果 Optional 中有值则将其返回，否则返回 orElse 方法传入的参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> T <span class="title function_">orElse</span><span class="params">(T other)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value != <span class="literal">null</span> ? value : other;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> Optional.ofNullable(getUserById(id))</span><br><span class="line">        			.orElse(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">0</span>, <span class="string">&quot;Unknown&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;Username is: &quot;</span> + user.getUsername());</span><br></pre></td></tr></table></figure>
<h2 id="orElseGet">orElseGet</h2>
<p>与 orElse 方法的区别在于：orElseGet 方法传入的参数为一个 Supplier 接口的实现，当 Optional 中有值的时候，返回值；当 Optional 中没有值的时候，返回从该 Supplier 获得的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> T <span class="title function_">orElseGet</span><span class="params">(Supplier&lt;? extends T&gt; ither)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value != <span class="literal">null</span> ? value : other.get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> Optional.ofNullable(getUserById(id))</span><br><span class="line">                    .orElseGet(() -&gt; <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">0</span>, <span class="string">&quot;Unknown&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;Username is: &quot;</span> + user.getUsername());</span><br></pre></td></tr></table></figure>
<h2 id="orElseThrow">orElseThrow</h2>
<p>与 orElse 方法的区别在于：orElseThrow 方法当 Optional 中有值的时候，返回值；没有值的时候会抛出异常，抛出的异常由传入的 exceptionSupplier 提供</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;X <span class="keyword">extends</span> <span class="title class_">Throwable</span>&gt; T <span class="title function_">orElseThrow</span><span class="params">(Supplier&lt;? extends X&gt; exceptionSupplier)</span> <span class="keyword">throws</span> X &#123;</span><br><span class="line">    <span class="keyword">if</span> (value != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> exceptionSupplier.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> Optional.ofNullable(getUserById(id))</span><br><span class="line">        			.orElseThrow(() -&gt; <span class="keyword">new</span> <span class="title class_">EntityNotFoundException</span>(<span class="string">&quot;id 为 &quot;</span> + id + <span class="string">&quot; 的用户没有找到&quot;</span>));</span><br></pre></td></tr></table></figure>
<h2 id="map">map</h2>
<p>如果当前 Optional 为 Optional.empty，则依旧返回 Optional.empty；否则返回一个新的 Optional，该 Optional 包含的是：函数 mapper 在以 value 作为输入时的输出值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;U&gt; Optional&lt;U&gt; <span class="title function_">map</span><span class="params">(Function&lt;? <span class="built_in">super</span> T, ? extends U&gt; mapper)</span> &#123;</span><br><span class="line">    Objects.requireNonNull(mapper);</span><br><span class="line">    <span class="keyword">if</span> (!isPresent())&#123;</span><br><span class="line">        <span class="keyword">return</span> empty();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(mapper.apply(value));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;String&gt; username = Optional.ofNullable(getUserById(id))</span><br><span class="line">                                    .map(user -&gt; user.getUsername())</span><br><span class="line">                                    .map(name -&gt; name.toLowerCase())</span><br><span class="line">                                    .map(name -&gt; name.replace(<span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27; &#x27;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;Username is: &quot;</span> + username.orElse(<span class="string">&quot;Unknown&quot;</span>));</span><br></pre></td></tr></table></figure>
<h2 id="flatMap">flatMap</h2>
<p>与 map 方法的区别在于：map 方法参数中的函数 mapper 输出的是值，然后 map 方法会使用 Optional.ofNullable 将其包装为 Optional，而 flatMap 要求参数中的函数 mapper 输出的就是 Optional</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;U&gt; Optional&lt;U&gt; <span class="title function_">flatMap</span><span class="params">(Function&lt;? <span class="built_in">super</span> T, Optional&lt;U&gt;&gt; mapper)</span> &#123;</span><br><span class="line">    Objects.requireNonNull(mapper);</span><br><span class="line">    <span class="keyword">if</span> (!isPresent())&#123;</span><br><span class="line">        <span class="keyword">return</span> empty();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.requireNonNull(mapper.apply(value));</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;String&gt; username = Optional.ofNullable(getUserById(id))</span><br><span class="line">                                    .flatMap(user -&gt; Optional.of(user.getUsername()))</span><br><span class="line">                                    .flatMap(name -&gt; Optional.of(name.toLowerCase()));</span><br><span class="line">System.out.println(<span class="string">&quot;Username is: &quot;</span> + username.orElse(<span class="string">&quot;Unknown&quot;</span>));</span><br></pre></td></tr></table></figure>
<h2 id="filter">filter</h2>
<p>filter 方法接受一个 Predicate 来对 Optional 中包含的值进行过滤，如果包含的值满足条件，那么还是返回这个 Optional，否则返回 Optional.empty</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Optional&lt;T&gt; <span class="title function_">filter</span><span class="params">(Predicate&lt;? <span class="built_in">super</span> T&gt; predicate)</span> &#123;</span><br><span class="line">    Objects.requireNonNull(predicate);</span><br><span class="line">    <span class="keyword">if</span>(!isPresent()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> predicate.test(value) ? <span class="built_in">this</span> : empty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;String&gt; username = Optional.ofNullable(getUserById(id))</span><br><span class="line">                                    .filter(user -&gt; user.getId() &lt; <span class="number">10</span>)</span><br><span class="line">                                    .map(user -&gt; user.getUsername());</span><br><span class="line">System.out.println(<span class="string">&quot;Username is: &quot;</span> + username.orElse(<span class="string">&quot;Unknown&quot;</span>));</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>工作技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>SPI机制</title>
    <url>/blog/2024/12/29/Java/%E5%B7%A5%E4%BD%9C%E6%8A%80%E5%B7%A7/SPI%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h2 id="什么是-SPI-机制？">什么是 SPI 机制？</h2>
<p>在面向的对象的设计里，一般推荐模块之间基于接口编程，模块之间不对实现类进行硬编码。一旦代码里涉及具体的实现类，就违反了可拔插的原则，如果需要替换一种实现，就需要修改代码。为了实现在模块装配的时候能不在程序里动态指明，这就需要一种服务发现机制。</p>
<p>SPI （Service Provider Interface）是专门提供给服务提供者或者扩展框架功能的开发者去使用的一个接口，SPI 将服务接口和具体的服务实现分离开来，将服务调用方和服务实现者解耦，能够提升程序的扩展性、可维护性。修改或者替换服务实现并不需要修改调用方。</p>
<p><img src="10.png" alt=""></p>
<p><img src="9.png" alt=""></p>
<h2 id="API-与-SPI-区别">API 与 SPI 区别</h2>
<p><img src="2.png" alt=""></p>
<p><img src="3.png" alt=""></p>
<table>
<thead>
<tr>
<th>区别</th>
<th>API</th>
<th>SPI</th>
</tr>
</thead>
<tbody>
<tr>
<td>存在位置</td>
<td>API 依赖的接口位于实现者的包中</td>
<td>SPI 依赖的接口在调用方的包中</td>
</tr>
<tr>
<td>针对对象</td>
<td>API 通常是面向最终用户或外部系统的，提供了可直接使用的功能</td>
<td>SPI 更多是面向系统开发者，为他们提供一种将新服务或插件加入系统的方式</td>
</tr>
<tr>
<td>目的</td>
<td>API 的主要目的是提供接口供外界访问和使用特定的功能或数据</td>
<td>SPI 则是为了提供一个标准，允许第三方开发者实现并插入新的服务</td>
</tr>
<tr>
<td>定义方式</td>
<td>API 是由开发者主动编写并公开给其他开发者使用的</td>
<td>SPI 是由框架或库提供方定义的接口，供第三方开发者实现</td>
</tr>
<tr>
<td>调用方式</td>
<td>API 是通过直接调用接口的方法来使用功能</td>
<td>SPI 是通过配置文件来指定具体的实现类，然后由框架或库自动加载和调用</td>
</tr>
<tr>
<td>灵活性</td>
<td>API 的实现类必须在编译时就确定，无法动态替换</td>
<td>SPI 的实现类可以在运行时根据配置文件的内容进行动态加载和替换</td>
</tr>
<tr>
<td>依赖关系</td>
<td>API 是被调用方依赖的，即应用程序需要引入 API 所在的库才能使用其功能</td>
<td>SPI 是调用方依赖的，即框架或库需要引入第三方实现类的库才能加载和调用</td>
</tr>
</tbody>
</table>
<h2 id="SPI-优缺点">SPI 优缺点</h2>
<p><strong>优点</strong></p>
<p>使用 Java SPI 机制的优势是实现解耦，使得第三方服务模块的装配控制的逻辑与调用者的业务代码分离，而不是耦合在一起。应用程序可以根据实际业务情况启用框架扩展或替换框架组件。</p>
<p><strong>缺点</strong></p>
<ol>
<li>不能按需加载，需要遍历所有的实现类并实例化，然后在循环中才能找到我们需要的实现类。如果不想用某些实现类，或者某些类实例化很耗时，它也被载入并实例化了，这就造成了浪费。</li>
<li>获取某个实现类的方式不够灵活，只能通过 Iterator 形式获取，不能根据某个参数来获取对应的实现类。（Spring 的 BeanFactory，ApplicationContext 就要高级一些了。）</li>
<li>多个并发多线程使用 ServiceLoader 类的实例是不安全的。</li>
</ol>
<h2 id="SPI-使用场景">SPI 使用场景</h2>
<ol>
<li>数据库驱动加载接口实现类的加载：JDBC 加载不同类型数据库的驱动</li>
<li>日志门面接口实现类加载：SLF4J 加载不同提供商的日志实现类</li>
<li>Spring 中大量使用了 SPI：对 servlet3.0 规范对 ServletContainerInitializer 的实现、自动类型转换 Type Conversion SPI（Converter SPI、Formatter SPI）等</li>
<li>Dubbo：Dubbo 中也大量使用 SPI 的方式实现框架的扩展, 不过它对 Java 提供的原生 SPI 做了封装，允许用户扩展实现 Filter 接口</li>
</ol>
<h2 id="SPI-基本使用">SPI 基本使用</h2>
<h3 id="使用方法">使用方法</h3>
<ol>
<li>当服务提供者提供了接口的一种具体实现后，在 jar 包的 META-INF/services 目录下创建一个以“接口全限定名”为命名的文件，内容为实现类的全限定名；</li>
<li>接口实现按行配置，可以是多个。如果包含#号，每一行只取第一个#号前的内容。</li>
<li>接口实现类所在的 jar 包放在主程序的 classpath 中；</li>
<li>主程序通过 java.util.ServiceLoder 动态装载实现模块，它通过扫描 META-INF/services 目录下的配置文件找到实现类的全限定名，把类加载到 JVM；</li>
</ol>
<h3 id="使用案例">使用案例</h3>
<ol>
<li>包结构</li>
</ol>
<p><img src="4.png" alt=""></p>
<ol start="2">
<li>接口和方法定义</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IShout</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">shout</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">implements</span> <span class="title class_">IShout</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shout</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;miao miao&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">IShout</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shout</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;wang wang&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>在项目 META-INF/services 创建一个文本文件：名称为接口的“全限定名”，内容为实现类的全限定名</li>
</ol>
<p><strong>com.example.spi.demos.service.IShout</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">com.example.spi.demos.service.impl.Cat</span><br><span class="line">com.example.spi.demos.service.impl.Dog</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>测试</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ServiceLoader&lt;IShout&gt; shouts = ServiceLoader.load(IShout.class);</span><br><span class="line">        <span class="keyword">for</span> (IShout s : shouts) &#123;</span><br><span class="line">            s.shout();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行结果：</span></span><br><span class="line">miao miao</span><br><span class="line">wang wang</span><br></pre></td></tr></table></figure>
<h3 id="ServiceLoader-分析">ServiceLoader 分析</h3>
<p><img src="5.png" alt=""></p>
<p><img src="8.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ServiceLoader</span>&lt;S&gt; <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;S&gt; &#123;</span><br><span class="line">    <span class="comment">// 配置文件的路径</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PREFIX</span> <span class="operator">=</span> <span class="string">&quot;META-INF/services/&quot;</span>;</span><br><span class="line">	<span class="comment">// 待加载的类或接口</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;S&gt; service;</span><br><span class="line">	<span class="comment">// 类加载器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ClassLoader loader;</span><br><span class="line">	<span class="comment">// 访问控制器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AccessControlContext acc;</span><br><span class="line">	<span class="comment">// 缓存已经加载的实例</span></span><br><span class="line">    <span class="keyword">private</span> LinkedHashMap&lt;String,S&gt; providers = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">	<span class="comment">// 内部类，加载服务类（懒加载）</span></span><br><span class="line">    <span class="keyword">private</span> LazyIterator lookupIterator;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// .....</span></span><br><span class="line">    </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> &lt;S&gt; ServiceLoader&lt;S&gt; <span class="title function_">load</span><span class="params">(Class&lt;S&gt; service)</span> &#123;</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">cl</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader();</span><br><span class="line">        <span class="keyword">return</span> ServiceLoader.load(service, cl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S&gt; ServiceLoader&lt;S&gt; <span class="title function_">load</span><span class="params">(Class&lt;S&gt; service,</span></span><br><span class="line"><span class="params">                                            ClassLoader loader)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ServiceLoader</span>&lt;&gt;(service, loader);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">ServiceLoader</span><span class="params">(Class&lt;S&gt; svc, ClassLoader cl)</span> &#123;</span><br><span class="line">        service = Objects.requireNonNull(svc, <span class="string">&quot;Service interface cannot be null&quot;</span>);</span><br><span class="line">        loader = (cl == <span class="literal">null</span>) ? ClassLoader.getSystemClassLoader() : cl;</span><br><span class="line">        acc = (System.getSecurityManager() != <span class="literal">null</span>) ? AccessController.getContext() : <span class="literal">null</span>;</span><br><span class="line">        reload();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reload</span><span class="params">()</span> &#123;</span><br><span class="line">        providers.clear();</span><br><span class="line">        lookupIterator = <span class="keyword">new</span> <span class="title class_">LazyIterator</span>(service, loader);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ........</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>应用程序调用 ServiceLoader.load 方法</li>
</ol>
<p>ServiceLoader.load(Class &lt; S &gt; service) 方法内先创建一个新的 ServiceLoader，并实例化该类中的成员变量，包括：</p>
<ul>
<li>loader（ClassLoader 类型，类加载器）</li>
<li>acc（AccessControlContext 类型，访问控制器）</li>
<li>providers（LinkedHashMap &lt;String,S&gt; 类型，用于缓存加载成功的类）</li>
<li>lookupIterator（实现迭代器功能）</li>
</ul>
<ol start="2">
<li>
<p>ServiceLoader 的构造方法内会调用 reload 方法，来清理缓存，初始化 LazyIterator，注意此处是 Lazy，也就懒加载，此时并不会去加载文件下的内容</p>
</li>
<li>
<p>当遍历器被遍历时，才会去读取配置文件，应用程序通过迭代器接口获取对象实例</p>
</li>
</ol>
<p>ServiceLoader 先判断成员变量 providers 对象中（LinkedHashMap &lt;String,S&gt; 类型）是否有缓存实例对象，如果有缓存，直接返回。如果没有缓存，执行类的装载</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Iterator&lt;S&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Iterator</span>&lt;S&gt;() &#123;</span><br><span class="line">        Iterator&lt;Map.Entry&lt;String, S&gt;&gt; knownProviders = providers.entrySet().iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (knownProviders.hasNext())</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span> lookupIterator.hasNext(); <span class="comment">// 调用 LazyIterator</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> S <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (knownProviders.hasNext())</span><br><span class="line">                <span class="keyword">return</span> knownProviders.next().getValue();</span><br><span class="line">            <span class="keyword">return</span> lookupIterator.next(); <span class="comment">// 调用 LazyIterator</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>读取 META-INF/services 下的配置文件，获得所有能被实例化的类的名称，ServiceLoader 可以跨越 jar 包获取 META-INF 下的配置文件</li>
</ol>
<p>核心代码如下（即 ServiceLoader 扫描了所有 jar 包下的配置文件。然后通过解析全限定名获得，并在遍历时通过 Class.forName 进行实例化）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">LazyIterator</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;S&gt; &#123;</span><br><span class="line"></span><br><span class="line">    Class&lt;S&gt; service;</span><br><span class="line">    ClassLoader loader;</span><br><span class="line">    Enumeration&lt;URL&gt; configs = <span class="literal">null</span>;</span><br><span class="line">    Iterator&lt;String&gt; pending = <span class="literal">null</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">nextName</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">LazyIterator</span><span class="params">(Class&lt;S&gt; service, ClassLoader loader)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.service = service;</span><br><span class="line">        <span class="built_in">this</span>.loader = loader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">hasNextService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nextName != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (configs == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 通过PREFIX（META-INF/services/）和类名获取对应的配置文件，得到具体的实现类</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">fullName</span> <span class="operator">=</span> PREFIX + service.getName();</span><br><span class="line">                <span class="keyword">if</span> (loader == <span class="literal">null</span>)</span><br><span class="line">                    configs = ClassLoader.getSystemResources(fullName);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="comment">// 加载配置文件</span></span><br><span class="line">                    configs = loader.getResources(fullName);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException x) &#123;</span><br><span class="line">                fail(service, <span class="string">&quot;Error locating configuration files&quot;</span>, x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 配置文件解析，获取接口对应的实现类，可以是多个</span></span><br><span class="line">        <span class="keyword">while</span> ((pending == <span class="literal">null</span>) || !pending.hasNext()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!configs.hasMoreElements()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            pending = parse(service, configs.nextElement());</span><br><span class="line">        &#125;</span><br><span class="line">        nextName = pending.next();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> S <span class="title function_">nextService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!hasNextService())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">cn</span> <span class="operator">=</span> nextName;</span><br><span class="line">        nextName = <span class="literal">null</span>;</span><br><span class="line">        Class&lt;?&gt; c = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            c = Class.forName(cn, <span class="literal">false</span>, loader);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException x) &#123;</span><br><span class="line">            fail(service,<span class="string">&quot;Provider &quot;</span> + cn + <span class="string">&quot; not found&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!service.isAssignableFrom(c)) &#123;</span><br><span class="line">            fail(service,<span class="string">&quot;Provider &quot;</span> + cn  + <span class="string">&quot; not a subtype&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 实例化并缓存</span></span><br><span class="line">            <span class="type">S</span> <span class="variable">p</span> <span class="operator">=</span> service.cast(c.newInstance());</span><br><span class="line">            providers.put(cn, p);</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable x) &#123;</span><br><span class="line">            fail(service,<span class="string">&quot;Provider &quot;</span> + cn + <span class="string">&quot; could not be instantiated&quot;</span>,x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>();          <span class="comment">// This cannot happen</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (acc == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> hasNextService();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            PrivilegedAction&lt;Boolean&gt; action = <span class="keyword">new</span> <span class="title class_">PrivilegedAction</span>&lt;Boolean&gt;() &#123;</span><br><span class="line">                <span class="keyword">public</span> Boolean <span class="title function_">run</span><span class="params">()</span> &#123; <span class="keyword">return</span> hasNextService(); &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">return</span> AccessController.doPrivileged(action, acc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> S <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (acc == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> nextService();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            PrivilegedAction&lt;S&gt; action = <span class="keyword">new</span> <span class="title class_">PrivilegedAction</span>&lt;S&gt;() &#123;</span><br><span class="line">                <span class="keyword">public</span> S <span class="title function_">run</span><span class="params">()</span> &#123; <span class="keyword">return</span> nextService(); &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">return</span> AccessController.doPrivileged(action, acc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="自定义-ServiceLoader">自定义 ServiceLoader</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServiceLoader</span>&lt;S&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对应的接口 Class 模板</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;S&gt; service;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对应实现类的 可以有多个，用 List 进行封装</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;S&gt; providers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类加载器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ClassLoader classLoader;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 暴露给外部使用的方法，通过调用这个方法可以开始加载自己定制的实现流程。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S&gt; MyServiceLoader&lt;S&gt; <span class="title function_">load</span><span class="params">(Class&lt;S&gt; service)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyServiceLoader</span>&lt;&gt;(service);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法私有化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">MyServiceLoader</span><span class="params">(Class&lt;S&gt; service)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.service = service;</span><br><span class="line">        <span class="built_in">this</span>.classLoader = Thread.currentThread().getContextClassLoader();</span><br><span class="line">        doLoad();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关键方法，加载具体实现类的逻辑</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doLoad</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 读取所有 jar 包里面 META-INF/services 包下面的文件，这个文件名就是接口名，然后文件里面的内容就是具体的实现类的路径加全类名</span></span><br><span class="line">            Enumeration&lt;URL&gt; urls = classLoader.getResources(<span class="string">&quot;META-INF/services/&quot;</span> + service.getName());</span><br><span class="line">            <span class="comment">// 挨个遍历取到的文件</span></span><br><span class="line">            <span class="keyword">while</span> (urls.hasMoreElements()) &#123;</span><br><span class="line">                <span class="comment">// 取出当前的文件</span></span><br><span class="line">                <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> urls.nextElement();</span><br><span class="line">                System.out.println(<span class="string">&quot;File = &quot;</span> + url.getPath());</span><br><span class="line">                <span class="comment">// 建立链接</span></span><br><span class="line">                <span class="type">URLConnection</span> <span class="variable">urlConnection</span> <span class="operator">=</span> url.openConnection();</span><br><span class="line">                urlConnection.setUseCaches(<span class="literal">false</span>);</span><br><span class="line">                <span class="comment">// 获取文件输入流</span></span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> urlConnection.getInputStream();</span><br><span class="line">                <span class="comment">// 从文件输入流获取缓存</span></span><br><span class="line">                <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(inputStream));</span><br><span class="line">                <span class="comment">// 从文件内容里面得到实现类的全类名</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> bufferedReader.readLine();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (className != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 通过反射拿到实现类的实例</span></span><br><span class="line">                    Class&lt;?&gt; clazz = Class.forName(className, <span class="literal">false</span>, classLoader);</span><br><span class="line">                    <span class="comment">// 如果声明的接口跟这个具体的实现类是属于同一类型，（可以理解为Java的一种多态，接口跟实现类、父类和子类等等这种关系。）则构造实例</span></span><br><span class="line">                    <span class="keyword">if</span> (service.isAssignableFrom(clazz)) &#123;</span><br><span class="line">                        Constructor&lt;? <span class="keyword">extends</span> <span class="title class_">S</span>&gt; constructor = (Constructor&lt;? <span class="keyword">extends</span> <span class="title class_">S</span>&gt;) clazz.getConstructor();</span><br><span class="line">                        <span class="type">S</span> <span class="variable">instance</span> <span class="operator">=</span> constructor.newInstance();</span><br><span class="line">                        <span class="comment">// 把当前构造的实例对象添加到 Provider的列表里面</span></span><br><span class="line">                        providers.add(instance);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 继续读取下一行的实现类，可以有多个实现类，只需要换行就可以了。</span></span><br><span class="line">                    className = bufferedReader.readLine();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;读取文件异常。。。&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回spi接口对应的具体实现类列表</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;S&gt; <span class="title function_">getProviders</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> providers;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>通过 URL 工具类从 jar 包的 /META-INF/services 目录下面找到对应的文件，</li>
<li>读取这个文件的名称找到对应的 spi 接口，</li>
<li>通过 InputStream 流将文件里面的具体实现类的全类名读取出来，</li>
<li>根据获取到的全类名，先判断跟 spi 接口是否为同一类型，如果是的，那么就通过反射的机制构造对应的实例对象，</li>
<li>将构造出来的实例对象添加到 Providers 的列表中。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    MyServiceLoader&lt;IShout&gt; shouts = MyServiceLoader.load(IShout.class);</span><br><span class="line">    <span class="keyword">for</span> (IShout s : shouts.getProviders()) &#123;</span><br><span class="line">        s.shout();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="SpringBoot-使用-SPI">SpringBoot 使用 SPI</h2>
<h3 id="使用方法-2">使用方法</h3>
<p>Spring Boot 有一个与 SPI 相似的机制，但它并不完全等同于 Java 标准 SPI。</p>
<p>Spring Boot 的自动配置机制主要依赖于 spring.factories 文件。这个文件可以在多个 jar 中存在，并且 Spring Boot 会加载所有可见的 spring.factories 文件。我们可以在这个文件中声明一系列的自动配置类，这样当满足某些条件时，这些配置类会自动被 Spring Boot 应用。</p>
<p>spring.factories 文件中的条目键和值之间不能有换行，即 key = value 形式的结构必须在同一行开始。但是，如果有多个值需要列出（如多个实现类），并且这些值是逗号分隔的，那么可以使用反斜杠（\）来换行。spring.factories 的名称是约定俗成的。如果试图使用一个不同的文件名，那么 Spring Boot 的自动配置机制将不会识别它。</p>
<h3 id="使用案例-2">使用案例</h3>
<ol>
<li>包结构</li>
</ol>
<p><img src="7.png" alt=""></p>
<ol start="2">
<li>接口和方法定义</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MessageService</span> &#123;</span><br><span class="line">    String <span class="title function_">getMessage</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloMessageService</span> <span class="keyword">implements</span> <span class="title class_">MessageService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello from HelloMessageService!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HiMessageService</span> <span class="keyword">implements</span> <span class="title class_">MessageService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hi from HiMessageService!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>在项目 META-INF 创建一个 spring.factories 文件</li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">com.example.spi.demos.service.MessageService</span>=<span class="string">com.example.spi.demos.service.impl.HelloMessageService,\</span></span><br><span class="line"><span class="string">  com.example.spi.demos.service.impl.HiMessageService</span></span><br></pre></td></tr></table></figure>
<ol start="4">
<li>测试</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;MessageService&gt; services = SpringFactoriesLoader.loadFactories(MessageService.class, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">for</span> (MessageService service : services) &#123;</span><br><span class="line">            System.out.println(service.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行结果：</span></span><br><span class="line">Hello from HelloMessageService!</span><br><span class="line">Hi from HiMessageService!</span><br></pre></td></tr></table></figure>
<h3 id="SpringFactoriesLoader-分析">SpringFactoriesLoader 分析</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">SpringFactoriesLoader</span> &#123;</span><br><span class="line">    <span class="comment">// 加载器所需要加载的路径</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FACTORIES_RESOURCE_LOCATION</span> <span class="operator">=</span> <span class="string">&quot;META-INF/spring.factories&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Log</span> <span class="variable">logger</span> <span class="operator">=</span> LogFactory.getLog(SpringFactoriesLoader.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;ClassLoader, MultiValueMap&lt;String, String&gt;&gt; cache = <span class="keyword">new</span> <span class="title class_">ConcurrentReferenceHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, List&lt;String&gt;&gt; <span class="title function_">loadSpringFactories</span><span class="params">(<span class="meta">@Nullable</span> ClassLoader classLoader)</span> &#123;</span><br><span class="line">        MultiValueMap&lt;String, String&gt; result = cache.get(classLoader);</span><br><span class="line">        <span class="keyword">if</span> (result != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 根据路径去录取各个包下的文件</span></span><br><span class="line">            Enumeration&lt;URL&gt; urls = (classLoader != <span class="literal">null</span> ?</span><br><span class="line">                classLoader.getResources(FACTORIES_RESOURCE_LOCATION) :</span><br><span class="line">                ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));</span><br><span class="line">            result = <span class="keyword">new</span> <span class="title class_">LinkedMultiValueMap</span>&lt;&gt;();</span><br><span class="line">            <span class="comment">// 获取后进行循环遍历，因为不止一个包有spring.factories文件</span></span><br><span class="line">            <span class="keyword">while</span> (urls.hasMoreElements()) &#123;</span><br><span class="line">                <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> urls.nextElement();</span><br><span class="line">                <span class="type">UrlResource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlResource</span>(url);</span><br><span class="line">                <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> PropertiesLoaderUtils.loadProperties(resource);</span><br><span class="line">                <span class="comment">// 获取到了key和value对应关系</span></span><br><span class="line">                <span class="keyword">for</span> (Map.Entry&lt;?, ?&gt; entry : properties.entrySet()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">factoryClassName</span> <span class="operator">=</span> ((String) entry.getKey()).trim();</span><br><span class="line">                <span class="comment">// 循环获取配置文件的value，并放进result集合中</span></span><br><span class="line">                <span class="keyword">for</span> (String factoryName : StringUtils.commaDelimitedListToStringArray((String) entry.getValue())) &#123;</span><br><span class="line">                        result.add(factoryClassName, factoryName.trim());</span><br><span class="line">                	&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 并缓存起来，以便后续直接获取</span></span><br><span class="line">            cache.put(classLoader, result);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Unable to load factories from location [&quot;</span> +</span><br><span class="line">                    FACTORIES_RESOURCE_LOCATION + <span class="string">&quot;]&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>工作技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>Stream流</title>
    <url>/blog/2024/10/20/Java/%E5%B7%A5%E4%BD%9C%E6%8A%80%E5%B7%A7/Stream%E6%B5%81/</url>
    <content><![CDATA[<span id="more"></span>
<h2 id="生成流">生成流</h2>
<h3 id="通过集合生成">通过集合生成</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// list 列表转换为 Stream</span></span><br><span class="line">List&lt;String&gt; strList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">strList.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">strList.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line"><span class="type">Stream</span> <span class="variable">stream3</span> <span class="operator">=</span> strList.stream();</span><br><span class="line">stream3.forEach(System.out::println);</span><br><span class="line">System.out.println(<span class="string">&quot;=====================&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set 集合转换为 Stream</span></span><br><span class="line">Set&lt;String&gt; strSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">strSet.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">strSet.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line"><span class="type">Stream</span> <span class="variable">stream4</span> <span class="operator">=</span> strSet.stream();</span><br><span class="line">stream4.forEach(System.out::println);</span><br><span class="line">System.out.println(<span class="string">&quot;=====================&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Map 集合转换为 Stream</span></span><br><span class="line">Map&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;a&quot;</span>, <span class="number">100</span>);</span><br><span class="line">map.put(<span class="string">&quot;b&quot;</span>, <span class="number">200</span>);</span><br><span class="line"><span class="type">Stream</span> <span class="variable">stream5</span> <span class="operator">=</span> map.entrySet().stream();</span><br><span class="line">stream5.forEach(System.out::println);</span><br><span class="line">System.out.println(<span class="string">&quot;=====================&quot;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="通过数组生成">通过数组生成</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] intArr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="type">IntStream</span> <span class="variable">stream</span> <span class="operator">=</span> Arrays.stream(intArr);</span><br></pre></td></tr></table></figure>
<p>该方法生成的流是数值流（IntStream）而不是 Stream，使用数值流可以避免计算过程中拆箱装箱，提高性能</p>
<h3 id="通过值生成">通过值生成</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure>
<p>通过 Stream 的 of 方法生成流，通过 Stream 的 empty 方法可以生成一个空流</p>
<h3 id="通过文件生成">通过文件生成</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; lines = Files.lines(Paths.get(<span class="string">&quot;data.txt&quot;</span>), Charset.defaultCharset());</span><br></pre></td></tr></table></figure>
<p>通过 Files.line 方法得到一个流，并且得到的每个流是给定文件中的一行</p>
<h3 id="通过函数生成">通过函数生成</h3>
<ol>
<li>iterate</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream = Stream.iterate(<span class="number">0</span>, n -&gt; n + <span class="number">2</span>).limit(<span class="number">5</span>);</span><br></pre></td></tr></table></figure>
<p>iterate 方法接受两个参数，第一个为初始值，第二个为进行的函数操作，因为 iterate 生成的流为无限流，通过 limit 方法对流进行了截断，只生成 5 个偶数</p>
<ol start="2">
<li>generate</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Double&gt; stream = Stream.generate(Math::random).limit(<span class="number">5</span>);</span><br></pre></td></tr></table></figure>
<p>generate 方法接受一个参数，方法参数类型为 Supplier，由他为流提供值，generate 生成的流也是无限流，因此通过 limit 对流进行了截断</p>
<h2 id="中间操作">中间操作</h2>
<h3 id="filter-条件筛选">filter 条件筛选</h3>
<p>返回结果生成新的流中只包含满足筛选条件的数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">Stream&lt;Integer&gt; stream = integerList.stream().filter(i -&gt; i &gt; <span class="number">3</span>);</span><br></pre></td></tr></table></figure>
<h3 id="distinct-去除重复元素">distinct 去除重复元素</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">Stream&lt;Integer&gt; stream = integerList.stream().distinct();</span><br></pre></td></tr></table></figure>
<h3 id="limit-返回指定流个数">limit 返回指定流个数</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>); </span><br><span class="line">Stream&lt;Integer&gt; stream = integerList.stream().limit(<span class="number">3</span>);</span><br></pre></td></tr></table></figure>
<p>通过 limit 方法指定返回流的个数，limit 的参数值必须 &gt;= 0，否则将会抛出异常</p>
<h3 id="skip-跳过流中的元素">skip 跳过流中的元素</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">Stream&lt;Integer&gt; stream = integerList.stream().skip(<span class="number">2</span>);</span><br></pre></td></tr></table></figure>
<p>通过 skip 方法跳过流中的元素，skip 的参数值必须 &gt;= 0，否则将会抛出异常</p>
<h3 id="map-流映射">map 流映射</h3>
<p>流映射就是将接受的元素映射成另外一个元素，通过 map 方法可以完成映射</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; stringList = Arrays.asList(<span class="string">&quot;Java 8&quot;</span>, <span class="string">&quot;Lambdas&quot;</span>,  <span class="string">&quot;In&quot;</span>, <span class="string">&quot;Action&quot;</span>);</span><br><span class="line">Stream&lt;Integer&gt; stream = stringList.stream().map(String::length);</span><br></pre></td></tr></table></figure>
<p><strong>常用方法</strong></p>
<ol>
<li>
<p>mapToDouble</p>
</li>
<li>
<p>mapToInt</p>
</li>
<li>
<p>mapToLong</p>
</li>
</ol>
<p><strong>使用案例</strong></p>
<ol>
<li>当出现相同的 key 时，解决方法：取前面 value 的值，或者取后面放入的 value 值，则覆盖先前的 value 值</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Long, String&gt; map = userList.stream()</span><br><span class="line">        .collect(Collectors.toMap(User::getId, User::getUsername, (v1, v2) -&gt; v1));</span><br><span class="line">Map&lt;Long, String&gt; map = userList.stream()</span><br><span class="line">        .collect(Collectors.toMap(User::getId, User::getUsername, (v1, v2) -&gt; v2));</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>对相同 key 值的数据进行合并</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 处理 itemList 合并相同物料累加数量</span></span><br><span class="line">Map&lt;Long, Integer&gt; map = itemList.stream().collect(Collectors.toMap(StocksComponentsItem::getStocksId, StocksComponentsItem::getCount, (e1, e2) -&gt; e1 + e2));       </span><br></pre></td></tr></table></figure>
<ol start="3">
<li>获取 TreeMap，根据 key 值进行排序</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Long, String&gt; treeMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">TreeMap&lt;Long, String&gt; map = treeMap.entrySet().stream()</span><br><span class="line">.collect(Collectors.toMap(entry -&gt; entry.getKey(), entry -&gt; entry.getValue(), </span><br><span class="line">                          (v1, v2) -&gt; v1, TreeMap::<span class="keyword">new</span>));</span><br></pre></td></tr></table></figure>
<h3 id="flatMap-流转换">flatMap 流转换</h3>
<p>扁平化映射，将多个 stream 连接成一个 stream，这个操作是针对类似多维数组的，比如集合里面包含集合，相当于降维作用</p>
<p>例如：如果想要从 List &lt; StdCls &gt; 中取出学生列表，需要取出每个班级的学生 List，再 for 循环调用 List.addAll()方法把所有班级的学生 List 到一个新的总和 List 中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StdCls</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String clsNo;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; studentList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 map 映射后会变成 List &lt;List&lt;Student&gt; &gt;，若使用 flatMap 会进行扁平化处理，从而将 List 嵌套 List 用 stream 合并成一个 List</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; nameList = stdClsList.stream()</span><br><span class="line">                        .map(StdCls::getStudentList)</span><br><span class="line">                        .flatMap(Collection::stream) <span class="comment">// 多个集合 List 合并</span></span><br><span class="line">                        .map(Student::getName).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>
<h3 id="sorted-排序">sorted 排序</h3>
<p>将流中的元素按照自然排序方式进行排序</p>
<ol>
<li>sorted()：自然排序，流中元素需实现 Comparable 接口</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;ff&quot;</span>, <span class="string">&quot;dd&quot;</span>);</span><br><span class="line"><span class="comment">//String 类自身已实现 Compareable 接口</span></span><br><span class="line">list.stream().sorted().forEach(System.out::println);<span class="comment">// aa dd ff</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>sorted(Comparator com)：定制排序，自定义 Comparator 排序器</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;aa&quot;</span>, <span class="number">10</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;bb&quot;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;aa&quot;</span>, <span class="number">30</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;dd&quot;</span>, <span class="number">40</span>);</span><br><span class="line">List&lt;Student&gt; studentList = Arrays.asList(s1, s2, s3, s4);</span><br><span class="line">  </span><br><span class="line"><span class="comment">//自定义排序：先按姓名升序，姓名相同则按年龄升序</span></span><br><span class="line">studentList.stream().sorted(</span><br><span class="line">    (o1, o2) -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (o1.getName().equals(o2.getName())) &#123;</span><br><span class="line">        	<span class="keyword">return</span> o1.getAge() - o2.getAge();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        	<span class="keyword">return</span> o1.getName().compareTo(o2.getName());</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">).forEach(System.out::println);　</span><br></pre></td></tr></table></figure>
<h3 id="peek-消费">peek 消费</h3>
<p>对流中每个元素执行操作，并返回一个新的流，返回的流还是包含原来流中的元素。</p>
<p>如同于 map，能得到流中的每一个元素，但 map 接收的是一个 Function 表达式，有返回值；而 peek 接收的是 Consumer 表达式，没有返回值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;aa&quot;</span>, <span class="number">10</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;bb&quot;</span>, <span class="number">20</span>);</span><br><span class="line">List&lt;Student&gt; studentList = Arrays.asList(s1, s2);</span><br><span class="line">  </span><br><span class="line">studentList.stream().peek(o -&gt; o.setAge(<span class="number">100</span>)).forEach(System.out::println);</span><br><span class="line">  </span><br><span class="line"><span class="comment">//结果：</span></span><br><span class="line">Student&#123;name=<span class="string">&#x27;aa&#x27;</span>, age=<span class="number">100</span>&#125;</span><br><span class="line">Student&#123;name=<span class="string">&#x27;bb&#x27;</span>, age=<span class="number">100</span>&#125;</span><br></pre></td></tr></table></figure>
<h3 id="concat-流合并">concat 流合并</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个集合，存储多个字符串元素 </span></span><br><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">list.add(<span class="string">&quot;心如音&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;流老蛋&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;王值&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;李尔&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;张新敏&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;张天坤&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//需求 1：取前 4 个数据组成一个流 </span></span><br><span class="line">Stream&lt;String&gt; s1 = list.stream().limit(<span class="number">4</span>);</span><br><span class="line"><span class="comment">//需求 2：跳过 2 个数据组成一个流 </span></span><br><span class="line">Stream&lt;String&gt; s2 = list.stream().skip(<span class="number">2</span>);</span><br><span class="line"><span class="comment">//需求 3：合并需求 1 和需求 2 得到的流，并把结果在控制台输出 </span></span><br><span class="line">Stream.concat(s1,s2).forEach(System.out::println); </span><br><span class="line"><span class="comment">//需求 4：合并需求 1 和需求 2 得到的流，并把结果在控制台输出，要求字符串元素不能重复 </span></span><br><span class="line">Stream.concat(s1,s2).distinct().forEach(System.out::println);</span><br></pre></td></tr></table></figure>
<h2 id="终端操作">终端操作</h2>
<h3 id="match-元素匹配">match 元素匹配</h3>
<ol>
<li>allMatch 匹配所有</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> integerList.stream().allMatch(i -&gt; i &gt; <span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span> (result) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;值都大于3&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>anyMatch 匹配其中一个</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> integerList.stream().allMatch(i -&gt; i &gt; <span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span> (result) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;存在大于3的值&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>noneMatch 全部不匹配</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> integerList.stream().allMatch(i -&gt; i &gt; <span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span> (result) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;值都小于3&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="count-统计元素个数">count 统计元素个数</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="type">Long</span> <span class="variable">result</span> <span class="operator">=</span> integerList.stream().filter(e -&gt; e &gt; <span class="number">3</span>).count();</span><br></pre></td></tr></table></figure>
<h3 id="find-查找元素">find 查找元素</h3>
<ol>
<li>findFirst：查找第一个</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">Optional&lt;Integer&gt; result = integerList.stream().filter(i -&gt; i &gt; <span class="number">3</span>).findFirst();</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>findAny：随机查找一个</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">Optional&lt;Integer&gt; result = integerList.stream().filter(i -&gt; i &gt; <span class="number">3</span>).findAny();</span><br></pre></td></tr></table></figure>
<h3 id="min、max-获取最值">min、max 获取最值</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">Optional&lt;Integer&gt; min = integerList.stream().min(Integer::compareTo);</span><br><span class="line">System.out.println(min.get());</span><br><span class="line">Optional&lt;Integer&gt; max = integerList.stream().max(Integer::compareTo);</span><br><span class="line">System.out.println(max.get());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 mapToInt</span></span><br><span class="line"><span class="type">OptionalInt</span> <span class="variable">min1</span> <span class="operator">=</span> integerList.stream().mapToInt(e -&gt; e).min();</span><br><span class="line">System.out.println(min1.getAsInt());</span><br><span class="line"><span class="type">OptionalInt</span> <span class="variable">max1</span> <span class="operator">=</span> integerList.stream().mapToInt(e -&gt; e).max();</span><br><span class="line">System.out.println(max1.getAsInt());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象使用，例如计算对象 Dish 中的 calories 值</span></span><br><span class="line">Optional&lt;Integer&gt; min = menu.stream().map(Dish::getCalories).min(Integer::compareTo);</span><br><span class="line">Optional&lt;Integer&gt; max = menu.stream().map(Dish::getCalories).max(Integer::compareTo);</span><br><span class="line"><span class="type">OptionalInt</span> <span class="variable">min</span> <span class="operator">=</span> menu.stream().mapToInt(Dish::getCalories).min();</span><br><span class="line"><span class="type">OptionalInt</span> <span class="variable">max</span> <span class="operator">=</span> menu.stream().mapToInt(Dish::getCalories).max();</span><br></pre></td></tr></table></figure>
<h3 id="reduce-元素组合">reduce 元素组合</h3>
<p>把 Stream 元素组合起来。它提供一个起始值（种子），然后依照运算规则（BinaryOperator），和前面 Stream 的第一个、第二个、第 n 个元素组合。从这个意义上说，字符串拼接、数值的 sum、min、max、average 都是特殊的 reduce</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// reduce()：字符串拼接</span></span><br><span class="line"><span class="type">String</span> <span class="variable">reduceStr1</span> <span class="operator">=</span> Stream.of(<span class="string">&quot;ma&quot;</span>, <span class="string">&quot;zhi&quot;</span>, <span class="string">&quot;chu&quot;</span>).reduce(<span class="string">&quot;&quot;</span>, String::concat);</span><br><span class="line">System.out.println(reduceStr1);</span><br><span class="line"><span class="type">String</span> <span class="variable">reduceStr2</span> <span class="operator">=</span> Stream.of(<span class="string">&quot;ma&quot;</span>, <span class="string">&quot;zhi&quot;</span>, <span class="string">&quot;chu&quot;</span>).reduce(<span class="string">&quot;&quot;</span>, (x,y)-&gt;x+y);</span><br><span class="line">System.out.println(reduceStr2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// reduce()：求和，identity(起始值)为 0</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">total1</span> <span class="operator">=</span> Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>).reduce(<span class="number">0</span>, Integer::sum);</span><br><span class="line">System.out.println(total1);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">total2</span> <span class="operator">=</span> Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>).reduce(<span class="number">0</span>, (x, y) -&gt; x +y);</span><br><span class="line">System.out.println(total2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求和，sumValue = 10, 无起始值</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">total3</span> <span class="operator">=</span> Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>).reduce(Integer::sum).get();</span><br><span class="line">System.out.println(total3);</span><br><span class="line"></span><br><span class="line"><span class="comment">// reduce()：求最小值</span></span><br><span class="line"><span class="type">double</span> <span class="variable">minValue</span> <span class="operator">=</span> Stream.of(-<span class="number">1.1</span>, <span class="number">8.8</span>, -<span class="number">2.2</span>, -<span class="number">6.6</span>).reduce(Double.MAX_VALUE, Double::min);</span><br><span class="line">System.out.println(minValue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象使用，例如计算对象 Dish 中的 calories 值</span></span><br><span class="line">Optional&lt;Integer&gt; min = menu.stream().map(Dish::getCalories).reduce(Integer::min);</span><br><span class="line">Optional&lt;Integer&gt; max = menu.stream().map(Dish::getCalories).reduce(Integer::max);</span><br></pre></td></tr></table></figure>
<h3 id="求不同值">求不同值</h3>
<ol>
<li>summingInt：求和</li>
<li>sum：求和</li>
<li>averagingInt：求平均值</li>
<li>summarizingInt：同时求总和、平均值、最大值、最小值</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> menu.stream().collect(Collectors.summingInt(Dish::getCalories));</span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> menu.stream().map(Dish::getCalories).reduce(<span class="number">0</span>, Integer::sum);</span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> menu.stream().mapToInt(Dish::getCalories).sum();</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="variable">average</span> <span class="operator">=</span> menu.stream().collect(Collectors.averagingInt(Dish::getCalories));</span><br><span class="line"></span><br><span class="line"><span class="type">IntSummaryStatistics</span> <span class="variable">intSummaryStatistics</span> <span class="operator">=</span> menu.stream().collect(Collectors.summarizingInt(Dish::getCalories));</span><br><span class="line"><span class="type">double</span> <span class="variable">average</span> <span class="operator">=</span> intSummaryStatistics.getAverage();  <span class="comment">//获取平均值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> intSummaryStatistics.getMin();  <span class="comment">//获取最小值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> intSummaryStatistics.getMax();  <span class="comment">//获取最大值</span></span><br><span class="line"><span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> intSummaryStatistics.getSum();  <span class="comment">//获取总和</span></span><br></pre></td></tr></table></figure>
<h3 id="foreach-元素遍历">foreach 元素遍历</h3>
<p>遍历流中的每一个元素，按照指定的方法执行，执行顺序不一定按照流的顺序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="comment">// foreach: 遍历流中每一个元素, 执行顺序不一定按照流的顺序</span></span><br><span class="line">integerList.stream().forEach(System.out::println);</span><br><span class="line"><span class="comment">// .parallel()表示创建一个并行流</span></span><br><span class="line">Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>).parallel().forEach(System.out::println);</span><br></pre></td></tr></table></figure>
<h3 id="toArray-返回数组">toArray 返回数组</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// toArray()：将流中的元素放入到一个数组中</span></span><br><span class="line">String[] strings = Stream.of(<span class="string">&quot;ma&quot;</span>, <span class="string">&quot;zhi&quot;</span>, <span class="string">&quot;chu&quot;</span>).toArray(String[]::<span class="keyword">new</span>);</span><br><span class="line">System.out.println(Arrays.toString(strings));</span><br></pre></td></tr></table></figure>
<h3 id="collect-返回集合">collect 返回集合</h3>
<h4 id="minBy-maxBy-获取最值">minBy/maxBy 获取最值</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;Integer&gt; min = menu.stream().map(Dish::getCalories).collect(Collectors.minBy(Integer::compareTo));</span><br><span class="line">Optional&lt;Integer&gt; max = menu.stream().map(Dish::getCalories).collect(Collectors.maxBy(Integer::compareTo));</span><br></pre></td></tr></table></figure>
<h4 id="toMap-获取属性映射">toMap 获取属性映射</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; strings = menu.stream().map(Dish::getName).collect(Collectors.toList());</span><br><span class="line">Set&lt;String&gt; sets = menu.stream().map(Dish::getName).collect(Collectors.toSet());</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取属性和对象本身</span></span><br><span class="line">Map&lt;Integer, House&gt; houseMap = houses.stream().collect(Collectors.toMap(House::getOwnerid, o -&gt; o));</span><br><span class="line">Map&lt;Integer, House&gt; houseMap1 = houses.stream().collect(Collectors.toMap(House::getOwnerid,  Function.identity()));</span><br><span class="line"></span><br><span class="line"><span class="comment">//出现重复 id 时，取前面 value 的值，获取取后面放入的 value 值，则覆盖先前的 value 值</span></span><br><span class="line">houses.stream().collect(Collectors.toMap(House::getOwnerid, House::getHousename,(v1,v2)-&gt;v2));</span><br><span class="line">houses.stream().collect(Collectors.toMap(House::getOwnerid, House::getHousename,(v1,v2)-&gt;v1));</span><br></pre></td></tr></table></figure>
<p>常用方法：</p>
<ol>
<li>Collectors.toList()</li>
<li>Collectors.toMap()</li>
<li>Collectors.toSet()</li>
<li>Collectors.toCollection()</li>
<li>Collectors.toConcurrentMap()</li>
</ol>
<h4 id="counting-统计元素个数">counting 统计元素个数</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="type">Long</span> <span class="variable">result</span> <span class="operator">=</span> integerList.stream().count();</span><br><span class="line"><span class="type">Long</span> <span class="variable">result</span> <span class="operator">=</span> integerList.stream().collect(Collectors.counting());</span><br></pre></td></tr></table></figure>
<h4 id="joining-拼接流中元素">joining 拼接流中元素</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> menu.stream().map(Dish::getName).collect(Collectors.joining(<span class="string">&quot;, &quot;</span>));</span><br></pre></td></tr></table></figure>
<p>默认如果不通过 map 方法进行映射处理拼接的 toString 方法返回的字符串，joining 的方法参数为元素的分界符，如果不指定生成的字符串将是一串的</p>
<h4 id="groupingBy-元素分组">groupingBy 元素分组</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 按 type 字段分组</span></span><br><span class="line">Map&lt;Type, List&lt;Dish&gt;&gt; result = dishList.stream().collect(Collectors.groupingBy(Dish::getType));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按 type 字段分组后，再按 calories 字段分组</span></span><br><span class="line">Map&lt;String, Map&lt;Integer, List&lt;Dish&gt;&gt;&gt; result = menu.stream().collect(Collectors.groupingBy(Dish::getName,</span><br><span class="line">                Collectors.groupingBy(Dish::getCalories)));</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 源数据</span></span><br><span class="line">ArrayList&lt;GateScanCodeRecord&gt; objects = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">objects.add(<span class="keyword">new</span> <span class="title class_">GateScanCodeRecord</span>().setMonth(<span class="string">&quot;2020-07&quot;</span>).setDay(<span class="string">&quot;2020-07-12&quot;</span>));</span><br><span class="line">objects.add(<span class="keyword">new</span> <span class="title class_">GateScanCodeRecord</span>().setMonth(<span class="string">&quot;2020-06&quot;</span>).setDay(<span class="string">&quot;2020-06-14&quot;</span>));</span><br><span class="line">objects.add(<span class="keyword">new</span> <span class="title class_">GateScanCodeRecord</span>().setMonth(<span class="string">&quot;2020-06&quot;</span>).setDay(<span class="string">&quot;2020-06-12&quot;</span>));</span><br><span class="line">objects.add(<span class="keyword">new</span> <span class="title class_">GateScanCodeRecord</span>().setMonth(<span class="string">&quot;2020-05&quot;</span>).setDay(<span class="string">&quot;2020-05-17&quot;</span>));</span><br><span class="line">objects.add(<span class="keyword">new</span> <span class="title class_">GateScanCodeRecord</span>().setMonth(<span class="string">&quot;2020-05&quot;</span>).setDay(<span class="string">&quot;2020-05-12&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按月份分组有序</span></span><br><span class="line">TreeMap&lt;String, List&lt;GateScanCodeRecord&gt;&gt; collect2 = objects.parallelStream().collect(Collectors.groupingBy(GateScanCodeRecord::getMonth, TreeMap::<span class="keyword">new</span>, Collectors.toList()));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义分组有序</span></span><br><span class="line">TreeMap&lt;String, List&lt;GateScanCodeRecord&gt;&gt; collect3 =</span><br><span class="line">            objects.parallelStream().collect(Collectors.groupingBy(GateScanCodeRecord::getMonth,</span><br><span class="line">            () -&gt; <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;((o1, o2) -&gt; Math.toIntExact(Long.parseLong(o2.replaceAll(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>)) - Long.parseLong(o1.replaceAll(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>)))),</span><br><span class="line">            Collectors.toList()));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两层排序(按月分组排序, 月下的数据按天分组并排序)</span></span><br><span class="line">TreeMap&lt;String, TreeMap&lt;String, List&lt;GateScanCodeRecord&gt;&gt;&gt; collect = objects.stream()</span><br><span class="line">            .collect(Collectors.groupingBy(GateScanCodeRecord::getMonth,</span><br><span class="line">             () -&gt; <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;((o1, o2) -&gt; Math.toIntExact(Long.parseLong(o2.replaceAll(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>)) - Long.parseLong(o1.replaceAll(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>)))),</span><br><span class="line">             Collectors.groupingBy(GateScanCodeRecord::getDay,</span><br><span class="line">             () -&gt; <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;((o1, o2) -&gt; Math.toIntExact(Long.parseLong(o2.replaceAll(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>)) - Long.parseLong(o1.replaceAll(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>)))),</span><br><span class="line">             Collectors.toList()))</span><br><span class="line">            );</span><br></pre></td></tr></table></figure>
<h4 id="partitioningBy-元素分区">partitioningBy 元素分区</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Boolean, List&lt;Dish&gt;&gt; result = menu.stream().collect(Collectors.partitioningBy(Dish::isVegetarian));</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line">Map&lt;Boolean, List&lt;Dish&gt;&gt; result = menu.stream().collect(Collectors.groupingBy(Dish::isVegetarian));</span><br><span class="line"></span><br><span class="line">List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">Map&lt;Boolean, List&lt;Integer&gt;&gt; result = integerList.stream().collect(Collectors.partitioningBy(i -&gt; i &lt; <span class="number">3</span>));</span><br></pre></td></tr></table></figure>
<p><strong>groupingBy 和 partitioningBy 区别</strong></p>
<ol>
<li>partitioningBy：将一组数据分为两组，key 为 ture 和 false 的两组数据（仅能分为两组）</li>
<li>groupingBy：将一组数据按照指定的类型分为 N 组，key 为泛型</li>
</ol>
<h4 id="mapping-获取属性映射集合">mapping 获取属性映射集合</h4>
<p>对分组之后的对象集合转换为对象的某个属性的集合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    List&lt;Person&gt; personList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 四个参与测试的小伙伴</span></span><br><span class="line">    <span class="type">Person</span> <span class="variable">tom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;tom&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">11</span>);</span><br><span class="line">    <span class="type">Person</span> <span class="variable">amy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;amy&quot;</span>, <span class="string">&quot;女&quot;</span>, <span class="number">13</span>);</span><br><span class="line">    <span class="type">Person</span> <span class="variable">ali</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;ali&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">12</span>);</span><br><span class="line">    <span class="type">Person</span> <span class="variable">daming</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;daming&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">13</span>);</span><br><span class="line">    personList.add(tom);</span><br><span class="line">    personList.add(amy);</span><br><span class="line">    personList.add(ali);</span><br><span class="line">    personList.add(daming);</span><br><span class="line">    <span class="comment">// 对小伙伴按照性别 age 进行分组</span></span><br><span class="line">    Map&lt;String, Set&lt;String&gt;&gt; resultMap = personList.stream().collect(Collectors.groupingBy(Person::getSex, Collectors.mapping(Person::getName, Collectors.toSet())));</span><br><span class="line">    System.out.println(resultMap.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="collectingAndThen-归纳处理">collectingAndThen 归纳处理</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 按, 拼接成字符串后全部转为大写</span></span><br><span class="line"><span class="type">String</span> <span class="variable">collect</span> <span class="operator">=</span> Stream.of(<span class="string">&quot;ma&quot;</span>, <span class="string">&quot;zhi&quot;</span>, <span class="string">&quot;chu&quot;</span>).collect(Collectors.collectingAndThen(Collectors.joining(<span class="string">&quot;,&quot;</span>),</span><br><span class="line">        String::toUpperCase));</span><br><span class="line">System.out.println(collect);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>工作技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>异步多线程CompletionService</title>
    <url>/blog/2025/03/26/Java/%E5%B7%A5%E4%BD%9C%E6%8A%80%E5%B7%A7/%E5%BC%82%E6%AD%A5%E5%A4%9A%E7%BA%BF%E7%A8%8BCompletionService/</url>
    <content><![CDATA[<h2 id="什么是-CompletionService？">什么是 CompletionService？</h2>
<p>当我们使用 ExecutorService 启动多个 Callable 时，每个 Callable 返回一个 Future，而当我们执行 Future 的 get 方法获取结果时，可能拿到的 Future 并不是第一个执行完成的 Callable 的 Future，就会进行阻塞，从而不能获取到第一个完成的 Callable 结果，那么这样就造成了很严重的性能损耗问题。而 CompletionService 正是为了解决这个问题，它是 Java8 的新增接口，它的实现类是 ExecutorCompletionService。CompletionService 会根据线程池中 Task 的执行结果按执行完成的先后顺序排序，任务先完成的可优先获取到。</p>
<h2 id="常用方法">常用方法</h2>
<ol>
<li>构造方法：构建 ExecutorCompletionService 对象</li>
</ol>
<ul>
<li>executor：关联的线程池</li>
<li>completionQueue：自定义的结果存储队列</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ExecutorCompletionService(Executor executor);</span><br><span class="line">ExecutorCompletionService(Executor executor, BlockingQueue&lt;Future&lt;V&gt;&gt; completionQueue);</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>submit：提交一个 Callable 或者 Runnable 类型的任务，并返回 Future</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Future&lt;V&gt; <span class="title function_">submit</span><span class="params">(Callable&lt;V&gt; task)</span>;</span><br><span class="line">Future&lt;V&gt; <span class="title function_">submit</span><span class="params">(Runnable task, V result)</span>;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>take：阻塞方法，从结果队列中获取并移除一个已经执行完成的任务的结果，如果没有就阻塞，直到任务完成返回结果</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Future&lt;V&gt; <span class="title function_">take</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>poll：从结果队列中获取并移除一个已经执行完成的任务的结果，如果没有就会返回 null，该方法不会阻塞</li>
</ol>
<ul>
<li>timeout：最多等待多长时间</li>
<li>unit：时间单位</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Future&lt;V&gt; <span class="title function_">poll</span><span class="params">()</span>;</span><br><span class="line">Future&lt;V&gt; <span class="title function_">poll</span><span class="params">(<span class="type">long</span> timeout, TimeUnit unit)</span>;</span><br></pre></td></tr></table></figure>
<h2 id="使用案例">使用案例</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompletionServiceExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Callable&lt;Integer&gt;&gt; callables = Arrays.asList(</span><br><span class="line">                    ()-&gt;&#123;</span><br><span class="line">                        mySleep(<span class="number">20</span>);</span><br><span class="line">                        System.out.println(<span class="string">&quot;=============20 end==============&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">20</span>;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    ()-&gt;&#123;</span><br><span class="line">                        mySleep(<span class="number">10</span>);</span><br><span class="line">                        System.out.println(<span class="string">&quot;=============10 end==============&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                );</span><br><span class="line">        List&lt;Future&lt;Integer&gt;&gt; futures = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//提交任务, 并将 future 添加到 list 集合中</span></span><br><span class="line">        futures.add(executorService.submit(callables.get(<span class="number">0</span>)));</span><br><span class="line">        futures.add(executorService.submit(callables.get(<span class="number">1</span>)));</span><br><span class="line">        <span class="comment">//遍历 Future, 因为不知道哪个任务先完成, 所以这边模拟第一个拿到的就是执行时间最长的任务, 那么执行时间较短的任务就必须等待执行时间长的任务执行完</span></span><br><span class="line">        <span class="keyword">for</span> (Future future:futures) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;结果: &quot;</span>+future.get());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;============main end=============&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mySleep</span><span class="params">(<span class="type">int</span> seconds)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(seconds);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompletionServiceExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Callable&lt;Integer&gt;&gt; callables = Arrays.asList(</span><br><span class="line">                    ()-&gt;&#123;</span><br><span class="line">                        mySleep(<span class="number">20</span>);</span><br><span class="line">                        System.out.println(<span class="string">&quot;=============20 end==============&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">20</span>;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    ()-&gt;&#123;</span><br><span class="line">                        mySleep(<span class="number">10</span>);</span><br><span class="line">                        System.out.println(<span class="string">&quot;=============10 end==============&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                );</span><br><span class="line">        <span class="comment">//构建 ExecutorCompletionService, 与线程池关联</span></span><br><span class="line">        <span class="type">CompletionService</span> <span class="variable">completionService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExecutorCompletionService</span>(executorService);</span><br><span class="line">        <span class="comment">//提交 Callable 任务</span></span><br><span class="line">        completionService.submit(callables.get(<span class="number">0</span>));</span><br><span class="line">        completionService.submit(callables.get(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取 future 结果, 不会阻塞</span></span><br><span class="line">        Future&lt;Integer&gt; pollFuture = completionService.poll();</span><br><span class="line">        <span class="comment">//这里因为没有执行完成的 Callable, 所以返回 null</span></span><br><span class="line">        System.out.println(pollFuture);</span><br><span class="line">        <span class="comment">//获取 future 结果, 最多等待 3 秒, 不会阻塞</span></span><br><span class="line">        Future&lt;Integer&gt; pollTimeOutFuture = completionService.poll(<span class="number">3</span>,TimeUnit.SECONDS);</span><br><span class="line">        <span class="comment">//这里因为没有执行完成的 Callable, 所以返回 null</span></span><br><span class="line">        System.out.println(pollTimeOutFuture);</span><br><span class="line">        <span class="comment">//通过 take 获取 Future 结果, 此方法会阻塞</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;callables.size();i++)&#123;</span><br><span class="line">            System.out.println(completionService.take().get());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;============main end=============&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mySleep</span><span class="params">(<span class="type">int</span> seconds)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(seconds);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="CompletionService-和-ExecutorService">CompletionService 和 ExecutorService</h2>
<table>
<thead>
<tr>
<th>特性</th>
<th>CompletionService</th>
<th>ExecutorService</th>
</tr>
</thead>
<tbody>
<tr>
<td>任务管理方式</td>
<td>提供任务完成队列，任务完成后即可获取</td>
<td>需要遍历 Future 逐个获取任务结果</td>
</tr>
<tr>
<td>结果获取顺序</td>
<td>按完成顺序返回任务结果</td>
<td>按提交顺序返回 Future 需 get()</td>
</tr>
<tr>
<td>是否自动管理任务</td>
<td>是，take()直接返回已完成任务</td>
<td>否，需手动调用 future.get()</td>
</tr>
<tr>
<td>使用场景</td>
<td>适用于并发批量任务，如 Web 爬虫、批量查询等</td>
<td>适用于简单的并行任务</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>工作技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>函数式接口</title>
    <url>/blog/2025/01/21/Java/%E5%B7%A5%E4%BD%9C%E6%8A%80%E5%B7%A7/%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<h2 id="函数式接口">函数式接口</h2>
<p>特点：有且仅有一个抽象方法的接口</p>
<p>检测是否为函数式接口：@FunctionalInterface，放在接口定义的上方，如果接口是函数式接口，编译通过，不是则编译失败</p>
<p>@FunctionalInterface是可选的，只要保证满足函数式接口定义的条件，也是函数式接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyInter</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>如果方法的参数是一个函数式接口，可以使用Lambda表达式作为参数传递</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    startThread(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;启动&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    startThread(()-&gt; System.out.println(Thread.currentThread().getName()+<span class="string">&quot;启动&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">startThread</span><span class="params">(Runnable r)</span>&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(r).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>如果方法的返回值是一个函数式接口，可以使用Lambda表达式作为结果返回</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    ArrayList&lt;String&gt;arrayList=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">    arrayList.add(<span class="string">&quot;das&quot;</span>);</span><br><span class="line">    arrayList.add(<span class="string">&quot;fdfs&quot;</span>);</span><br><span class="line">    arrayList.add(<span class="string">&quot;vcxvv&quot;</span>);</span><br><span class="line">    Collections.sort(arrayList,getComparator());</span><br><span class="line">    System.out.println(arrayList);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Comparator&lt;String&gt; <span class="title function_">getComparator</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">/* Comparator&lt;String&gt;comparator=new Comparator&lt;String&gt;() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public int compare(String o1, String o2) &#123;</span></span><br><span class="line"><span class="comment">                return o1.length()-o2.length();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;;</span></span><br><span class="line"><span class="comment">        return comparator;*/</span></span><br><span class="line">    <span class="comment">/* return new Comparator&lt;String&gt;() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public int compare(String o1, String o2) &#123;</span></span><br><span class="line"><span class="comment">                return o1.length()-o2.length();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;;*/</span></span><br><span class="line">    <span class="keyword">return</span> (s1,s2)-&gt; s1.length()-s2.length();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Comparator（比较器）">Comparator（比较器）</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Comparator</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">compare</span><span class="params">(T o1, T o2)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Comparator&lt;Person&gt; comparator = (p1, p2) -&gt; p1.firstName.compareTo(p2.firstName);</span><br><span class="line"><span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;John&quot;</span>, <span class="string">&quot;Doe&quot;</span>);</span><br><span class="line"><span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Wonderland&quot;</span>);</span><br><span class="line">comparator.compare(p1, p2);             <span class="comment">// &gt; 0</span></span><br><span class="line">comparator.reversed().compare(p1, p2);  <span class="comment">// &lt; 0</span></span><br></pre></td></tr></table></figure>
<h2 id="Supplier（供应）">Supplier（供应）</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Supplier</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">// 获取结果</span></span><br><span class="line">    T <span class="title function_">get</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> getString(() -&gt; <span class="string">&quot;da&quot;</span>);</span><br><span class="line">    System.out.println(s);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> getInteger(() -&gt; <span class="number">123</span>);</span><br><span class="line">    System.out.println(integer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getString</span><span class="params">(Supplier&lt;String&gt; supplier)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> supplier.get();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Integer <span class="title function_">getInteger</span><span class="params">(Supplier&lt;Integer&gt; supplier)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> supplier.get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Consumer（消费）">Consumer（消费）</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Consumer</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">// 对给定的参数执行此操作</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(T t)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 返回一个组合的Consumer，依次执行此操作，然后执行after操作</span></span><br><span class="line">	<span class="keyword">default</span> Consumer&lt;T&gt; <span class="title function_">andThen</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> T&gt; after)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(after);</span><br><span class="line">        <span class="keyword">return</span> (T t) -&gt; &#123; accept(t); after.accept(t); &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    operatorString(<span class="string">&quot;da&quot;</span>, s-&gt; System.out.println(s));</span><br><span class="line">    operatorString(<span class="string">&quot;da&quot;</span>, System.out::println);</span><br><span class="line">    System.out.println(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line">    operatorString(<span class="string">&quot;da&quot;</span>, s-&gt; System.out.println(s), s-&gt; System.out.println(<span class="keyword">new</span> <span class="title class_">StringBuilder</span>(s).reverse().toString()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">operatorString</span><span class="params">(String s, Consumer&lt;String&gt;consumer)</span> &#123;</span><br><span class="line">    consumer.accept(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">operatorString</span><span class="params">(String s, Consumer&lt;String&gt;consumer, Consumer&lt;String&gt;consumer1)</span> &#123;</span><br><span class="line">    <span class="comment">// consumer.accept(s);</span></span><br><span class="line">    <span class="comment">// consumer1.accept(s);</span></span><br><span class="line">    <span class="comment">// 等于下面的操作</span></span><br><span class="line">    consumer.andThen(consumer1).accept(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Predicate（断言）">Predicate（断言）</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Predicate</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">// 对给定的参数进行判断（判断逻辑由Lambda表达式实现），返回一个布尔值</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(T t)</span>;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">// 返回一个组合判断，对应短路与</span></span><br><span class="line">    <span class="keyword">default</span> Predicate&lt;T&gt; <span class="title function_">and</span><span class="params">(Predicate&lt;? <span class="built_in">super</span> T&gt; other)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(other);</span><br><span class="line">        <span class="keyword">return</span> (t) -&gt; test(t) &amp;&amp; other.test(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回一个逻辑的否定，对应逻辑非</span></span><br><span class="line">    <span class="keyword">default</span> Predicate&lt;T&gt; <span class="title function_">negate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (t) -&gt; !test(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回一个组合判断，对应短路或</span></span><br><span class="line">    <span class="keyword">default</span> Predicate&lt;T&gt; <span class="title function_">or</span><span class="params">(Predicate&lt;? <span class="built_in">super</span> T&gt; other)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(other);</span><br><span class="line">        <span class="keyword">return</span> (t) -&gt; test(t) || other.test(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; Predicate&lt;T&gt; <span class="title function_">isEqual</span><span class="params">(Object targetRef)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="literal">null</span> == targetRef)</span><br><span class="line">                ? Objects::isNull</span><br><span class="line">                : object -&gt; targetRef.equals(object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">     <span class="type">boolean</span> <span class="variable">cxz</span> <span class="operator">=</span> checkString(<span class="string">&quot;cxz&quot;</span>, s -&gt; s.length() &gt; <span class="number">8</span>);</span><br><span class="line">     System.out.println(cxz);</span><br><span class="line">     <span class="type">boolean</span> <span class="variable">ccxz</span> <span class="operator">=</span> checkString(<span class="string">&quot;ccxz&quot;</span>, s -&gt; s.length() &gt; <span class="number">3</span>, s -&gt; s.length() &lt; <span class="number">11</span>);</span><br><span class="line">     System.out.println(ccxz);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">checkString</span><span class="params">(String s, Predicate&lt;String&gt;predicate)</span>&#123;</span><br><span class="line">    <span class="comment">//return predicate.test(s);</span></span><br><span class="line">    <span class="keyword">return</span> predicate.negate().test(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">checkString</span><span class="params">(String s, Predicate&lt;String&gt; predicate, Predicate&lt;String&gt; predicate1)</span>&#123;</span><br><span class="line">    <span class="comment">/*boolean test = predicate.test(s);</span></span><br><span class="line"><span class="comment">        boolean test1 = predicate1.test(s);</span></span><br><span class="line"><span class="comment">        return test&amp;&amp;test1;*/</span></span><br><span class="line">    <span class="comment">//return predicate.and(predicate1).test(s);</span></span><br><span class="line">    <span class="keyword">return</span> predicate.or(predicate1).test(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Function（功能）">Function（功能）</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Function</span>&lt;T, R&gt; &#123;</span><br><span class="line">    R <span class="title function_">apply</span><span class="params">(T t)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> &lt;V&gt; Function&lt;V, R&gt; <span class="title function_">compose</span><span class="params">(Function&lt;? <span class="built_in">super</span> V, ? extends T&gt; before)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(before);</span><br><span class="line">        <span class="keyword">return</span> (V v) -&gt; apply(before.apply(v));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> &lt;V&gt; Function&lt;T, V&gt; <span class="title function_">andThen</span><span class="params">(Function&lt;? <span class="built_in">super</span> R, ? extends V&gt; after)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(after);</span><br><span class="line">        <span class="keyword">return</span> (T t) -&gt; after.apply(apply(t));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; Function&lt;T, T&gt; <span class="title function_">identity</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> t -&gt; t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    convert(<span class="string">&quot;100&quot;</span>, s-&gt; Integer.parseInt(s));</span><br><span class="line">    convert(<span class="string">&quot;100&quot;</span>, Integer::parseInt);</span><br><span class="line">    convert(<span class="number">100</span>, i-&gt; String.valueOf(i+<span class="number">100</span>));</span><br><span class="line">    convert(<span class="string">&quot;100&quot;</span>, s-&gt; Integer.parseInt(s), s-&gt; String.valueOf(s+<span class="number">100</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">convert</span><span class="params">(String s, Function&lt;String,Integer&gt; function)</span> &#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">apply</span> <span class="operator">=</span> function.apply(s);</span><br><span class="line">    System.out.println(apply);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">convert</span><span class="params">(<span class="type">int</span> i, Function&lt;Integer,String&gt; function)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">apply</span> <span class="operator">=</span> function.apply(i);</span><br><span class="line">    System.out.println(apply);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">convert</span><span class="params">(String s, Function&lt;String,Integer&gt; function, Function&lt;Integer,String&gt; function1)</span> &#123;</span><br><span class="line">    <span class="comment">// Integer apply = function.apply(s);</span></span><br><span class="line">    <span class="comment">// String apply1 = function1.apply(apply);</span></span><br><span class="line">    <span class="comment">// System.out.println(apply1);</span></span><br><span class="line">    <span class="comment">// 等于下面的操作</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">apply</span> <span class="operator">=</span> function.andThen(function1).apply(s);</span><br><span class="line">    System.out.println(apply);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>工作技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>异步多线程CompletableFuture</title>
    <url>/blog/2025/04/10/Java/%E5%B7%A5%E4%BD%9C%E6%8A%80%E5%B7%A7/%E5%BC%82%E6%AD%A5%E5%A4%9A%E7%BA%BF%E7%A8%8BCompletableFuture/</url>
    <content><![CDATA[<h2 id="任务开启">任务开启</h2>
<h3 id="runAsync-和-supplyAsync">runAsync 和 supplyAsync</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;Void&gt; <span class="title function_">runAsync</span><span class="params">(Runnable runnable)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;Void&gt; <span class="title function_">runAsync</span><span class="params">(Runnable runnable, Executor executor)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="title function_">supplyAsync</span><span class="params">(Supplier&lt;U&gt; supplier)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="title function_">supplyAsync</span><span class="params">(Supplier&lt;U&gt; supplier, Executor executor)</span>;</span><br></pre></td></tr></table></figure>
<ol>
<li>runAsync 不支持返回值</li>
<li>supplyAsync 支持返回值</li>
</ol>
<p>注意：没有指定 Executor 的方法会使用 ForkJoinPool.commonPool()作为它的线程池执行异步代码，如果指定线程池，则使用指定的线程池运行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//无返回值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">runAsync</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    CompletableFuture&lt;Void&gt; future = CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;run end ...&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    future.get();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有返回值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">supplyAsync</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;         </span><br><span class="line">    CompletableFuture&lt;Long&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;run end ...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> System.currentTimeMillis();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> future.get();</span><br><span class="line">    System.out.println(<span class="string">&quot;time = &quot;</span>+time);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="串行任务">串行任务</h2>
<h3 id="thenAccept-和-thenAcceptAsync">thenAccept 和 thenAcceptAsync</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> CompletionStage&lt;Void&gt; <span class="title function_">thenAccept</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> T&gt; action)</span>;</span><br><span class="line"><span class="keyword">public</span> CompletionStage&lt;Void&gt; <span class="title function_">thenAcceptAsync</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> T&gt; action)</span>;</span><br><span class="line"><span class="keyword">public</span> CompletionStage&lt;Void&gt; <span class="title function_">thenAcceptAsync</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> T&gt; action,Executor executor)</span>;</span><br></pre></td></tr></table></figure>
<p>接收任务的处理结果并消费处理，无返回结果</p>
<ol>
<li>thenAccept：使用主线程或者执行上一步任务的线程，串行执行任务。将上一步任务执行的【结果】作为当前任务方法执行时的【参数】，执行指定的函数，并且当前任务方法执行结束后，没有返回值。</li>
<li>thenAcceptAsync：串行执行任务，将上一步任务执行的【结果】作为当前任务方法执行时的【参数】，然后从公共的 commonPool 线程池中获取一个子线程，执行指定的函数，并且该任务方法执行结束后，没有返回值。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">thenAccept</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    CompletableFuture&lt;Void&gt; future = CompletableFuture.supplyAsync(<span class="keyword">new</span> <span class="title class_">Supplier</span>&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Integer <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).thenAccept(integer -&gt; &#123;</span><br><span class="line">        System.out.println(integer);</span><br><span class="line">    &#125;);</span><br><span class="line">    future.get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="thenRun-和-thenRunAsync">thenRun 和 thenRunAsync</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> CompletionStage&lt;Void&gt; <span class="title function_">thenRun</span><span class="params">(Runnable action)</span>;</span><br><span class="line"><span class="keyword">public</span> CompletionStage&lt;Void&gt; <span class="title function_">thenRunAsync</span><span class="params">(Runnable action)</span>;</span><br><span class="line"><span class="keyword">public</span> CompletionStage&lt;Void&gt; <span class="title function_">thenRunAsync</span><span class="params">(Runnable action,Executor executor)</span>;</span><br></pre></td></tr></table></figure>
<p>跟 thenAccept 不一样的是，不关心任务的处理结果，只要上面的任务执行完成，就开始执行 thenAccept</p>
<ol>
<li>thenRun：使用主线程或者执行上一步任务的子线程，串行执行任务，并且该任务方法执行结束后，没有返回值。</li>
<li>thenRunAsync：串行执行任务，从公共的 commonPool 线程池中获取一个子线程，执行指定的代码逻辑，并且该任务方法执行结束后，没有返回值。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">thenRun</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    CompletableFuture&lt;Void&gt; future = CompletableFuture.supplyAsync(<span class="keyword">new</span> <span class="title class_">Supplier</span>&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Integer <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).thenRun(() -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;thenRun ...&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    future.get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="thenApply-和-thenApplyAsync">thenApply 和 thenApplyAsync</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="title function_">thenApply</span><span class="params">(Function&lt;? <span class="built_in">super</span> T,? extends U&gt; fn)</span>;</span><br><span class="line"><span class="keyword">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="title function_">thenApplyAsync</span><span class="params">(Function&lt;? <span class="built_in">super</span> T,? extends U&gt; fn)</span>;</span><br><span class="line"><span class="keyword">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="title function_">thenApplyAsync</span><span class="params">(Function&lt;? <span class="built_in">super</span> T,? extends U&gt; fn, Executor executor)</span>;</span><br></pre></td></tr></table></figure>
<p>当一个线程依赖另一个线程时，可以使用 thenApply 来把这两个线程串行化</p>
<ul>
<li>T：上一个任务返回结果的类型</li>
<li>U：当前任务的返回值类型</li>
</ul>
<ol>
<li>thenApply：使用主线程或者执行上一步任务的线程，串行执行任务。将上一步任务执行的【结果】作为当前任务方法执行时的【参数】，执行指定的函数，并且该任务方法执行结束后，将返回指定类型结果。</li>
<li>thenApplyAsync：串行执行任务，将上一步任务执行的【结果】作为当前任务方法执行时的【参数】，然后从公共的 commonPool 线程池中获取一个子线程，执行指定的函数，并且该任务方法执行结束后，将返回指定类型结果。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">thenApply</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    CompletableFuture&lt;Long&gt; future = CompletableFuture.supplyAsync(<span class="keyword">new</span> <span class="title class_">Supplier</span>&lt;Long&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Long <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">100</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;result1=&quot;</span>+result);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).thenApply(<span class="keyword">new</span> <span class="title class_">Function</span>&lt;Long, Long&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Long <span class="title function_">apply</span><span class="params">(Long t)</span> &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">result</span> <span class="operator">=</span> t*<span class="number">5</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;result2=&quot;</span>+result);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="type">long</span> <span class="variable">result</span> <span class="operator">=</span> future.get();</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="handle-和-handleAsync">handle 和 handleAsync</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;U&gt; CompletionStage&lt;U&gt; <span class="title function_">handle</span><span class="params">(BiFunction&lt;? <span class="built_in">super</span> T, Throwable, ? extends U&gt; fn)</span>;</span><br><span class="line"><span class="keyword">public</span> &lt;U&gt; CompletionStage&lt;U&gt; <span class="title function_">handleAsync</span><span class="params">(BiFunction&lt;? <span class="built_in">super</span> T, Throwable, ? extends U&gt; fn)</span>;</span><br><span class="line"><span class="keyword">public</span> &lt;U&gt; CompletionStage&lt;U&gt; <span class="title function_">handleAsync</span><span class="params">(BiFunction&lt;? <span class="built_in">super</span> T, Throwable, ? extends U&gt; fn,Executor executor)</span>;</span><br></pre></td></tr></table></figure>
<p>handle 是执行任务完成时对结果的处理，和 thenApply 处理方式基本一样。不同的是 handle 是在任务完成后再执行，还可以处理异常的任务，thenApply 只可以执行正常的任务，任务出现异常则不执行</p>
<ol>
<li>handle：使用主线程或者执行上一步任务的线程，串行执行任务。将上一步任务执行的【结果】和【异常】作为当前任务方法执行时的【参数】，执行指定的函数。并且该任务方法执行结束后，将返回指定类型结果。</li>
<li>handleAsync：串行执行任务，将上一步任务执行的【结果】和【异常】作为当前任务方法执行时的【参数】，然后从公共的 commonPool 线程池中获取一个子线程，执行指定的函数。并且该任务方法执行结束后，将返回指定类型结果。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    CompletableFuture&lt;Integer&gt; future = CompletableFuture.supplyAsync(<span class="keyword">new</span> <span class="title class_">Supplier</span>&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Integer <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">int</span> i= <span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).handle(<span class="keyword">new</span> <span class="title class_">BiFunction</span>&lt;Integer, Throwable, Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Integer <span class="title function_">apply</span><span class="params">(Integer param, Throwable throwable)</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(throwable==<span class="literal">null</span>)&#123;</span><br><span class="line">                result = param * <span class="number">2</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(throwable.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;);</span><br><span class="line">    System.out.println(future.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="whenComplete-和-whenCompleteAsync">whenComplete 和 whenCompleteAsync</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> CompletableFuture&lt;T&gt; <span class="title function_">whenComplete</span><span class="params">(BiConsumer&lt;? <span class="built_in">super</span> T,? <span class="built_in">super</span> Throwable&gt; action)</span>;</span><br><span class="line"><span class="keyword">public</span> CompletableFuture&lt;T&gt; <span class="title function_">whenCompleteAsync</span><span class="params">(BiConsumer&lt;? <span class="built_in">super</span> T,? <span class="built_in">super</span> Throwable&gt; action)</span>;</span><br><span class="line"><span class="keyword">public</span> CompletableFuture&lt;T&gt; <span class="title function_">whenCompleteAsync</span><span class="params">(BiConsumer&lt;? <span class="built_in">super</span> T,? <span class="built_in">super</span> Throwable&gt; action, Executor executor)</span>;</span><br></pre></td></tr></table></figure>
<p>当 CompletableFuture 的计算结果完成，或者抛出异常的时候，可以执行特定的 action</p>
<ol>
<li>whenComplete：使用主线程或者执行上一步任务的线程，串行执行任务。将上一步任务执行的【结果】和【异常】作为当前任务方法执行时的【参数】，执行指定函数。并且当前任务执行结束后，没有返回值。</li>
<li>whenCompleteAsync：串行执行任务，将上一步任务执行的【结果】和【异常】作为当前任务方法执行时的【参数】，然后从公共的 commonPool 线程池中获取一个子线程，执行指定的函数。并且该任务方法执行结束后，没有返回值。</li>
</ol>
<ul>
<li>如果上一阶段中正常执行结束，则该方法的结果参数不为 null；</li>
<li>如果上一阶段中抛出异常，则该方法的异常参数不为 null；</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">whenComplete</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    CompletableFuture&lt;Void&gt; future = CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt()%<span class="number">2</span>&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">12</span>/<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;run end ...&quot;</span>);</span><br><span class="line">    &#125;).whenComplete(<span class="keyword">new</span> <span class="title class_">BiConsumer</span>&lt;Void, Throwable&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Void t, Throwable action)</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;执行完成！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="thenCompose-和-thenComposeAsync">thenCompose 和 thenComposeAsync</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="title function_">thenCompose</span><span class="params">(Function&lt;? <span class="built_in">super</span> T, ? extends CompletionStage&lt;U&gt;&gt; fn)</span>;</span><br><span class="line"><span class="keyword">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="title function_">thenComposeAsync</span><span class="params">(Function&lt;? <span class="built_in">super</span> T, ? extends CompletionStage&lt;U&gt;&gt; fn)</span>;</span><br><span class="line"><span class="keyword">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="title function_">thenComposeAsync</span><span class="params">(Function&lt;? <span class="built_in">super</span> T, ? extends CompletionStage&lt;U&gt;&gt; fn, Executor executor)</span>;</span><br></pre></td></tr></table></figure>
<p>允许对两个 CompletionStage 进行流水线操作，第一个操作完成时，将其结果作为参数传递给第二个操作</p>
<ol>
<li>thenCompose：使用主线程或者执行上一步任务的线程，串行执行任务。按顺序组合两个有依赖关系的任务，将上一步任务执行的【结果】作为当前任务方法执行时的【参数】，执行指定的函数。并且该任务方法完成后，将返回并执行一个新的任务。</li>
<li>thenComposeAsync：串行执行任务，按顺序组合俩个有依赖关系的任务，将上一步任务执行的【结果】作为当前任务方法执行时的【参数】，然后从公共的 commonPool 线程池中获取一个子线程，执行指定的函数，并且该任务方法完成后，将返回并执行一个新的任务。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">thenCompose</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    CompletableFuture&lt;Integer&gt; f = CompletableFuture.supplyAsync(<span class="keyword">new</span> <span class="title class_">Supplier</span>&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Integer <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">3</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;t1=&quot;</span>+t);</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).thenCompose(<span class="keyword">new</span> <span class="title class_">Function</span>&lt;Integer, CompletionStage&lt;Integer&gt;&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> CompletionStage&lt;Integer&gt; <span class="title function_">apply</span><span class="params">(Integer param)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> CompletableFuture.supplyAsync(<span class="keyword">new</span> <span class="title class_">Supplier</span>&lt;Integer&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> Integer <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> param *<span class="number">2</span>;</span><br><span class="line">                    System.out.println(<span class="string">&quot;t2=&quot;</span>+t);</span><br><span class="line">                    <span class="keyword">return</span> t;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    System.out.println(<span class="string">&quot;thenCompose result : &quot;</span>+f.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="并行任务">并行任务</h2>
<h3 id="thenCombine-和-thenCombineAsync">thenCombine 和 thenCombineAsync</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;U,V&gt; CompletionStage&lt;V&gt; <span class="title function_">thenCombine</span><span class="params">(CompletionStage&lt;? extends U&gt; other,BiFunction&lt;? <span class="built_in">super</span> T,? <span class="built_in">super</span> U,? extends V&gt; fn)</span>;</span><br><span class="line"><span class="keyword">public</span> &lt;U,V&gt; CompletionStage&lt;V&gt; <span class="title function_">thenCombineAsync</span><span class="params">(CompletionStage&lt;? extends U&gt; other,BiFunction&lt;? <span class="built_in">super</span> T,? <span class="built_in">super</span> U,? extends V&gt; fn)</span>;</span><br><span class="line"><span class="keyword">public</span> &lt;U,V&gt; CompletionStage&lt;V&gt; <span class="title function_">thenCombineAsync</span><span class="params">(CompletionStage&lt;? extends U&gt; other,BiFunction&lt;? <span class="built_in">super</span> T,? <span class="built_in">super</span> U,? extends V&gt; fn,Executor executor)</span>;</span><br></pre></td></tr></table></figure>
<p>thenCombine 会把两个 CompletionStage 的任务都执行任务后，把两个任务的结果一块交给 thenCombine 来处理</p>
<ol>
<li>thenCombine：并行执行任务，从 commonPool 线程池中获取线程，并行执行两个任务，等到两个任务都执行结束后，执行一个新的任务方法，将之前两个任务的执行【结果】作为新任务方法的【参数】，然后返回并执行新任务。新任务执行结束后，将返回指定类型结果。</li>
<li>thenCombineAsync：并行执行任务，从公共的 commonPool 线程池中获取线程，并行执行两个任务，等到两个任务都执行结束后，继续从公共的 commonPool 线程池中获取一个子线程，执行一个新的任务方法，将之前两个任务的执行【结果】作为新任务方法的【参数】，然后返回并执行新任务。新任务执行结束后，将返回指定类型结果。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">thenCombine</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    CompletableFuture&lt;String&gt; future1 = CompletableFuture.supplyAsync(<span class="keyword">new</span> <span class="title class_">Supplier</span>&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    CompletableFuture&lt;String&gt; future2 = CompletableFuture.supplyAsync(<span class="keyword">new</span> <span class="title class_">Supplier</span>&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    CompletableFuture&lt;String&gt; result = future1.thenCombine(future2, <span class="keyword">new</span> <span class="title class_">BiFunction</span>&lt;String, String, String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">apply</span><span class="params">(String t, String u)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> t+<span class="string">&quot; &quot;</span>+u;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    System.out.println(result.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="thenAcceptBoth-和-thenAcceptBothAsync">thenAcceptBoth 和 thenAcceptBothAsync</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;U&gt; CompletionStage&lt;Void&gt; <span class="title function_">thenAcceptBoth</span><span class="params">(CompletionStage&lt;? extends U&gt; other,BiConsumer&lt;? <span class="built_in">super</span> T, ? <span class="built_in">super</span> U&gt; action)</span>;</span><br><span class="line"><span class="keyword">public</span> &lt;U&gt; CompletionStage&lt;Void&gt; <span class="title function_">thenAcceptBothAsync</span><span class="params">(CompletionStage&lt;? extends U&gt; other,BiConsumer&lt;? <span class="built_in">super</span> T, ? <span class="built_in">super</span> U&gt; action)</span>;</span><br><span class="line"><span class="keyword">public</span> &lt;U&gt; CompletionStage&lt;Void&gt; <span class="title function_">thenAcceptBothAsync</span><span class="params">(CompletionStage&lt;? extends U&gt; other,BiConsumer&lt;? <span class="built_in">super</span> T, ? <span class="built_in">super</span> U&gt; action,Executor executor)</span>;</span><br></pre></td></tr></table></figure>
<p>当两个 CompletionStage 都执行完成后，把结果一块交给 thenAcceptBoth 来进行消耗</p>
<ol>
<li>thenAcceptBoth：并行执行任务，从公共的 commonPool 线程池中获取线程，并行执行两个任务，等到两个任务都执行结束后，执行一个新的任务方法，将之前两个任务的执行【结果】作为新任务方法的【参数】，然后返回并执行新任务。新任务执行结束后，没有返回值。</li>
<li>thenAcceptBothAsync：并行执行任务，从公共的 commonPool 线程池中获取线程，并行执行两个任务，等到两个任务都执行结束后，继续从公共的 commonPool 线程池中获取一个子线程，执行一个新的任务方法，将之前两个任务的执行【结果】作为新任务方法的【参数】，然后返回并执行新任务。新任务执行结束后，没有返回值。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">thenAcceptBoth</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    CompletableFuture&lt;Integer&gt; f1 = CompletableFuture.supplyAsync(<span class="keyword">new</span> <span class="title class_">Supplier</span>&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Integer <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">3</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(t);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;f1=&quot;</span>+t);</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    CompletableFuture&lt;Integer&gt; f2 = CompletableFuture.supplyAsync(<span class="keyword">new</span> <span class="title class_">Supplier</span>&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Integer <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">3</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(t);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;f2=&quot;</span>+t);</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    f1.thenAcceptBoth(f2, <span class="keyword">new</span> <span class="title class_">BiConsumer</span>&lt;Integer, Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Integer t, Integer u)</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;f1=&quot;</span>+t+<span class="string">&quot;;f2=&quot;</span>+u+<span class="string">&quot;;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="runAfterBoth-和-runAfterBothAsync">runAfterBoth 和 runAfterBothAsync</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> CompletionStage&lt;Void&gt; <span class="title function_">runAfterBoth</span><span class="params">(CompletionStage&lt;?&gt; other,Runnable action)</span>;</span><br><span class="line"><span class="keyword">public</span> CompletionStage&lt;Void&gt; <span class="title function_">runAfterBothAsync</span><span class="params">(CompletionStage&lt;?&gt; other,Runnable action)</span>;</span><br><span class="line"><span class="keyword">public</span> CompletionStage&lt;Void&gt; <span class="title function_">runAfterBothAsync</span><span class="params">(CompletionStage&lt;?&gt; other,Runnable action,Executor executor)</span>;</span><br></pre></td></tr></table></figure>
<p>两个 CompletionStage 都完成了计算才会执行下一步的操作（Runnable）</p>
<ol>
<li>runAfterBoth：并行执行任务，从公共的 commonPool 线程池中获取线程，并行执行两个任务，等到两个任务都执行结束后，执行一个新的任务方法，该方法执行结束后将返回并执行一个新任务。新任务方法执行结束后，没有返回值。</li>
<li>runAfterBothAsync：并行执行任务，从公共的 commonPool 线程池中获取线程，并行执行两个任务，等到两个任务都执行结束后，继续从 commonPool 线程池中获取一个子线程，执行一个新的任务方法，该方法执行结束后将返回并执行一个新任务。新任务执行结束后，没有返回值。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">runAfterBoth</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    CompletableFuture&lt;Integer&gt; f1 = CompletableFuture.supplyAsync(<span class="keyword">new</span> <span class="title class_">Supplier</span>&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Integer <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">3</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(t);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;f1=&quot;</span>+t);</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    CompletableFuture&lt;Integer&gt; f2 = CompletableFuture.supplyAsync(<span class="keyword">new</span> <span class="title class_">Supplier</span>&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Integer <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">3</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(t);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;f2=&quot;</span>+t);</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    f1.runAfterBoth(f2, <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;上面两个任务都执行完成了。&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="applyToEither-和-applyToEitherAsync">applyToEither 和 applyToEitherAsync</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;U&gt; CompletionStage&lt;U&gt; <span class="title function_">applyToEither</span><span class="params">(CompletionStage&lt;? extends T&gt; other,Function&lt;? <span class="built_in">super</span> T, U&gt; fn)</span>;</span><br><span class="line"><span class="keyword">public</span> &lt;U&gt; CompletionStage&lt;U&gt; <span class="title function_">applyToEitherAsync</span><span class="params">(CompletionStage&lt;? extends T&gt; other,Function&lt;? <span class="built_in">super</span> T, U&gt; fn)</span>;</span><br><span class="line"><span class="keyword">public</span> &lt;U&gt; CompletionStage&lt;U&gt; <span class="title function_">applyToEitherAsync</span><span class="params">(CompletionStage&lt;? extends T&gt; other,Function&lt;? <span class="built_in">super</span> T, U&gt; fn,Executor executor)</span>;</span><br></pre></td></tr></table></figure>
<p>两个 CompletonStage 谁执行返回的结果快，就用那个 CompletionStage 的结果进行下一步的转化操作</p>
<ol>
<li>applyToEither：并行执行任务，从公共的 commonPool 线程池中获取线程，并行执行两个任务，两个任务任意一个执行结束后，执行一个新的任务方法，将之前两个任务的执行【结果】作为新任务方法的【参数】，然后返回并执行新任务。新任务执行结束后，没有返回值。</li>
<li>applyToEitherAsync：并行执行任务，从公共的 commonPool 线程池中获取线程，并行执行两个任务，两个任务任意一个执行结束后，继续从 commonPool 线程池中获取一个子线程，执行一个新的任务方法，将之前先执行结束的任务的执行【结果】作为新任务方法的【参数】，然后返回并执行新任务。新任务执行结束后，没有返回值。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">applyToEither</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    CompletableFuture&lt;Integer&gt; f1 = CompletableFuture.supplyAsync(<span class="keyword">new</span> <span class="title class_">Supplier</span>&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Integer <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">3</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(t);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;f1=&quot;</span>+t);</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    CompletableFuture&lt;Integer&gt; f2 = CompletableFuture.supplyAsync(<span class="keyword">new</span> <span class="title class_">Supplier</span>&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Integer <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">3</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(t);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;f2=&quot;</span>+t);</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    CompletableFuture&lt;Integer&gt; result = f1.applyToEither(f2, <span class="keyword">new</span> <span class="title class_">Function</span>&lt;Integer, Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Integer <span class="title function_">apply</span><span class="params">(Integer t)</span> &#123;</span><br><span class="line">            System.out.println(t);</span><br><span class="line">            <span class="keyword">return</span> t * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    System.out.println(result.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="runAfterEither-和-runAfterEitherAsync">runAfterEither 和 runAfterEitherAsync</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> CompletionStage&lt;Void&gt; <span class="title function_">runAfterEither</span><span class="params">(CompletionStage&lt;?&gt; other,Runnable action)</span>;</span><br><span class="line"><span class="keyword">public</span> CompletionStage&lt;Void&gt; <span class="title function_">runAfterEitherAsync</span><span class="params">(CompletionStage&lt;?&gt; other,Runnable action)</span>;</span><br><span class="line"><span class="keyword">public</span> CompletionStage&lt;Void&gt; <span class="title function_">runAfterEitherAsync</span><span class="params">(CompletionStage&lt;?&gt; other,Runnable action,Executor executor)</span>;</span><br></pre></td></tr></table></figure>
<p>两个 CompletionStage 任何一个完成了都会执行下一步的操作（Runnable）</p>
<ol>
<li>runAfterEither：并行执行任务，从公共的 commonPool 线程池中获取线程，并行执行两个任务，两个任务任意一个执行结束后，执行一个新的任务方法，该方法执行结束后将返回并执行一个新任务。新任务执行结束后，没有返回值。</li>
<li>runAfterEitherAsync：并行执行任务，从公共的 commonPool 线程池中获取线程，并行执行两个任务，两个任务任意一个执行结束后，继续从 commonPool 线程池中获取一个子线程，执行一个新的任务方法，该方法执行结束后将返回并执行一个新任务。新任务执行结束后，没有返回值。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">runAfterEither</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    CompletableFuture&lt;Integer&gt; f1 = CompletableFuture.supplyAsync(<span class="keyword">new</span> <span class="title class_">Supplier</span>&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Integer <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">3</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(t);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;f1=&quot;</span>+t);</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);    </span><br><span class="line">    CompletableFuture&lt;Integer&gt; f2 = CompletableFuture.supplyAsync(<span class="keyword">new</span> <span class="title class_">Supplier</span>&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Integer <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">3</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(t);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;f2=&quot;</span>+t);</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    f1.runAfterEither(f2, <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;上面有一个已经完成了。&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="acceptEither-和-acceptEitherAsync">acceptEither 和 acceptEitherAsync</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> CompletionStage&lt;Void&gt; <span class="title function_">acceptEither</span><span class="params">(CompletionStage&lt;? extends T&gt; other,Consumer&lt;? <span class="built_in">super</span> T&gt; action)</span>;</span><br><span class="line"><span class="keyword">public</span> CompletionStage&lt;Void&gt; <span class="title function_">acceptEitherAsync</span><span class="params">(CompletionStage&lt;? extends T&gt; other,Consumer&lt;? <span class="built_in">super</span> T&gt; action)</span>;</span><br><span class="line"><span class="keyword">public</span> CompletionStage&lt;Void&gt; <span class="title function_">acceptEitherAsync</span><span class="params">(CompletionStage&lt;? extends T&gt; other,Consumer&lt;? <span class="built_in">super</span> T&gt; action,Executor executor)</span>;</span><br></pre></td></tr></table></figure>
<p>两个 CompletionStage 谁执行返回的结果快，就用那个 CompletionStage 的结果进行下一步的消耗操作</p>
<ol>
<li>AcceptEither：并行执行任务，从公共的 commonPool 线程池中获取线程，并行执行两个任务，两个任务任意一个执行结束后，执行一个新的任务方法，将之前两个任务的执行【结果】作为新任务方法的【参数】，然后返回并执行新任务。新任务执行结束后，没有返回值。</li>
<li>AcceptEitherAsync：并行执行任务，从公共的 commonPool 线程池中获取线程，并行执行两个任务，两个任务任意一个执行结束后，继续从公共的 commonPool 线程池中获取一个子线程，执行一个新的任务方法，将之前两个任务的执行【结果】作为新任务方法的【参数】，然后返回并执行新任务。新任务执行结束后，没有返回值。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">acceptEither</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    CompletableFuture&lt;Integer&gt; f1 = CompletableFuture.supplyAsync(<span class="keyword">new</span> <span class="title class_">Supplier</span>&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Integer <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">3</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(t);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;f1=&quot;</span>+t);</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;); </span><br><span class="line">    CompletableFuture&lt;Integer&gt; f2 = CompletableFuture.supplyAsync(<span class="keyword">new</span> <span class="title class_">Supplier</span>&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Integer <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">3</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(t);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;f2=&quot;</span>+t);</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    f1.acceptEither(f2, <span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Integer t)</span> &#123;</span><br><span class="line">            System.out.println(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="allOf">allOf</h3>
<p>并行执行任务，从公共的 commonPool 线程池中获取线程，并行执行多个任务方法，等待全部任务方法都执行完成后结束。任务执行结束后，没有返回值。</p>
<p>注意：如果传入的 CompletableFuture &lt;?&gt; 中的其中一个阶段异常完成时，那么返回的 CompletableFuture &lt; Void &gt; 也异常完成，并将此异常作为异常原因</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">allOf</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 创建聚合数据的 Map 集合</span></span><br><span class="line">    Map&lt;String, String&gt; userMap = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建待执行的 Runnable 参数</span></span><br><span class="line">    <span class="type">Runnable</span> <span class="variable">runnable1</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;任务1-成功获取用户基本信息&quot;</span>);</span><br><span class="line">        userMap.put(<span class="string">&quot;userInfo&quot;</span>, <span class="string">&quot;&#123;name: mydlq, age: 18&#125;&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">Runnable</span> <span class="variable">runnable2</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;任务2-成功获取用户头像&quot;</span>);</span><br><span class="line">        userMap.put(<span class="string">&quot;avatar&quot;</span>, <span class="string">&quot;http://www.xxx.com/avatar&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">Runnable</span> <span class="variable">runnable3</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;任务3-成功获取用户余额&quot;</span>);</span><br><span class="line">        userMap.put(<span class="string">&quot;balance&quot;</span>, <span class="string">&quot;1000&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行多个 CompletableFuture，需要等待全部完成</span></span><br><span class="line">    CompletableFuture&lt;Void&gt; cf = CompletableFuture.allOf(</span><br><span class="line">            CompletableFuture.runAsync(runnable1),</span><br><span class="line">            CompletableFuture.runAsync(runnable2),</span><br><span class="line">            CompletableFuture.runAsync(runnable3)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 进入堵塞状态，等待执行完成</span></span><br><span class="line">    cf.join();</span><br><span class="line">    <span class="comment">// 输出用户信息</span></span><br><span class="line">    System.out.println(<span class="string">&quot;获取的用户信息:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : userMap.entrySet()) &#123;</span><br><span class="line">        System.out.println(entry.getKey() + <span class="string">&quot;: &quot;</span> + entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="anyOf">anyOf</h3>
<p>并行执行任务，从公共的 commonPool 线程池中获取线程，并行执行多个任务方法，等待多个任务方法中任意一个执行完成后结束。任务执行结束后，返回第一个先执行完成任务的返回值。</p>
<p>注意：如果传入的全部 CompletableFuture &lt;?&gt; 阶段都没有完成前，任意一个阶段执行过程出现异常并没有处理，那么返回的 CompletableFuture &lt; Object &gt; 也异常完成，并将此异常作为异常原因</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">anyOf</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    Supplier&lt;String&gt; supplier1 = () -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;通道1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;通道1-成功获取信息&quot;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    Supplier&lt;String&gt; supplier2 = () -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;通道2&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;通道2-成功获取信息&quot;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    Supplier&lt;String&gt; supplier3 = () -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;通道3&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;通道3-成功获取信息&quot;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行多个 CompletableFuture，只要任意一个执行完成就执行下一步</span></span><br><span class="line">    CompletableFuture&lt;Object&gt; cf = CompletableFuture.anyOf(</span><br><span class="line">            CompletableFuture.supplyAsync(supplier1),</span><br><span class="line">            CompletableFuture.supplyAsync(supplier2),</span><br><span class="line">            CompletableFuture.supplyAsync(supplier3)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 进入堵塞状态，等待执行完成，输出获取的信息</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> cf.join();</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="任务结束">任务结束</h2>
<h3 id="get">get</h3>
<p>获取任务执行结果，如果任务尚未完成则进行堵塞状态，如果任务正常完成则返回执行结果，如果异常完成或执行过程中引发异常，这时就会抛出（运行时）异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">    <span class="comment">// 执行 CompletableFuture 任务</span></span><br><span class="line">    CompletableFuture&lt;String&gt; cf = CompletableFuture.supplyAsync(() -&gt; <span class="string">&quot;执行结果&quot;</span>);</span><br><span class="line">    <span class="comment">// 调用 get 方法进行等待，获取执行结果</span></span><br><span class="line">    cf.get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="join">join</h3>
<p>获取任务执行结果，如果任务尚未完成则进行堵塞状态，如果任务正常完成则返回执行结果，如果异常完成或执行过程中引发异常，这时就会抛出（未经检查）异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">join</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 执行 CompletableFuture 任务</span></span><br><span class="line">    CompletableFuture&lt;String&gt; cf = CompletableFuture.supplyAsync(() -&gt; <span class="string">&quot;执行结果&quot;</span>);</span><br><span class="line">    <span class="comment">// 调用 join 方法进行等待，获取执行结果</span></span><br><span class="line">    cf.join();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="getNow">getNow</h3>
<p>立即获取任务执行结果，如果任务没有完成则返回设定的默认值，如果任务正常完成则返回执行结果。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getNow</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 执行 CompletableFuture 任务</span></span><br><span class="line">    CompletableFuture&lt;String&gt; cf = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">        <span class="comment">// 睡眠5毫秒</span></span><br><span class="line">        sleep(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;示例-执行完成&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 随机睡眠1~10毫秒</span></span><br><span class="line">    sleep(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">10</span>));</span><br><span class="line">    <span class="comment">// 调用 getNow 方法获取执行结果，如果任务未执行完成则输出设置的默认值</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> cf.getNow(<span class="string">&quot;默认值&quot;</span>);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程睡眠</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> millis 睡眠时间(单位:毫秒)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">(<span class="type">long</span> millis)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(millis);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="cancel">cancel</h3>
<p>取消任务，如果任务尚未执行结束，调用该方法成功取消任务时返回 true，否则返回 false。并且任务取消成功后，通过 get/join 方法获取结果时，会抛出 CancellationException 异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">cancel</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">    <span class="comment">// 执行 CompletableFuture 任务</span></span><br><span class="line">    CompletableFuture&lt;Void&gt; cf = CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">        <span class="comment">// 随机睡眠1~10毫秒</span></span><br><span class="line">        sleep(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">10</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;示例-执行任务完成&quot;</span>);‘</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 随机睡眠1~10毫秒</span></span><br><span class="line">    sleep(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">10</span>));</span><br><span class="line">    <span class="comment">// 调用 cancel 方法取消任务</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">cancelResult</span> <span class="operator">=</span> cf.cancel(<span class="literal">true</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;取消任务: &quot;</span> + cancelResult);</span><br><span class="line">    <span class="comment">// 调用 get 方法获取执行结果，如果取消任务将抛出 CancellationException 异常，这里对该异常进行处理</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        cf.get();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (CancellationException e) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;获取任务失败，任务已经被取消&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程睡眠</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> millis 睡眠时间(单位:毫秒)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">(<span class="type">long</span> millis)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(millis);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="查看任务状态">查看任务状态</h2>
<h3 id="isDone">isDone</h3>
<p>查看任务是否执行完成，如果当前阶段执行完成（无论是正常完成还是异常完成）则返回 true，否则返回 false。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">isDone</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">// 执行 CompletableFuture 任务</span></span><br><span class="line">    CompletableFuture&lt;Void&gt; cf = CompletableFuture.runAsync(() -&gt; System.out.println(<span class="string">&quot;任务执行中...&quot;</span>));</span><br><span class="line">    <span class="comment">// 调用 isDone 方法查看任务是否执行完成</span></span><br><span class="line">    System.out.println(<span class="string">&quot;任务是否完成: &quot;</span> + cf.isDone());</span><br><span class="line">    <span class="comment">// 等待1秒时间</span></span><br><span class="line">    Thread.sleep(<span class="number">1000L</span>);</span><br><span class="line">    <span class="comment">// 调用 isDone 方法再次查看任务是否执行完成</span></span><br><span class="line">    System.out.println(<span class="string">&quot;任务是否完成: &quot;</span> + cf.isDone());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="isCancelled">isCancelled</h3>
<p>查看当前阶段任务是否成功取消，如果此阶段任务在完成之前被取消则返回 true，否则返回 false。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">isCancelled</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 执行 CompletableFuture 任务</span></span><br><span class="line">    CompletableFuture&lt;Void&gt; cf = CompletableFuture.runAsync(() -&gt; System.out.println(<span class="string">&quot;执行 CompletableFuture 任务&quot;</span>));</span><br><span class="line">    <span class="comment">// 调用 cancel 方法取消任务</span></span><br><span class="line">    cf.cancel(<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">// 调用 isCancelled 方法，查询任务是否成功被取消</span></span><br><span class="line">    System.out.println(<span class="string">&quot;是否取消任务: &quot;</span> + cf.isCancelled());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="isCompletedExceptionally">isCompletedExceptionally</h3>
<p>查看当前阶段任务是否以异常的方式执行完成，比如取消任务、突然终止任务或者执行过程出现异常等，都属于异常方式执行完成，如果是以异常方式完成则返回 true，否则返回 false。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">isCompletedExceptionally</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">// 执行 CompletableFuture 任务</span></span><br><span class="line">    CompletableFuture&lt;Void&gt; cf = CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行中...&quot;</span>);</span><br><span class="line">        <span class="comment">// 模拟发生异常</span></span><br><span class="line">        System.out.println(<span class="number">1</span>/<span class="number">0</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待1秒确保任务执行完成</span></span><br><span class="line">    Thread.sleep(<span class="number">1000L</span>);</span><br><span class="line">    <span class="comment">// 调用 isCompletedExceptionally 方法验证当前阶段是否异常完成</span></span><br><span class="line">    System.out.println(<span class="string">&quot;是否异常完成: &quot;</span> + cf.isCompletedExceptionally());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="设置任务结果">设置任务结果</h2>
<h3 id="obtrudeValue">obtrudeValue</h3>
<p>设置（重置）调用 get/join 方法时返回指定值，无论任务是否执行完成。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">obtrudeValue</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">    <span class="comment">// 执行 CompletableFuture 任务</span></span><br><span class="line">    CompletableFuture&lt;String&gt; cf = CompletableFuture.supplyAsync(() -&gt; <span class="string">&quot;示例-执行完成&quot;</span>);</span><br><span class="line">    <span class="comment">// 设置或重置 get 方法和与其相关方法的返回的值</span></span><br><span class="line">    cf.obtrudeValue(<span class="string">&quot;示例-强制设置返回值-无论成功失败&quot;</span>);</span><br><span class="line">    <span class="comment">// 调用 get 方法进行等待，获取执行结果并输出到控制台</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> cf.get();</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="obtrudeException">obtrudeException</h3>
<p>设置（重置）调用 get/join 方法时返回指定异常，无论任务是否执行完成。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">obtrudeException</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">    <span class="comment">// 执行 CompletableFuture 任务</span></span><br><span class="line">    CompletableFuture&lt;String&gt; cf = CompletableFuture.supplyAsync(() -&gt; <span class="string">&quot;示例-执行完成&quot;</span>);</span><br><span class="line">    <span class="comment">// 设置 get 方法和与其相关的方法后续执行抛出指定异常</span></span><br><span class="line">    cf.obtrudeException(<span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;未知异常&quot;</span>));</span><br><span class="line">    <span class="comment">// 调用 get 方法进行等待，获取执行结果并输出</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> cf.get();</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="complete">complete</h3>
<p>设置调用 get/join 方法时返回指定值。不过需要注意的是，如果任务没有执行完成，则可以通过该方法设置返回值，并且返回 true。如果任务已经完成，则无法配置，并且返回 false。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">complete</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">    <span class="comment">// 执行 CompletableFuture 任务</span></span><br><span class="line">    CompletableFuture&lt;String&gt; cf = CompletableFuture.supplyAsync(() -&gt; <span class="string">&quot;示例-执行完成&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置或重置 get 方法和与其相关方法的返回的值，任务没有执行完成返回 true，否则返回 false</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">setResult</span> <span class="operator">=</span> cf.complete(<span class="string">&quot;示例-任务没有完成-设置返回值&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;设置返回值为执行结果: &quot;</span> + setResult);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用 get 方法进行等待，获取执行结果并输出</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> cf.get();</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="completeException">completeException</h3>
<p>设置调用 get/join 方法时返回指定异常。不过需要注意的是，如果任务没有执行完成，则可以通过该方法设置返回值，并且返回 true。如果任务已经完成，则无法配置，并且返回 false。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">completeExceptionally</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">    <span class="comment">// 执行 CompletableFuture 任务</span></span><br><span class="line">    CompletableFuture&lt;String&gt; cf = CompletableFuture.supplyAsync(() -&gt; <span class="string">&quot;示例-执行完成&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置或重置 get 方法和与其相关方法的返回的值，任务没有执行完成返回 true，否则返回 false</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">setResult</span> <span class="operator">=</span> cf.completeExceptionally(<span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;未知异常&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;设置返回值为执行结果: &quot;</span> + setResult);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用 get 方法进行等待，获取执行结果并输出</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> cf.get();</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="设置超时时间">设置超时时间</h2>
<h3 id="orTimeout">orTimeout</h3>
<p>设置任务超时后抛出异常信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CompletableFuture&lt;String&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    sleep(<span class="number">3000</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;完成&quot;</span>;</span><br><span class="line">&#125;).orTimeout(<span class="number">2</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">future.get(); <span class="comment">// 超时异常</span></span><br></pre></td></tr></table></figure>
<h3 id="completeOnTimeout">completeOnTimeout</h3>
<p>设置任务超时后返回的默认值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CompletableFuture&lt;String&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    sleep(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;完成&quot;</span>;</span><br><span class="line">&#125;).completeOnTimeout(<span class="string">&quot;超时默认值&quot;</span>, <span class="number">2</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">System.out.println(future.get()); <span class="comment">// 超时后返回 &quot;超时默认值&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="任务异常处理">任务异常处理</h2>
<h3 id="exceptionally">exceptionally</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> CompletableFuture&lt;T&gt; <span class="title function_">exceptionally</span><span class="params">(Function&lt;Throwable,? extends T&gt; fn)</span></span><br></pre></td></tr></table></figure>
<p>判断上一个任务执行时是否发生异常，如果是则就会执行 exceptionally 方法，并且将上一步异常作为当前方法的参数，然后对异常进行处理。当然，如果上一阶段执行过程中没有出现异常，则不会执行 exceptionally 方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exceptionally</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">    <span class="comment">// 执行 CompletableFuture 串行任务，并且使用 exceptionally 方法:</span></span><br><span class="line">    <span class="comment">// - 如果 exceptionally 方法的上一阶段执行过程中出现异常，则会执行 exceptionally 阶段；</span></span><br><span class="line">    <span class="comment">// - 如果 exceptionally 方法的上一阶段执行过程中没有出现异常，则不会执行 exceptionally 阶段；</span></span><br><span class="line">    CompletableFuture&lt;String&gt; cf = CompletableFuture</span><br><span class="line">            <span class="comment">// 执行任务，50%概率发生异常，50%概率返回正常值</span></span><br><span class="line">            .supplyAsync(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">2</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;模拟发生异常&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;正常结束&quot;</span>;</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="comment">// 处理上一步中抛出的异常</span></span><br><span class="line">            .exceptionally(Throwable::getMessage);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用 get 方法进行等待，获取执行结果</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> cf.get();</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>工作技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/blog/2025/03/09/Java/%E5%B7%A5%E4%BD%9C%E6%8A%80%E5%B7%A7/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="什么是正则表达式？">什么是正则表达式？</h2>
<p>正则表达式（Regular Expression，简称 Regex） 是用于匹配、搜索、替换字符串的强大工具。它通过特定的模式（Pattern），匹配文本中的特定字符组合，广泛应用于数据验证、文本处理、爬虫、日志分析等场景。</p>
<h2 id="基本语法">基本语法</h2>
<table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>^</td>
<td>匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 ‘\n’ 或 ‘\r’ 之后的位置。</td>
</tr>
<tr>
<td>$</td>
<td>匹配输入字符串的结束位置。如果设置了 RegExp 对象的 Multiline 属性，$ 也匹配 ‘\n’ 或 ‘\r’ 之前的位置。</td>
</tr>
<tr>
<td>*</td>
<td>匹配前面的子表达式零次或多次。例如：‘zo*’ 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td>
</tr>
<tr>
<td>+</td>
<td>匹配前面的子表达式一次或多次。例如：‘zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td>
</tr>
<tr>
<td>?</td>
<td>匹配前面的子表达式零次或一次。例如：‘do(es)?’ 可以匹配 “do” 或 “does” 中的 “do” 。? 等价于 {0,1}。</td>
</tr>
<tr>
<td>()</td>
<td>标记一个子表达式的开始和结束位置。</td>
</tr>
<tr>
<td>{n}</td>
<td>n 是一个非负整数，匹配确定的 n 次。例如：‘o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td>
</tr>
<tr>
<td>{n,}</td>
<td>n 是一个非负整数，至少匹配 n 次。例如：‘o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。‘o{1,}’ 等价于 ‘o+’，‘o{0,}’ 则等价于 ‘o*’。</td>
</tr>
<tr>
<td>{n, m}</td>
<td>m 和 n 均为非负整数，其中 n &lt;= m，最少匹配 n 次且最多匹配 m 次。例如：‘o{1,3}’ 将匹配 “fooooood” 中的前三个 o，‘o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td>
</tr>
<tr>
<td>x|y</td>
<td>匹配 x 或 y。例如，‘z|food’ 能匹配 “z” 或 “food”。‘(z|f)ood’ 则匹配 “zood” 或 “food”。</td>
</tr>
<tr>
<td>[xyz]</td>
<td>字符集合，匹配所包含的任意一个字符。例如， ‘[abc]’ 可以匹配 “plain” 中的 ‘a’。</td>
</tr>
<tr>
<td>[^xyz]</td>
<td>负值字符集合，匹配未包含的任意字符。例如， ‘[^abc]’ 可以匹配 “plain” 中的’p’。</td>
</tr>
<tr>
<td>[a-z]</td>
<td>字符范围，匹配指定范围内的任意字符。例如，‘[a-z]’ 可以匹配 ‘a’ 到 ‘z’ 范围内的任意小写字母字符。</td>
</tr>
<tr>
<td>[^a-z]</td>
<td>负值字符范围，匹配任何不在指定范围内的任意字符。例如，‘[^a-z]’ 可以匹配任何不在 ‘a’ 到 ‘z’ 范围内的任意字符。</td>
</tr>
<tr>
<td>\d</td>
<td>匹配一个数字字符。等价于 [0-9]。</td>
</tr>
<tr>
<td>\D</td>
<td>匹配一个非数字字符。等价于 [^0-9]。</td>
</tr>
<tr>
<td>\f</td>
<td>匹配一个换页符。</td>
</tr>
<tr>
<td>\n</td>
<td>匹配一个换行符。</td>
</tr>
<tr>
<td>\r</td>
<td>匹配一个回车符。</td>
</tr>
<tr>
<td>\s</td>
<td>匹配任何空白字符，包括空格、制表符、换页符等等。</td>
</tr>
<tr>
<td>\S</td>
<td>匹配任何非空白字符。</td>
</tr>
<tr>
<td>\t</td>
<td>匹配一个制表符。</td>
</tr>
<tr>
<td>\v</td>
<td>匹配一个垂直制表符。</td>
</tr>
<tr>
<td>\w</td>
<td>匹配包括下划线的任何单词字符。等价于’[A-Za-z0-9_]'。</td>
</tr>
<tr>
<td>\W</td>
<td>匹配任何非单词字符。</td>
</tr>
</tbody>
</table>
<h3 id="常用实例">常用实例</h3>
<ol>
<li>匹配字符</li>
</ol>
<table>
<thead>
<tr>
<th><strong>表达式</strong></th>
<th><strong>匹配内容</strong></th>
<th><strong>示例</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>.</code></td>
<td>任意单个字符</td>
<td><code>a.b</code> 可匹配 <code>acb</code></td>
</tr>
<tr>
<td><code>\d</code></td>
<td>数字 <code>[0-9]</code></td>
<td><code>\d\d</code> 可匹配 <code>12</code></td>
</tr>
<tr>
<td><code>\D</code></td>
<td>非数字 <code>[^\d]</code></td>
<td><code>\D</code> 可匹配 <code>a</code></td>
</tr>
<tr>
<td><code>\w</code></td>
<td>字母、数字、下划线 <code>[a-zA-Z0-9_]</code></td>
<td><code>\w+</code> 可匹配 <code>abc123</code></td>
</tr>
<tr>
<td><code>\W</code></td>
<td>非字母、数字、下划线</td>
<td><code>\W</code> 可匹配 <code>@</code></td>
</tr>
<tr>
<td><code>\s</code></td>
<td>空格（包含 <code>\t</code>, <code>\n</code>, <code>\r</code>）</td>
<td><code>\s+</code> 可匹配 <code>&quot;   &quot;</code></td>
</tr>
<tr>
<td><code>\S</code></td>
<td>非空格字符</td>
<td><code>\S</code> 可匹配 <code>a</code></td>
</tr>
</tbody>
</table>
<ol start="2">
<li>量词（重复次数）</li>
</ol>
<table>
<thead>
<tr>
<th><strong>表达式</strong></th>
<th><strong>匹配次数</strong></th>
<th><strong>示例</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>*</code></td>
<td>0 次或多次</td>
<td><code>a*</code> 可匹配 <code>&quot;&quot;</code>、<code>a</code>、<code>aaaa</code></td>
</tr>
<tr>
<td><code>+</code></td>
<td>1 次或多次</td>
<td><code>a+</code> 可匹配 <code>a</code>、<code>aaaa</code></td>
</tr>
<tr>
<td><code>?</code></td>
<td>0 次或 1 次</td>
<td><code>a?</code> 可匹配 <code>&quot;&quot;</code>、<code>a</code></td>
</tr>
<tr>
<td><code>&#123;n&#125;</code></td>
<td>恰好 n 次</td>
<td><code>a&#123;3&#125;</code> 可匹配 <code>aaa</code></td>
</tr>
<tr>
<td><code>&#123;n,&#125;</code></td>
<td>至少 n 次</td>
<td><code>a&#123;2,&#125;</code> 可匹配 <code>aa</code>、<code>aaaaa</code></td>
</tr>
<tr>
<td><code>&#123;n, m&#125;</code></td>
<td>n 到 m 次</td>
<td><code>a&#123;2,4&#125;</code> 可匹配 <code>aa</code>、<code>aaa</code>、<code>aaaa</code></td>
</tr>
</tbody>
</table>
<ol start="3">
<li>边界匹配</li>
</ol>
<table>
<thead>
<tr>
<th><strong>表达式</strong></th>
<th><strong>匹配位置</strong></th>
<th><strong>示例</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>^</code></td>
<td>匹配字符串开头</td>
<td><code>^abc</code> 匹配 <code>&quot;abc123&quot;</code> 但不匹配 <code>&quot;123abc&quot;</code></td>
</tr>
<tr>
<td><code>$</code></td>
<td>匹配字符串结尾</td>
<td><code>xyz$</code> 匹配 <code>&quot;123xyz&quot;</code> 但不匹配 <code>&quot;xyz123&quot;</code></td>
</tr>
<tr>
<td><code>\b</code></td>
<td>匹配单词边界</td>
<td><code>\bword\b</code> 仅匹配 <code>&quot; word &quot;</code> 而不匹配 <code>&quot;word123&quot;</code></td>
</tr>
<tr>
<td><code>\B</code></td>
<td>非单词边界</td>
<td><code>\Bword\B</code> 匹配 <code>&quot;awordb&quot;</code> 但不匹配 <code>&quot; word &quot;</code></td>
</tr>
</tbody>
</table>
<ol start="4">
<li>分组</li>
</ol>
<table>
<thead>
<tr>
<th><strong>表达式</strong></th>
<th><strong>作用</strong></th>
<th><strong>示例</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>()</code></td>
<td>分组</td>
<td><code>(abc)+</code> 可匹配 <code>&quot;abcabc&quot;</code></td>
</tr>
<tr>
<td><code>(?:...)</code></td>
<td>非捕获分组</td>
<td><code>(?: abc)+</code> 仅用于匹配，不保存</td>
</tr>
</tbody>
</table>
<h3 id="Java-使用">Java 使用</h3>
<ol>
<li>直接使用字符串的 matches() 方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexDemo</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;abc123&quot;</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isMatch</span> <span class="operator">=</span> text.matches(<span class="string">&quot;[a-zA-Z]+\\d+&quot;</span>);</span><br><span class="line">        System.out.println(isMatch); <span class="comment">// true</span></span><br><span class="line">        text = <span class="string">&quot;abc123aa&quot;</span>;</span><br><span class="line">        isMatch = text.matches(<span class="string">&quot;[a-zA-Z]+\\d+&quot;</span>);</span><br><span class="line">        System.out.println(isMatch); <span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：matches() 方法必须匹配整个字符串，如果只匹配部分，则返回 false。</p>
<ol start="2">
<li>使用 Pattern 和 Matcher</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexExample</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;My email is test@example.com&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">pattern</span> <span class="operator">=</span> <span class="string">&quot;[a-zA-Z0-9_.-]+@[a-zA-Z0-9-]+\\.[a-zA-Z]&#123;2,&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">regex</span> <span class="operator">=</span> Pattern.compile(pattern);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> regex.matcher(text);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (matcher.find()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;匹配的邮箱: &quot;</span> + matcher.group()); <span class="comment">//test@example.com</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="使用案例">使用案例</h3>
<ol>
<li>验证邮箱格式</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isValidEmail</span><span class="params">(String email)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;^[\\w.-]+@[a-zA-Z\\d.-]+\\.[a-zA-Z]&#123;2,6&#125;$&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> email.matches(regex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line">System.out.println(isValidEmail(<span class="string">&quot;test@example.com&quot;</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>提取手机号码</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">extractPhoneNumbers</span><span class="params">(String text)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;\\b1[3-9]\\d&#123;9&#125;\\b&quot;</span>; <span class="comment">// 中国手机号</span></span><br><span class="line">    <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regex);</span><br><span class="line">    <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(text);</span><br><span class="line">    <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;手机号: &quot;</span> + matcher.group());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输入: &quot;联系我：13812345678 或 13987654321&quot;</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>替换敏感词</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">replaceSensitiveWords</span><span class="params">(String input)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;(?i)badword|敏感词&quot;</span>; <span class="comment">// 不区分大小写</span></span><br><span class="line">    <span class="keyword">return</span> input.replaceAll(regex, <span class="string">&quot;***&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输入: &quot;这是一个BadWord示例。&quot;</span></span><br><span class="line"><span class="comment">// 输出: &quot;这是一个***示例。&quot;</span></span><br></pre></td></tr></table></figure>
<ol start="4">
<li>分割字符串</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;apple,banana,orange&quot;</span>;</span><br><span class="line">String[] fruits = str.split(<span class="string">&quot;\\s*,\\s*&quot;</span>); <span class="comment">// 允许逗号前后有空格</span></span><br><span class="line"><span class="comment">// 结果: [&quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;]</span></span><br></pre></td></tr></table></figure>
<ol start="5">
<li>提取 URL 中的域名</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">extractDomain</span><span class="params">(String url)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;^(https?://)?([\\w.-]+)(/.*)?$&quot;</span>;</span><br><span class="line">    <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regex);</span><br><span class="line">    <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(url);</span><br><span class="line">    <span class="keyword">if</span> (matcher.find()) &#123;</span><br><span class="line">        <span class="keyword">return</span> matcher.group(<span class="number">2</span>); <span class="comment">// 第二个分组为域名</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输入: &quot;https://www.example.com/path&quot;</span></span><br><span class="line"><span class="comment">// 输出: &quot;www.example.com&quot;</span></span><br></pre></td></tr></table></figure>
<ol start="6">
<li>分组捕获</li>
</ol>
<p>使用 <code>()</code> 分组，通过 <code>matcher.group(n)</code> 获取：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;(\\d&#123;3&#125;)-(\\d&#123;4&#125;)&quot;</span>);</span><br><span class="line"><span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> p.matcher(<span class="string">&quot;010-1234&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (m.matches()) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;区号: &quot;</span> + m.group(<span class="number">1</span>)); <span class="comment">// 010</span></span><br><span class="line">    System.out.println(<span class="string">&quot;号码: &quot;</span> + m.group(<span class="number">2</span>)); <span class="comment">// 1234</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="修饰符">修饰符</h2>
<table>
<thead>
<tr>
<th style="text-align:left">修饰符</th>
<th style="text-align:left">含义</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">i</td>
<td style="text-align:left">ignore - 不区分大小写</td>
<td style="text-align:left">将匹配设置为不区分大小写，搜索时不区分大小写：A 和 a 没有区别。</td>
</tr>
<tr>
<td style="text-align:left">g</td>
<td style="text-align:left">global - 全局匹配</td>
<td style="text-align:left">查找所有的匹配项</td>
</tr>
<tr>
<td style="text-align:left">m</td>
<td style="text-align:left">multiline - 多行匹配</td>
<td style="text-align:left">使边界字符 ^ 和 $ 匹配每一行的开头和结尾，记住是多行，而不是整个字符串的开头和结尾。</td>
</tr>
<tr>
<td style="text-align:left">s</td>
<td style="text-align:left">特殊字符圆点 . 中包含换行符 \n</td>
<td style="text-align:left">默认情况下的圆点 . 是匹配除换行符 \n 之外的任何字符，加上 s 修饰符之后， .中包含换行符 \n。</td>
</tr>
</tbody>
</table>
<h3 id="JS-使用">JS 使用</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;Google runoob taobao runoob&quot;</span>; </span><br><span class="line"><span class="keyword">var</span> n1=str.<span class="title function_">match</span>(<span class="regexp">/runoob/</span>);   <span class="comment">// 查找第一次匹配项</span></span><br><span class="line"><span class="keyword">var</span> n2=str.<span class="title function_">match</span>(<span class="regexp">/runoob/g</span>);  <span class="comment">// 查找所有匹配项</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;Google runoob taobao RUNoob&quot;</span>; </span><br><span class="line"><span class="keyword">var</span> n1=str.<span class="title function_">match</span>(<span class="regexp">/runoob/g</span>);   <span class="comment">// 区分大小写</span></span><br><span class="line"><span class="keyword">var</span> n2=str.<span class="title function_">match</span>(<span class="regexp">/runoob/gi</span>);  <span class="comment">// 不区分大小写</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;runoobgoogle\ntaobao\nrunoobweibo&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> n1=str.<span class="title function_">match</span>(<span class="regexp">/^runoob/g</span>);   <span class="comment">// 匹配一个</span></span><br><span class="line"><span class="keyword">var</span> n2=str.<span class="title function_">match</span>(<span class="regexp">/^runoob/gm</span>);  <span class="comment">// 多行匹配</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;google\nrunoob\ntaobao&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> n1=str.<span class="title function_">match</span>(<span class="regexp">/google./</span>);   <span class="comment">// 没有使用 s，无法匹配\n</span></span><br><span class="line"><span class="keyword">var</span> n2=str.<span class="title function_">match</span>(<span class="regexp">/runoob./</span>s);  <span class="comment">// 使用 s，匹配\n</span></span><br></pre></td></tr></table></figure>
<h3 id="Java-使用-2">Java 使用</h3>
<table>
<thead>
<tr>
<th><strong>修饰符</strong></th>
<th><strong>值</strong></th>
<th><strong>作用</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Pattern.CASE_INSENSITIVE</td>
<td>(?i)</td>
<td>忽略大小写，如 “hello” 可匹配 “HELLO”</td>
</tr>
<tr>
<td>Pattern.MULTILINE</td>
<td>(?m)</td>
<td>多行匹配，^$ 匹配每行的开头和结尾</td>
</tr>
<tr>
<td>Pattern.DOTALL</td>
<td>(?s)</td>
<td>让 . 匹配换行符 \n</td>
</tr>
<tr>
<td>Pattern.UNICODE_CASE</td>
<td>(?u)</td>
<td>Unicode 大小写匹配（配合 CASE_INSENSITIVE）</td>
</tr>
<tr>
<td>Pattern.COMMENTS</td>
<td>(?x)</td>
<td>忽略正则中的空格和注释</td>
</tr>
<tr>
<td>Pattern.UNICODE_CHARACTER_CLASS</td>
<td>(?U)</td>
<td>使用 Unicode 字符类别</td>
</tr>
</tbody>
</table>
<ol>
<li>忽略大小写</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;hello&quot;</span>, Pattern.CASE_INSENSITIVE);</span><br><span class="line"><span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(<span class="string">&quot;HELLO&quot;</span>);</span><br><span class="line">System.out.println(matcher.find()); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;(?i)hello&quot;</span>; <span class="comment">// `(?i)` 代表忽略大小写</span></span><br><span class="line">pattern = Pattern.compile(regex);</span><br><span class="line">matcher = pattern.matcher(<span class="string">&quot;HELLO&quot;</span>);</span><br><span class="line">System.out.println(matcher.find()); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>多行匹配</li>
</ol>
<p>默认 <code>^</code> 只匹配整个字符串开头，<code>$</code> 只匹配结尾。使用 MULTILINE 后，<code>^</code> 和 <code>$</code> 适用于每行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;Hello\nJava&quot;</span>;</span><br><span class="line"><span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;^Java&quot;</span>, Pattern.MULTILINE);</span><br><span class="line"><span class="comment">// 等价于 Pattern pattern = Pattern.compile(&quot;(?m)^Java&quot;);</span></span><br><span class="line"><span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(text);</span><br><span class="line">System.out.println(matcher.find()); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>让 <code>.</code> 匹配换行符 <code>\n</code></li>
</ol>
<p>默认情况下，<code>.</code> 不会匹配换行符，使用 DOTALL 使 <code>.</code> 能匹配换行符</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;Hello\nJava&quot;</span>;</span><br><span class="line"><span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;Hello.Java&quot;</span>);</span><br><span class="line">System.out.println(pattern.matcher(text).find()); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">pattern = Pattern.compile(<span class="string">&quot;Hello.Java&quot;</span>, Pattern.DOTALL);</span><br><span class="line"><span class="comment">// 等价于 pattern = Pattern.compile(&quot;(?s)Hello.Java&quot;);</span></span><br><span class="line">System.out.println(pattern.matcher(text).find()); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<ol start="4">
<li>组合多个修饰符</li>
</ol>
<p>可以使用按位或 <code>| </code> 组合多个修饰符</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;hello&quot;</span>, Pattern.CASE_INSENSITIVE | Pattern.MULTILINE);</span><br><span class="line"><span class="comment">// 等价于 Pattern pattern = Pattern.compile(&quot;(?im)hello&quot;);</span></span><br></pre></td></tr></table></figure>
<h2 id="运算符优先级">运算符优先级</h2>
<table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">\</td>
<td style="text-align:left">转义符</td>
</tr>
<tr>
<td style="text-align:left">(), (?:), (?=), []</td>
<td style="text-align:left">圆括号和方括号</td>
</tr>
<tr>
<td style="text-align:left">*, +, ?, {n}, {n,}, {n, m}</td>
<td style="text-align:left">限定符</td>
</tr>
<tr>
<td style="text-align:left">^, $, \任何元字符、任何字符</td>
<td style="text-align:left">定位点和序列（即：位置和顺序）</td>
</tr>
<tr>
<td style="text-align:left">|</td>
<td style="text-align:left">替换，“或” 操作 <br />字符具有高于替换运算符的优先级，使得 “m|food” 匹配 “m” 或 “food”。若要匹配 “mood” 或 “food”，请使用括号创建子表达式，从而产生 “(m|f)ood”。</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>工作技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux（1-目录文件操作）</title>
    <url>/blog/2024/11/17/%E8%BF%90%E7%BB%B4/Linux/Linux%EF%BC%881-%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%EF%BC%89/</url>
    <content><![CDATA[<h2 id="Linux-系统目录结构图">Linux 系统目录结构图</h2>
<p><img src="1.jpg" alt=""></p>
<ol>
<li>/root：该目录为系统管理员的用户主目录</li>
<li>/bin（Binary）：存放着最经常使用的命令</li>
<li>/boot：存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件</li>
<li>/dev（Device）：存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的</li>
<li>/ect：存放所有的系统管理所需要的配置文件和子目录</li>
<li>/home：用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账户命名的</li>
<li>/var：存放着在不断扩充着的东西，习惯将那些经常被修改的目录放在这个目录下，包括各种日志文件</li>
<li>/lib：存放着系统最基本的动态连接共享库，其作用类似于 Windows 的 DLL 文件，几乎所有的应用程序都需要用到这些共享库</li>
<li>/usr：用户的很多应用程序和文件都放在这个目录下，类似于 Windows 下的 program files 目录</li>
<li>/usr/bin：系统用户使用的应用程序</li>
<li>/usr/sbin：超级用户使用的比较高级的管理程序和系统守护程序</li>
<li>/usr/src：内核源代码默认的放置目录</li>
<li>/media：Linux 系统会自动识别一些设备，例如 U 盘、光驱等，当识别后，Linux 会把识别的设备挂载到这个目录下</li>
<li>/opt：给主机额外安装软件所摆放的目录</li>
<li>/proc：一个虚拟的目录，是系统内存的映射，可以通过直接访问这个目录来获取系统信息</li>
<li>/sbin（s 指 Super User）：存放的是系统管理员使用的系统管理程序</li>
<li>/srv：存放一些服务启动之后需要提取的数据</li>
<li>/tmp：用来存放一些临时文件</li>
</ol>
<h2 id="目录操作命令">目录操作命令</h2>
<h3 id="cd：目录切换">cd：目录切换</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd / ：切换到根目录</span><br><span class="line">cd /usr：切换到根目录下的usr目录</span><br><span class="line">cd ..：切换到上一级目录</span><br><span class="line">cd ~：切换到home目录</span><br><span class="line">cd -：切换到上次访问的目录</span><br></pre></td></tr></table></figure>
<h3 id="ls：目录查看">ls：目录查看</h3>
<ol>
<li>-l：以长格式查看文件和目录</li>
<li>-o：作用同-l，显示除用户组外的详细信息</li>
<li>-a：查看当前目录下的所有目录和文件（包括隐藏的文件）</li>
<li>-R：遇到目录要进行递归展开（继续列出目录下面的文件和内容）</li>
<li>-d：只列出目录，不列出其他内容</li>
<li>-S/-t：按大小/时间排序</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls：查看当前目录下的所有目录和文件</span><br><span class="line">ls -a：查看当前目录下的所有目录和文件（包括隐藏的文件）</span><br><span class="line">ls -l 或 ll：列表查看当前目录下的所有目录和文件（列表查看，显示更多信息）</span><br><span class="line">ls /dir：查看指定目录下的所有目录和文件，如：ls /usr</span><br></pre></td></tr></table></figure>
<h3 id="mkdir：创建目录">mkdir：创建目录</h3>
<ol>
<li>-m（mode）：配置文件的权限，不需要看默认权限 (umask) 的脸色</li>
<li>-p（parents）：直接将所需要的目录（包含上一级目录）递归创建起来</li>
<li>-v（verbose）：为每一个创建的目录打印一个信息</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir aaa：在当前目录下创建一个名为aaa的目录</span><br><span class="line">mkdir /usr/aaa：在指定目录usr（已存在）下创建一个名为aaa的目录</span><br><span class="line">mkdir -p test2/test3：递归创建多个目录</span><br><span class="line">mkdir -v test6：创建目录打印输出信息</span><br><span class="line">mkdir -m=r-- test1：创建一个test1目录，同时目录所有者、用户组和其他用户针对该目录赋予只读权限</span><br><span class="line">mkdir -m=777 test1：创建一个test1目录，同时目录所有者、用户组和其他用户针对该目录赋予所有权限</span><br></pre></td></tr></table></figure>
<h3 id="rm：删除目录">rm：删除目录</h3>
<ol>
<li>-r 或-R：递归处理，将指定目录下的所有文件与子目录一并处理</li>
<li>-f：强制删除文件或目录</li>
<li>-i：删除已有文件或目录之前先询问用户</li>
<li>-v：打印操作的信息</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">删除文件：</span><br><span class="line">rm a.txt：删除当前目录下的a文件</span><br><span class="line">rm -f a.txt：删除当前目录的的a文件（不询问）</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除目录：</span></span><br><span class="line">rm -r aaa：递归删除当前目录下的aaa目录</span><br><span class="line">rm -rf aaa：递归删除当前目录下的aaa目录（不询问）</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">全部删除：</span></span><br><span class="line">rm -rf * ：将当前目录下的所有目录和文件全部删除</span><br><span class="line">rm -rf /* ：【自杀命令！慎用！慎用！慎用！】将根目录下的所有文件全部删除，删库跑路</span><br></pre></td></tr></table></figure>
<h3 id="mv：目录修改">mv：目录修改</h3>
<ol>
<li>-b：当文件存在时，覆盖前为其创建一个备份</li>
<li>-f：force 强制，如果目标文件已经存在，不会询问而直接覆盖</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">重命名目录：mv 当前目录 新目录</span><br><span class="line">mv aaa bbb</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重命名文件</span></span><br><span class="line">mv a.txt b.txt</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">剪切目录：<span class="built_in">mv</span> 目录名称 目录的新位置</span></span><br><span class="line">mv /usr/tmp/aaa /usr</span><br></pre></td></tr></table></figure>
<h3 id="cp：目录复制">cp：目录复制</h3>
<ol>
<li>-r：代表递归</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">贝目录</span><br><span class="line">cp -r /usr/tmp/aaa /usr</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">拷贝文件</span></span><br><span class="line">cp a.txt b.txt</span><br></pre></td></tr></table></figure>
<h3 id="pwd：查看当前目录">pwd：查看当前目录</h3>
<h2 id="文件操作命令">文件操作命令</h2>
<h3 id="touch：新建文件">touch：新建文件</h3>
<p>语法：touch 文件名</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">touch a.txt</span><br></pre></td></tr></table></figure>
<h3 id="rm：删除文件">rm：删除文件</h3>
<p>语法：rm -rf 文件名</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf a.txt</span><br></pre></td></tr></table></figure>
<h3 id="vi-或-vim：修改文件">vi 或 vim：修改文件</h3>
<h4 id="切换插入模式">切换插入模式</h4>
<ol>
<li>i：切换到输入模式，在光标当前位置开始输入文本</li>
<li>a：进入插入模式，在光标下一个位置开始输入文本</li>
<li>o：在当前行的下方插入一个新行，并进入插入模式</li>
<li>O：在当前行的上方插入一个新行，并进入插入模式</li>
</ol>
<h4 id="切换末行模式">切换末行模式</h4>
<ol>
<li>:：切换到底线命令模式，以在最底一行输入命令</li>
<li>: w：保存文件</li>
<li>: q：退出 vim 编辑器</li>
<li>: wq：保存并退出编辑</li>
<li>: q!：强制退出 vim 编辑器，不保存修改</li>
</ol>
<h4 id="删除、复制和粘贴">删除、复制和粘贴</h4>
<ol>
<li>x：删除当前光标所在处的字符</li>
<li>D：删除从光标到行尾的所有内容</li>
<li>dd：删除光标所在的一行</li>
<li>ndd：删除光标所在的向下 n 行</li>
<li>yy：复制光标所在的一行</li>
<li>nyy：复制光标所在的向下 n 行</li>
<li>p：粘贴剪贴板内容到光标下方</li>
<li>P：粘贴剪贴板内容到光标上方</li>
<li>r：替换光标下的字符</li>
<li>R：进入替换模式，替换当前光标后的内容，直到按 Esc 退出</li>
</ol>
<h4 id="查找和替换">查找和替换</h4>
<ol>
<li>/字符串：向下寻找一个名为字符串的字符串</li>
<li>?字符串：向上寻找一个名为字符串的字符串</li>
<li>n：重复上一次搜索，向下查找下一个匹配</li>
<li>N：重复上一次搜索，向上查找上一个匹配</li>
<li>:%s/old/new/g：将整个文件中的 old 替换为 new</li>
<li>:%s/old/new/gc：替换前进行确认</li>
</ol>
<h4 id="撤销和恢复">撤销和恢复</h4>
<ol>
<li>u：撤销上一次操作</li>
<li>Ctrl+r：重做上一次的操作</li>
</ol>
<p><img src="2.png" alt=""></p>
<p>命令行模式下的常用命令：</p>
<ol>
<li>shift+z+z：保存并退出快捷键</li>
<li>shift+g：光标跳到最后一行快捷键</li>
<li>set  noreadonly：修改 readonly 形式</li>
</ol>
<h3 id="查看文件">查看文件</h3>
<h4 id="cat：第一行开始显示">cat：第一行开始显示</h4>
<p>格式：cat [options] 文件名</p>
<ol>
<li>-b：列出行号，仅针对非空白行做行号显示，空白行不标行号</li>
<li>-n：列出行号，连同空白行也会有行号</li>
<li>-s：将连续的空行压缩为单个空行</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat a.txt</span><br><span class="line">cat file1.txt file2.txt # 将多个文件的内容合并并显示</span><br><span class="line">cat -n myfile.txt # 显示文件内容并包括行号</span><br><span class="line">cat -s myfile.txt # 压缩空行</span><br></pre></td></tr></table></figure>
<h4 id="more：百分比显示">more：百分比显示</h4>
<p>格式：more [options] 文件名</p>
<ol>
<li>空白键：向下翻一页</li>
<li>Enter：向下翻一行</li>
<li>b：往回翻页</li>
<li>q：退出查看</li>
<li>-数字 n：查看 n 行</li>
<li>+数字 n：从第 n 行开始看</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">more a.txt</span><br></pre></td></tr></table></figure>
<h4 id="less：翻页查看">less：翻页查看</h4>
<p>格式：less [options] 文件名</p>
<ol>
<li>上下键：上下翻页</li>
<li>/字符串：代表在这个显示的内容中，向下搜寻 [字符串] 这个关键字</li>
<li>?字符串：代表在这个显示的内容中，向上搜寻 [字符串] 这个关键字</li>
</ol>
<ul>
<li>n：向下找下一个</li>
<li>N：向上找上一个</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">less a.txt</span><br></pre></td></tr></table></figure>
<h4 id="tail：取出文件后面几行">tail：取出文件后面几行</h4>
<p>格式：tail [options] 文件名</p>
<ol>
<li>-f：实时打印文件内容</li>
<li>-n 数字 m：显示文件最后 m 行内容</li>
<li>-c 数字 m：显示文件最后 m 个字符</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">显示文件的最后 10 行</span><br><span class="line">tail myfile.txt</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示文件的最后 20 行</span></span><br><span class="line">tail -n 20 myfile.txt</span><br><span class="line">tail -20 myfile.txt</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">实时追踪查看日志文件的新内容</span></span><br><span class="line">tail -f /var/log/syslog</span><br><span class="line">tail -20f /var/log/syslog</span><br></pre></td></tr></table></figure>
<h4 id="head：取出文件前面几行">head：取出文件前面几行</h4>
<p>格式：head [options] 文件名</p>
<ol>
<li>-n 数字 m：显示文件前 m 行内容</li>
<li>-c 数字 m：显示文件前 m 个字符</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">显示文件的前 10 行</span><br><span class="line">head myfile.txt</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示文件的前 5 行</span></span><br><span class="line">head -5 myfile.txt</span><br><span class="line">head -n 5 myfile.txt</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示文件的前 20 字节</span></span><br><span class="line">head -c 20 myfile.txt</span><br></pre></td></tr></table></figure>
<h2 id="查找命令">查找命令</h2>
<h3 id="grep：过滤查找">grep：过滤查找</h3>
<p>语法：grep [options] pattern [file…]</p>
<ol>
<li>-n：显示匹配行及行号</li>
<li>-i：忽略字母大小写</li>
<li>-w：只匹配整个单词，而不是字符串的一部分（如匹配’magic’，而不是’magical’）</li>
<li>-l：列出匹配文件内容的文件名</li>
<li>-c：统计匹配成功的行数</li>
<li>–color：匹配到的关键词会高亮显示</li>
<li>-r：递归的搜索目录</li>
<li>-v：排除对应的字符串</li>
<li>-o：只显示匹配的字符串</li>
<li>-a（after）：打印搜索的字符串后 n 行的数据</li>
<li>-b（before）：打印搜索的字符串前 n 行的数据</li>
<li>-c（both）：打印搜索的字符串前后 n 行的数据</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep -l &#x27;oldboy&#x27; /oldboy/*</span><br><span class="line">grep -i &#x27;OLDBOY&#x27; /oldboy/oldboy.txt</span><br><span class="line">grep -n &#x27;man&#x27; /oldboy/oldboy.txt</span><br><span class="line"></span><br><span class="line">grep -r &quot;ramesh&quot; * # 使用-r 参数来实现递归的搜索目录</span><br><span class="line">grep -c &quot;pattern&quot; filename # 计算出命中匹配的总行数：6</span><br><span class="line">grep -iw &quot;is&quot; demo_file # 只会完整的匹配 is 这个单词</span><br><span class="line">grep -A 3 -i &quot;example&quot; demo_text # After 连着打印“example” 单词后的 2 行，共 3 行</span><br><span class="line">grep -B 3 -i &quot;example&quot; demo_text # Before 连着打印“example” 单词前的 2 行，共 3 行</span><br><span class="line">grep -C 3 -i &quot;example&quot; demo_text # Both 连着打印“example” 单词前后的 2 行，共 5 行</span><br><span class="line">grep -v &quot;go&quot; demo_text  # 显示哪些不包含 go 子串的行</span><br><span class="line">grep -v -e &quot;pattern1&quot; -e &quot;pattern2&quot; filename # 显示不符合 pattern1 和 pattern2 的结果的数据</span><br><span class="line">grep -o &quot;is.*line&quot; demo_file  # 只显示 is 和 line 之间的字符串，而不是一行</span><br></pre></td></tr></table></figure>
<p><strong>管道符结合</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">查找指定 ssh 服务进程 </span><br><span class="line">ps -ef | grep sshd</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查找指定服务进程，排除 gerp 身</span> </span><br><span class="line">ps -ef | grep sshd | grep -v grep</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查找指定进程个数</span></span><br><span class="line">ps -ef | grep sshd -c</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示文件行数</span></span><br><span class="line">cat b.txt | grep -n b.txt</span><br></pre></td></tr></table></figure>
<h3 id="find：目录查找">find：目录查找</h3>
<p>find 默认搜索当前目录及其子目录，并且不过滤任何结果（返回所有文件）</p>
<p>语法：find 目录 参数 文件名称</p>
<p>参数：</p>
<ol>
<li>-name &lt;查询方式&gt;：按照指定的文件名查找模式查找文件</li>
<li>-user &lt;用户名&gt;：查找属于指定用户名所有文件</li>
<li>-group &lt;用户组&gt;：按文件所属组查找文件</li>
<li>-size &lt;文件大小&gt;：按照指定的文件大小查找文件</li>
<li>-type &lt;文件类型&gt;：按文件类型查找，可以是 f（普通文件）、d（目录）、l（符号链接）等</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find /usr/tmp -name &#x27;a*&#x27;：查找/usr/tmp目录下的所有以a开头的目录或文件</span><br><span class="line">find /usr/tmp -user &#x27;root&#x27;：查找/usr/tmp目录下的所有以a开头的目录或文件</span><br><span class="line">find . -type f：将当前目录及其子目录中的所有文件列出</span><br><span class="line">find /home -size +1M：查找 /home 目录下大于 1MB 的文件</span><br><span class="line"></span><br><span class="line">find . -name &quot;*.log&quot; -ls：在当前目录查找以.log结尾的文件，并显示详细信息</span><br><span class="line">find /root/ -perm 600：查找/root/目录下权限为600的文件</span><br><span class="line">find . -type f -name &quot;*.log&quot;：查找当前目录以.log结尾的普通文件</span><br><span class="line">find . -type d | sort：查找当前所有目录并排序</span><br><span class="line">find . -size +100M：查找当前目录大于100M的文件</span><br></pre></td></tr></table></figure>
<ol>
<li>-iname：按照文件名搜索，不区分文件名大小</li>
<li>-size [±] 大小：按照指定大小搜索文件</li>
<li>-atime [±] 时间：按照文件访问时间搜索</li>
<li>-mtime [±] 时间：按照文件数据修改时间搜索</li>
<li>-ctime [±] 时间：按照文件状态修改时间搜索</li>
<li>-perm 权限模式：查找文件权限刚好等于“权限模式”的文件</li>
<li>-perm -权限模式：查找文件权限全部包含“权限模式”的文件</li>
<li>-perm +权限模式：查找文件权限包含“权限模式”的任意一个权限的文件</li>
</ol>
<h3 id="locate">locate</h3>
<p>格式：locate [选项] [参数]</p>
<ol>
<li>-A：显示匹配所有模式的文件，可使用多个匹配值选择要查找的文件</li>
<li>-b：只能匹配文件名，有绝对路径的情况下不进行匹配</li>
<li>-c：只显示文件数量</li>
<li>-i：匹配不区分大小写的文件</li>
</ol>
<p>locate 指令无需遍历整个文件系统，查询速度较快，因为是去搜索一个数据库（/var/lib/mlocate/mlocate.db），可以很快速的搜寻某个路径，默认每天自动更新一次，所以使用 locate 命令查不到最新变动过的文件，为了避免这种情况，可以在使用 locate 之前，先使用 updatedb 命令，手动更新数据库。由于 locate 指令基于数据库进行查询，所以第一次运行前，必须使用 updatedb 指令创建 locate 数据库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">updatedb</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">搜索 etc 目录下所有以 sh 开头的文件</span></span><br><span class="line">locate /etc/sh</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查找和 <span class="built_in">pwd</span> 相关的所有文件</span></span><br><span class="line">locate pwd</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查找包含 pass 和 txt 都有的文件</span></span><br><span class="line">locate -A &quot;pass&quot; &quot;txt&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">匹配不区分大小写的文件</span></span><br><span class="line">locate -i &quot;testdir&quot;</span><br></pre></td></tr></table></figure>
<p>与 find 的区别：</p>
<ol>
<li>locate 命令查找文件在数据库中查找，查找的速度非常快，几乎是马上列出结果；而 find 命令查找时则是直接查找硬盘上的文件，查找的速度相应的非常慢</li>
<li>locate 需要先 updatedb 才能找到文件；而 find 不需要</li>
</ol>
<h3 id="whereis">whereis</h3>
<p>whereis 命令是定位可执行文件、源代码文件、帮助文件在文件系统中的位置，这些文件的属性应属于原始代码、二进制文件或帮助文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">whereis ls：将和ls文件相关的文件都查找出来</span><br></pre></td></tr></table></figure>
<h3 id="which：环境变量">which：环境变量</h3>
<p>which 命令的作用是在 PATH 变量指定的路径中，搜索某个系统命令的位置，并且返回第一个搜索结果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">which pwd	#查找 pwd 命令所在路径</span><br><span class="line">which java	#查找 path 中 java 的路径</span><br></pre></td></tr></table></figure>
<h2 id="压缩文件操作">压缩文件操作</h2>
<ol>
<li>Linux 中的打包文件：aa.tar</li>
<li>Linux 中的压缩文件：bb.gz</li>
<li>Linux 中打包并压缩的文件：.tar.gz</li>
<li>Linux 中的打包文件一般是以.tar 结尾的，压缩的命令一般是以.gz 结尾的。</li>
</ol>
<p>一般情况下打包和压缩是一起进行的，打包并压缩后的文件的后缀名一般.tar.gz。</p>
<h3 id="tar">tar</h3>
<ol>
<li>压缩命令：tar [-zcvf] 打包压缩后的文件名 要打包的文件</li>
<li>解压命令：tar [-zxvf] 压缩文件</li>
</ol>
<ul>
<li>z：调用 gzip 命令进行压缩和解压</li>
<li>c：打包文件</li>
<li>v：显示运行过程</li>
<li>f：指定文件名</li>
<li>x：代表解压</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -cvf test.tar abd.txt bcd.txt</span><br><span class="line">tar -xvf test.tar </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">压缩文件 file1 和目录 dir2 到 test.tar.gz</span></span><br><span class="line">tar -zcvf test.tar.gz file1 dir2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打包并压缩/usr/tmp 下的所有文件</span></span><br><span class="line">tar -zcvf test.tar.gz *</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压 test.tar.gz（将 c 换成 x 即可），解压到当前目录下</span></span><br><span class="line">tar -zxvf test.tar.gz</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将/usr/tmp 下的 ab.tar 解压到根目录/usr 下</span></span><br><span class="line">tar -zxvf test.tar.gz -C /usr</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出压缩文件的内容</span></span><br><span class="line">tar -ztvf test.tar.gz </span><br></pre></td></tr></table></figure>
<h3 id="rar">rar</h3>
<h3 id="gzip-gunzip">gzip/gunzip</h3>
<ol>
<li>gzip 文件：压缩文件（不会保留原有的文件）</li>
</ol>
<ul>
<li>-c：将压缩数据输出到标准输出中，可以用于保留源文件</li>
<li>-r：把目录下的所有文件都压缩，而不是把这个目录压缩（不能打包）</li>
</ul>
<ol start="2">
<li>gunzip 文件.gz：解压缩文件</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gzip abc.txt </span><br><span class="line">gzip -c bcd.txt &gt; bcd.txt.gz</span><br><span class="line">gzip -r aaaa/</span><br></pre></td></tr></table></figure>
<h3 id="zip-unzip">zip/unzip</h3>
<ol>
<li>zip [选项] 文件.zip 要压缩的文件：压缩文件和目录</li>
</ol>
<ul>
<li>-r：递归压缩，即压缩目录</li>
</ul>
<ol start="2">
<li>unzip [选项] 文件.zip：解压缩文件</li>
</ol>
<ul>
<li>-d &lt;目录&gt;：指定解压后文件的存放目录（如果不指定 -d 参数，默认解压到当前目录下）</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">压缩文件</span><br><span class="line">zip -r test.zip file</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压文件</span></span><br><span class="line">unzip test.zip</span><br><span class="line">unzip -d /home/hepingfly/abc/ mytxt.zip </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux（2-用户权限管理）</title>
    <url>/blog/2024/12/01/%E8%BF%90%E7%BB%B4/Linux/Linux%EF%BC%882-%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%EF%BC%89/</url>
    <content><![CDATA[<h2 id="用户和组">用户和组</h2>
<h3 id="用户账号">用户账号</h3>
<ol>
<li>超级用户：root用户是Linux操作系统中默认的超级用户账号，对本主机拥有最高的权限。系统中超级用户是唯一的。</li>
<li>普通用户：由root用户或其他管理员用户创建，拥有的权限会受到限制，一般只在用户自己的宿主目录中拥有完整权限。</li>
<li>程序用户：在安装Linux操作系统及部分应用程序时，会添加一些特定的低权限用户账号，这些用户一般不允许登录到系统，仅用于维持系统或某个程序的正常运行，如bin、daemon、ftp、mail等。</li>
</ol>
<h3 id="组账号">组账号</h3>
<ol>
<li>基本组（私有组）：基本组账号只有一个，一般为创建用户时指定的组。在/etc/passwd文件中第4字段记录的即为该用户的基本组GID号。</li>
<li>附加组（公共组）：用户除了基本组以外，额外添加指定的组。</li>
</ol>
<ul>
<li>UID：用户标识号</li>
<li>GID：组标识号</li>
</ul>
<h3 id="相关文件">相关文件</h3>
<ol>
<li>/etc/passwd：文件用户的配置文件，保存用户名称、宿主目录、登录Shell 等基本信息</li>
<li>/etc/group：文件组的配置文件，记录Linux包含的组的信息</li>
<li>/etc/shadow：文件口令的配置文件，保存用户的密码、账号有效期等信息</li>
<li>/etc/gshadow：组密码及其相关属性</li>
</ol>
<h3 id="文件属性">文件属性</h3>
<h4 id="rwx">rwx</h4>
<ol>
<li>读取r：允许查看文件内容、显示目录列表</li>
<li>写入w：允许修改文件内容，允许在目录中新建、移动、删除文件或子目录</li>
<li>可执行x：允许运行程序、切换目录</li>
</ol>
<p>注意：三个权限的位置不会改变，如果没有权限，就会出现-代替，如果rwx任意位置变为-则代表不可读或不可写或不可执行文件。</p>
<table>
<thead>
<tr>
<th>权限</th>
<th>读</th>
<th>写</th>
<th>执行</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>字符</td>
<td>r</td>
<td>w</td>
<td>x</td>
<td>-</td>
</tr>
<tr>
<td>数字</td>
<td>4</td>
<td>2</td>
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table>
<h4 id="查看文件-目录的权限和归属">查看文件/目录的权限和归属</h4>
<table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>d</td>
<td>目录</td>
</tr>
<tr>
<td>-</td>
<td>文件</td>
</tr>
<tr>
<td>l</td>
<td>链接文档（link file）</td>
</tr>
<tr>
<td>b</td>
<td>装置文件里面的可供储存的接口设备（可随机存取装置）</td>
</tr>
<tr>
<td>c</td>
<td>装置文件里面的串行端口设备</td>
</tr>
</tbody>
</table>
<ol>
<li>第一段（3位）：代表拥有者的权限</li>
<li>第二段（3位）：代表拥有者所在的组，组员的权限</li>
<li>第三段（3位）：代表的是其他用户的权限</li>
</ol>
<p>每个文件的属性由左边第一部分的10个字符来确定</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>文件类型</th>
<th>属主权限</th>
<th>属组权限</th>
<th>其他用户权限</th>
</tr>
</thead>
<tbody>
<tr>
<td>位置</td>
<td>0</td>
<td>123</td>
<td>456</td>
<td>789</td>
</tr>
</tbody>
</table>
<h2 id="用户管理">用户管理</h2>
<h3 id="查看用户信息">查看用户信息</h3>
<ol>
<li>whoami：查看当前用户</li>
<li>who：打印当前登录用户</li>
</ol>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-a</td>
<td>打印全面信息</td>
</tr>
<tr>
<td>-b</td>
<td>打印系统最近启动时间</td>
</tr>
<tr>
<td>-d</td>
<td>打印死掉的进程</td>
</tr>
<tr>
<td>-l</td>
<td>打印系统登录进程</td>
</tr>
<tr>
<td>-H</td>
<td>带有列标题打印用户名，登录终端和登录时间</td>
</tr>
<tr>
<td>-t</td>
<td>打印系统上次锁定时间</td>
</tr>
<tr>
<td>-u</td>
<td>打印已登录用户列表</td>
</tr>
</tbody>
</table>
<h3 id="exit：退出登录账户">exit：退出登录账户</h3>
<h3 id="useradd：添加用户">useradd：添加用户</h3>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-u</td>
<td>指定用户的 UID 号，要求该 UID 号码未被其他用户使用。</td>
</tr>
<tr>
<td>-d</td>
<td>指定用户的宿主目录位置（当与-M 一起使用时，不生效）。</td>
</tr>
<tr>
<td>-e</td>
<td>指定用户的账户失效时间，可使用 YYYY-MM-DD 的日期格式。</td>
</tr>
<tr>
<td>-g</td>
<td>指定用户的基本组名（或使用 GID 号），对应的组名必须已存在。</td>
</tr>
<tr>
<td>-G</td>
<td>指定用户的附加组名（或使用 GID 号），对应的组名必须已存在。</td>
</tr>
<tr>
<td>-m</td>
<td>用户目录不存在时自动创建</td>
</tr>
<tr>
<td>-M</td>
<td>不建立宿主目录。</td>
</tr>
<tr>
<td>-s</td>
<td>指定用户的登录 Shell，（比如/bin/bash为可登陆系统，/sbin/nologin和/bin/false为禁止用户登陆系统）。</td>
</tr>
<tr>
<td>-r</td>
<td>建立系统账号</td>
</tr>
<tr>
<td>-c</td>
<td>添加备注文字</td>
</tr>
</tbody>
</table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">useradd -m liyou1：创建用户名，并且创建与用户名相同的目录与用户组</span><br><span class="line">useradd -d /home/liyou -m liyou2：指定用户目录</span><br><span class="line">useradd -g ftp liyou3：指定用户组</span><br><span class="line">useradd -p 123 liyou4：指定用户密码</span><br></pre></td></tr></table></figure>
<h3 id="userdel：删除用户">userdel：删除用户</h3>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-r</td>
<td>将该用户的宿主目录一并删除</td>
</tr>
</tbody>
</table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">userdel liyou：删除用户，但不删除其家目录及文件</span><br><span class="line">userdel -r liyou：删除用户，并将其家目录及文件一并删除</span><br><span class="line">userdel -f liyou：强制删除用户</span><br></pre></td></tr></table></figure>
<h3 id="usermod：修改用户账号">usermod：修改用户账号</h3>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-u</td>
<td>修改用户的 UID 号。</td>
</tr>
<tr>
<td>-d</td>
<td>修改用户的宿主目录位置。</td>
</tr>
<tr>
<td>-e</td>
<td>修改用户的账户失效时间，可使用 YYYY-MM-DD 的日期格式。</td>
</tr>
<tr>
<td>-g</td>
<td>修改用户的基本组名（或使用 GID 号）。</td>
</tr>
<tr>
<td>-G</td>
<td>修改用户的附加组名（或使用 GID 号）。</td>
</tr>
<tr>
<td>-s</td>
<td>指定用户的登录 Shell。</td>
</tr>
<tr>
<td>-l</td>
<td>更改用户账号的登录名称</td>
</tr>
<tr>
<td>-L</td>
<td>锁定用户账户</td>
</tr>
<tr>
<td>-U</td>
<td>解锁用户账户</td>
</tr>
</tbody>
</table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">usermod -d /home/liyou liyou：更改登录目录</span><br><span class="line">usermod -u 777 liyou：改变用户的uid</span><br><span class="line">usermod -l liyou liyou1：修改用户名liyou1为liyou</span><br><span class="line">usermod -L liyou：锁定密码</span><br><span class="line">usermod -U liyou：解锁密码</span><br></pre></td></tr></table></figure>
<h3 id="passwd：设置用户密码">passwd：设置用户密码</h3>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-d</td>
<td>清空指定用户的密码，仅使用用户名即可登录系统。</td>
</tr>
<tr>
<td>-l</td>
<td>锁定用户密码，无法被用户自行修改，锁定的用户账号将无法再登录系统。</td>
</tr>
<tr>
<td>-u</td>
<td>解开已锁定用户密码，允许用户自行修改（-u解锁时，如果没有密码会提示，需要使用-f强制解锁）</td>
</tr>
<tr>
<td>-e</td>
<td>密码立即过期，下次登录强制修改密码</td>
</tr>
<tr>
<td>-k</td>
<td>保留即将过期的用户在期满后仍能使用</td>
</tr>
<tr>
<td>-S</td>
<td>查看用户账户的状态（是否被锁定）。</td>
</tr>
</tbody>
</table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">passwd：设置当前用户密码</span><br><span class="line">passwd liyou1：设置用户密码</span><br><span class="line">passwd -l liyou1：锁定密码不允许用户修改</span><br><span class="line">passwd -u liyou1：解除锁定密码，允许用户修改</span><br><span class="line">passwd -e liyou1：下次登录强制改密码</span><br><span class="line">passwd -d liyou1：移除用户密码</span><br></pre></td></tr></table></figure>
<h3 id="sudo：用超级用户的权限执行命令">sudo：用超级用户的权限执行命令</h3>
<p>sudo是为所有想使用root权限的普通用户设计的，可以让普通用户具有临时使用root权限的权利，只需输入自己账户的密码即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入<span class="built_in">sudo</span>配置文件命令</span></span><br><span class="line">vi /etc/sudoer或者visudo</span><br></pre></td></tr></table></figure>
<h3 id="su：切换用户">su：切换用户</h3>
<p>su用于用户之间的切换，但是切换前的用户依然保持登录状态。如果是root向普通或虚拟用户切换不需要密码，反之普通用户切换到其它任何用户都需要密码验证。</p>
<p>不足：如果某个用户需要使用root权限、则必须要把root密码告诉此用户。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su test：切换到test用户，但是路径还是/root目录</span><br><span class="line">su - test ：切换到test用户，路径变成了/home/test</span><br><span class="line">su：切换到root用户，但是路径还是原来的路径</span><br><span class="line">su - ：切换到root用户，并且路径是/root</span><br><span class="line">exit、logout：退出返回之前的用户</span><br></pre></td></tr></table></figure>
<h2 id="用户组管理">用户组管理</h2>
<h3 id="groupadd：添加组">groupadd：添加组</h3>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-g</td>
<td>指定新建工作组的id</td>
</tr>
<tr>
<td>-r</td>
<td>创建系统工作组，系统工作组的组ID小于500</td>
</tr>
<tr>
<td>-K</td>
<td>覆盖配置文件“/ect/login.defs”</td>
</tr>
<tr>
<td>-o</td>
<td>允许添加组ID号不唯一的工作组</td>
</tr>
</tbody>
</table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">groupadd usergroup1：创建用户组</span><br><span class="line">groupadd -g 8563 usergroup1：创建用户组，指定工作组id</span><br><span class="line">groupadd -r usergroup1：使用-r创建系统工作组</span><br></pre></td></tr></table></figure>
<h3 id="groupdel：删除用户组">groupdel：删除用户组</h3>
<p>给出的组名必须存在，若改群组中仍包括某些用户，则必须先删除这些用户后，方能删除群组</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">groupdel usergroup1：删除用户组</span><br></pre></td></tr></table></figure>
<h3 id="gpasswd：设置用户的用户组">gpasswd：设置用户的用户组</h3>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-a</td>
<td>添加用户到组</td>
</tr>
<tr>
<td>-d</td>
<td>从组删除用户</td>
</tr>
<tr>
<td>-A</td>
<td>指定管理员</td>
</tr>
<tr>
<td>-M</td>
<td>定义组成员列表，以逗号分隔</td>
</tr>
<tr>
<td>-r</td>
<td>删除密码</td>
</tr>
<tr>
<td>-R</td>
<td>限制用户登入组，只有组中的成员才可以用newgrp加入该组</td>
</tr>
</tbody>
</table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gpasswd -a liyou usergroup1：添加用户到组</span><br><span class="line">gpasswd -d liyou usergroup1：移除用户出组</span><br></pre></td></tr></table></figure>
<h3 id="groupmod：更改用户组">groupmod：更改用户组</h3>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-g</td>
<td>设置欲使用的群组识别码</td>
</tr>
<tr>
<td>-o</td>
<td>重复使用群组识别码</td>
</tr>
<tr>
<td>-n</td>
<td>设置欲使用的群组名称</td>
</tr>
</tbody>
</table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">groupmod -g 222 usergroup1：更改组ID</span><br><span class="line">groudmod -n usergroup1 usergroup2：更改组名</span><br></pre></td></tr></table></figure>
<h3 id="groups：查询用户所属的组">groups：查询用户所属的组</h3>
<p>格式：groups  [用户名]</p>
<h2 id="权限修改">权限修改</h2>
<h3 id="chmod：修改文件或目录权限">chmod：修改文件或目录权限</h3>
<ol>
<li>u（user）：所有者</li>
<li>g（group）：所有组</li>
<li>o（other）：其他人</li>
<li>a（all）：所有人</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod u=rwx,g=rx,o=x 文件目录名</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">表示给所有者读、写、执行权限 ，给所有组读和执行权限，给其他人执行权限</span></span><br><span class="line">chmod o+w 文件目录名</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">表示给其他人添加写的权限</span></span><br><span class="line">chmod a-x 文件目录名</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">表示给所有人去除执行的权限</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1、给abc文件的所有者读写执行的权限，给所有组读执行权限，给其他组读执行权限</span></span><br><span class="line">chmod u=rwx,g=rx,o=rx abc</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2、给abc文件的所有者除去执行的权限，增加所有组写的权限</span></span><br><span class="line">chmod u-x,g+w abc</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">3、给abc文件的所有用户添加读的权限</span></span><br><span class="line">chmod a+r abc</span><br></pre></td></tr></table></figure>
<p>**规则 **</p>
<ol>
<li>r=4：二进制 100</li>
<li>w=2：二进制 010</li>
<li>x=1：二进制 001</li>
</ol>
<p>rwx=4+2+1=7</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod u=rwx,g=rx,o=x 文件目录名</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">相当于<span class="built_in">chmod</span> 751 文件目录名</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将/home/abc.txt文件的权限修改成rwxr-xr-x，使用数字的方式实现</span></span><br><span class="line">chmod 755 /home/abc.txt</span><br></pre></td></tr></table></figure>
<h3 id="chown：修改文件所有者">chown：修改文件所有者</h3>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-R</td>
<td>递归修改指定目录下所有子项的权限</td>
</tr>
</tbody>
</table>
<p>格式：</p>
<ol>
<li>chown newowner file：改变文件的所有者</li>
<li>chown newowner:newgroup file：改变用户的所有者和所有组</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将/home/abc.txt文件的所有者修改成tom</span></span><br><span class="line">chown tom abc.txt</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将/home/kkk目录下所有的文件和目录的所有者都修改成tom</span></span><br><span class="line">chown -R tom kkk/</span><br></pre></td></tr></table></figure>
<h3 id="chgrp：修改文件所在组">chgrp：修改文件所在组</h3>
<p>格式：chgrp newgroup file：改变文件的所有组</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将/home/abc.txt文件的所在组修改成bandit(土匪)</span></span><br><span class="line">chgrp bandit /home/abc.txt</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将/home/kkk 目录下所有的文件和目录的所在组都修改成bandit(土匪)</span></span><br><span class="line">chgrp -R bandit /home/kkk</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Easyexcel（2-文件读取）</title>
    <url>/blog/2024/10/27/Java/excel/easyexcel/Easyexcel%EF%BC%882-%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%EF%BC%89/</url>
    <content><![CDATA[<h2 id="同步读取">同步读取</h2>
<h3 id="读取单个Sheet">读取单个Sheet</h3>
<ol>
<li>通过sheet方法指定对应的Sheet名称或下标读取文件信息</li>
<li>通过doReadSync方法实现同步读取</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserExcel</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelIgnore</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(index = 0, value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(index = 1, value = &quot;年龄&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DateTimeFormat(value = &quot;yyyy-MM-dd&quot;)</span></span><br><span class="line">    <span class="meta">@ExcelProperty(index = 2, value = &quot;出生日期&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test02Controller</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传单个文件, 同步读取excel文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/uploadFile&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">uploadFile</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> file.getInputStream()) &#123;</span><br><span class="line">            List&lt;UserExcel&gt; userExcelList = EasyExcel.read(in)</span><br><span class="line">                    <span class="comment">// 读取第一个sheet</span></span><br><span class="line">                    .sheet(<span class="number">0</span>)</span><br><span class="line">                    <span class="comment">// 如果第一行才是标题，第二行是数据，从第二行开始读取</span></span><br><span class="line">                    .headRowNumber(<span class="number">1</span>)</span><br><span class="line">                    .head(UserExcel.class)</span><br><span class="line">                    .doReadSync();</span><br><span class="line">            <span class="keyword">for</span> (UserExcel userExcel : userExcelList) &#123;</span><br><span class="line">                System.out.println(userExcel);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="读取多个Sheet（同一个对象）">读取多个Sheet（同一个对象）</h3>
<p>使用doReadAllSync方法读取所有Sheet，适用于每个Sheet的对象都一致的情况</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/uploadFile2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">uploadFile2</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> file.getInputStream()) &#123;</span><br><span class="line">        List&lt;UserExcel&gt; userExcelList = EasyExcel.read(in)</span><br><span class="line">                <span class="comment">// 如果第一行才是标题，第二行是数据，从第二行开始读取</span></span><br><span class="line">                .headRowNumber(<span class="number">1</span>)</span><br><span class="line">                .head(UserExcel.class)</span><br><span class="line">                .doReadAllSync();</span><br><span class="line">        <span class="keyword">for</span> (UserExcel userExcel : userExcelList) &#123;</span><br><span class="line">            System.out.println(userExcel);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="读取多个Sheet（不同对象）">读取多个Sheet（不同对象）</h3>
<p>当每个Sheet的对象不一致的情况下，使用doReadAllSync方法无法指定每个Sheet的对象，可以依次读取Sheet进行解析</p>
<p>注意：依次读取Sheet会出现重复读取流对象的情况，而一个流对象只能读取一次，重复使用会导致异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/uploadFile4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">uploadFile4</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        in = file.getInputStream();</span><br><span class="line">        List&lt;UserExcel&gt; userExcelList1 = EasyExcel.read(in)</span><br><span class="line">                <span class="comment">// 读取第一个sheet</span></span><br><span class="line">                .sheet(<span class="number">0</span>)</span><br><span class="line">                <span class="comment">// 如果第一行才是标题，第二行是数据，从第二行开始读取</span></span><br><span class="line">                .headRowNumber(<span class="number">1</span>)</span><br><span class="line">                .head(UserExcel.class)</span><br><span class="line">                .doReadSync();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取剩余的sheet</span></span><br><span class="line">        in = file.getInputStream();</span><br><span class="line">        List&lt;UserExcel&gt; userExcelList2 = EasyExcel.read(in)</span><br><span class="line">                .sheet(<span class="number">1</span>)</span><br><span class="line">                <span class="comment">// 如果第一行才是标题，第二行是数据，从第二行开始读取</span></span><br><span class="line">                .headRowNumber(<span class="number">1</span>)</span><br><span class="line">                .head(UserExcel.class)</span><br><span class="line">                .doReadSync();</span><br><span class="line"></span><br><span class="line">        List&lt;UserExcel&gt; userExcelList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        userExcelList.addAll(userExcelList1);</span><br><span class="line">        userExcelList.addAll(userExcelList2);</span><br><span class="line">        <span class="keyword">for</span> (UserExcel userExcel : userExcelList) &#123;</span><br><span class="line">            System.out.println(userExcel);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (in != <span class="literal">null</span>) &#123;</span><br><span class="line">                in.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="异步读取">异步读取</h2>
<h3 id="监听器">监听器</h3>
<p>查看监听器源码，通过实现ReadListener接口或继承AnalysisEventListener类可以自定义读取Sheet监听器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ReadListener</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">Listener</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在转换异常 获取其他异常下会调用本接口。抛出异常则停止读取。如果这里不抛出异常则继续读取下一行</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">onException</span><span class="params">(Exception exception, AnalysisContext context)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">throw</span> exception;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 获取表头数据</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">invokeHead</span><span class="params">(Map&lt;Integer, ReadCellData&lt;?&gt;&gt; headMap, AnalysisContext context)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 一行行读取表格内容</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(T data, AnalysisContext context)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 读取条额外信息:批注、超链接、合并单元格信息等</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">extra</span><span class="params">(CellExtra extra, AnalysisContext context)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">   	<span class="comment">// 读取完成后的操作</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">doAfterAllAnalysed</span><span class="params">(AnalysisContext context)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 是否还有数据</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">(AnalysisContext context)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AnalysisEventListener</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">ReadListener</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析表头数据</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invokeHead</span><span class="params">(Map&lt;Integer, ReadCellData&lt;?&gt;&gt; headMap, AnalysisContext context)</span> &#123;</span><br><span class="line">        invokeHeadMap(ConverterUtils.convertToStringMap(headMap, context), context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invokeHeadMap</span><span class="params">(Map&lt;Integer, String&gt; headMap, AnalysisContext context)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="异常处理">异常处理</h3>
<h4 id="ExcelDateConvertException">ExcelDateConvertException</h4>
<p>表示数据转换异常错误，出现该异常时会继续解析文件信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExcelDataConvertException</span> <span class="keyword">extends</span> <span class="title class_">ExcelRuntimeException</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer rowIndex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer columnIndex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CellData&lt;?&gt; cellData;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ExcelContentProperty excelContentProperty;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ExcelDataConvertException</span><span class="params">(Integer rowIndex, Integer columnIndex, CellData&lt;?&gt; cellData,</span></span><br><span class="line"><span class="params">        ExcelContentProperty excelContentProperty, String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">        <span class="built_in">this</span>.rowIndex = rowIndex;</span><br><span class="line">        <span class="built_in">this</span>.columnIndex = columnIndex;</span><br><span class="line">        <span class="built_in">this</span>.cellData = cellData;</span><br><span class="line">        <span class="built_in">this</span>.excelContentProperty = excelContentProperty;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ExcelDataConvertException</span><span class="params">(Integer rowIndex, Integer columnIndex, CellData&lt;?&gt; cellData,</span></span><br><span class="line"><span class="params">        ExcelContentProperty excelContentProperty, String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">        <span class="built_in">this</span>.rowIndex = rowIndex;</span><br><span class="line">        <span class="built_in">this</span>.columnIndex = columnIndex;</span><br><span class="line">        <span class="built_in">this</span>.cellData = cellData;</span><br><span class="line">        <span class="built_in">this</span>.excelContentProperty = excelContentProperty;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="ExcelAnalysisStopException">ExcelAnalysisStopException</h4>
<p>非数据转换异常错误，在onexcetpion中抛出该异常后停止解析</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExcelAnalysisStopException</span> <span class="keyword">extends</span> <span class="title class_">ExcelAnalysisException</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ExcelAnalysisStopException</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ExcelAnalysisStopException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ExcelAnalysisStopException</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ExcelAnalysisStopException</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="读取单个Sheet（不指定对象）">读取单个Sheet（不指定对象）</h3>
<p>读取文件时使用doRead方法进行异步操作，同时指定对应的监听器解析文件数据</p>
<p>Map&lt;Integer, String&gt;中的key表示列号、value表示数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserExcelListener1</span> <span class="keyword">extends</span> <span class="title class_">AnalysisEventListener</span>&lt;Map&lt;Integer, String&gt;&gt; &#123;</span><br><span class="line">    <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Map&lt;Integer, String&gt;&gt; userExcelList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Map&lt;Integer, String&gt; map, AnalysisContext analysisContext)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;解析到一条数据:&#123;&#125;&quot;</span>, JSON.toJSONString(map));</span><br><span class="line">        userExcelList.add(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfterAllAnalysed</span><span class="params">(AnalysisContext analysisContext)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;已解析完所有数据!&quot;</span>);</span><br><span class="line">        userExcelList.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onException</span><span class="params">(Exception exception, AnalysisContext context)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ExcelDataConvertException) &#123;</span><br><span class="line">            <span class="type">ExcelDataConvertException</span> <span class="variable">convertException</span> <span class="operator">=</span> (ExcelDataConvertException) exception;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">row</span> <span class="operator">=</span> convertException.getRowIndex();</span><br><span class="line">            log.error(<span class="string">&quot;第&#123;&#125;行数据转换失败，异常信息：&#123;&#125;&quot;</span>, row, exception.getMessage());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.error(<span class="string">&quot;导入其他异常信息：&#123;&#125;&quot;</span>, exception.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;Integer, String&gt;&gt; <span class="title function_">getUserExcelList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userExcelList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserExcelList</span><span class="params">(List&lt;Map&lt;Integer, String&gt;&gt; userExcelList)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userExcelList = userExcelList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/uploadFile1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">uploadFile1</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> file.getInputStream()) &#123;</span><br><span class="line">        <span class="type">UserExcelListener1</span> <span class="variable">listener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserExcelListener1</span>();</span><br><span class="line">        EasyExcel.read(in, listener)</span><br><span class="line">                .sheet(<span class="number">0</span>)</span><br><span class="line">                .headRowNumber(<span class="number">1</span>) <span class="comment">// 第一行是标题, 从第二行开始读取</span></span><br><span class="line">                .doRead();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="读取单个Sheet（指定对象）">读取单个Sheet（指定对象）</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserExcelListener</span> <span class="keyword">extends</span> <span class="title class_">AnalysisEventListener</span>&lt;UserExcel&gt; &#123;</span><br><span class="line">    <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;UserExcel&gt; userExcelList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(UserExcel userExcel, AnalysisContext analysisContext)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;解析到一条数据:&#123;&#125;&quot;</span>, JSON.toJSONString(userExcel));</span><br><span class="line">        userExcelList.add(userExcel);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfterAllAnalysed</span><span class="params">(AnalysisContext analysisContext)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;已解析完所有数据!&quot;</span>);</span><br><span class="line">        userExcelList.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onException</span><span class="params">(Exception exception, AnalysisContext context)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ExcelDataConvertException) &#123;</span><br><span class="line">            <span class="type">ExcelDataConvertException</span> <span class="variable">convertException</span> <span class="operator">=</span> (ExcelDataConvertException) exception;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">row</span> <span class="operator">=</span> convertException.getRowIndex();</span><br><span class="line">            log.error(<span class="string">&quot;第&#123;&#125;行数据转换失败，异常信息：&#123;&#125;&quot;</span>, row, exception.getMessage());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.error(<span class="string">&quot;导入其他异常信息：&#123;&#125;&quot;</span>, exception.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;UserExcel&gt; <span class="title function_">getUserExcelList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userExcelList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserExcelList</span><span class="params">(List&lt;UserExcel&gt; userExcelList)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userExcelList = userExcelList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/uploadFile5&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">uploadFile5</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> file.getInputStream()) &#123;</span><br><span class="line">        <span class="type">UserExcelListener</span> <span class="variable">listener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserExcelListener</span>();</span><br><span class="line">        EasyExcel.read(in, UserExcel.class, listener)</span><br><span class="line">                .sheet(<span class="number">0</span>)</span><br><span class="line">                .headRowNumber(<span class="number">1</span>) <span class="comment">// 第一行是标题, 从第二行开始读取</span></span><br><span class="line">                .doRead();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="读取多个Sheet">读取多个Sheet</h3>
<ol>
<li>获取Sheet的总数，通过循环遍历的方式指定每个Sheet的监听器进行解析</li>
<li>使用构造器的方式传入Sheet对应的下标，在抛出异常时获取SheetNo和对应的行号，方便进行排查</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserExcelListener2</span> <span class="keyword">extends</span> <span class="title class_">AnalysisEventListener</span>&lt;UserExcel&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer sheetNo;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> List&lt;UserExcel&gt; userExcelList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserExcelListener2</span><span class="params">(Integer sheetNo)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sheetNo = sheetNo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(UserExcel userExcel, AnalysisContext analysisContext)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;解析到一条数据:&#123;&#125;&quot;</span>, JSON.toJSONString(userExcel));</span><br><span class="line">        userExcelList.add(userExcel);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfterAllAnalysed</span><span class="params">(AnalysisContext analysisContext)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;已解析完所有数据!&quot;</span>);</span><br><span class="line">        userExcelList.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onException</span><span class="params">(Exception exception, AnalysisContext context)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ExcelDataConvertException) &#123;</span><br><span class="line">            <span class="type">ExcelDataConvertException</span> <span class="variable">convertException</span> <span class="operator">=</span> (ExcelDataConvertException) exception;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">row</span> <span class="operator">=</span> convertException.getRowIndex();</span><br><span class="line">            log.error(<span class="string">&quot;sheetNo：&#123;&#125;，第&#123;&#125;行数据转换失败，异常信息：&#123;&#125;&quot;</span>, sheetNo, row, exception.getMessage());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.error(<span class="string">&quot;导入其他异常信息：&#123;&#125;&quot;</span>, exception.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;UserExcel&gt; <span class="title function_">getUserExcelList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userExcelList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserExcelList</span><span class="params">(List&lt;UserExcel&gt; userExcelList)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userExcelList = userExcelList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/uploadFile6&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">uploadFile6</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> file.getInputStream();</span><br><span class="line">         <span class="type">ExcelReader</span> <span class="variable">build</span> <span class="operator">=</span> EasyExcel.read(in).build();) &#123;</span><br><span class="line">        List&lt;ReadSheet&gt; readSheets = build.excelExecutor().sheetList();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, len = readSheets.size(); i &lt; len; i++) &#123;</span><br><span class="line">            <span class="type">UserExcelListener2</span> <span class="variable">listener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserExcelListener2</span>(i);</span><br><span class="line">            <span class="type">ReadSheet</span> <span class="variable">sheet</span> <span class="operator">=</span> EasyExcel.readSheet(readSheets.get(i).getSheetNo())</span><br><span class="line">                    .head(UserExcel.class)</span><br><span class="line">                    .headRowNumber(<span class="number">1</span>)</span><br><span class="line">                    .registerReadListener(listener)</span><br><span class="line">                    .build();</span><br><span class="line">            build.read(sheet);</span><br><span class="line">        &#125;</span><br><span class="line">        build.finish();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="分批读取（线程池操作）">分批读取（线程池操作）</h3>
<ol>
<li>使用构造器的方式传入Sheet对应的下标和自定义线程池，使用这种分批处理的方式，避免内存的消耗，加快文件的解析入库</li>
<li>数据库入库时可以使用MySQL的批量插入语法，同时指定每次插入数据的大小，相较于MyBatisPlus的批量插入方法较快（<strong>疑问：在MyBatisPlus的批量插入方法时出现数据部分丢失的情况</strong>）</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UserListener 不能被spring管理，要每次读取excel都要new，</span></span><br><span class="line"><span class="comment"> * 然后里面用到spring可以构造方法传进去</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserExcelListener3</span> <span class="keyword">extends</span> <span class="title class_">AnalysisEventListener</span>&lt;UserExcel&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">BATCH_SIZE</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer sheetNo;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Executor executor;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;UserExcel&gt; userExcelList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserExcelListener3</span><span class="params">(Integer sheetNo, Executor executor)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sheetNo = sheetNo;</span><br><span class="line">        <span class="built_in">this</span>.executor = executor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(UserExcel userExcel, AnalysisContext analysisContext)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;解析到一条数据:&#123;&#125;&quot;</span>, JSON.toJSONString(userExcel));</span><br><span class="line">        userExcelList.add(userExcel);</span><br><span class="line">        <span class="keyword">if</span> (userExcelList.size() &gt;= BATCH_SIZE) &#123;</span><br><span class="line">            List&lt;UserExcel&gt; userExcels = BeanUtil.copyToList(userExcelList, UserExcel.class);</span><br><span class="line">            CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">                <span class="comment">// 业务操作</span></span><br><span class="line">                <span class="comment">// saveToDB(userExcels);</span></span><br><span class="line">            &#125;, executor);</span><br><span class="line">            userExcelList.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfterAllAnalysed</span><span class="params">(AnalysisContext analysisContext)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;已解析完所有数据!&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!userExcelList.isEmpty()) &#123;</span><br><span class="line">            List&lt;UserExcel&gt; userExcels = BeanUtil.copyToList(userExcelList, UserExcel.class);</span><br><span class="line">            CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">                <span class="comment">// 业务操作</span></span><br><span class="line">                <span class="comment">// saveToDB(userExcels);</span></span><br><span class="line">            &#125;, executor);</span><br><span class="line">            userExcelList.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onException</span><span class="params">(Exception exception, AnalysisContext context)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ExcelDataConvertException) &#123;</span><br><span class="line">            <span class="type">ExcelDataConvertException</span> <span class="variable">convertException</span> <span class="operator">=</span> (ExcelDataConvertException) exception;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">row</span> <span class="operator">=</span> convertException.getRowIndex();</span><br><span class="line">            log.error(<span class="string">&quot;sheetNo：&#123;&#125;，第&#123;&#125;行数据转换失败，异常信息：&#123;&#125;&quot;</span>, sheetNo, row, exception.getMessage());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.error(<span class="string">&quot;导入其他异常信息：&#123;&#125;&quot;</span>, exception.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/uploadFile7&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">uploadFile77</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> file.getInputStream();</span><br><span class="line">         <span class="type">ExcelReader</span> <span class="variable">build</span> <span class="operator">=</span> EasyExcel.read(in).build();) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ThreadPoolExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">10</span>, <span class="number">20</span>, <span class="number">60L</span>,</span><br><span class="line">                TimeUnit.MILLISECONDS, <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">1000</span>), <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy());</span><br><span class="line">        List&lt;ReadSheet&gt; readSheets = build.excelExecutor().sheetList();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, len = readSheets.size(); i &lt; len; i++) &#123;</span><br><span class="line">            <span class="type">UserExcelListener3</span> <span class="variable">listener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserExcelListener3</span>(i, executor);</span><br><span class="line">            <span class="type">ReadSheet</span> <span class="variable">sheet</span> <span class="operator">=</span> EasyExcel.readSheet(readSheets.get(i).getSheetNo())</span><br><span class="line">                    .head(UserExcel.class)</span><br><span class="line">                    .headRowNumber(<span class="number">1</span>)</span><br><span class="line">                    .registerReadListener(listener)</span><br><span class="line">                    .build();</span><br><span class="line">            build.read(sheet);</span><br><span class="line">        &#125;</span><br><span class="line">        build.finish();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="事务操作">事务操作</h3>
<p>当使用监听器读取文件数据，使用分批插入数据的方法时，因为监听器不归Spring管理，所以无法使用Spring的事务注解进行事务的相关操作，怎么保证事务？</p>
<p>可以通过构造器的方式传入事务管理器，手动提交和回滚事务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDataListener</span> <span class="keyword">extends</span> <span class="title class_">AnalysisEventListener</span>&lt;Test&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//每隔5条存储数据库，实际使用中可以设置为2500条，然后清理list ，方便内存回收</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BATCH_COUNT</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Test&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//事务管理</span></span><br><span class="line">    <span class="keyword">private</span> DataSourceTransactionManager dataSourceTransactionManager;</span><br><span class="line">    <span class="comment">//事务定义</span></span><br><span class="line">    <span class="keyword">private</span> DefaultTransactionDefinition transactionDefinition;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">TransactionStatus</span> <span class="variable">transactionStatus</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TestService testService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestDataListener</span><span class="params">(TestService testService,</span></span><br><span class="line"><span class="params">                            DataSourceTransactionManager dataSourceTransactionManager,</span></span><br><span class="line"><span class="params">                            TransactionDefinition transactionDefinition)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.testService = testService;</span><br><span class="line">        <span class="built_in">this</span>.dataSourceTransactionManager = dataSourceTransactionManager;</span><br><span class="line">        <span class="built_in">this</span>.transactionDefinition = <span class="keyword">new</span> <span class="title class_">DefaultTransactionDefinition</span>(transactionDefinition);</span><br><span class="line">        <span class="comment">//设置事务的隔离级别 ：未提交读写</span></span><br><span class="line">        <span class="built_in">this</span>.transactionDefinition.setIsolationLevel(TransactionDefinition.ISOLATION_READ_UNCOMMITTED);</span><br><span class="line">        <span class="comment">// 手动开启事务</span></span><br><span class="line">        <span class="built_in">this</span>.transactionStatus = dataSourceTransactionManager.getTransaction(transactionDefinition);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Test data, AnalysisContext context)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;解析到一条数据:&#123;&#125;&quot;</span>, JSON.toJSONString(data));</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">hasCompleted</span> <span class="operator">=</span> transactionStatus.isCompleted();</span><br><span class="line">        <span class="comment">// 如果事务已经关闭，不执行业务代码</span></span><br><span class="line">        <span class="keyword">if</span> (hasCompleted)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        list.add(data);</span><br><span class="line">        <span class="keyword">if</span> (list.size() &gt;= BATCH_COUNT) &#123;</span><br><span class="line">            saveData();</span><br><span class="line">            list.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这个方法会在easyexcel读取完文件中所有数据后执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfterAllAnalysed</span><span class="params">(AnalysisContext context)</span> &#123;</span><br><span class="line">        <span class="comment">//判断事务是否已被处理，未处理则进行提交事务</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">hasCompleted</span> <span class="operator">=</span> transactionStatus.isCompleted();</span><br><span class="line">        <span class="keyword">if</span> (hasCompleted)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        saveData();</span><br><span class="line">        log.info(<span class="string">&quot;所有数据解析完成！&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!hasCompleted)&#123;</span><br><span class="line">            <span class="comment">//提交事务</span></span><br><span class="line">            dataSourceTransactionManager.commit(transactionStatus);</span><br><span class="line">            log.info(<span class="string">&quot;SensitiveWordListener doAfterAllAnalysed：当前事务已提交&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onException</span><span class="params">(Exception exception, AnalysisContext context)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        log.info(<span class="string">&quot;导入过程中出现异常会进入该方法，重写了父类方法&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;结束前事务状态：&quot;</span>+  transactionStatus.isCompleted());</span><br><span class="line">        dataSourceTransactionManager.rollback(transactionStatus);</span><br><span class="line">        log.info(<span class="string">&quot;结束后事务状态：&quot;</span>+  transactionStatus.isCompleted());</span><br><span class="line">        <span class="keyword">throw</span> exception;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加上存储数据库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">saveData</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125;条数据，开始存储数据库！&quot;</span>, list.size());</span><br><span class="line">        <span class="keyword">if</span> (!CollectionUtils.isEmpty(list)) &#123;</span><br><span class="line">            testService.saveBatch(list);</span><br><span class="line">            System.out.println(list);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//TODO 这里是测试事务，如有需要可以打开注释</span></span><br><span class="line">        <span class="comment">//int a = 1/0;</span></span><br><span class="line">        log.info(<span class="string">&quot;存储数据库成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>EasyExcel</tag>
      </tags>
  </entry>
  <entry>
    <title>Easyexcel（1-注解使用）</title>
    <url>/blog/2024/10/26/Java/excel/easyexcel/Easyexcel%EF%BC%881-%E6%B3%A8%E8%A7%A3%E4%BD%BF%E7%94%A8%EF%BC%89/</url>
    <content><![CDATA[<h2 id="版本依赖">版本依赖</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easyexcel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="ExcelProperty">@ExcelProperty</h2>
<p>指定当前字段对应excel中的那一列，可以根据名字或者Index去匹配，当然也可以不写。</p>
<ol>
<li>value：指定写入的列头，如果不指定则使用成员变量的名字作为列头；如果要设置复杂的头，可以为value指定多个值</li>
<li>order：优先级高于value，会根据order的顺序来匹配实体和excel中数据的顺序</li>
<li>index：优先级高于value和order，指定写到第几列，如果不指定则根据成员变量位置排序；默认第一个字段就是index=0</li>
<li>converter：指定当前字段用什么转换器，默认会自动选择。可以用来设置类型转换器，需要实现Converter接口</li>
</ol>
<h3 id="value">value</h3>
<h4 id="指定属性名">指定属性名</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;test1&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">            response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">            user.setUserId(<span class="number">123</span>);</span><br><span class="line">            user.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">            user.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">            user.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">            user.setCreateTime(<span class="number">13213L</span>);</span><br><span class="line">            EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                    .sheet(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">                    .doWrite(Arrays.asList(user));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="1.png" alt=""></p>
<p>默认情况下，使用类的属性名作为Excel的列表，当然也可以使用@ExcelProperty 注解来重新指定属性名称。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="2.png" alt=""></p>
<h4 id="表头合并">表头合并</h4>
<p>value在写的时候，如果指定了多个值，会自动进行合并</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &#123;&quot;用户基本信息&quot;, &quot;姓名&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &#123;&quot;用户基本信息&quot;, &quot;手机&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &#123;&quot;用户基本信息&quot;, &quot;邮箱&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="3.png" alt=""></p>
<h3 id="index">index</h3>
<h4 id="指定位置">指定位置</h4>
<p>@ExcelProperty注解有两个属性index和order，如果不指定则按照属性在类中的排列顺序来。index是指定该属性在Excel中列的下标，下标从0开始</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;, index = 2)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;, index = 1)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="5.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;, index = 2)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;, index = 1)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;, index = 10)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;, index = 12)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="6.png" alt=""></p>
<h3 id="order">order</h3>
<h4 id="指定顺序">指定顺序</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;, order = 11)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;, order = 10)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="7.png" alt=""></p>
<p>order的默认值为Integer.MAX_VALUE，通过效果我们可以得出结论：order值越小，越排在前面</p>
<p>注意：</p>
<ol>
<li>优先级：index &gt; order &gt; 默认配置</li>
<li>index相当于绝对位置，下标从0开始</li>
<li>order相当于相对位置，值越小的排在越前面</li>
</ol>
<h3 id="convert">convert</h3>
<h4 id="自定义转换器">自定义转换器</h4>
<p>在读写EXCEL时，有时候需要我们进行数据类型转换，例如我们这里的创建时间，在实体对象中是Long类型，但是这样直接导出到Excel中不太直观。我们需要转换成yyyy-MM-dd HH:mm:ss 格式，此时我们就可以用到转换器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateTimeConverter</span> <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;Long&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">DateTimeFormatter</span> <span class="variable">dateTimeFormatter</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 支持导入的Java类型</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; supportJavaTypeKey() &#123;</span><br><span class="line">        <span class="keyword">return</span> Long.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 支持导出的Excel类型</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> CellDataTypeEnum <span class="title function_">supportExcelTypeKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> CellDataTypeEnum.STRING;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转换为Java</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">convertToJavaData</span><span class="params">(ReadCellData&lt;?&gt; cellData, ExcelContentProperty contentProperty, GlobalConfiguration globalConfiguration)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转换为Excel</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> WriteCellData&lt;?&gt; convertToExcelData(Long value, ExcelContentProperty contentProperty, GlobalConfiguration globalConfiguration) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WriteCellData</span>(CellDataTypeEnum.STRING, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> LocalDateTime.ofInstant(Instant.ofEpochMilli(value), ZoneId.systemDefault());</span><br><span class="line">        <span class="type">String</span> <span class="variable">dateStr</span> <span class="operator">=</span> localDateTime.format(dateTimeFormatter);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WriteCellData</span>(dateStr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;, order = 11)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;, order = 10)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;, converter = DateTimeConverter.class)</span></span><br><span class="line">    <span class="keyword">private</span> Long createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="8.png" alt=""></p>
<h4 id="枚举转换">枚举转换</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Excel 性别转换器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenderConverter</span> <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;Integer&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; supportJavaTypeKey() &#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> CellDataTypeEnum <span class="title function_">supportExcelTypeKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> CellDataTypeEnum.STRING;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">convertToJavaData</span><span class="params">(ReadConverterContext&lt;?&gt; context)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> GenderEnum.convert(context.getReadCellData().getStringValue()).getValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> WriteCellData&lt;?&gt; convertToExcelData(WriteConverterContext&lt;Integer&gt; context) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WriteCellData</span>&lt;&gt;(GenderEnum.convert(context.getValue()).getDescription());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 性别枚举</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">GenderEnum</span> &#123;</span><br><span class="line"></span><br><span class="line">    UNKNOWN(<span class="number">0</span>, <span class="string">&quot;未知&quot;</span>),</span><br><span class="line"></span><br><span class="line">    MALE(<span class="number">1</span>, <span class="string">&quot;男性&quot;</span>),</span><br><span class="line"></span><br><span class="line">    FEMALE(<span class="number">2</span>, <span class="string">&quot;女性&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Integer value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> GenderEnum <span class="title function_">convert</span><span class="params">(Integer value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Stream.of(values())</span><br><span class="line">                .filter(bean -&gt; bean.value.equals(value))</span><br><span class="line">                .findAny()</span><br><span class="line">                .orElse(UNKNOWN);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> GenderEnum <span class="title function_">convert</span><span class="params">(String description)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Stream.of(values())</span><br><span class="line">                .filter(bean -&gt; bean.description.equals(description))</span><br><span class="line">                .findAny()</span><br><span class="line">                .orElse(UNKNOWN);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ExcelIgnore">@ExcelIgnore</h2>
<p>默认所有字段都会和excel去匹配，加了这个注解会忽略该字段</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;)</span></span><br><span class="line">    <span class="meta">@ExcelIgnore</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;, converter = DateTimeConverter.class)</span></span><br><span class="line">    <span class="meta">@ExcelIgnore</span></span><br><span class="line">    <span class="keyword">private</span> Long createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="9.png" alt=""></p>
<h2 id="ExcelIgnoreUnannotated">@ExcelIgnoreUnannotated</h2>
<p>不标注该注解时，默认类中所有成员变量都会参与读写，无论是否在成员变量上加了@ExcelProperty 的注解。标注该注解后，类中的成员变量如果没有标注 @ExcelProperty 注解将不会参与读写。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExcelIgnoreUnannotated</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="10.png" alt=""></p>
<h2 id="ColumnWidth">@ColumnWidth</h2>
<p>用于设置表格列的宽度</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ColumnWidth(200)</span></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;, converter = DateTimeConverter.class)</span></span><br><span class="line">    <span class="keyword">private</span> Long createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="11.png" alt=""></p>
<h2 id="ContentRowHeight">@ContentRowHeight</h2>
<p>标注在类上，指定内容行高</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ContentRowHeight(value = 50)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;, converter = DateTimeConverter.class)</span></span><br><span class="line">    <span class="keyword">private</span> Long createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="12.png" alt=""></p>
<h2 id="HeadRowHeight">@HeadRowHeight</h2>
<p>标注在类上，指定列头行高</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@HeadRowHeight(80)</span></span><br><span class="line"><span class="meta">@ContentRowHeight(value = 50)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;, converter = DateTimeConverter.class)</span></span><br><span class="line">    <span class="keyword">private</span> Long createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="13.png" alt=""></p>
<h2 id="ContentStyle">@ContentStyle</h2>
<p>用于设置内容格式注解</p>
<ol>
<li>dataFormat：日期格式</li>
<li>hidden：设置单元格使用此样式隐藏</li>
<li>locked：设置单元格使用此样式锁定</li>
<li>quotePrefix：在单元格前面增加`符号，数字或公式将以字符串形式展示</li>
<li>horizontalAlignment：设置是否水平居中</li>
<li>wrapped：设置文本是否应换行。将此标志设置为true通过在多行上显示使单元格中的所有内容可见</li>
<li>verticalAlignment：设置是否垂直居中</li>
<li>rotation：设置单元格中文本旋转角度。03版本的Excel旋转角度区间为-90°90°，07版本的Excel旋转角度区间为0°180°</li>
<li>indent：设置单元格中缩进文本的空格数</li>
<li>borderLeft：设置左边框的样式</li>
<li>borderRight：设置右边框样式</li>
<li>borderTop：设置上边框样式</li>
<li>borderBottom：设置下边框样式</li>
<li>leftBorderColor：设置左边框颜色</li>
<li>rightBorderColor：设置右边框颜色</li>
<li>topBorderColor：设置上边框颜色</li>
<li>bottomBorderColor：设置下边框颜色</li>
<li>fillPatternType：设置填充类型</li>
<li>fillBackgroundColor：设置背景色</li>
<li>fillForegroundColor：设置前景色</li>
<li>shrinkToFit：设置自动单元格自动大小</li>
</ol>
<h2 id="ContentFontStyle">@ContentFontStyle</h2>
<p>用于设置单元格内容字体格式的注解</p>
<ol>
<li>fontName：字体名称</li>
<li>fontHeightInPoints：字体高度</li>
<li>italic：是否斜体</li>
<li>strikeout：是否设置删除水平线</li>
<li>color：字体颜色</li>
<li>typeOffset：偏移量</li>
<li>underline：下划线</li>
<li>bold：是否加粗</li>
<li>charset：编码格式</li>
</ol>
<h2 id="HeadStyle">@HeadStyle</h2>
<p>用于设置标题样式</p>
<ol>
<li>dataFormat：日期格式</li>
<li>hidden：设置单元格使用此样式隐藏</li>
<li>locked：设置单元格使用此样式锁定</li>
<li>quotePrefix：在单元格前面增加`符号，数字或公式将以字符串形式展示</li>
<li>horizontalAlignment：设置是否水平居中</li>
<li>wrapped：设置文本是否应换行。将此标志设置为true通过在多行上显示使单元格中的所有内容可见</li>
<li>verticalAlignment：设置是否垂直居中</li>
<li>rotation：设置单元格中文本旋转角度。03版本的Excel旋转角度区间为-90°90°，07版本的Excel旋转角度区间为0°180°</li>
<li>indent：设置单元格中缩进文本的空格数</li>
<li>borderLeft：设置左边框的样式</li>
<li>borderRight：设置右边框样式</li>
<li>borderTop：设置上边框样式</li>
<li>borderBottom：设置下边框样式</li>
<li>leftBorderColor：设置左边框颜色</li>
<li>rightBorderColor：设置右边框颜色</li>
<li>topBorderColor：设置上边框颜色</li>
<li>bottomBorderColor：设置下边框颜色</li>
<li>fillPatternType：设置填充类型</li>
<li>fillBackgroundColor：设置背景色</li>
<li>fillForegroundColor：设置前景色</li>
<li>shrinkToFit：设置自动单元格自动大小</li>
</ol>
<h2 id="HeadFontStyle">@HeadFontStyle</h2>
<p>用于定制标题字体格式</p>
<ol>
<li>fontName：设置字体名称</li>
<li>fontHeightInPoints：设置字体高度</li>
<li>italic：设置字体是否斜体</li>
<li>strikeout：是否设置删除线</li>
<li>color：设置字体颜色</li>
<li>typeOffset：设置偏移量</li>
<li>underline：设置下划线</li>
<li>charset：设置字体编码</li>
<li>bold：设置字体是否加粗</li>
</ol>
<h2 id="ContentLoopMerge">@ContentLoopMerge</h2>
<p>用于设置合并单元格的注解，作用于字段上</p>
<ol>
<li>eachRow：合并列</li>
<li>columnExtend：合并行</li>
</ol>
<h2 id="OnceAbsoluteMerge">@OnceAbsoluteMerge</h2>
<p>用于指定位置的单元格合并，作用于类上</p>
<ol>
<li>firstRowIndex：第一行下标</li>
<li>lastRowIndex：最后一行下标</li>
<li>firstColumnIndex：第一列下标</li>
<li>lastColumnIndex：最后一列下标</li>
</ol>
<h2 id="DateTimeFormat">@DateTimeFormat</h2>
<p>日期转换，读取Excel文件时用String去接收excel日期格式的数据会调用这个注解。里面的value参照java.text.SimpleDateFormat</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DateTimeFormat(&quot;yyyy-MM-dd&quot;)</span></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="NumberFormat">@NumberFormat</h2>
<p>数字转换，用String去接收excel数字格式的数据会调用这个注解。里面的value参照java.text.DecimalFormat</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>EasyExcel</tag>
      </tags>
  </entry>
  <entry>
    <title>Easyexcel（3-文件导出）</title>
    <url>/blog/2024/10/27/Java/excel/easyexcel/Easyexcel%EF%BC%883-%E6%96%87%E4%BB%B6%E5%AF%BC%E5%87%BA%EF%BC%89/</url>
    <content><![CDATA[<h2 id="响应头设置">响应头设置</h2>
<p>通过设置文件导出的响应头，可以自定义文件导出的名字信息等</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//编码格式为UTF-8</span></span><br><span class="line">response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//让服务器告诉浏览器它发送的数据属于excel文件类型</span></span><br><span class="line">response.setContentType(<span class="string">&quot;application/vnd.ms-excel;charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//描述内容在传输过程中的编码格式，BINARY可能不止包含非ASCII字符，还可能不是一个短行（超过1000字符）。</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Content-Transfer-Encoding&quot;</span>, <span class="string">&quot;binary&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//must-revalidate：强制页面不缓存，post-check=0, pre-check=0：0秒后，在显示给用户之前，该对象被选中进行更新过</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Cache-Control&quot;</span>, <span class="string">&quot;must-revalidate, post-check=0, pre-check=0&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//表示响应可能是任何缓存的，即使它只是通常是非缓存或可缓存的仅在非共享缓存中</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Pragma&quot;</span>, <span class="string">&quot;public&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//告诉浏览器这个文件的名字和类型，attachment：作为附件下载；inline：直接打开</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="写入单个Sheet">写入单个Sheet</h2>
<h3 id="一次性写入数据">一次性写入数据</h3>
<p>指定导出内容所对应的对象信息，通过doWrite写入数据</p>
<p>注意：doWrite方法必须传入的是集合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download1</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUserId(<span class="number">123</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                .doWrite(Arrays.asList(user));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="分批写入数据">分批写入数据</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download2</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="type">ExcelWriter</span> <span class="variable">excelWriter</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUserId(<span class="number">123</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        excelWriter = EasyExcel.write(response.getOutputStream(), User.class).build();</span><br><span class="line">        <span class="type">WriteSheet</span> <span class="variable">writeSheet</span> <span class="operator">=</span> EasyExcel.writerSheet(<span class="string">&quot;测试&quot;</span>).build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 业务逻辑处理，分页查询</span></span><br><span class="line">        excelWriter.write(Arrays.asList(user), writeSheet);</span><br><span class="line">        excelWriter.write(Arrays.asList(user), writeSheet);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (excelWriter != <span class="literal">null</span>) &#123;</span><br><span class="line">            excelWriter.finish();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过WriteSheet对象可以指定要写入的Sheet，通过上面方式我们可以手工控制流的关闭，这样我们就可以实现多次写。可以实现分页查询获取数据，然后将数据写入Excel中，避免一次性加载的数据过多，导致内存溢出</p>
<p>在使用excelWriter.write方式时务必保证至少执行一次write，这样是为了将sheet和表头写入excel，否则打开excel时会报错。write的第一个参数可以为null</p>
<h3 id="导出表头自定义">导出表头自定义</h3>
<p>使用注解的方式定义表头时不能动态控制，每次修改表头内容时只能重新修改代码，这时可以通过head方法动态传参自定义表头</p>
<p>注意：内容结构必须是List&lt;List&lt;T&gt;&gt;，如果使用List&lt;T&gt;会出现问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download3</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="type">ExcelWriter</span> <span class="variable">excelWriter</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUserId(<span class="number">123</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        List&lt;List&lt;String&gt;&gt; heads = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        heads.add(Arrays.asList(<span class="string">&quot;姓名&quot;</span>));</span><br><span class="line">        heads.add(Arrays.asList(<span class="string">&quot;年龄&quot;</span>));</span><br><span class="line">        heads.add(Arrays.asList(<span class="string">&quot;地址&quot;</span>));</span><br><span class="line">        excelWriter = EasyExcel.write(response.getOutputStream()).head(heads).build();</span><br><span class="line">        <span class="type">WriteSheet</span> <span class="variable">writeSheet</span> <span class="operator">=</span> EasyExcel.writerSheet(<span class="string">&quot;测试&quot;</span>).build();</span><br><span class="line">        excelWriter.write(Arrays.asList(user), writeSheet);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (excelWriter != <span class="literal">null</span>) &#123;</span><br><span class="line">            excelWriter.finish();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="1.png" alt=""></p>
<h3 id="导出内容自定义">导出内容自定义</h3>
<p>当导出的内容不是某个固定的实体类时，希望导出不同的内容时可以通过List&lt;List&lt;String&gt;&gt;自定义要写入的内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download5&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download5</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="type">ExcelWriter</span> <span class="variable">excelWriter</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;List&lt;String&gt;&gt; heads = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        heads.add(Arrays.asList(<span class="string">&quot;姓名&quot;</span>));</span><br><span class="line">        heads.add(Arrays.asList(<span class="string">&quot;年龄&quot;</span>));</span><br><span class="line">        heads.add(Arrays.asList(<span class="string">&quot;地址&quot;</span>));</span><br><span class="line">        excelWriter = EasyExcel.write(response.getOutputStream()).head(heads).build();</span><br><span class="line">        <span class="type">WriteSheet</span> <span class="variable">writeSheet</span> <span class="operator">=</span> EasyExcel.writerSheet(<span class="string">&quot;测试&quot;</span>).build();</span><br><span class="line"></span><br><span class="line">        List&lt;List&lt;String&gt;&gt; dataList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        dataList.add(Arrays.asList(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;18&quot;</span>, <span class="string">&quot;上海&quot;</span>));</span><br><span class="line">        dataList.add(Arrays.asList(<span class="string">&quot;李四&quot;</span>, <span class="string">&quot;28&quot;</span>));</span><br><span class="line">        excelWriter.write(dataList, writeSheet);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (excelWriter != <span class="literal">null</span>) &#123;</span><br><span class="line">            excelWriter.finish();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="2.png" alt=""></p>
<h3 id="写入多个表头">写入多个表头</h3>
<p>若业务需求要求在同一个Sheet中写多个表，就需要用到WriteTable了。只定义一个WriteSheet，有几个表就定义几个WriteTable即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download4</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="type">ExcelWriter</span> <span class="variable">excelWriter</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUserId(<span class="number">123</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        excelWriter = EasyExcel.write(response.getOutputStream()).build();</span><br><span class="line">        <span class="type">WriteSheet</span> <span class="variable">writeSheet</span> <span class="operator">=</span> EasyExcel.writerSheet(<span class="string">&quot;测试&quot;</span>).build();</span><br><span class="line"></span><br><span class="line">        List&lt;List&lt;String&gt;&gt; heads1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        heads1.add(Arrays.asList(<span class="string">&quot;姓名&quot;</span>));</span><br><span class="line">        heads1.add(Arrays.asList(<span class="string">&quot;年龄&quot;</span>));</span><br><span class="line">        heads1.add(Arrays.asList(<span class="string">&quot;地址&quot;</span>));</span><br><span class="line">        <span class="type">WriteTable</span> <span class="variable">writeTable1</span> <span class="operator">=</span> EasyExcel.writerTable(<span class="number">1</span>).head(heads1).needHead(<span class="literal">true</span>).build();</span><br><span class="line"></span><br><span class="line">        List&lt;List&lt;String&gt;&gt; heads2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        heads2.add(Arrays.asList(<span class="string">&quot;姓名&quot;</span>));</span><br><span class="line">        heads2.add(Arrays.asList(<span class="string">&quot;年龄&quot;</span>));</span><br><span class="line">        heads2.add(Arrays.asList(<span class="string">&quot;地址&quot;</span>));</span><br><span class="line">        heads2.add(Arrays.asList(<span class="string">&quot;出生日期&quot;</span>));</span><br><span class="line">        <span class="type">WriteTable</span> <span class="variable">writeTable2</span> <span class="operator">=</span> EasyExcel.writerTable(<span class="number">2</span>).head(heads2).needHead(<span class="literal">true</span>).build();</span><br><span class="line"></span><br><span class="line">        excelWriter.write(Arrays.asList(user), writeSheet, writeTable1);</span><br><span class="line">        excelWriter.write(Arrays.asList(user), writeSheet, writeTable2);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (excelWriter != <span class="literal">null</span>) &#123;</span><br><span class="line">            excelWriter.finish();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="3.png" alt=""></p>
<h2 id="写入多个Sheet">写入多个Sheet</h2>
<p>通过EasyExcel.writerSheet创建对应的sheet，然后在写入sheet时指定对应的WriteSheet即可，同时可指定每个Sheet对应的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download6&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download6</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="type">ExcelWriter</span> <span class="variable">excelWriter</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;List&lt;String&gt;&gt; heads = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        heads.add(Arrays.asList(<span class="string">&quot;姓名&quot;</span>));</span><br><span class="line">        heads.add(Arrays.asList(<span class="string">&quot;年龄&quot;</span>));</span><br><span class="line">        heads.add(Arrays.asList(<span class="string">&quot;地址&quot;</span>));</span><br><span class="line">        excelWriter = EasyExcel.write(response.getOutputStream()).head(heads).build();</span><br><span class="line"></span><br><span class="line">        <span class="type">WriteSheet</span> <span class="variable">writeSheet1</span> <span class="operator">=</span> EasyExcel.writerSheet(<span class="number">0</span>, <span class="string">&quot;测试1&quot;</span>).build();</span><br><span class="line">        <span class="type">WriteSheet</span> <span class="variable">writeSheet2</span> <span class="operator">=</span> EasyExcel.writerSheet(<span class="number">1</span>, <span class="string">&quot;测试2&quot;</span>).build();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUserId(<span class="number">123</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        excelWriter.write(Arrays.asList(user), writeSheet1);</span><br><span class="line">        excelWriter.write(Arrays.asList(user), writeSheet2);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (excelWriter != <span class="literal">null</span>) &#123;</span><br><span class="line">            excelWriter.finish();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="4.png" alt=""></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>EasyExcel</tag>
      </tags>
  </entry>
  <entry>
    <title>Easyexcel（4-模板文件）</title>
    <url>/blog/2024/10/28/Java/excel/easyexcel/Easyexcel%EF%BC%884-%E6%A8%A1%E6%9D%BF%E6%96%87%E4%BB%B6%EF%BC%89/</url>
    <content><![CDATA[<h2 id="文件导出">文件导出</h2>
<p>获取 resources 目录下的文件，使用 withTemplate 获取文件流导出文件模板</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download1</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;测试.xls&quot;</span>).getInputStream()) &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        EasyExcel.write(response.getOutputStream())</span><br><span class="line">                .withTemplate(in)</span><br><span class="line">                .sheet(<span class="string">&quot;sheet1&quot;</span>)</span><br><span class="line">                .doWrite(Collections.emptyList());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：获取 resources 目录下的文件需要在 maven 中添加以下配置，过滤对应的文件，防止编译生成后的 class 文件找不到对应的文件信息</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nonFilteredFileExtensions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">nonFilteredFileExtension</span>&gt;</span>xls<span class="tag">&lt;/<span class="name">nonFilteredFileExtension</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">nonFilteredFileExtension</span>&gt;</span>xlsx<span class="tag">&lt;/<span class="name">nonFilteredFileExtension</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">nonFilteredFileExtensions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="对象填充导出">对象填充导出</h2>
<p><strong>模板文件信息</strong></p>
<p><img src="1.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download5&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download5</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;测试3.xls&quot;</span>).getInputStream()) &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试3&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>, <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;12345678901&quot;</span>, <span class="string">&quot;zhangsan@qq.com&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                .withTemplate(in)</span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                .doFill(user);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：填充模板跟写文件使用的方法不一致，模板填充使用的方法是 doFill，而不是 doWrite</p>
<p><strong>导出文件内容</strong></p>
<p><img src="9.png" alt=""></p>
<h2 id="List-填充导出">List 填充导出</h2>
<h3 id="对象导出">对象导出</h3>
<p><strong>模板文件信息</strong></p>
<p><img src="1.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download2</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;测试.xls&quot;</span>).getInputStream()) &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; userList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        userList.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>, <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;12345678901&quot;</span>, <span class="string">&quot;zhangsan@qq.com&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">        userList.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;12345678902&quot;</span>, <span class="string">&quot;lisi@qq.com&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                .withTemplate(in)</span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                .doFill(userList);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>导出文件内容</strong></p>
<p><img src="2.png" alt=""></p>
<h3 id="对象嵌套对象（默认不支持）">对象嵌套对象（默认不支持）</h3>
<h4 id="原因排查">原因排查</h4>
<p><strong>模板文件信息</strong></p>
<p><img src="3.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;学生&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Student stu;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NoArgsConstructor</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@ExcelProperty(&quot;姓名&quot;)</span></span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@ExcelProperty(&quot;年龄&quot;)</span></span><br><span class="line">        <span class="keyword">private</span> Integer age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download3</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;测试2.xls&quot;</span>).getInputStream()) &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试2&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; userList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        userList.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>, <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;12345678901&quot;</span>, <span class="string">&quot;zhangsan@qq.com&quot;</span>, <span class="keyword">new</span> <span class="title class_">User</span>.Student(<span class="string">&quot;张三&quot;</span>, <span class="number">12</span>)));</span><br><span class="line">        userList.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;12345678902&quot;</span>, <span class="string">&quot;lisi@qq.com&quot;</span>, <span class="keyword">new</span> <span class="title class_">User</span>.Student(<span class="string">&quot;李四&quot;</span>, <span class="number">13</span>)));</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                .withTemplate(in)</span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                .doFill(userList);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>导出文件内容</strong></p>
<p>结果：Student 类的内容没有填充到模板文件中</p>
<p><img src="4.png" alt=""></p>
<p><strong>查看 ExcelWriteFillExecutor 源码</strong></p>
<p>可以看到 dataKeySet 集合中的数据只有 stu（没有 <a href="http://stu.name">stu.name</a> 和 stu.age），在! dataKeySet.contains(variable)方法中判断没有包含该字段信息，所以被过滤掉</p>
<p><img src="5.png" alt=""></p>
<p><img src="6.png" alt=""></p>
<h4 id="修改源码支持">修改源码支持</h4>
<p>在 com.alibaba.excel.write.executor 包下创建 ExcelWriteFillExecutor 类，跟源码中的类名称一致，尝试修改 analysisCell.getOnlyOneVariable()方法中的逻辑以便支持嵌套对象，修改如下：</p>
<p>根据分隔符.进行划分，循环获取对象中字段的数据，同时在 FieldUtils.getFieldClass 方法中重新设置 map 对象和字段</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (analysisCell.getOnlyOneVariable()) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">variable</span> <span class="operator">=</span> analysisCell.getVariableList().get(<span class="number">0</span>);</span><br><span class="line">    String[] split = variable.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> BeanUtil.copyProperties(dataMap, Map.class);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (split.length == <span class="number">1</span>) &#123;</span><br><span class="line">        value = map.get(variable);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> split.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> map.get(split[i]);</span><br><span class="line">            map = BeanMapUtils.create(o);</span><br><span class="line">        &#125;</span><br><span class="line">        value = map.get(split[split.length - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">ExcelContentProperty</span> <span class="variable">excelContentProperty</span> <span class="operator">=</span> ClassUtils.declaredExcelContentProperty(map,</span><br><span class="line">            writeContext.currentWriteHolder().excelWriteHeadProperty().getHeadClazz(), split[split.length - <span class="number">1</span>],</span><br><span class="line">            writeContext.currentWriteHolder());</span><br><span class="line">    cellWriteHandlerContext.setExcelContentProperty(excelContentProperty);</span><br><span class="line"></span><br><span class="line">    createCell(analysisCell, fillConfig, cellWriteHandlerContext, rowWriteHandlerContext);</span><br><span class="line">    cellWriteHandlerContext.setOriginalValue(value);</span><br><span class="line">    cellWriteHandlerContext.setOriginalFieldClass(FieldUtils.getFieldClass(map, split[split.length - <span class="number">1</span>], value));</span><br><span class="line"></span><br><span class="line">    converterAndSet(cellWriteHandlerContext);</span><br><span class="line">    WriteCellData&lt;?&gt; cellData = cellWriteHandlerContext.getFirstCellData();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Restyle</span></span><br><span class="line">    <span class="keyword">if</span> (fillConfig.getAutoStyle()) &#123;</span><br><span class="line">        Optional.ofNullable(collectionFieldStyleCache.get(currentUniqueDataFlag))</span><br><span class="line">                .map(collectionFieldStyleMap -&gt; collectionFieldStyleMap.get(analysisCell))</span><br><span class="line">                .ifPresent(cellData::setOriginCellStyle);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>导出文件内容</strong></p>
<p>查看导出的文件内容，此时发现嵌套对象的内容可以导出了</p>
<p><img src="10.png" alt=""></p>
<h3 id="对象嵌套-List（默认不支持）">对象嵌套 List（默认不支持）</h3>
<h4 id="原因排查-2">原因排查</h4>
<p><strong>模板文件信息</strong></p>
<p><img src="13.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;id列表&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; idList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download4</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;测试2.xls&quot;</span>).getInputStream()) &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; userList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        userList.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>, <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;12345678901&quot;</span>, <span class="string">&quot;zhangsan@qq.com&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), Arrays.asList(<span class="string">&quot;234&quot;</span>, <span class="string">&quot;465&quot;</span>)));</span><br><span class="line">        userList.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;12345678902&quot;</span>, <span class="string">&quot;lisi@qq.com&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), Arrays.asList(<span class="string">&quot;867&quot;</span>, <span class="string">&quot;465&quot;</span>)));</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                .withTemplate(in)</span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                .doFill(userList);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行后会发现报错 Can not find ‘Converter’ support class ArrayList.</p>
<p>EasyExcel 默认不支持对象嵌套 List 的，可以通过自定义转换器的方式修改导出的内容</p>
<h4 id="自定义转换器">自定义转换器</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListConvert</span> <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;List&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> WriteCellData&lt;?&gt; convertToExcelData(List value, ExcelContentProperty contentProperty, GlobalConfiguration globalConfiguration) &#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="literal">null</span> || value.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WriteCellData</span>&lt;&gt;(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">val</span> <span class="operator">=</span> (String) value.stream().collect(Collectors.joining(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WriteCellData</span>&lt;&gt;(val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List <span class="title function_">convertToJavaData</span><span class="params">(ReadCellData&lt;?&gt; cellData, ExcelContentProperty contentProperty, GlobalConfiguration globalConfiguration)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (cellData.getStringValue() == <span class="literal">null</span> || cellData.getStringValue().isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        String[] items = cellData.getStringValue().split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        Collections.addAll(list, items);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;id列表&quot;, converter = ListConvert.class)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; idList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>导出文件内容</strong></p>
<p>可以看到 List 列表的数据导出内容为 String 字符串，显示在一个单元格内</p>
<p><img src="14.png" alt=""></p>
<h2 id="Map-填充导出">Map 填充导出</h2>
<h3 id="简单导出">简单导出</h3>
<p><strong>模板文件信息</strong></p>
<p><img src="11.png" alt=""></p>
<p>注意：map跟对象导出有所区别，最前面没有.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download4</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;测试3.xls&quot;</span>).getInputStream()) &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;userId&quot;</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;phone&quot;</span>, <span class="string">&quot;12345678901&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;email&quot;</span>, <span class="string">&quot;zhangsan@qq.com&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;createTime&quot;</span>, <span class="string">&quot;2021-01-01&quot;</span>);</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                .withTemplate(in)</span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                .doFill(map);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>导出文件内容</strong></p>
<p><img src="12.png" alt=""></p>
<h3 id="嵌套方式（不支持）">嵌套方式（不支持）</h3>
<p><strong>模板文件信息</strong></p>
<p><img src="7.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download4</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;测试3.xls&quot;</span>).getInputStream()) &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;userId&quot;</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;phone&quot;</span>, <span class="string">&quot;12345678901&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;email&quot;</span>, <span class="string">&quot;zhangsan@qq.com&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;createTime&quot;</span>, <span class="string">&quot;2021-01-01&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;student.name&quot;</span>, <span class="string">&quot;小张&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;student.age&quot;</span>, <span class="string">&quot;23&quot;</span>);</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                .withTemplate(in)</span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                .doFill(map);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>导出文件内容</strong></p>
<p>注意：Easyexcel 不支持嵌套的方式导出数据</p>
<p><img src="8.png" alt=""></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>EasyExcel</tag>
      </tags>
  </entry>
  <entry>
    <title>Easyexcel（7-自定义样式）</title>
    <url>/blog/2024/11/05/Java/excel/easyexcel/Easyexcel%EF%BC%887-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%B7%E5%BC%8F%EF%BC%89/</url>
    <content><![CDATA[<h2 id="注解">注解</h2>
<h3 id="ContentStyle">@ContentStyle</h3>
<p>用于设置内容格式注解，可作用于类和字段上</p>
<ol>
<li>dataFormat：日期格式</li>
<li>hidden：设置单元格使用此样式隐藏</li>
<li>locked：设置单元格使用此样式锁定</li>
<li>quotePrefix：在单元格前面增加`符号，数字或公式将以字符串形式展示</li>
<li>horizontalAlignment：设置是否水平居中</li>
<li>wrapped：设置文本是否应换行。将此标志设置为true通过在多行上显示使单元格中的所有内容可见</li>
<li>verticalAlignment：设置是否垂直居中</li>
<li>rotation：设置单元格中文本旋转角度。03版本的Excel旋转角度区间为-90°90°，07版本的Excel旋转角度区间为0°180°</li>
<li>indent：设置单元格中缩进文本的空格数</li>
<li>borderLeft：设置左边框的样式</li>
<li>borderRight：设置右边框样式</li>
<li>borderTop：设置上边框样式</li>
<li>borderBottom：设置下边框样式</li>
<li>leftBorderColor：设置左边框颜色</li>
<li>rightBorderColor：设置右边框颜色</li>
<li>topBorderColor：设置上边框颜色</li>
<li>bottomBorderColor：设置下边框颜色</li>
<li>fillPatternType：设置填充类型</li>
<li>fillBackgroundColor：设置背景色</li>
<li>fillForegroundColor：设置前景色</li>
<li>shrinkToFit：设置自动单元格自动大小</li>
</ol>
<h3 id="ContentFontStyle">@ContentFontStyle</h3>
<p>用于设置单元格内容字体格式的注解，可作用于类和字段上</p>
<ol>
<li>fontName：字体名称</li>
<li>fontHeightInPoints：字体高度</li>
<li>italic：是否斜体</li>
<li>strikeout：是否设置删除水平线</li>
<li>color：字体颜色</li>
<li>typeOffset：偏移量</li>
<li>underline：下划线</li>
<li>bold：是否加粗</li>
<li>charset：编码格式</li>
</ol>
<h3 id="HeadStyle">@HeadStyle</h3>
<p>用于设置标题样式，可作用于类和字段上</p>
<ol>
<li>dataFormat：日期格式</li>
<li>hidden：设置单元格使用此样式隐藏</li>
<li>locked：设置单元格使用此样式锁定</li>
<li>quotePrefix：在单元格前面增加`符号，数字或公式将以字符串形式展示</li>
<li>horizontalAlignment：设置是否水平居中</li>
<li>wrapped：设置文本是否应换行。将此标志设置为true通过在多行上显示使单元格中的所有内容可见</li>
<li>verticalAlignment：设置是否垂直居中</li>
<li>rotation：设置单元格中文本旋转角度。03版本的Excel旋转角度区间为-90°90°，07版本的Excel旋转角度区间为0°180°</li>
<li>indent：设置单元格中缩进文本的空格数</li>
<li>borderLeft：设置左边框的样式</li>
<li>borderRight：设置右边框样式</li>
<li>borderTop：设置上边框样式</li>
<li>borderBottom：设置下边框样式</li>
<li>leftBorderColor：设置左边框颜色</li>
<li>rightBorderColor：设置右边框颜色</li>
<li>topBorderColor：设置上边框颜色</li>
<li>bottomBorderColor：设置下边框颜色</li>
<li>fillPatternType：设置填充类型</li>
<li>fillBackgroundColor：设置背景色</li>
<li>fillForegroundColor：设置前景色</li>
<li>shrinkToFit：设置自动单元格自动大小</li>
</ol>
<h3 id="HeadFontStyle">@HeadFontStyle</h3>
<p>用于定制标题字体格式，可作用于类和字段上</p>
<ol>
<li>fontName：设置字体名称</li>
<li>fontHeightInPoints：设置字体高度</li>
<li>italic：设置字体是否斜体</li>
<li>strikeout：是否设置删除线</li>
<li>color：设置字体颜色</li>
<li>typeOffset：设置偏移量</li>
<li>underline：设置下划线</li>
<li>charset：设置字体编码</li>
<li>bold：设置字体是否加粗</li>
</ol>
<h2 id="类方法">类方法</h2>
<p><img src="3.png" alt=""></p>
<h3 id="AbstractCellStyleStrategy">AbstractCellStyleStrategy</h3>
<p>通过继承AbstractCellStyleStrategy类，实现其setHeadCellStyle和setContentCellStyle方法可以自定义设置表头和单元格内容样式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractCellStyleStrategy</span> <span class="keyword">implements</span> <span class="title class_">CellWriteHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">order</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> OrderConstant.DEFINE_STYLE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCellDispose</span><span class="params">(CellWriteHandlerContext context)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (context.getHead() == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (context.getHead()) &#123;</span><br><span class="line">            setHeadCellStyle(context);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            setContentCellStyle(context);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置表头样式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">setHeadCellStyle</span><span class="params">(CellWriteHandlerContext context)</span> &#123;</span><br><span class="line">        setHeadCellStyle(context.getCell(), context.getHeadData(), context.getRelativeRowIndex());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置表头样式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">setHeadCellStyle</span><span class="params">(Cell cell, Head head, Integer relativeRowIndex)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(<span class="string">&quot;Custom styles must override the setHeadCellStyle method.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置单元格内容样式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">setContentCellStyle</span><span class="params">(CellWriteHandlerContext context)</span> &#123;</span><br><span class="line">        setContentCellStyle(context.getCell(), context.getHeadData(), context.getRelativeRowIndex());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置单元格内容样式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">setContentCellStyle</span><span class="params">(Cell cell, Head head, Integer relativeRowIndex)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(<span class="string">&quot;Custom styles must override the setContentCellStyle method.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="HorizontalCellStyleStrategy">HorizontalCellStyleStrategy</h3>
<p>HorizontalCellStyleStrategy 是提供的一个水平样式策略，只需实现CellWriteHandlerContext类自定义样式即可，通过设置构建这个策略对象基本上可以满足一般的要求了，比如：设置表头和内容的边框、底色、对齐方式、文字字体、文字颜色、文字大小等。设置完之后，需要创建 HorizontalCellStyleStrategy 对象，然后在导出文件时注册这个策略的 handler 即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HorizontalCellStyleStrategy</span> <span class="keyword">extends</span> <span class="title class_">AbstractCellStyleStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> WriteCellStyle headWriteCellStyle;</span><br><span class="line">    <span class="keyword">private</span> List&lt;WriteCellStyle&gt; contentWriteCellStyleList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HorizontalCellStyleStrategy</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HorizontalCellStyleStrategy</span><span class="params">(WriteCellStyle headWriteCellStyle,</span></span><br><span class="line"><span class="params">        List&lt;WriteCellStyle&gt; contentWriteCellStyleList)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.headWriteCellStyle = headWriteCellStyle;</span><br><span class="line">        <span class="built_in">this</span>.contentWriteCellStyleList = contentWriteCellStyleList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HorizontalCellStyleStrategy</span><span class="params">(WriteCellStyle headWriteCellStyle, WriteCellStyle contentWriteCellStyle)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.headWriteCellStyle = headWriteCellStyle;</span><br><span class="line">        <span class="keyword">if</span> (contentWriteCellStyle != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.contentWriteCellStyleList = ListUtils.newArrayList(contentWriteCellStyle);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置表头样式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">setHeadCellStyle</span><span class="params">(CellWriteHandlerContext context)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (stopProcessing(context) || headWriteCellStyle == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        WriteCellData&lt;?&gt; cellData = context.getFirstCellData();</span><br><span class="line">        WriteCellStyle.merge(headWriteCellStyle, cellData.getOrCreateStyle());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置单元格内容样式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">setContentCellStyle</span><span class="params">(CellWriteHandlerContext context)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (stopProcessing(context) || CollectionUtils.isEmpty(contentWriteCellStyleList)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        WriteCellData&lt;?&gt; cellData = context.getFirstCellData();</span><br><span class="line">        <span class="keyword">if</span> (context.getRelativeRowIndex() == <span class="literal">null</span> || context.getRelativeRowIndex() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            WriteCellStyle.merge(contentWriteCellStyleList.get(<span class="number">0</span>), cellData.getOrCreateStyle());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            WriteCellStyle.merge(</span><br><span class="line">                contentWriteCellStyleList.get(context.getRelativeRowIndex() % contentWriteCellStyleList.size()),</span><br><span class="line">                cellData.getOrCreateStyle());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断单元格是否为空</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">stopProcessing</span><span class="params">(CellWriteHandlerContext context)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> context.getFirstCellData() == <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="DefaultStyle">DefaultStyle</h3>
<p>Easyexcel在导出文件内容时默认使用DefaultStyle类来设置表头和单元格样式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultStyle</span> <span class="keyword">extends</span> <span class="title class_">HorizontalCellStyleStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">order</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> OrderConstant.DEFAULT_DEFINE_STYLE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DefaultStyle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="type">WriteCellStyle</span> <span class="variable">headWriteCellStyle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WriteCellStyle</span>();</span><br><span class="line">        headWriteCellStyle.setWrapped(<span class="literal">true</span>);</span><br><span class="line">        headWriteCellStyle.setVerticalAlignment(VerticalAlignment.CENTER);</span><br><span class="line">        headWriteCellStyle.setHorizontalAlignment(HorizontalAlignment.CENTER);</span><br><span class="line">        headWriteCellStyle.setLocked(<span class="literal">true</span>);</span><br><span class="line">        headWriteCellStyle.setFillPatternType(FillPatternType.SOLID_FOREGROUND);</span><br><span class="line">        headWriteCellStyle.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());</span><br><span class="line">        headWriteCellStyle.setBorderTop(BorderStyle.THIN);</span><br><span class="line">        headWriteCellStyle.setBorderBottom(BorderStyle.THIN);</span><br><span class="line">        headWriteCellStyle.setBorderLeft(BorderStyle.THIN);</span><br><span class="line">        headWriteCellStyle.setBorderRight(BorderStyle.THIN);</span><br><span class="line">        <span class="type">WriteFont</span> <span class="variable">headWriteFont</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WriteFont</span>();</span><br><span class="line">        headWriteFont.setFontName(<span class="string">&quot;宋体&quot;</span>);</span><br><span class="line">        headWriteFont.setFontHeightInPoints((<span class="type">short</span>)<span class="number">14</span>);</span><br><span class="line">        headWriteFont.setBold(<span class="literal">true</span>);</span><br><span class="line">        headWriteCellStyle.setWriteFont(headWriteFont);</span><br><span class="line"></span><br><span class="line">        setHeadWriteCellStyle(headWriteCellStyle);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Easyexcel的默认风格是，对于表头会显示灰色背景，但是如果取消使用默认风格之后，表头的背景颜色就会恢复白色</p>
<p>Easyexcel控制是否开启默认风格的属性方法是：<code>useDefaultStyle(false)</code></p>
<p>注意：useDefaultStyle方法一定要放在sheet方法前面，否则会失效（放在后面会因为在构造ExcelWriter类时获取不到useDefaultStyle的值，从而导致使用的是默认风格）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line">    EasyExcel.write(<span class="string">&quot;test01.xlsx&quot;</span>, DemoData.class)</span><br><span class="line">			<span class="comment">//禁用默认风格</span></span><br><span class="line">            .useDefaultStyle(<span class="literal">false</span>)</span><br><span class="line">            .sheet(<span class="string">&quot;testSheet01&quot;</span>)</span><br><span class="line">            .doWrite(demoData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="1.png" alt=""></p>
<h2 id="样式工具类">样式工具类</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * EasyExcel 样式工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomExcelStyleUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 标题样式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> WriteCellStyle <span class="title function_">getHeadStyle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 头的策略</span></span><br><span class="line">        <span class="type">WriteCellStyle</span> <span class="variable">headWriteCellStyle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WriteCellStyle</span>();</span><br><span class="line">        <span class="comment">// 背景颜色</span></span><br><span class="line">        <span class="comment">//headWriteCellStyle.setFillForegroundColor(IndexedColors.LIGHT_TURQUOISE1.getIndex());</span></span><br><span class="line">        <span class="comment">//headWriteCellStyle.setFillPatternType(FillPatternType.SOLID_FOREGROUND);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 字体</span></span><br><span class="line">        <span class="type">WriteFont</span> <span class="variable">headWriteFont</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WriteFont</span>();</span><br><span class="line">        headWriteFont.setFontName(<span class="string">&quot;宋体&quot;</span>);<span class="comment">//设置字体名字</span></span><br><span class="line">        headWriteFont.setFontHeightInPoints((<span class="type">short</span>) <span class="number">14</span>);<span class="comment">//设置字体大小</span></span><br><span class="line">        headWriteFont.setBold(<span class="literal">true</span>);<span class="comment">//字体加粗</span></span><br><span class="line">        headWriteCellStyle.setWriteFont(headWriteFont); <span class="comment">//在样式用应用设置的字体;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 样式</span></span><br><span class="line">        headWriteCellStyle.setBorderBottom(BorderStyle.THIN);<span class="comment">//设置底边框;</span></span><br><span class="line">        headWriteCellStyle.setBottomBorderColor((<span class="type">short</span>) <span class="number">0</span>);<span class="comment">//设置底边框颜色;</span></span><br><span class="line">        headWriteCellStyle.setBorderLeft(BorderStyle.THIN);  <span class="comment">//设置左边框;</span></span><br><span class="line">        headWriteCellStyle.setLeftBorderColor((<span class="type">short</span>) <span class="number">0</span>);<span class="comment">//设置左边框颜色;</span></span><br><span class="line">        headWriteCellStyle.setBorderRight(BorderStyle.THIN);<span class="comment">//设置右边框;</span></span><br><span class="line">        headWriteCellStyle.setRightBorderColor((<span class="type">short</span>) <span class="number">0</span>);<span class="comment">//设置右边框颜色;</span></span><br><span class="line">        headWriteCellStyle.setBorderTop(BorderStyle.THIN);<span class="comment">//设置顶边框;</span></span><br><span class="line">        headWriteCellStyle.setTopBorderColor((<span class="type">short</span>) <span class="number">0</span>); <span class="comment">//设置顶边框颜色;</span></span><br><span class="line"></span><br><span class="line">        headWriteCellStyle.setWrapped(<span class="literal">true</span>);  <span class="comment">//设置自动换行;</span></span><br><span class="line"></span><br><span class="line">        headWriteCellStyle.setHorizontalAlignment(HorizontalAlignment.CENTER);<span class="comment">//设置水平对齐的样式为居中对齐;</span></span><br><span class="line">        headWriteCellStyle.setVerticalAlignment(VerticalAlignment.CENTER);  <span class="comment">//设置垂直对齐的样式为居中对齐;</span></span><br><span class="line">        headWriteCellStyle.setShrinkToFit(<span class="literal">true</span>);<span class="comment">//设置文本收缩至合适</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> headWriteCellStyle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 内容样式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> WriteCellStyle <span class="title function_">getContentStyle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 内容的策略</span></span><br><span class="line">        <span class="type">WriteCellStyle</span> <span class="variable">contentWriteCellStyle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WriteCellStyle</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 背景颜色</span></span><br><span class="line">        <span class="comment">// 这里需要指定 FillPatternType 为FillPatternType.SOLID_FOREGROUND 不然无法显示背景颜色.头默认了 FillPatternType所以可以不指定</span></span><br><span class="line">        <span class="comment">//contentWriteCellStyle.setFillForegroundColor(IndexedColors.PALE_BLUE.getIndex());</span></span><br><span class="line">        <span class="comment">//contentWriteCellStyle.setFillPatternType(FillPatternType.SOLID_FOREGROUND);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置字体</span></span><br><span class="line">        <span class="type">WriteFont</span> <span class="variable">contentWriteFont</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WriteFont</span>();</span><br><span class="line">        contentWriteFont.setFontHeightInPoints((<span class="type">short</span>) <span class="number">12</span>);<span class="comment">//设置字体大小</span></span><br><span class="line">        contentWriteFont.setFontName(<span class="string">&quot;宋体&quot;</span>); <span class="comment">//设置字体名字</span></span><br><span class="line">        contentWriteCellStyle.setWriteFont(contentWriteFont);<span class="comment">//在样式用应用设置的字体;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置样式;</span></span><br><span class="line">        contentWriteCellStyle.setBorderBottom(BorderStyle.THIN);<span class="comment">//设置底边框;</span></span><br><span class="line">        contentWriteCellStyle.setBottomBorderColor((<span class="type">short</span>) <span class="number">0</span>);<span class="comment">//设置底边框颜色;</span></span><br><span class="line">        contentWriteCellStyle.setBorderLeft(BorderStyle.THIN);  <span class="comment">//设置左边框;</span></span><br><span class="line">        contentWriteCellStyle.setLeftBorderColor((<span class="type">short</span>) <span class="number">0</span>);<span class="comment">//设置左边框颜色;</span></span><br><span class="line">        contentWriteCellStyle.setBorderRight(BorderStyle.THIN);<span class="comment">//设置右边框;</span></span><br><span class="line">        contentWriteCellStyle.setRightBorderColor((<span class="type">short</span>) <span class="number">0</span>);<span class="comment">//设置右边框颜色;</span></span><br><span class="line">        contentWriteCellStyle.setBorderTop(BorderStyle.THIN);<span class="comment">//设置顶边框;</span></span><br><span class="line">        contentWriteCellStyle.setTopBorderColor((<span class="type">short</span>) <span class="number">0</span>); <span class="comment">///设置顶边框颜色;</span></span><br><span class="line"></span><br><span class="line">        contentWriteCellStyle.setHorizontalAlignment(HorizontalAlignment.CENTER);<span class="comment">// 水平居中</span></span><br><span class="line">        contentWriteCellStyle.setVerticalAlignment(VerticalAlignment.CENTER);<span class="comment">// 垂直居中</span></span><br><span class="line">        contentWriteCellStyle.setWrapped(<span class="literal">true</span>); <span class="comment">//设置自动换行;</span></span><br><span class="line">        contentWriteCellStyle.setShrinkToFit(<span class="literal">true</span>);<span class="comment">//设置文本收缩至合适</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> contentWriteCellStyle;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download1</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUserId(<span class="number">123</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                .registerWriteHandler(<span class="keyword">new</span> <span class="title class_">HorizontalCellStyleStrategy</span>(CustomExcelStyleUtil.getHeadStyle(), CustomExcelStyleUtil.getContentStyle()))</span><br><span class="line">                .doWrite(Arrays.asList(user));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="2.png" alt=""></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>EasyExcel</tag>
      </tags>
  </entry>
  <entry>
    <title>Easyexcel（5-自定义列宽）</title>
    <url>/blog/2024/11/02/Java/excel/easyexcel/Easyexcel%EF%BC%885-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%97%E5%AE%BD%EF%BC%89/</url>
    <content><![CDATA[<h2 id="注解">注解</h2>
<h3 id="ColumnWidth">@ColumnWidth</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WidthAndHeightData</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(&quot;字符串标题&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String string;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(&quot;日期标题&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date date;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ColumnWidth(50)</span></span><br><span class="line">    <span class="meta">@ExcelProperty(&quot;数字标题&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Double doubleData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注解使用时表头长度无法做到动态调整，只能固定设置，每次调整表头长度时只能重新修改代码</p>
<p>注意：@ColumnWidth最大值只能为255，超过255*256长度时会报错</p>
<p><strong>查看XSSFSheet源码</strong></p>
<p><img src="5.png" alt=""></p>
<h2 id="类方法">类方法</h2>
<p><img src="6.png" alt=""></p>
<h3 id="AbstractHeadColumnWidthStyleStrategy">AbstractHeadColumnWidthStyleStrategy</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractHeadColumnWidthStyleStrategy</span> <span class="keyword">extends</span> <span class="title class_">AbstractColumnWidthStyleStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">setColumnWidth</span><span class="params">(WriteSheetHolder writeSheetHolder, List&lt;WriteCellData&lt;?&gt;&gt; cellDataList, Cell cell, Head head,</span></span><br><span class="line"><span class="params">        Integer relativeRowIndex, Boolean isHead)</span> &#123;</span><br><span class="line">        <span class="comment">// 判断是否满足 当前行索引不为空 &amp;&amp; （当前是表头 || 当前行索引是首行）</span></span><br><span class="line">        <span class="comment">// 如果不满足，则说明不是表头，不需要设置</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">needSetWidth</span> <span class="operator">=</span> relativeRowIndex != <span class="literal">null</span> &amp;&amp; (isHead || relativeRowIndex == <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (!needSetWidth) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">width</span> <span class="operator">=</span> columnWidth(head, cell.getColumnIndex());</span><br><span class="line">        <span class="keyword">if</span> (width != <span class="literal">null</span>) &#123;</span><br><span class="line">            width = width * <span class="number">256</span>;</span><br><span class="line">            writeSheetHolder.getSheet().setColumnWidth(cell.getColumnIndex(), width);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> Integer <span class="title function_">columnWidth</span><span class="params">(Head head, Integer columnIndex)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过继承AbstractHeadColumnWidthStyleStrategy类，实现columnWidth方法获取其对应列的宽度</p>
<h3 id="SimpleColumnWidthStyleStrategy">SimpleColumnWidthStyleStrategy</h3>
<h4 id="源码查看">源码查看</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleColumnWidthStyleStrategy</span> <span class="keyword">extends</span> <span class="title class_">AbstractHeadColumnWidthStyleStrategy</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Integer columnWidth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SimpleColumnWidthStyleStrategy</span><span class="params">(Integer columnWidth)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.columnWidth = columnWidth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Integer <span class="title function_">columnWidth</span><span class="params">(Head head, Integer columnIndex)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> columnWidth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="基本使用">基本使用</h4>
<p>通过registerWriteHandler设置策略方法调整每列的固定宽度</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download2</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUserId(<span class="number">123</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;asplplplplpplplplplpl&quot;</span>);</span><br><span class="line">        user.setPhone(<span class="string">&quot;15245413&quot;</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;54565454@qq.com&quot;</span>);</span><br><span class="line">        user.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                .registerWriteHandler(<span class="keyword">new</span> <span class="title class_">SimpleColumnWidthStyleStrategy</span>(<span class="number">20</span>))</span><br><span class="line">                .doWrite(Arrays.asList(user));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="1.png" alt=""></p>
<h3 id="LongestMatchColumnWidthStyleStrategy">LongestMatchColumnWidthStyleStrategy</h3>
<h4 id="源码查看-2">源码查看</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LongestMatchColumnWidthStyleStrategy</span> <span class="keyword">extends</span> <span class="title class_">AbstractColumnWidthStyleStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_COLUMN_WIDTH</span> <span class="operator">=</span> <span class="number">255</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Integer, Map&lt;Integer, Integer&gt;&gt; cache = MapUtils.newHashMapWithExpectedSize(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">setColumnWidth</span><span class="params">(WriteSheetHolder writeSheetHolder, List&lt;WriteCellData&lt;?&gt;&gt; cellDataList, Cell cell,</span></span><br><span class="line"><span class="params">        Head head,</span></span><br><span class="line"><span class="params">        Integer relativeRowIndex, Boolean isHead)</span> &#123;</span><br><span class="line">        <span class="comment">// 判断 是否为表头 || 导出内容是否为空</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">needSetWidth</span> <span class="operator">=</span> isHead || !CollectionUtils.isEmpty(cellDataList);</span><br><span class="line">        <span class="keyword">if</span> (!needSetWidth) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;Integer, Integer&gt; maxColumnWidthMap = cache.computeIfAbsent(writeSheetHolder.getSheetNo(), key -&gt; <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">16</span>));</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">columnWidth</span> <span class="operator">=</span> dataLength(cellDataList, cell, isHead);</span><br><span class="line">        <span class="keyword">if</span> (columnWidth &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 超过最大值255时则设置为255</span></span><br><span class="line">        <span class="keyword">if</span> (columnWidth &gt; MAX_COLUMN_WIDTH) &#123;</span><br><span class="line">            columnWidth = MAX_COLUMN_WIDTH;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 比较该列的宽度，如果比原来的宽度大，则重新设置</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">maxColumnWidth</span> <span class="operator">=</span> maxColumnWidthMap.get(cell.getColumnIndex());</span><br><span class="line">        <span class="keyword">if</span> (maxColumnWidth == <span class="literal">null</span> || columnWidth &gt; maxColumnWidth) &#123;</span><br><span class="line">            maxColumnWidthMap.put(cell.getColumnIndex(), columnWidth);</span><br><span class="line">            writeSheetHolder.getSheet().setColumnWidth(cell.getColumnIndex(), columnWidth * <span class="number">256</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer <span class="title function_">dataLength</span><span class="params">(List&lt;WriteCellData&lt;?&gt;&gt; cellDataList, Cell cell, Boolean isHead)</span> &#123;</span><br><span class="line">        <span class="comment">// 如果是表头，则返回表头的宽度</span></span><br><span class="line">        <span class="keyword">if</span> (isHead) &#123;</span><br><span class="line">            <span class="keyword">return</span> cell.getStringCellValue().getBytes().length;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果是单元格内容，则根据类型返回其内容的宽度</span></span><br><span class="line">        WriteCellData&lt;?&gt; cellData = cellDataList.get(<span class="number">0</span>);</span><br><span class="line">        <span class="type">CellDataTypeEnum</span> <span class="variable">type</span> <span class="operator">=</span> cellData.getType();</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> STRING:</span><br><span class="line">                <span class="keyword">return</span> cellData.getStringValue().getBytes().length;</span><br><span class="line">            <span class="keyword">case</span> BOOLEAN:</span><br><span class="line">                <span class="keyword">return</span> cellData.getBooleanValue().toString().getBytes().length;</span><br><span class="line">            <span class="keyword">case</span> NUMBER:</span><br><span class="line">                <span class="keyword">return</span> cellData.getNumberValue().toString().getBytes().length;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>LongestMatchColumnWidthStyleStrategy是一个列宽自适应策略。当我们在写入Excel数据时，如果希望根据数据的实际长度来自适应调整列宽，就可以使用这个策略。它会遍历指定列的所有数据（包括表头），找出最长的数据，然后根据这个最长数据的长度来设定该列的宽度，确保数据在单元格内不会被截断。</p>
<p>根据官网介绍：这个目前不是很好用，比如有数字就会导致换行。而且长度也不是刚好和实际长度一致。 所以需要精确到刚好列宽的慎用。</p>
<h4 id="基本使用-2">基本使用</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download1</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUserId(<span class="number">123</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;asplplplplpplplplplpl&quot;</span>);</span><br><span class="line">        user.setPhone(<span class="string">&quot;15245413&quot;</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;54565454@qq.com&quot;</span>);</span><br><span class="line">        user.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                .registerWriteHandler(<span class="keyword">new</span> <span class="title class_">LongestMatchColumnWidthStyleStrategy</span>())</span><br><span class="line">                .doWrite(Arrays.asList(user));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="2.png" alt=""></p>
<h2 id="表头宽度工具类">表头宽度工具类</h2>
<p>仿照LongestMatchColumnWidthStyleStrategy源码自定义工具类</p>
<p>使用构造器传参的方式，用户可以自定义通过表头或者单元格内容长度来设置列宽，通过修改常数值和比例可以自己设置想调整的列宽</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 表头宽度根据表头或数据内容自适应</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomWidthStyleStrategy</span> <span class="keyword">extends</span> <span class="title class_">AbstractColumnWidthStyleStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1-根据表头宽度，2-根据单元格内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer type;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, Map&lt;Integer, Integer&gt;&gt; cache = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomWidthStyleStrategy</span><span class="params">(Integer type)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置列宽</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> writeSheetHolder 写入Sheet的持有者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cellDataList 当前列的单元格数据列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cell 当前单元格</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head 表头</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> relativeRowIndex 当前行的相对索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isHead 是否为表头</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">setColumnWidth</span><span class="params">(WriteSheetHolder writeSheetHolder, List&lt;WriteCellData&lt;?&gt;&gt; cellDataList, Cell cell, Head head, Integer relativeRowIndex, Boolean isHead)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isHead) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">columnWidth</span> <span class="operator">=</span> cell.getStringCellValue().length();</span><br><span class="line">                columnWidth = Math.max(columnWidth * <span class="number">2</span>, <span class="number">20</span>);</span><br><span class="line">                <span class="keyword">if</span> (columnWidth &gt; <span class="number">255</span>) &#123;</span><br><span class="line">                    columnWidth = <span class="number">255</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                writeSheetHolder.getSheet().setColumnWidth(cell.getColumnIndex(), columnWidth * <span class="number">256</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//不把标头计算在内</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">needSetWidth</span> <span class="operator">=</span> isHead || !CollectionUtils.isEmpty(cellDataList);</span><br><span class="line">        <span class="keyword">if</span> (needSetWidth) &#123;</span><br><span class="line">            Map&lt;Integer, Integer&gt; maxColumnWidthMap = cache.get(writeSheetHolder.getSheetNo());</span><br><span class="line">            <span class="keyword">if</span> (maxColumnWidthMap == <span class="literal">null</span>) &#123;</span><br><span class="line">                maxColumnWidthMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">                cache.put(writeSheetHolder.getSheetNo(), maxColumnWidthMap);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">Integer</span> <span class="variable">columnWidth</span> <span class="operator">=</span> <span class="built_in">this</span>.dataLength(cellDataList, cell, isHead);</span><br><span class="line">            <span class="keyword">if</span> (columnWidth &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (columnWidth &gt; <span class="number">255</span>) &#123;</span><br><span class="line">                    columnWidth = <span class="number">255</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">maxColumnWidth</span> <span class="operator">=</span> maxColumnWidthMap.get(cell.getColumnIndex());</span><br><span class="line">                <span class="keyword">if</span> (maxColumnWidth == <span class="literal">null</span> || columnWidth &gt; maxColumnWidth) &#123;</span><br><span class="line">                    maxColumnWidthMap.put(cell.getColumnIndex(), columnWidth);</span><br><span class="line">                    writeSheetHolder.getSheet().setColumnWidth(cell.getColumnIndex(), columnWidth * <span class="number">256</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cellDataList</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cell</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isHead</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer <span class="title function_">dataLength</span><span class="params">(List&lt;WriteCellData&lt;?&gt;&gt; cellDataList, Cell cell, Boolean isHead)</span> &#123;</span><br><span class="line">        <span class="comment">//头直接返回原始长度</span></span><br><span class="line">        <span class="keyword">if</span> (isHead) &#123;</span><br><span class="line">            <span class="keyword">return</span> cell.getStringCellValue().getBytes().length;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//不是头的话  看是什么类型  用数字加就可以了</span></span><br><span class="line">            <span class="type">WriteCellData</span> <span class="variable">cellData</span> <span class="operator">=</span> cellDataList.get(<span class="number">0</span>);</span><br><span class="line">            <span class="type">CellDataTypeEnum</span> <span class="variable">type</span> <span class="operator">=</span> cellData.getType();</span><br><span class="line">            <span class="keyword">if</span> (type == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">                    <span class="keyword">case</span> STRING:</span><br><span class="line">                        <span class="keyword">return</span> cellData.getStringValue().getBytes().length + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">case</span> BOOLEAN:</span><br><span class="line">                        <span class="keyword">return</span> cellData.getBooleanValue().toString().getBytes().length;</span><br><span class="line">                    <span class="keyword">case</span> NUMBER:</span><br><span class="line">                        <span class="keyword">return</span> cellData.getNumberValue().toString().getBytes().length * <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">case</span> DATE:</span><br><span class="line">                        <span class="keyword">return</span> cellData.getDateValue().toString().length() + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download3</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUserId(<span class="number">123</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;asplplplplpplplplplpl&quot;</span>);</span><br><span class="line">        user.setPhone(<span class="string">&quot;15245413&quot;</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;54565454@qq.com&quot;</span>);</span><br><span class="line">        user.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                .registerWriteHandler(<span class="keyword">new</span> <span class="title class_">CustomWidthStyleStrategy</span>(<span class="number">1</span>))</span><br><span class="line">                .doWrite(Arrays.asList(user));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/download4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download4</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUserId(<span class="number">123</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;asplplplplpplplplplpl&quot;</span>);</span><br><span class="line">        user.setPhone(<span class="string">&quot;15245413&quot;</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;54565454@qq.com&quot;</span>);</span><br><span class="line">        user.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                .registerWriteHandler(<span class="keyword">new</span> <span class="title class_">CustomWidthStyleStrategy</span>(<span class="number">2</span>))</span><br><span class="line">                .doWrite(Arrays.asList(user));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>运行结果</strong></p>
<ol>
<li>使用表头设置的列宽</li>
</ol>
<p><img src="3.png" alt=""></p>
<ol start="2">
<li>使用单元格内容设置的列宽</li>
</ol>
<p><img src="4.png" alt=""></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>EasyExcel</tag>
      </tags>
  </entry>
  <entry>
    <title>Easyexcel（8-通用工具类）</title>
    <url>/blog/2024/11/06/Java/excel/easyexcel/Easyexcel%EF%BC%888-%E9%80%9A%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB%EF%BC%89/</url>
    <content><![CDATA[<h2 id="EasyExcelUtils">EasyExcelUtils</h2>
<p>提供常见的文件同步和异步读取、文件导出、模板填充、自定义表头、自定义内容、从指定行开始读取数据、多Sheet导出等方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EasyExcelUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步无模型读（默认读取sheet0,从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath excel文件的绝对路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Map&lt;Integer, String&gt;&gt; <span class="title function_">syncRead</span><span class="params">(String filePath)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(filePath).sheet().doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步无模型读（默认读取sheet0,从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream excel文件的输入流</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Map&lt;Integer, String&gt;&gt; <span class="title function_">syncRead</span><span class="params">(InputStream inputStream)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(inputStream).sheet().doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步无模型读（默认读取sheet0,从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file excel文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Map&lt;Integer, String&gt;&gt; <span class="title function_">syncRead</span><span class="params">(File file)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(file).sheet().doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步无模型读（自定义读取sheetX，从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath excel文件的绝对路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo  sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Map&lt;Integer, String&gt;&gt; <span class="title function_">syncRead</span><span class="params">(String filePath, Integer sheetNo)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(filePath).sheet(sheetNo).doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步无模型读（自定义读取sheetX，从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream excel文件的输入流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo  sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Map&lt;Integer, String&gt;&gt; <span class="title function_">syncRead</span><span class="params">(InputStream inputStream, Integer sheetNo)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(inputStream).sheet(sheetNo).doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步无模型读（自定义读取sheetX，从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file excel文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo  sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Map&lt;Integer, String&gt;&gt; <span class="title function_">syncRead</span><span class="params">(File file, Integer sheetNo)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(file).sheet(sheetNo).doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步无模型读（指定sheet和表头占的行数）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo    sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headRowNum 表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Map&lt;Integer, String&gt;&gt; <span class="title function_">syncRead</span><span class="params">(String filePath, Integer sheetNo, Integer headRowNum)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(filePath).sheet(sheetNo).headRowNumber(headRowNum).doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步无模型读（指定sheet和表头占的行数）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo     sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headRowNum  表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Map&lt;Integer, String&gt;&gt; <span class="title function_">syncRead</span><span class="params">(InputStream inputStream, Integer sheetNo, Integer headRowNum)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(inputStream).sheet(sheetNo).headRowNumber(headRowNum).doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步无模型读（指定sheet和表头占的行数）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo    sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headRowNum 表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Map&lt;Integer, String&gt;&gt; <span class="title function_">syncRead</span><span class="params">(File file, Integer sheetNo, Integer headRowNum)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(file).sheet(sheetNo).headRowNumber(headRowNum).doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步按模型读（默认读取sheet0,从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz    模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">syncReadModel</span><span class="params">(String filePath, Class clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(filePath).sheet().head(clazz).doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步按模型读（默认读取sheet0,从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz    模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">syncReadModel</span><span class="params">(InputStream inputStream, Class clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(inputStream).sheet().head(clazz).doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步按模型读（默认读取sheet0,从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz    模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">syncReadModel</span><span class="params">(File file, Class clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(file).sheet().head(clazz).doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步按模型读（默认表头占一行，从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz    模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo  sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">syncReadModel</span><span class="params">(String filePath, Class clazz, Integer sheetNo)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(filePath).sheet(sheetNo).head(clazz).doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步按模型读（默认表头占一行，从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz    模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo  sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">syncReadModel</span><span class="params">(InputStream inputStream, Class clazz, Integer sheetNo)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(inputStream).sheet(sheetNo).head(clazz).doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步按模型读（默认表头占一行，从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz    模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo  sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">syncReadModel</span><span class="params">(File file, Class clazz, Integer sheetNo)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(file).sheet(sheetNo).head(clazz).doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步按模型读（指定sheet和表头占的行数）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz      模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo    sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headRowNum 表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">syncReadModel</span><span class="params">(String filePath, Class clazz, Integer sheetNo, Integer headRowNum)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(filePath).sheet(sheetNo).headRowNumber(headRowNum).head(clazz).doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步按模型读（指定sheet和表头占的行数）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz       模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo     sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headRowNum  表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">syncReadModel</span><span class="params">(InputStream inputStream, Class clazz, Integer sheetNo, Integer headRowNum)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(inputStream).sheet(sheetNo).headRowNumber(headRowNum).head(clazz).doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步按模型读（指定sheet和表头占的行数）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz      模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo    sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headRowNum 表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">syncReadModel</span><span class="params">(File file, Class clazz, Integer sheetNo, Integer headRowNum)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(file).sheet(sheetNo).headRowNumber(headRowNum).head(clazz).doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步无模型读（默认读取sheet0,从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath      表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncRead</span><span class="params">(String filePath, AnalysisEventListener&lt;T&gt; excelListener)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(filePath, excelListener).sheet().doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步无模型读（默认读取sheet0,从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream      表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncRead</span><span class="params">(InputStream inputStream, AnalysisEventListener&lt;T&gt; excelListener)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(inputStream, excelListener).sheet().doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步无模型读（默认读取sheet0,从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file      表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncRead</span><span class="params">(File file, AnalysisEventListener&lt;T&gt; excelListener)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(file, excelListener).sheet().doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步无模型读（默认表头占一行，从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath      表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo       sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncRead</span><span class="params">(String filePath, AnalysisEventListener&lt;T&gt; excelListener, Integer sheetNo)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(filePath, excelListener).sheet(sheetNo).doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步无模型读（默认表头占一行，从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream      表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo       sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncRead</span><span class="params">(InputStream inputStream, AnalysisEventListener&lt;T&gt; excelListener, Integer sheetNo)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(inputStream, excelListener).sheet(sheetNo).doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步无模型读（默认表头占一行，从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file      表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo       sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncRead</span><span class="params">(File file, AnalysisEventListener&lt;T&gt; excelListener, Integer sheetNo)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(file, excelListener).sheet(sheetNo).doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步无模型读（指定sheet和表头占的行数）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo       sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headRowNum    表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncRead</span><span class="params">(String filePath, AnalysisEventListener&lt;T&gt; excelListener, Integer sheetNo, Integer headRowNum)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(filePath, excelListener).sheet(sheetNo).headRowNumber(headRowNum).doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步无模型读（指定sheet和表头占的行数）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo       sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headRowNum    表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncRead</span><span class="params">(InputStream inputStream, AnalysisEventListener&lt;T&gt; excelListener, Integer sheetNo, Integer headRowNum)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(inputStream, excelListener).sheet(sheetNo).headRowNumber(headRowNum).doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步无模型读（指定sheet和表头占的行数）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo       sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headRowNum    表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncRead</span><span class="params">(File file, AnalysisEventListener&lt;T&gt; excelListener, Integer sheetNo, Integer headRowNum)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(file, excelListener).sheet(sheetNo).headRowNumber(headRowNum).doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步按模型读取（默认读取sheet0,从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz         模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncReadModel</span><span class="params">(String filePath, AnalysisEventListener&lt;T&gt; excelListener, Class clazz)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(filePath, clazz, excelListener).sheet().doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步按模型读取（默认读取sheet0,从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz         模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncReadModel</span><span class="params">(InputStream inputStream, AnalysisEventListener&lt;T&gt; excelListener, Class clazz)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(inputStream, clazz, excelListener).sheet().doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步按模型读取（默认读取sheet0,从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz         模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncReadModel</span><span class="params">(File file, AnalysisEventListener&lt;T&gt; excelListener, Class clazz)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(file, clazz, excelListener).sheet().doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步按模型读取（默认表头占一行，从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz         模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo       sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncReadModel</span><span class="params">(String filePath, AnalysisEventListener&lt;T&gt; excelListener, Class clazz, Integer sheetNo)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(filePath, clazz, excelListener).sheet(sheetNo).doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步按模型读取（默认表头占一行，从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz         模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo       sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncReadModel</span><span class="params">(InputStream inputStream, AnalysisEventListener&lt;T&gt; excelListener, Class clazz, Integer sheetNo)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(inputStream, clazz, excelListener).sheet(sheetNo).doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步按模型读取（默认表头占一行，从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz         模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo       sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncReadModel</span><span class="params">(File file, AnalysisEventListener&lt;T&gt; excelListener, Class clazz, Integer sheetNo)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(file, clazz, excelListener).sheet(sheetNo).doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步按模型读取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz         模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo       sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headRowNum    表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncReadModel</span><span class="params">(String filePath, AnalysisEventListener&lt;T&gt; excelListener, Class clazz, Integer sheetNo, Integer headRowNum)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(filePath, clazz, excelListener).sheet(sheetNo).headRowNumber(headRowNum).doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步按模型读取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz         模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo       sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headRowNum    表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncReadModel</span><span class="params">(InputStream inputStream, AnalysisEventListener&lt;T&gt; excelListener, Class clazz, Integer sheetNo, Integer headRowNum)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(inputStream, clazz, excelListener).sheet(sheetNo).headRowNumber(headRowNum).doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步按模型读取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz         模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo       sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headRowNum    表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncReadModel</span><span class="params">(File file, AnalysisEventListener&lt;T&gt; excelListener, Class clazz, Integer sheetNo, Integer headRowNum)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(file, clazz, excelListener).sheet(sheetNo).headRowNumber(headRowNum).doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无模板写文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head     表头数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data     表内容数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String filePath, List&lt;List&lt;String&gt;&gt; head, List&lt;List&lt;Object&gt;&gt; data)</span> &#123;</span><br><span class="line">        EasyExcel.write(filePath).head(head).sheet().doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无模板写文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head     表头数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data     表内容数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(OutputStream outputStream, List&lt;List&lt;String&gt;&gt; head, List&lt;List&lt;Object&gt;&gt; data)</span> &#123;</span><br><span class="line">        EasyExcel.write(outputStream).head(head).sheet().doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无模板写文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head      表头数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data      表内容数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo   sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String filePath, List&lt;List&lt;String&gt;&gt; head, List&lt;List&lt;Object&gt;&gt; data, Integer sheetNo)</span> &#123;</span><br><span class="line">        EasyExcel.write(filePath).head(head).sheet(sheetNo).doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无模板写文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head      表头数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data      表内容数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo   sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(OutputStream outputStream, List&lt;List&lt;String&gt;&gt; head, List&lt;List&lt;Object&gt;&gt; data, Integer sheetNo)</span> &#123;</span><br><span class="line">        EasyExcel.write(outputStream).head(head).sheet(sheetNo).doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无模板写文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head      表头数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data      表内容数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo   sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetName sheet名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String filePath, List&lt;List&lt;String&gt;&gt; head, List&lt;List&lt;Object&gt;&gt; data, Integer sheetNo, String sheetName)</span> &#123;</span><br><span class="line">        EasyExcel.write(filePath).head(head).sheet(sheetNo, sheetName).doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无模板写文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head      表头数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data      表内容数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo   sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetName sheet名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(OutputStream outputStream, List&lt;List&lt;String&gt;&gt; head, List&lt;List&lt;Object&gt;&gt; data, Integer sheetNo, String sheetName)</span> &#123;</span><br><span class="line">        EasyExcel.write(outputStream).head(head).sheet(sheetNo, sheetName).doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据excel模板文件写入文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> templateFileName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeTemplate</span><span class="params">(String filePath, String templateFileName, List data)</span> &#123;</span><br><span class="line">        EasyExcel.write(filePath).withTemplate(templateFileName).sheet().doFill(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据excel模板文件写入文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> templateFileName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeTemplate</span><span class="params">(OutputStream outputStream, String templateFileName, List data)</span> &#123;</span><br><span class="line">        EasyExcel.write(outputStream).withTemplate(templateFileName).sheet().doFill(data);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据excel模板文件写入文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> templateFileName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeTemplate</span><span class="params">(File file, String templateFileName, List data)</span> &#123;</span><br><span class="line">        EasyExcel.write(file).withTemplate(templateFileName).sheet().doFill(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据excel模板文件写入文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> templateFileName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headClazz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeTemplate</span><span class="params">(String filePath, String templateFileName, Class headClazz, List data)</span> &#123;</span><br><span class="line">        EasyExcel.write(filePath, headClazz).withTemplate(templateFileName).sheet().doFill(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据excel模板文件写入文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> templateFileName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headClazz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeTemplate</span><span class="params">(OutputStream outputStream, String templateFileName, Class headClazz, List data)</span> &#123;</span><br><span class="line">        EasyExcel.write(outputStream, headClazz).withTemplate(templateFileName).sheet().doFill(data);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据excel模板文件写入文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> templateFileName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headClazz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeTemplate</span><span class="params">(File file, String templateFileName, Class headClazz, List data)</span> &#123;</span><br><span class="line">        EasyExcel.write(file, headClazz).withTemplate(templateFileName).sheet().doFill(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按模板写文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headClazz 表头模板</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data      数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String filePath, Class headClazz, List data)</span> &#123;</span><br><span class="line">        EasyExcel.write(filePath, headClazz).sheet().doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按模板写文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headClazz 表头模板</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data      数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(OutputStream outputStream, Class headClazz, List data)</span> &#123;</span><br><span class="line">        EasyExcel.write(outputStream, headClazz).sheet().doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按模板写文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headClazz 表头模板</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data      数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(File file, Class headClazz, List data)</span> &#123;</span><br><span class="line">        EasyExcel.write(file, headClazz).sheet().doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按模板写文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headClazz 表头模板</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data      数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo   sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String filePath, Class headClazz, List data, Integer sheetNo)</span> &#123;</span><br><span class="line">        EasyExcel.write(filePath, headClazz).sheet(sheetNo).doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按模板写文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headClazz 表头模板</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data      数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo   sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(OutputStream outputStream, Class headClazz, List data, Integer sheetNo)</span> &#123;</span><br><span class="line">        EasyExcel.write(outputStream, headClazz).sheet(sheetNo).doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按模板写文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headClazz 表头模板</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data      数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo   sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(File file, Class headClazz, List data, Integer sheetNo)</span> &#123;</span><br><span class="line">        EasyExcel.write(file, headClazz).sheet(sheetNo).doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按模板写文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headClazz 表头模板</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data      数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo   sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetName sheet名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String filePath, Class headClazz, List data, Integer sheetNo, String sheetName)</span> &#123;</span><br><span class="line">        EasyExcel.write(filePath, headClazz).sheet(sheetNo, sheetName).doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按模板写文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headClazz 表头模板</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data      数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo   sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetName sheet名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(OutputStream outputStream, Class headClazz, List data, Integer sheetNo, String sheetName)</span> &#123;</span><br><span class="line">        EasyExcel.write(outputStream, headClazz).sheet(sheetNo, sheetName).doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按模板写文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headClazz 表头模板</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data      数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo   sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetName sheet名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(File file, Class headClazz, List data, Integer sheetNo, String sheetName)</span> &#123;</span><br><span class="line">        EasyExcel.write(file, headClazz).sheet(sheetNo, sheetName).doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按模板写文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headClazz    表头模板</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data         数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> writeHandler 自定义的处理器，比如设置table样式，设置超链接、单元格下拉框等等功能都可以通过这个实现（需要注册多个则自己通过链式去调用）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo      sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetName    sheet名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String filePath, Class headClazz, List data, WriteHandler writeHandler, Integer sheetNo, String sheetName)</span> &#123;</span><br><span class="line">        EasyExcel.write(filePath, headClazz).registerWriteHandler(writeHandler).sheet(sheetNo, sheetName).doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按模板写文件（包含某些字段）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headClazz   表头模板</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data        数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> includeCols 包含字段集合，根据字段名称显示</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo     sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetName   sheet名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeInclude</span><span class="params">(String filePath, Class headClazz, List data, Set&lt;String&gt; includeCols, Integer sheetNo, String sheetName)</span> &#123;</span><br><span class="line">        EasyExcel.write(filePath, headClazz).includeColumnFieldNames(includeCols).sheet(sheetNo, sheetName).doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按模板写文件（排除某些字段）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headClazz   表头模板</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data        数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excludeCols 过滤排除的字段，根据字段名称过滤</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo     sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetName   sheet名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeExclude</span><span class="params">(String filePath, Class headClazz, List data, Set&lt;String&gt; excludeCols, Integer sheetNo, String sheetName)</span> &#123;</span><br><span class="line">        EasyExcel.write(filePath, headClazz).excludeColumnFieldNames(excludeCols).sheet(sheetNo, sheetName).doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 多个sheet页的数据链式写入</span></span><br><span class="line"><span class="comment">     * ExcelUtil.writeWithSheets(outputStream)</span></span><br><span class="line"><span class="comment">     * .writeModel(ExcelModel.class, excelModelList, &quot;sheetName1&quot;)</span></span><br><span class="line"><span class="comment">     * .write(headData, data,&quot;sheetName2&quot;)</span></span><br><span class="line"><span class="comment">     * .finish();</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputStream</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> EasyExcelWriterFactory <span class="title function_">writeWithSheets</span><span class="params">(OutputStream outputStream)</span> &#123;</span><br><span class="line">        <span class="type">EasyExcelWriterFactory</span> <span class="variable">excelWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EasyExcelWriterFactory</span>(outputStream);</span><br><span class="line">        <span class="keyword">return</span> excelWriter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 多个sheet页的数据链式写入</span></span><br><span class="line"><span class="comment">     * ExcelUtil.writeWithSheets(file)</span></span><br><span class="line"><span class="comment">     * .writeModel(ExcelModel.class, excelModelList, &quot;sheetName1&quot;)</span></span><br><span class="line"><span class="comment">     * .write(headData, data,&quot;sheetName2&quot;)</span></span><br><span class="line"><span class="comment">     * .finish();</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> EasyExcelWriterFactory <span class="title function_">writeWithSheets</span><span class="params">(File file)</span> &#123;</span><br><span class="line">        <span class="type">EasyExcelWriterFactory</span> <span class="variable">excelWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EasyExcelWriterFactory</span>(file);</span><br><span class="line">        <span class="keyword">return</span> excelWriter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 多个sheet页的数据链式写入</span></span><br><span class="line"><span class="comment">     * ExcelUtil.writeWithSheets(filePath)</span></span><br><span class="line"><span class="comment">     * .writeModel(ExcelModel.class, excelModelList, &quot;sheetName1&quot;)</span></span><br><span class="line"><span class="comment">     * .write(headData, data,&quot;sheetName2&quot;)</span></span><br><span class="line"><span class="comment">     * .finish();</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> EasyExcelWriterFactory <span class="title function_">writeWithSheets</span><span class="params">(String filePath)</span> &#123;</span><br><span class="line">        <span class="type">EasyExcelWriterFactory</span> <span class="variable">excelWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EasyExcelWriterFactory</span>(filePath);</span><br><span class="line">        <span class="keyword">return</span> excelWriter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 多个sheet页的数据链式写入（失败了会返回一个有部分数据的Excel）</span></span><br><span class="line"><span class="comment">     * ExcelUtil.writeWithSheets(response, exportFileName)</span></span><br><span class="line"><span class="comment">     * .writeModel(ExcelModel.class, excelModelList, &quot;sheetName1&quot;)</span></span><br><span class="line"><span class="comment">     * .write(headData, data,&quot;sheetName2&quot;)</span></span><br><span class="line"><span class="comment">     * .finish();</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exportFileName 导出的文件名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> EasyExcelWriterFactory <span class="title function_">writeWithSheetsWeb</span><span class="params">(HttpServletResponse response, String exportFileName)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(exportFileName, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xlsx&quot;</span>);</span><br><span class="line">        <span class="type">EasyExcelWriterFactory</span> <span class="variable">excelWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EasyExcelWriterFactory</span>(response.getOutputStream());</span><br><span class="line">        <span class="keyword">return</span> excelWriter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="EasyExcelWriterFactory">EasyExcelWriterFactory</h2>
<p>文件导出和模板填充实现多Sheet写入（链式使用）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EasyExcelWriterFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">sheetNo</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">ExcelWriter</span> <span class="variable">excelWriter</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EasyExcelWriterFactory</span><span class="params">(OutputStream outputStream)</span> &#123;</span><br><span class="line">        excelWriter = EasyExcel.write(outputStream).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EasyExcelWriterFactory</span><span class="params">(File file)</span> &#123;</span><br><span class="line">        excelWriter = EasyExcel.write(file).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EasyExcelWriterFactory</span><span class="params">(String filePath)</span> &#123;</span><br><span class="line">        excelWriter = EasyExcel.write(filePath).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链式模板表头写入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headClazz 表头格式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data      数据 List&lt;ExcelModel&gt; 或者List&lt;List&lt;Object&gt;&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> EasyExcelWriterFactory <span class="title function_">writeModel</span><span class="params">(Class headClazz, List data)</span> &#123;</span><br><span class="line">        excelWriter.write(data, EasyExcel.writerSheet(<span class="built_in">this</span>.sheetNo++).head(headClazz).build());</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链式模板表头写入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headClazz 表头格式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data      数据 List&lt;ExcelModel&gt; 或者List&lt;List&lt;Object&gt;&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> EasyExcelWriterFactory <span class="title function_">writeModel</span><span class="params">(Class headClazz, List data, String sheetName)</span> &#123;</span><br><span class="line">        excelWriter.write(data, EasyExcel.writerSheet(<span class="built_in">this</span>.sheetNo++, sheetName).head(headClazz).build());</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链式自定义表头写入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data      数据 List&lt;ExcelModel&gt; 或者List&lt;List&lt;Object&gt;&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> EasyExcelWriterFactory <span class="title function_">write</span><span class="params">(List&lt;List&lt;String&gt;&gt; head, List data, String sheetName)</span> &#123;</span><br><span class="line">        excelWriter.write(data, EasyExcel.writerSheet(<span class="built_in">this</span>.sheetNo++, sheetName).head(head).build());</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用此类结束后，一定要关闭流</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">finish</span><span class="params">()</span> &#123;</span><br><span class="line">        excelWriter.finish();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ExcelListener">ExcelListener</h2>
<p>文件读取大数据和多Sheet导入监听器（使用线程池和批量插入方法）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExcelListener</span> <span class="keyword">extends</span> <span class="title class_">AnalysisEventListener</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">BATCH_SIZE</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer sheetNo;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Executor executor;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; dataList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ExcelListener</span><span class="params">(Integer sheetNo, Executor executor)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sheetNo = sheetNo;</span><br><span class="line">        <span class="built_in">this</span>.executor = executor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(T data, AnalysisContext analysisContext)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;解析到一条数据：&#123;&#125;&quot;</span>, JSON.toJSONString(data));</span><br><span class="line">        dataList.add(data);</span><br><span class="line">        <span class="keyword">if</span> (dataList.size() &gt;= BATCH_SIZE) &#123;</span><br><span class="line">            CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">                <span class="comment">// 业务操作</span></span><br><span class="line">                <span class="comment">// saveToDB(dataList);</span></span><br><span class="line">            &#125;, executor);</span><br><span class="line">            dataList.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfterAllAnalysed</span><span class="params">(AnalysisContext analysisContext)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;已解析完所有数据!&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!dataList.isEmpty()) &#123;</span><br><span class="line">            CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">                <span class="comment">// 业务操作</span></span><br><span class="line">                <span class="comment">// saveToDB(dataList);</span></span><br><span class="line">            &#125;, executor);</span><br><span class="line">            dataList.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onException</span><span class="params">(Exception exception, AnalysisContext context)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ExcelDataConvertException) &#123;</span><br><span class="line">            <span class="type">ExcelDataConvertException</span> <span class="variable">convertException</span> <span class="operator">=</span> (ExcelDataConvertException) exception;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">row</span> <span class="operator">=</span> convertException.getRowIndex();</span><br><span class="line">            log.error(<span class="string">&quot;sheetNo：&#123;&#125;，第&#123;&#125;行数据转换失败，异常信息：&#123;&#125;&quot;</span>, sheetNo, row, exception.getMessage());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.error(<span class="string">&quot;导入其他异常信息：&#123;&#125;&quot;</span>, exception.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用案例">使用案例</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download1</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUserId(<span class="number">123</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        EasyExcelUtils.write(response.getOutputStream(), User.class, Arrays.asList(user));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/download2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download2</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUserId(<span class="number">123</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        EasyExcelUtils.write(response.getOutputStream(), User.class, Arrays.asList(user), <span class="number">2</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/download3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download3</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUserId(<span class="number">123</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        EasyExcelUtils.writeWithSheets(response.getOutputStream())</span><br><span class="line">                .writeModel(User.class, Arrays.asList(user))</span><br><span class="line">                .writeModel(User.class, Arrays.asList(user))</span><br><span class="line">                .finish();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>EasyExcel</tag>
      </tags>
  </entry>
  <entry>
    <title>Easyexcel（6-单元格合并）</title>
    <url>/blog/2024/11/03/Java/excel/easyexcel/Easyexcel%EF%BC%886-%E5%8D%95%E5%85%83%E6%A0%BC%E5%90%88%E5%B9%B6%EF%BC%89/</url>
    <content><![CDATA[<h2 id="注解">注解</h2>
<h3 id="ContentLoopMerge">@ContentLoopMerge</h3>
<p>用于设置合并单元格的注解，作用于字段上</p>
<ol>
<li>eachRow：每隔几行合并</li>
<li>columnExtend：合并列的下标</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ContentLoopMerge(eachRow = 2, columnExtend = 1)</span></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="OnceAbsoluteMerge">@OnceAbsoluteMerge</h3>
<p>用于指定位置的单元格合并，作用于类上</p>
<ol>
<li>firstRowIndex：第一行下标</li>
<li>lastRowIndex：最后一行下标</li>
<li>firstColumnIndex：第一列下标</li>
<li>lastColumnIndex：最后一列下标</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@OnceAbsoluteMerge(firstColumnIndex = 0, lastColumnIndex = 0, firstRowIndex = 1, lastRowIndex = 2)</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="类方法">类方法</h2>
<h3 id="LoopMergeStrategy">LoopMergeStrategy</h3>
<h4 id="源码查看">源码查看</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoopMergeStrategy</span> <span class="keyword">implements</span> <span class="title class_">RowWriteHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每隔几行合并</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> eachRow;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并几列</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> columnExtend;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并列</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> columnIndex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LoopMergeStrategy</span><span class="params">(<span class="type">int</span> eachRow, <span class="type">int</span> columnIndex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(eachRow, <span class="number">1</span>, columnIndex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LoopMergeStrategy</span><span class="params">(<span class="type">int</span> eachRow, <span class="type">int</span> columnExtend, <span class="type">int</span> columnIndex)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (eachRow &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;EachRows must be greater than 1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (columnExtend &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;ColumnExtend must be greater than 1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (columnExtend == <span class="number">1</span> &amp;&amp; eachRow == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;ColumnExtend or eachRows must be greater than 1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (columnIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;ColumnIndex must be greater than 0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.eachRow = eachRow;</span><br><span class="line">        <span class="built_in">this</span>.columnExtend = columnExtend;</span><br><span class="line">        <span class="built_in">this</span>.columnIndex = columnIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LoopMergeStrategy</span><span class="params">(LoopMergeProperty loopMergeProperty, Integer columnIndex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(loopMergeProperty.getEachRow(), loopMergeProperty.getColumnExtend(), columnIndex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterRowDispose</span><span class="params">(RowWriteHandlerContext context)</span> &#123;</span><br><span class="line">        <span class="comment">// 判断是否为表头</span></span><br><span class="line">        <span class="keyword">if</span> (context.getHead() || context.getRelativeRowIndex() == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 循环进行单元格合并</span></span><br><span class="line">        <span class="keyword">if</span> (context.getRelativeRowIndex() % eachRow == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">CellRangeAddress</span> <span class="variable">cellRangeAddress</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CellRangeAddress</span>(context.getRowIndex(),</span><br><span class="line">                context.getRowIndex() + eachRow - <span class="number">1</span>,</span><br><span class="line">                columnIndex, columnIndex + columnExtend - <span class="number">1</span>);</span><br><span class="line">            context.getWriteSheetHolder().getSheet().addMergedRegionUnsafe(cellRangeAddress);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="基本使用">基本使用</h4>
<p>通过 registerWriteHandler 方法设置单元格合并策略，用于指定某几列每相差几行进行单元格合并</p>
<ol>
<li>指定单列合并</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download1</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user1.setUserId(<span class="number">123</span>);</span><br><span class="line">        user1.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user1.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user1.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user1.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user2.setUserId(<span class="number">123</span>);</span><br><span class="line">        user2.setName(<span class="string">&quot;asbnm&quot;</span>);</span><br><span class="line">        user2.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user2.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user2.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user3.setUserId(<span class="number">123</span>);</span><br><span class="line">        user3.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user3.setPhone(<span class="string">&quot;46543213&quot;</span>);</span><br><span class="line">        user3.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user3.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 第1列每隔2行合并一次</span></span><br><span class="line">        <span class="type">LoopMergeStrategy</span> <span class="variable">loopMergeStrategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoopMergeStrategy</span>(<span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                .registerWriteHandler(loopMergeStrategy)</span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                .doWrite(Arrays.asList(user1, user2, user3));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="1.png" alt=""></p>
<ol start="2">
<li>指定多列合并</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download1</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user1.setUserId(<span class="number">123</span>);</span><br><span class="line">        user1.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user1.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user1.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user1.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user2.setUserId(<span class="number">123</span>);</span><br><span class="line">        user2.setName(<span class="string">&quot;asbnm&quot;</span>);</span><br><span class="line">        user2.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user2.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user2.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user3.setUserId(<span class="number">123</span>);</span><br><span class="line">        user3.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user3.setPhone(<span class="string">&quot;46543213&quot;</span>);</span><br><span class="line">        user3.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user3.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="comment">// 第2列开始每隔2行合并一次，从第2列开始的两列进行合并</span></span><br><span class="line">        <span class="type">LoopMergeStrategy</span> <span class="variable">loopMergeStrategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoopMergeStrategy</span>(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                .registerWriteHandler(loopMergeStrategy)</span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                .doWrite(Arrays.asList(user1, user2, user3));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="2.png" alt=""></p>
<h3 id="OnceAbsoluteMergeStrategy">OnceAbsoluteMergeStrategy</h3>
<h4 id="源码查看-2">源码查看</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OnceAbsoluteMergeStrategy</span> <span class="keyword">implements</span> <span class="title class_">SheetWriteHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第一行</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> firstRowIndex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最后一行</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> lastRowIndex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第一列</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> firstColumnIndex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最后一列</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> lastColumnIndex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OnceAbsoluteMergeStrategy</span><span class="params">(<span class="type">int</span> firstRowIndex, <span class="type">int</span> lastRowIndex, <span class="type">int</span> firstColumnIndex, <span class="type">int</span> lastColumnIndex)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (firstRowIndex &lt; <span class="number">0</span> || lastRowIndex &lt; <span class="number">0</span> || firstColumnIndex &lt; <span class="number">0</span> || lastColumnIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;All parameters must be greater than 0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.firstRowIndex = firstRowIndex;</span><br><span class="line">        <span class="built_in">this</span>.lastRowIndex = lastRowIndex;</span><br><span class="line">        <span class="built_in">this</span>.firstColumnIndex = firstColumnIndex;</span><br><span class="line">        <span class="built_in">this</span>.lastColumnIndex = lastColumnIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OnceAbsoluteMergeStrategy</span><span class="params">(OnceAbsoluteMergeProperty onceAbsoluteMergeProperty)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(onceAbsoluteMergeProperty.getFirstRowIndex(), onceAbsoluteMergeProperty.getLastRowIndex(),</span><br><span class="line">            onceAbsoluteMergeProperty.getFirstColumnIndex(), onceAbsoluteMergeProperty.getLastColumnIndex());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterSheetCreate</span><span class="params">(WriteWorkbookHolder writeWorkbookHolder, WriteSheetHolder writeSheetHolder)</span> &#123;</span><br><span class="line">        <span class="type">CellRangeAddress</span> <span class="variable">cellRangeAddress</span> <span class="operator">=</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">CellRangeAddress</span>(firstRowIndex, lastRowIndex, firstColumnIndex, lastColumnIndex);</span><br><span class="line">        writeSheetHolder.getSheet().addMergedRegionUnsafe(cellRangeAddress);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="基本使用-2">基本使用</h4>
<p>通过 registerWriteHandler 方法设置单元格合并策略，用于指定一个区域内的单元格进行合并</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download2</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user1.setUserId(<span class="number">123</span>);</span><br><span class="line">        user1.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user1.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user1.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user1.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user2.setUserId(<span class="number">123</span>);</span><br><span class="line">        user2.setName(<span class="string">&quot;asbnm&quot;</span>);</span><br><span class="line">        user2.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user2.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user2.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user3.setUserId(<span class="number">123</span>);</span><br><span class="line">        user3.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user3.setPhone(<span class="string">&quot;46543213&quot;</span>);</span><br><span class="line">        user3.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user3.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="comment">// 从第1行第3列合并到第3行第3列</span></span><br><span class="line">        <span class="type">OnceAbsoluteMergeStrategy</span> <span class="variable">onceAbsoluteMergeStrategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OnceAbsoluteMergeStrategy</span>(<span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                .registerWriteHandler(onceAbsoluteMergeStrategy)</span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                .doWrite(Arrays.asList(user1, user2, user3));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="3.png" alt=""></p>
<h2 id="合并单元格工具类">合并单元格工具类</h2>
<h3 id="AbstractMergeStrategy">AbstractMergeStrategy</h3>
<h4 id="基本思路">基本思路</h4>
<ol>
<li>继承 AbstractMergeStrategy 抽象合并策略，重写 merge 方法</li>
<li>传入要合并的数据列表，循环判断上下行是否是相同的数据，如果是则为同一个组，否则为另一个组，使用 List 保存每个组的数量</li>
<li>单元格渲染时，循环遍历每个组的值后，计算要合并的单元格的上下标</li>
</ol>
<h4 id="使用">使用</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义合并策略 该类继承了AbstractMergeStrategy抽象合并策略，需要重写merge()方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomMergeStrategy</span> <span class="keyword">extends</span> <span class="title class_">AbstractMergeStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分组，每几行合并一次</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; exportFieldGroupCountList;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 目标合并列index</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer targetColumnIndex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要开始合并单元格的首行index</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer rowIndex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomMergeStrategy</span><span class="params">(List&lt;String&gt; exportDataList, Integer targetColumnIndex, Integer rowIndex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.exportFieldGroupCountList = getGroupCountList(exportDataList, rowIndex);</span><br><span class="line">        <span class="built_in">this</span>.targetColumnIndex = targetColumnIndex;</span><br><span class="line">        <span class="built_in">this</span>.rowIndex = rowIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 该方法将目标列根据值是否相同连续可合并，存储可合并的行数</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; <span class="title function_">getGroupCountList</span><span class="params">(List&lt;String&gt; exportDataList, Integer rowIndex)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(exportDataList)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; groupCountList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> rowIndex + <span class="number">1</span>, len = exportDataList.size(); i &lt; len; i++) &#123;</span><br><span class="line">            <span class="comment">// 判断上一列和当前列的值是否相同</span></span><br><span class="line">            <span class="keyword">if</span> (exportDataList.get(i).equals(exportDataList.get(i - <span class="number">1</span>))) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                groupCountList.add(count);</span><br><span class="line">                count = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 处理完最后一条后</span></span><br><span class="line">        groupCountList.add(count);</span><br><span class="line">        <span class="keyword">return</span> groupCountList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(Sheet sheet, Cell cell, Head head, Integer relativeRowIndex)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == rowIndex) &#123;</span><br><span class="line">            rowIndex = cell.getRowIndex();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 仅从首行以及目标列的单元格开始合并，忽略其他</span></span><br><span class="line">        <span class="keyword">if</span> (cell.getRowIndex() == rowIndex + <span class="number">1</span> &amp;&amp; cell.getColumnIndex() == targetColumnIndex) &#123;</span><br><span class="line">            mergeGroupColumn(sheet);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">mergeGroupColumn</span><span class="params">(Sheet sheet)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rowCount</span> <span class="operator">=</span> rowIndex + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (Integer count : exportFieldGroupCountList) &#123;</span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">1</span>) &#123;</span><br><span class="line">                rowCount += count;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 合并单元格</span></span><br><span class="line">            <span class="type">CellRangeAddress</span> <span class="variable">cellRangeAddress</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CellRangeAddress</span>(rowCount, rowCount + count - <span class="number">1</span>, targetColumnIndex, targetColumnIndex);</span><br><span class="line">            sheet.addMergedRegionUnsafe(cellRangeAddress);</span><br><span class="line">            rowCount += count;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>从首行开始合并单元格</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download3</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user1.setUserId(<span class="number">123</span>);</span><br><span class="line">        user1.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user1.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user1.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user1.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user2.setUserId(<span class="number">123</span>);</span><br><span class="line">        user2.setName(<span class="string">&quot;asbnm&quot;</span>);</span><br><span class="line">        user2.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user2.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user2.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user3.setUserId(<span class="number">123</span>);</span><br><span class="line">        user3.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user3.setPhone(<span class="string">&quot;46543213&quot;</span>);</span><br><span class="line">        user3.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user3.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; userList = Arrays.asList(user1, user2, user3);</span><br><span class="line">        <span class="type">CustomMergeStrategy</span> <span class="variable">customMergeStrategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustomMergeStrategy</span>(userList.stream().map(e -&gt;</span><br><span class="line">                String.valueOf(e.getUserId())).collect(Collectors.toList()), <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                .registerWriteHandler(customMergeStrategy)</span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                .doWrite(userList);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="4.png" alt=""></p>
<ol start="2">
<li>从指定行开始合并单元格</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download3</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user1.setUserId(<span class="number">123</span>);</span><br><span class="line">        user1.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user1.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user1.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user1.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user2.setUserId(<span class="number">123</span>);</span><br><span class="line">        user2.setName(<span class="string">&quot;asbnm&quot;</span>);</span><br><span class="line">        user2.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user2.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user2.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user3.setUserId(<span class="number">123</span>);</span><br><span class="line">        user3.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user3.setPhone(<span class="string">&quot;46543213&quot;</span>);</span><br><span class="line">        user3.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user3.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; userList = Arrays.asList(user1, user2, user3);</span><br><span class="line">        <span class="type">CustomMergeStrategy</span> <span class="variable">customMergeStrategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustomMergeStrategy</span>(userList.stream().map(e -&gt;</span><br><span class="line">                String.valueOf(e.getUserId())).collect(Collectors.toList()), <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                .registerWriteHandler(customMergeStrategy)</span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                .doWrite(userList);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="5.png" alt=""></p>
<h3 id="CellWriteHandler">CellWriteHandler</h3>
<h4 id="基本思路-2">基本思路</h4>
<ol>
<li>实现 CellWriteHandler 类的 afterCellDispose 方法，在每个单元格完全创建完之后执行合并单元格操作</li>
<li>判断当前列是否为要合并的列，且当前行是否已经到达要操作的行数</li>
<li>如果是，则判断上一行和当前行的数据是否一致，且序号是否一致</li>
<li>如果是，则进行合并单元格操作，如果上一行已经被合并过了，则进行移除，然后再重新合并单元格</li>
</ol>
<h4 id="使用-2">使用</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * excel合并单元格导出工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EasyExcelUtil</span> <span class="keyword">implements</span> <span class="title class_">CellWriteHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要合并的列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] mergeColumnIndex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从哪一行开始合并</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> mergeRowIndex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EasyExcelUtil</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EasyExcelUtil</span><span class="params">(<span class="type">int</span> mergeRowIndex, <span class="type">int</span>[] mergeColumnIndex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mergeRowIndex = mergeRowIndex;</span><br><span class="line">        <span class="built_in">this</span>.mergeColumnIndex = mergeColumnIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建每个单元格之前执行</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> writeSheetHolder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> writeTableHolder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> row</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> columnIndex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> relativeRowIndex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isHead</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeCellCreate</span><span class="params">(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Row row,</span></span><br><span class="line"><span class="params">                                 Head head, Integer columnIndex, Integer relativeRowIndex, Boolean isHead)</span> &#123;</span><br><span class="line">        CellWriteHandler.<span class="built_in">super</span>.beforeCellCreate(writeSheetHolder, writeTableHolder, row, head, columnIndex, relativeRowIndex, isHead);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每个单元格数据内容渲染之后执行</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> writeSheetHolder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> writeTableHolder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cellData</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cell</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> relativeRowIndex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isHead</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCellDataConverted</span><span class="params">(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, WriteCellData&lt;?&gt; cellData,</span></span><br><span class="line"><span class="params">                                       Cell cell, Head head, Integer relativeRowIndex, Boolean isHead)</span> &#123;</span><br><span class="line">        CellWriteHandler.<span class="built_in">super</span>.afterCellDataConverted(writeSheetHolder, writeTableHolder, cellData, cell, head, relativeRowIndex, isHead);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每个单元格完全创建完之后执行</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> writeSheetHolder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> writeTableHolder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cellDataList</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cell</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> relativeRowIndex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isHead</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCellDispose</span><span class="params">(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, List&lt;WriteCellData&lt;?&gt;&gt; cellDataList,</span></span><br><span class="line"><span class="params">                                 Cell cell, Head head, Integer relativeRowIndex, Boolean isHead)</span> &#123;</span><br><span class="line">        <span class="comment">//当前行</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">curRowIndex</span> <span class="operator">=</span> cell.getRowIndex();</span><br><span class="line">        <span class="comment">//当前列</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">curColIndex</span> <span class="operator">=</span> cell.getColumnIndex();</span><br><span class="line">        <span class="comment">//判断当前行是否已经到达要合并的行数</span></span><br><span class="line">        <span class="keyword">if</span> (curRowIndex &gt; mergeRowIndex) &#123;</span><br><span class="line">            <span class="comment">//判断是否是合并列</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> columnIndex : mergeColumnIndex) &#123;</span><br><span class="line">                <span class="keyword">if</span> (curColIndex == columnIndex) &#123;</span><br><span class="line">                    mergeWithPrevRow(writeSheetHolder, cell, curRowIndex, curColIndex);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前单元格向上合并</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> writeSheetHolder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cell             当前单元格</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> curRowIndex      当前行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> curColIndex      当前列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">mergeWithPrevRow</span><span class="params">(WriteSheetHolder writeSheetHolder, Cell cell, <span class="type">int</span> curRowIndex, <span class="type">int</span> curColIndex)</span> &#123;</span><br><span class="line">        <span class="type">Cell</span> <span class="variable">cell1</span> <span class="operator">=</span> cell.getSheet().getRow(curRowIndex).getCell(<span class="number">0</span>);</span><br><span class="line">        <span class="type">Cell</span> <span class="variable">cell2</span> <span class="operator">=</span> cell.getSheet().getRow(curRowIndex - <span class="number">1</span>).getCell(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (cell1 == <span class="literal">null</span> || cell2 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取当前单元格的数据</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">curData</span> <span class="operator">=</span> cell.getCellType() == CellType.STRING ? cell.getStringCellValue() : cell.getNumericCellValue();</span><br><span class="line">        <span class="comment">// 获取上一行单元格的数据</span></span><br><span class="line">        <span class="type">Cell</span> <span class="variable">preCell</span> <span class="operator">=</span> cell.getSheet().getRow(curRowIndex - <span class="number">1</span>).getCell(curColIndex);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">preData</span> <span class="operator">=</span> preCell.getCellType() == CellType.STRING ? preCell.getStringCellValue() : preCell.getNumericCellValue();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将当前单元格数据与上一个单元格数据比较，然后判断其序号是否相同</span></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">dataBool</span> <span class="operator">=</span> preData.equals(curData);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">val1</span> <span class="operator">=</span> cell1.getCellType() == CellType.STRING ? cell1.getStringCellValue() : cell1.getNumericCellValue();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">val2</span> <span class="operator">=</span> cell2.getCellType() == CellType.STRING ? cell2.getStringCellValue() : cell2.getNumericCellValue();</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">bool</span> <span class="operator">=</span> Objects.equals(val1, val2);</span><br><span class="line">        <span class="keyword">if</span> (dataBool &amp;&amp; bool) &#123;</span><br><span class="line">            <span class="type">Sheet</span> <span class="variable">sheet</span> <span class="operator">=</span> writeSheetHolder.getSheet();</span><br><span class="line">            List&lt;CellRangeAddress&gt; mergeRegions = sheet.getMergedRegions();</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isMerged</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, len = mergeRegions.size(); i &lt; len &amp;&amp; !isMerged; ++i) &#123;</span><br><span class="line">                <span class="type">CellRangeAddress</span> <span class="variable">cellRangeAddr</span> <span class="operator">=</span> mergeRegions.get(i);</span><br><span class="line">                <span class="comment">// 若上一个单元格已经被合并，则先移出原有的合并单元，再重新添加合并单元</span></span><br><span class="line">                <span class="keyword">if</span> (cellRangeAddr.isInRange(curRowIndex - <span class="number">1</span>, curColIndex)) &#123;</span><br><span class="line">                    sheet.removeMergedRegion(i);</span><br><span class="line">                    cellRangeAddr.setLastRow(curRowIndex);</span><br><span class="line">                    sheet.addMergedRegion(cellRangeAddr);</span><br><span class="line">                    isMerged = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 若上一个单元格未被合并，则新增合并单元</span></span><br><span class="line">            <span class="keyword">if</span> (!isMerged) &#123;</span><br><span class="line">                <span class="type">CellRangeAddress</span> <span class="variable">cellRangeAddress</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CellRangeAddress</span>(curRowIndex - <span class="number">1</span>, curRowIndex, curColIndex, curColIndex);</span><br><span class="line">                sheet.addMergedRegion(cellRangeAddress);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download4</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user1.setUserId(<span class="number">123</span>);</span><br><span class="line">        user1.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user1.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user1.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user1.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user2.setUserId(<span class="number">123</span>);</span><br><span class="line">        user2.setName(<span class="string">&quot;asbnm&quot;</span>);</span><br><span class="line">        user2.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user2.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user2.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user3.setUserId(<span class="number">123</span>);</span><br><span class="line">        user3.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user3.setPhone(<span class="string">&quot;46543213&quot;</span>);</span><br><span class="line">        user3.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user3.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; userList = Arrays.asList(user1, user2, user3);</span><br><span class="line"></span><br><span class="line"><span class="comment">//            EasyExcel.write(response.getOutputStream(), User.class)</span></span><br><span class="line"><span class="comment">//                    .registerWriteHandler(new EasyExcelUtil(0, new int[]&#123;0, 2&#125;))</span></span><br><span class="line"><span class="comment">//                    .sheet(&quot;模板&quot;)</span></span><br><span class="line"><span class="comment">//                    .doWrite(userList);</span></span><br><span class="line">        EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                .registerWriteHandler(<span class="keyword">new</span> <span class="title class_">EasyExcelUtil</span>(<span class="number">0</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>&#125;))</span><br><span class="line">                .registerWriteHandler(<span class="keyword">new</span> <span class="title class_">EasyExcelUtil</span>(<span class="number">0</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">2</span>&#125;))</span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                .doWrite(userList);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="6.png" alt=""></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>EasyExcel</tag>
      </tags>
  </entry>
  <entry>
    <title>Easyexcel（9-类详解）</title>
    <url>/blog/2024/11/07/Java/excel/easyexcel/Easyexcel%EF%BC%889-%E7%B1%BB%E8%AF%A6%E8%A7%A3%EF%BC%89/</url>
    <content><![CDATA[<h2 id="常用类">常用类</h2>
<ol>
<li>EasyExcel：入口类，用于构建开始各种操作；</li>
<li>ExcelReaderBuilder：构建出一个ReadWorkbook对象，即一个工作簿对象，对应的是一个Excel文件；</li>
<li>ExcelWriterBuilder：构建出一个WriteWorkbook对象，即一个工作簿对象，对应的是一个Excel文件；</li>
<li>ExcelReaderSheetBuilder：构建出一个ReadSheet对象，即一个工作表的对象，对应的Excel中的每个sheet，一个工作簿可以有多个工作表；</li>
<li>ExcelWriterSheetBuilder：构建出一WriteSheet对象，即一个工作表的对象，对应的Excel中的每个sheet，一个工作簿可以有多个工作表；</li>
<li>ReadListener：在每一行读取完毕后都会调用ReadListener来处理数据，我们可以把调用service的代码可以写在其invoke方法内部；</li>
<li>WriteHandler：在每一个操作包括创建单元格、创建表格等都会调用WriteHandler来处理数据，对使用者透明不可见；</li>
</ol>
<p>所有配置都是继承的，Workbook的配置会被Sheet继承。所以在用EasyExcel设置参数的时候，在EasyExcel…sheet()方法之前作用域是整个sheet，之后针对单个sheet</p>
<h2 id="RowWriteHandler">RowWriteHandler</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RowWriteHandler</span> <span class="keyword">extends</span> <span class="title class_">WriteHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//行创建之前</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">beforeRowCreate</span><span class="params">(RowWriteHandlerContext context)</span> &#123;</span><br><span class="line">        beforeRowCreate(context.getWriteSheetHolder(), context.getWriteTableHolder(), context.getRowIndex(),</span><br><span class="line">            context.getRelativeRowIndex(), context.getHead());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//行创建之前</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">beforeRowCreate</span><span class="params">(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Integer rowIndex, Integer relativeRowIndex, Boolean isHead)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//在行创建之后</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">afterRowCreate</span><span class="params">(RowWriteHandlerContext context)</span> &#123;</span><br><span class="line">        afterRowCreate(context.getWriteSheetHolder(), context.getWriteTableHolder(), context.getRow(),</span><br><span class="line">            context.getRelativeRowIndex(), context.getHead());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//在行创建之后</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">afterRowCreate</span><span class="params">(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Row row, Integer relativeRowIndex, Boolean isHead)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//在行处置之后</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">afterRowDispose</span><span class="params">(RowWriteHandlerContext context)</span> &#123;</span><br><span class="line">        afterRowDispose(context.getWriteSheetHolder(), context.getWriteTableHolder(), context.getRow(),</span><br><span class="line">            context.getRelativeRowIndex(), context.getHead());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//在行处置之后</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">afterRowDispose</span><span class="params">(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Row row, Integer relativeRowIndex, Boolean isHead)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>使用案例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommentWriteHandler</span> <span class="keyword">extends</span> <span class="title class_">AbstractRowWriteHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, FailRecord&gt; failDataMap;</span><br><span class="line">	<span class="comment">// 构造参数传入错误的数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CommentWriteHandler</span><span class="params">(Map&lt;Integer, FailRecord&gt; failDataMap)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.failDataMap = failDataMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterRowDispose</span><span class="params">(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Row row,Integer relativeRowIndex, Boolean isHead)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (failDataMap.containsKey(row.getRowNum())) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!isHead) &#123;</span><br><span class="line">                <span class="type">Sheet</span> <span class="variable">sheet</span> <span class="operator">=</span> writeSheetHolder.getSheet();</span><br><span class="line">                <span class="type">Cell</span> <span class="variable">cell</span> <span class="operator">=</span> row.getCell(failDataMap.get(row.getRowNum()).getColumn());</span><br><span class="line">                <span class="type">Workbook</span> <span class="variable">workbook</span> <span class="operator">=</span> sheet.getWorkbook();</span><br><span class="line">                <span class="type">CellStyle</span> <span class="variable">cellStyle</span> <span class="operator">=</span> workbook.createCellStyle();</span><br><span class="line">                <span class="comment">//设置前景填充样式</span></span><br><span class="line">                cellStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);</span><br><span class="line">                <span class="comment">//设置前景色为红色</span></span><br><span class="line">                cellStyle.setFillForegroundColor(IndexedColors.RED.getIndex());</span><br><span class="line">                <span class="comment">//设置垂直居中</span></span><br><span class="line">                cellStyle.setVerticalAlignment(VerticalAlignment.CENTER);</span><br><span class="line">                <span class="type">Font</span> <span class="variable">font</span> <span class="operator">=</span> workbook.createFont();</span><br><span class="line">                <span class="comment">//设置字体为红色</span></span><br><span class="line">                font.setColor(Font.COLOR_RED);</span><br><span class="line">                cellStyle.setFont(font);</span><br><span class="line">				<span class="comment">//创建设置批注</span></span><br><span class="line">                Drawing&lt;?&gt; drawingPatriarch = sheet.createDrawingPatriarch();</span><br><span class="line">                <span class="type">Comment</span> <span class="variable">comment</span> <span class="operator">=</span> drawingPatriarch.createCellComment(<span class="keyword">new</span> <span class="title class_">HSSFClientAnchor</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">                        (<span class="type">short</span>) row.getRowNum(), failDataMap.get(row.getRowNum()).getColumn(), (<span class="type">short</span>) (row.getRowNum() + <span class="number">1</span>), failDataMap.get(row.getRowNum()).getColumn() + <span class="number">1</span>));</span><br><span class="line">                comment.setString(<span class="keyword">new</span> <span class="title class_">HSSFRichTextString</span>(failDataMap.get(row.getRowNum()).getMsg()));</span><br><span class="line">                cell.setCellComment(comment);</span><br><span class="line">                cell.setCellStyle(cellStyle);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="CellWriteHandler">CellWriteHandler</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CellWriteHandler</span> <span class="keyword">extends</span> <span class="title class_">WriteHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//单元创建之前，可以使用该方法来设置单元格的样式、字体等信息。</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">beforeCellCreate</span><span class="params">(CellWriteHandlerContext context)</span> &#123;</span><br><span class="line">        beforeCellCreate(context.getWriteSheetHolder(), context.getWriteTableHolder(), context.getRow(),</span><br><span class="line">            context.getHeadData(), context.getColumnIndex(), context.getRelativeRowIndex(), context.getHead());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//单元创建之前，可以使用该方法来设置单元格的样式、字体等信息。</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">beforeCellCreate</span><span class="params">(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Row row, Head head, Integer columnIndex, Integer relativeRowIndex, Boolean isHead)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//单元创建后，可以使用该方法来对单元格的内容进行一些处理，例如可以将单元格的内容转换为另一种格式</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">afterCellCreate</span><span class="params">(CellWriteHandlerContext context)</span> &#123;</span><br><span class="line">        afterCellCreate(context.getWriteSheetHolder(), context.getWriteTableHolder(), context.getCell(),</span><br><span class="line">            context.getHeadData(), context.getRelativeRowIndex(), context.getHead());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//单元创建后，可以使用该方法来对单元格的内容进行一些处理，例如可以将单元格的内容转换为另一种格式</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">afterCellCreate</span><span class="params">(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Cell cell, Head head, Integer relativeRowIndex, Boolean isHead)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//单元数据转换后，可以使用该方法来对单元格的数据进行一些处理，例如可以将单元格的数据转换为另一种类型</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">afterCellDataConverted</span><span class="params">(CellWriteHandlerContext context)</span> &#123;</span><br><span class="line">        WriteCellData&lt;?&gt; writeCellData = CollectionUtils.isNotEmpty(context.getCellDataList()) ? context</span><br><span class="line">            .getCellDataList().get(<span class="number">0</span>) : <span class="literal">null</span>;</span><br><span class="line">        afterCellDataConverted(context.getWriteSheetHolder(), context.getWriteTableHolder(), writeCellData,</span><br><span class="line">            context.getCell(), context.getHeadData(), context.getRelativeRowIndex(), context.getHead());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//单元数据转换后，可以使用该方法来对单元格的数据进行一些处理，例如可以将单元格的数据转换为另一种类型</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">afterCellDataConverted</span><span class="params">(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, WriteCellData&lt;?&gt; cellData, Cell cell, Head head, Integer relativeRowIndex, Boolean isHead)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//单元格处理后（完成后），可以使用该方法来对单元格进行一些清理工作，例如可以释放单元格中使用的资源</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">afterCellDispose</span><span class="params">(CellWriteHandlerContext context)</span> &#123;</span><br><span class="line">        afterCellDispose(context.getWriteSheetHolder(), context.getWriteTableHolder(), context.getCellDataList(), context.getCell(), context.getHeadData(), context.getRelativeRowIndex(), context.getHead());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//单元格处理后（完成后），可以使用该方法来对单元格进行一些清理工作，例如可以释放单元格中使用的资源</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">afterCellDispose</span><span class="params">(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder,</span></span><br><span class="line"><span class="params">        List&lt;WriteCellData&lt;?&gt;&gt; cellDataList, Cell cell, Head head, Integer relativeRowIndex, Boolean isHead)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：</p>
<ol>
<li>这四个方法都是可选的，你可以根据自己的需要来实现它们。</li>
<li>这四个方法都是线程安全的，你可以放心地在多线程环境中使用它们。</li>
</ol>
<p><strong>区别</strong></p>
<ol>
<li>beforeCellCreate方法在单元格创建之前调用，而afterCellCreate方法在单元格创建之后调用。</li>
<li>afterCellDataConverted方法在单元格数据转换之后调用，而afterCellDispose方法在单元格处理完成之后调用。</li>
<li>beforeCellCreate方法和afterCellCreate方法主要用于设置单元格的样式和内容，而afterCellDataConverted方法和afterCellDispose方法主要用于对单元格的数据进行处理。</li>
</ol>
<p><strong>使用案例</strong></p>
<p>如果你想在单元格头部添加背景色，你可以在beforeCellCreate方法中设置单元格的样式。如果你想将单元格中的数字转换为百分比，你可以在afterCellDataConverted方法中将单元格的数据转换为百分比。如果你想在单元格中添加超链接，你可以在afterCellCreate方法中添加超链接。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCellCreate</span><span class="params">(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder,</span></span><br><span class="line"><span class="params">                            Cell cell, Head head, Integer relativeRowIndex, Boolean isHead)</span> &#123;</span><br><span class="line">    <span class="type">Workbook</span> <span class="variable">workbook</span> <span class="operator">=</span> writeSheetHolder.getSheet().getWorkbook(); <span class="comment">// 获取 Workbook对象</span></span><br><span class="line">    <span class="type">CellStyle</span> <span class="variable">cellStyle</span> <span class="operator">=</span> workbook.createCellStyle(); <span class="comment">// 创建一个 CellStyle对象</span></span><br><span class="line">    <span class="keyword">if</span> (isHead) &#123; <span class="comment">// 如果是头，设置对应格式</span></span><br><span class="line">        <span class="type">WriteCellStyle</span> <span class="variable">headWriteCellStyle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WriteCellStyle</span>();</span><br><span class="line">        headWriteCellStyle.setFillPatternType(FillPatternType.SOLID_FOREGROUND);</span><br><span class="line">        headWriteCellStyle.setFillForegroundColor(IndexedColors.PALE_BLUE.getIndex());<span class="comment">// 背景设置</span></span><br><span class="line">        <span class="type">WriteFont</span> <span class="variable">headWriteFont</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WriteFont</span>();</span><br><span class="line">        headWriteFont.setFontHeightInPoints((<span class="type">short</span>) <span class="number">16</span>);</span><br><span class="line">        headWriteCellStyle.setWriteFont(headWriteFont);</span><br><span class="line"></span><br><span class="line">        cellStyle.setFillBackgroundColor(IndexedColors.PALE_BLUE.getIndex());</span><br><span class="line">        <span class="type">Font</span> <span class="variable">font</span> <span class="operator">=</span> workbook.createFont();</span><br><span class="line">        font.setFontName(<span class="string">&quot;宋体&quot;</span>);</span><br><span class="line">        font.setFontHeightInPoints((<span class="type">short</span>) <span class="number">16</span>);</span><br><span class="line">        font.setBold(<span class="literal">true</span>);</span><br><span class="line">        cellStyle.setFont(font);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 设置内容行列对应格式</span></span><br><span class="line">        <span class="keyword">if</span> (relativeRowIndex == <span class="number">0</span>) &#123; <span class="comment">// 如果是内容的第一行</span></span><br><span class="line">            cellStyle.setAlignment(HorizontalAlignment.LEFT);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 内容其它行</span></span><br><span class="line">            cellStyle.setAlignment(HorizontalAlignment.CENTER);</span><br><span class="line">        &#125;</span><br><span class="line">        cellStyle.setVerticalAlignment(VerticalAlignment.CENTER);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 边框</span></span><br><span class="line">        cellStyle.setBorderLeft(BorderStyle.THIN);<span class="comment">//细实线</span></span><br><span class="line">        cellStyle.setBorderTop(BorderStyle.THIN);</span><br><span class="line">        cellStyle.setBorderRight(BorderStyle.THIN);</span><br><span class="line">        cellStyle.setBorderBottom(BorderStyle.THIN);</span><br><span class="line">    &#125;</span><br><span class="line">    cell.setCellStyle(cellStyle);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="SheetWriteHandler">SheetWriteHandler</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SheetWriteHandler</span> <span class="keyword">extends</span> <span class="title class_">WriteHandler</span> &#123;</span><br><span class="line">    <span class="comment">//sheet创建之前</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">beforeSheetCreate</span><span class="params">(WriteWorkbookHolder var1, WriteSheetHolder var2)</span>;</span><br><span class="line">    <span class="comment">//sheet创建之后</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">afterSheetCreate</span><span class="params">(WriteWorkbookHolder var1, WriteSheetHolder var2)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>使用案例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySheetWriteHandler</span> <span class="keyword">implements</span> <span class="title class_">SheetWriteHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建sheet页前的操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> writeWorkbookHolder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> writeSheetHolder</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeSheetCreate</span><span class="params">(WriteWorkbookHolder writeWorkbookHolder, WriteSheetHolder writeSheetHolder)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建sheet页后的操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> writeWorkbookHolder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> writeSheetHolder</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterSheetCreate</span><span class="params">(WriteWorkbookHolder writeWorkbookHolder, WriteSheetHolder writeSheetHolder)</span> &#123;</span><br><span class="line">        <span class="comment">//定义选值范围</span></span><br><span class="line">        String[] sexStrings = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;男&quot;</span>, <span class="string">&quot;女&quot;</span>, <span class="string">&quot;未知&quot;</span>&#125;;</span><br><span class="line">        <span class="comment">//根据index，形成map，可插入多个  这个map可以由构造参数传入，毕竟不能写死</span></span><br><span class="line">        Map&lt;Integer, String[]&gt; mapDropDown = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        mapDropDown.put(<span class="number">2</span>, sexStrings);</span><br><span class="line">        <span class="comment">//获取sheet页</span></span><br><span class="line">        <span class="type">Sheet</span> <span class="variable">sheet</span> <span class="operator">=</span> writeSheetHolder.getSheet();</span><br><span class="line">        <span class="comment">///开始设置下拉框</span></span><br><span class="line">        <span class="type">DataValidationHelper</span> <span class="variable">helper</span> <span class="operator">=</span> sheet.getDataValidationHelper();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, String[]&gt; entry : mapDropDown.entrySet()) &#123;</span><br><span class="line">            <span class="comment">/***起始行、终止行、起始列、终止列**/</span></span><br><span class="line">            <span class="type">CellRangeAddressList</span> <span class="variable">addressList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CellRangeAddressList</span>(<span class="number">1</span>, <span class="number">9999</span>, entry.getKey(), entry.getKey());</span><br><span class="line">            <span class="comment">/***设置下拉框数据**/</span></span><br><span class="line">            <span class="type">DataValidationConstraint</span> <span class="variable">constraint</span> <span class="operator">=</span> helper.createExplicitListConstraint(entry.getValue());</span><br><span class="line">            <span class="type">DataValidation</span> <span class="variable">dataValidation</span> <span class="operator">=</span> helper.createValidation(constraint, addressList);</span><br><span class="line">            <span class="comment">/***处理Excel兼容性问题**/</span></span><br><span class="line">            <span class="keyword">if</span> (dataValidation <span class="keyword">instanceof</span> XSSFDataValidation) &#123;</span><br><span class="line">                dataValidation.setSuppressDropDownArrow(<span class="literal">true</span>);</span><br><span class="line">                dataValidation.setShowErrorBox(<span class="literal">true</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dataValidation.setSuppressDropDownArrow(<span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            sheet.addValidationData(dataValidation);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>EasyExcel</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringSecurity5（1-快速入门）</title>
    <url>/blog/2024/12/29/Java/SpringSecurity/SpringSecurity5/SpringSecurity5%EF%BC%881-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%EF%BC%89/</url>
    <content><![CDATA[<h2 id="依赖">依赖</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="登录认证">登录认证</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：导入依赖之后，访问 localhost: 8080/test 请求地址会自动跳转到 localhost: 8080/test 中，出现一个表单，需要登录后才能访问</p>
<p>用户名默认为 user，密码在控制台出现</p>
<p><img src="1.png" alt=""></p>
<p><img src="2.png" alt=""></p>
<h2 id="将表单请求转换为弹出框请求">将表单请求转换为弹出框请求</h2>
<p><strong>WebSecurityConfigurerAdapter</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定制用户认证管理器来实现用户认证</span></span><br><span class="line"><span class="comment"> *  1. 提供用户认证所需信息（用户名、密码、当前用户的资源权）</span></span><br><span class="line"><span class="comment"> *  2. 可采用内存存储方式，也可能采用数据库方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定制基于 HTTP 请求的用户访问控制</span></span><br><span class="line"><span class="comment"> *  1. 配置拦截的哪一些资源</span></span><br><span class="line"><span class="comment"> *  2. 配置资源所对应的角色权限</span></span><br><span class="line"><span class="comment"> *  3. 定义认证方式：HttpBasic、HttpForm</span></span><br><span class="line"><span class="comment"> *  4. 定制登录页面、登录请求地址、错误处理方式</span></span><br><span class="line"><span class="comment"> *  5. 自定义 Spring Security 过滤器等</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定制一些全局性的安全配置，例如：不拦截静态资源的访问</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(WebSecurity web)</span>;</span><br></pre></td></tr></table></figure>
<p><strong>使用案例</strong></p>
<ol>
<li>创建配置类继承 WebSecurityConfigurerAdapter 类，实现 http 的 configure 方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * fromLogin()：表单认证</span></span><br><span class="line"><span class="comment">         * httpBasic()：弹出框认证</span></span><br><span class="line"><span class="comment">         * authorizeRequests()：身份认证请求</span></span><br><span class="line"><span class="comment">         * anyRequest()：所有请求</span></span><br><span class="line"><span class="comment">         * authenticated()：身份认证</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        http.httpBasic()</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                <span class="comment">// 其它任何请求访问都需要先通过认证</span></span><br><span class="line">                .anyRequest()</span><br><span class="line">                .authenticated();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>访问地址：localhost: 8080/test，此时发现表单请求转换为弹出框请求</li>
</ol>
<p><img src="3.png" alt=""></p>
<h2 id="EnableWebSecurity">@EnableWebSecurity</h2>
<p>在非 Springboot 的 Spring Web MVC 应用中，该注解@EnableWebSecurity 需要开发人员自己引入以启用 Web 安全。</p>
<p>在基于 Springboot 的 Spring Web MVC 应用中，开发人员没有必要再次引用该注解，Springboot 的自动配置机制 WebSecurityEnablerConfiguration 已经引入了该注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 省略 imports 行</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">// 仅在存在 WebSecurityConfigurerAdapter bean 时该注解才有可能生效</span></span><br><span class="line"><span class="comment">// (最终生效与否要结合其他条件综合考虑)</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(WebSecurityConfigurerAdapter.class)</span></span><br><span class="line"><span class="comment">// 仅在不存在 springSecurityFilterChain 时该注解才有可能生效</span></span><br><span class="line"><span class="comment">// (最终生效与否要结合其他条件综合考虑)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(name = BeanIds.SPRING_SECURITY_FILTER_CHAIN)</span></span><br><span class="line"><span class="comment">// 仅在 Servlet 环境下该注解才有可能生效</span></span><br><span class="line"><span class="comment">// (最终生效与否要结合其他条件综合考虑)</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span> <span class="comment">// &lt;====== 这里启用了 Web 安全</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSecurityEnablerConfiguration</span> &#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="路径匹配器">路径匹配器</h2>
<h3 id="MvcRequestMatcher">MvcRequestMatcher</h3>
<h4 id="匹配规则">匹配规则</h4>
<ol>
<li>/a：仅匹配路径/a</li>
<li>/a/*：操作符* 会替换一个路径名。在这种情况下，它将匹配/a/b 或/a/c，而不是/a/b/c</li>
<li>/a/**：操作符** 会替换多个路径名。在这种情况下，/a 以及/a/b 和/a/b/c 都是这个表达式的匹配项</li>
<li>/a/{param}：这个表达式适用于具有给定路径参数的路径/a</li>
<li>/a/{param: regex}：只有当参数的值与给定正则表达式匹配时，此表达式才应用于具有给定路径参数的路径/a</li>
</ol>
<h4 id="使用案例">使用案例</h4>
<ol>
<li>单个请求无请求方法匹配</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http.authorizeRequests() </span><br><span class="line">    .mvcMatchers(<span class="string">&quot;/hello_user&quot;</span>).hasRole(<span class="string">&quot;USER&quot;</span>) </span><br><span class="line">    .mvcMatchers(<span class="string">&quot;/hello_admin&quot;</span>).hasRole(<span class="string">&quot;ADMIN&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>如果使用角色为“USER”的用户来访问“/hello_admin”端点，那么会出现禁止访问的情况，因为“/hello_admin”端点只有角色为“ADMIN”的用户才能访问</p>
<p>注意：没有被 MVC 匹配器所匹配的端点，其访问不受任何的限制，效果相当于如下所示的配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http.authorizeRequests() </span><br><span class="line">    .mvcMatchers(<span class="string">&quot;/hello_user&quot;</span>).hasRole(<span class="string">&quot;USER&quot;</span>) </span><br><span class="line">    .mvcMatchers(<span class="string">&quot;/hello_admin&quot;</span>).hasRole(<span class="string">&quot;ADMIN&quot;</span>);</span><br><span class="line">    .anyRequest().permitAll();</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>单个请求有请求方法匹配</li>
</ol>
<p>如果一个 Controller 中存在两个路径完全一样的 HTTP 端点，可以把 HTTP 方法作为一个访问的维度进行控制</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http.authorizeRequests() </span><br><span class="line">    .mvcMatchers(HttpMethod.POST, <span class="string">&quot;/hello&quot;</span>).authenticated() </span><br><span class="line">    .mvcMatchers(HttpMethod.GET, <span class="string">&quot;/hello&quot;</span>).permitAll() </span><br><span class="line">    .anyRequest().denyAll();</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>多个路径匹配</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http.authorizeRequests() </span><br><span class="line">	.mvcMatchers(<span class="string">&quot;/test/xiao&quot;</span>,<span class="string">&quot;/test/giao&quot;</span>,<span class="string">&quot;/test/a&quot;</span>,<span class="string">&quot;/test/a/b&quot;</span>).hasRole(<span class="string">&quot;ADMIN&quot;</span>);</span><br><span class="line"><span class="comment">//可以简化为以下方式</span></span><br><span class="line">http.authorizeRequests() </span><br><span class="line">	.mvcMatchers(<span class="string">&quot;/test/**&quot;</span>).hasRole(<span class="string">&quot;ADMIN&quot;</span>);</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>带有路径变量匹配</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/product/&#123;code&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">productCode</span><span class="params">(<span class="meta">@PathVariable</span> String code)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> code;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http.authorizeRequests() </span><br><span class="line">	.mvcMatchers(<span class="string">&quot;/product/&#123;code:^[0-9]*$&#125;&quot;</span>).permitAll();</span><br></pre></td></tr></table></figure>
<p>此时调用端点，假设 code = 1234a，不符合全部都是数字，报 401；然后再次调用端点，code = 12345，发现调用通过</p>
<h3 id="AntPathRequestMatcher">AntPathRequestMatcher</h3>
<p>Ant 匹配器的表现形式和使用方法与前面介绍的 MVC 匹配器非常相似</p>
<p>使用方法：</p>
<ol>
<li>antMatchers(String patterns)</li>
<li>antMatchers(HttpMethod method)</li>
<li>antMatchers(HttpMethod method, String patterns)</li>
</ol>
<p><strong>mvc 与 ant 匹配器的区别</strong></p>
<ol>
<li>antMatchers(“/secured”)仅仅匹配 /secured</li>
<li>mvcMatchers(“/secured”)匹配 /secured 之余还匹配 /secured/，/secured.html，/secured.xyz</li>
</ol>
<p>因此 mvcMatcher 更加通用且容错性更高</p>
<h3 id="RegexRequestMatcher">RegexRequestMatcher</h3>
<p>使用方法：</p>
<ol>
<li>regexMatchers(HttpMethod method, String regex)</li>
<li>regexMatchers(String regex)</li>
</ol>
<p>使用这一匹配器的主要优势在于它能够基于复杂的正则表达式对请求地址进行匹配，这是 MVC 匹配器和 Ant 匹配器无法实现的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http.authorizeRequests() </span><br><span class="line">	<span class="comment">//只有输入的请求是一个合法的邮箱地址才能允许访问</span></span><br><span class="line">	.regexMatchers(<span class="string">&quot;/email/&#123;email:.*(.+@.+\\.com)&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringSecurity</tag>
      </tags>
  </entry>
  <entry>
    <title>MDC链路跟踪</title>
    <url>/blog/2025/03/10/Java/SpringCloud/%E9%93%BE%E8%B7%AF%E8%B7%9F%E8%B8%AA/MDC%E9%93%BE%E8%B7%AF%E8%B7%9F%E8%B8%AA/</url>
    <content><![CDATA[<h2 id="基本概念">基本概念</h2>
<h3 id="什么是链路跟踪？">什么是链路跟踪？</h3>
<p>分布式链路追踪就是将一次分布式请求还原成调用链路，将一次分布式请求的调用情况集中展示，比如各个服务节点上的耗时、请求具体到达哪台机器上、每个服务节点的请求状态等等。</p>
<p>链路跟踪主要功能：</p>
<ol>
<li>故障快速定位：可以通过调用链结合业务日志快速定位错误信息。</li>
<li>链路性能可视化：各个阶段链路耗时、服务依赖关系可以通过可视化界面展现出来。</li>
<li>链路分析：通过分析链路耗时、服务依赖关系可以得到用户的行为路径，汇总分析应用在很多业务场景。</li>
</ol>
<h3 id="什么是-MDC？">什么是 MDC？</h3>
<p>MDC（Mapped Diagnostic Context，映射调试上下文）是 log4j 、logback 及 log4j2 提供的一种方便在多线程条件下记录日志的功能。某些应用程序采用多线程的方式来处理多个用户的请求。在一个用户的使用过程中，可能有多个不同的线程来进行处理。典型的例子是 Web 应用服务器。当用户访问某个页面时，应用服务器可能会创建一个新的线程来处理该请求，也可能从线程池中复用已有的线程。在一个用户的会话存续期间，可能有多个线程处理过该用户的请求。这使得比较难以区分不同用户所对应的日志。当需要追踪某个用户在系统中的相关日志记录时，就会变得很麻烦。</p>
<p>一种解决的办法是采用自定义的日志格式，把用户的信息采用某种方式编码在日志记录中。这种方式的问题在于要求在每个使用日志记录器的类中，都可以访问到用户相关的信息。这样才可能在记录日志时使用。这样的条件通常是比较难以满足的。MDC 的作用是解决这个问题。</p>
<p>MDC 可以看成是一个与当前线程绑定的哈希表，可以往其中添加键值对。MDC 中包含的内容可以被同一线程中执行的代码所访问，当前线程的子线程会继承其父线程中的 MDC 的内容。当需要记录日志时，只需要从 MDC 中获取所需的信息即可。MDC 的内容则由程序在适当的时候保存进去。对于一个 Web 应用来说，通常是在请求被处理的最开始保存这些数据。</p>
<h3 id="相关指标">相关指标</h3>
<ol>
<li>traceId：在整个分布式系统中，每个请求都有一个唯一的 traceId。这个 traceId 由链路跟踪系统自动生成，通常以时间戳和其他标识组合而成，以保证其唯一性。</li>
</ol>
<p>例如：请求经过了服务 A，同时服务 A 又调用了服务 B 和服务 C，但是先调的服务 B 还是服务 C 呢？从图中很难看出来，只有通过查看源码才知道顺序。为了表达这种父子关系引入了 spanId 的概念。</p>
<ol start="2">
<li>spanId：在每个服务中，请求被进一步划分为多个 span，每个 span 都有一个唯一的 spanId。spanId 通常由链路跟踪系统生成，用于标识该 span 在请求中的位置和作用。</li>
</ol>
<p>同一层级 parent id 相同，span id 不同，span id 从小到大表示请求的顺序</p>
<p><img src="1.png" alt=""></p>
<ol start="3">
<li>parentSpanId：这个标识符用于表示当前 span 的父级 span。在一个请求的完整路径中，每个 span 都有一个父级 span，通过 parentSpanId 可以建立 span 之间的层次关系。</li>
</ol>
<p><img src="2.png" alt=""></p>
<p>在自定义业务处理中，如设置 userId，通常在入口处记录 traceId 和 spanId，然后在每个服务调用中传递这些信息。例如，在某个服务中设置 userId 时，可以将其与 traceId 和 spanId 一起记录下来。这样，当出现问题时，可以方便地找到是哪个用户的请求导致了问题。</p>
<ol start="4">
<li>timestamp（调用时间）：把请求发出、接收、处理的时间都记录下来，计算业务处理耗时和网络耗时，然后用可视化界面展示出来每个调用链路，性能，故障</li>
</ol>
<p><img src="3.png" alt=""></p>
<ul>
<li>cs（Client Send）客户端发出请求，开始一个请求的生命周期</li>
<li>sr（Server Received）服务端接受到请求开始进行处理， sr－ cs = 网络延迟（服务调用的时间）</li>
<li>ss（Server Send）服务端处理完毕准备发送到客户端， ss - sr = 服务器上的请求处理时间</li>
<li>cr（Client Reveived）客户端接受到服务端的响应，请求结束。 cr - sr = 请求的总时间</li>
</ul>
<p><img src="4.png" alt=""></p>
<h2 id="基本使用">基本使用</h2>
<h3 id="MDC-使用">MDC 使用</h3>
<h4 id="日志文件配置">日志文件配置</h4>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>log4j.xml 配置样例，追踪日志自定义格式主要在 <code>name=&quot;traceId&quot;</code> 的 <code>layout</code> 里面进行设置，我们使用 <code>%X&#123;traceId&#125;</code> 来定义此处会打印 MDC 里面 key 为 traceId 的 value，如果所定义的字段在 MDC 不存在对应的 key，那么将不会打印，会留一个占位符</p>
<h4 id="相关方法">相关方法</h4>
<ol>
<li>clear() ：移除所有 MDC</li>
<li>get(String key) ：获取当前线程 MDC 中指定 key 的值</li>
<li>getContext() ：获取当前线程的 MDC</li>
<li>getCopyOfContextMap()：将 MDC 从内存获取出来，再传给线程</li>
<li>put(String key, Object o) ：往当前线程的 MDC 中存入指定的键值对</li>
<li>remove(String key) ：删除当前线程 MDC 中指定的键值对</li>
<li>setContextMap()：将父线程的 MDC 内容传给子线程</li>
</ol>
<h4 id="线程间传递">线程间传递</h4>
<p>用 MDC 的 put 时，子线程在创建的时候会把父线程中的 inheritableThreadLocals 变量设置到子线程的 inheritableThreadLocals 中，而 MDC 内部是用 InheritableThreadLocal 实现的，所以会把父线程中的上下文带到子线程中，但在线程池中，由于线程会被重用，但是线程本身只会初始化一次，所以之后重用线程的时候，就不会进行初始化操作了，也就不会有父线程 inheritableThreadLocals 拷贝到子线程中的过程了，这个时候如果还想传递父线程的上下文的话，就要使用 getCopyOfContextMap 方法</p>
<h3 id="SpringBoot-整合">SpringBoot 整合</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Spring Boot Actuator --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Spring Boot Web --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- SLF4J MDC --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="配置拦截器">配置拦截器</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//如果有上层调用就用上层的 ID</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">traceId</span> <span class="operator">=</span> request.getHeader(Constants.TRACE_ID);</span><br><span class="line">        <span class="keyword">if</span> (traceId == <span class="literal">null</span>) &#123;</span><br><span class="line">            traceId = TraceIdUtil.getTraceId();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        MDC.put(Constants.TRACE_ID, traceId);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span>             <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span>             <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//调用结束后删除</span></span><br><span class="line">        MDC.remove(Constants.TRACE_ID);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfigurerAdapter</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> LogInterceptor <span class="title function_">logInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LogInterceptor</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册拦截器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(logInterceptor());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="配置日志文件">配置日志文件</h4>
<p>修改 logback-spring.xml 的日志格式，logback 中也可以使用占位符%X{}来占位，替换到对应的 MDC 中 key 的值，重点是 %X{traceId}，traceId 和 MDC 中的键名称一致</p>
<p>注意：%X{traceId}和 [%trace-id]</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 控制台输出 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 输出日志记录格式,并打印 trace-id --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%trace-id] %-5level %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="多线程-traceId-传递">多线程 traceId 传递</h3>
<h4 id="存在问题">存在问题</h4>
<p>子线程在打印日志的过程中 traceId 将丢失，解决方式为重写线程池，对于直接 new 创建线程的情况不考虑【实际应用中应该避免这种用法】，重写线程池无非是对任务进行一次封装。</p>
<p>处理逻辑：</p>
<ol>
<li>判断当前线程对应 MDC 的 Map 是否存在，存在则设置；</li>
<li>设置 MDC 中的 traceId 值，不存在则新生成，针对不是子线程的情况，如果是子线程，MDC 中 traceId 不为 null；</li>
<li>执行 run 方法。</li>
</ol>
<h4 id="解决方法">解决方法</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 封装 MDC 用于向线程池传递</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadMdcUtil</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置 MDC 中的 traceId 值，不存在则新生成，针对不是子线程的情况，如果是子线程，MDC 中 traceId 不为 null</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setTraceIdIfAbsent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (MDC.get(Constants.TRACE_ID) == <span class="literal">null</span>) &#123;</span><br><span class="line">            MDC.put(Constants.TRACE_ID, TraceIdUtil.getTraceId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Callable&lt;T&gt; <span class="title function_">wrap</span><span class="params">(<span class="keyword">final</span> Callable&lt;T&gt; callable, <span class="keyword">final</span> Map&lt;String, String&gt; context)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> () -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (context == <span class="literal">null</span>) &#123;</span><br><span class="line">                MDC.clear();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                MDC.setContextMap(context);</span><br><span class="line">            &#125;</span><br><span class="line">            setTraceIdIfAbsent();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> callable.call();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">// 清除子线程的，避免内存溢出，就和 ThreadLocal.remove()一个原因</span></span><br><span class="line">                MDC.clear();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Runnable <span class="title function_">wrap</span><span class="params">(<span class="keyword">final</span> Runnable runnable, <span class="keyword">final</span> Map&lt;String, String&gt; context)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> () -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (context == <span class="literal">null</span>) &#123;</span><br><span class="line">                MDC.clear();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                MDC.setContextMap(context);</span><br><span class="line">            &#125;</span><br><span class="line">            setTraceIdIfAbsent();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                runnable.run();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                MDC.clear();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>重写线程池方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolExecutorMdcWrapper</span> <span class="keyword">extends</span> <span class="title class_">ThreadPoolExecutor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ThreadPoolExecutorMdcWrapper</span><span class="params">(<span class="type">int</span> corePoolSize, <span class="type">int</span> maximumPoolSize, <span class="type">long</span> keepAliveTime, TimeUnit unit,</span></span><br><span class="line"><span class="params">                                        BlockingQueue&lt;Runnable&gt; workQueue)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ThreadPoolExecutorMdcWrapper</span><span class="params">(<span class="type">int</span> corePoolSize, <span class="type">int</span> maximumPoolSize, <span class="type">long</span> keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue, ThreadFactory threadFactory)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ThreadPoolExecutorMdcWrapper</span><span class="params">(<span class="type">int</span> corePoolSize, <span class="type">int</span> maximumPoolSize, <span class="type">long</span> keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue, RejectedExecutionHandler handler)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, handler);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ThreadPoolExecutorMdcWrapper</span><span class="params">(<span class="type">int</span> corePoolSize, <span class="type">int</span> maximumPoolSize, <span class="type">long</span> keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory, handler);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(Runnable task)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.execute(ThreadMdcUtil.wrap(task, MDC.getCopyOfContextMap()));</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Future&lt;T&gt; <span class="title function_">submit</span><span class="params">(Runnable task, T result)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.submit(ThreadMdcUtil.wrap(task, MDC.getCopyOfContextMap()), result);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Future&lt;T&gt; <span class="title function_">submit</span><span class="params">(Callable&lt;T&gt; task)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.submit(ThreadMdcUtil.wrap(task, MDC.getCopyOfContextMap()));</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Future&lt;?&gt; submit(Runnable task) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.submit(ThreadMdcUtil.wrap(task, MDC.getCopyOfContextMap()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>使用自定义线程池</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> ThreadPoolTaskExecutor <span class="title function_">taskExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">taskExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutorMdcWrapper</span>();</span><br><span class="line">    <span class="comment">// 核心线程数，默认为 1</span></span><br><span class="line">    taskExecutor.setCorePoolSize(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 最大线程数，默认为 Integer.MAX_VALUE</span></span><br><span class="line">    taskExecutor.setMaxPoolSize(<span class="number">200</span>);</span><br><span class="line">    <span class="comment">// 队列最大长度，一般需要设置值 &gt;= notifyScheduledMainExecutor.maxNum；默认为 Integer.MAX_VALUE</span></span><br><span class="line">    taskExecutor.setQueueCapacity(<span class="number">2000</span>);</span><br><span class="line">    <span class="comment">// 线程池维护线程所允许的空闲时间，默认为 60s</span></span><br><span class="line">    taskExecutor.setKeepAliveSeconds(<span class="number">60</span>);</span><br><span class="line">    <span class="comment">// 线程池对拒绝任务（无线程可用）的处理策略</span></span><br><span class="line">    taskExecutor.setRejectedExecutionHandler(<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy());</span><br><span class="line">    <span class="comment">// 初始化线程池</span></span><br><span class="line">    taskExecutor.initialize();</span><br><span class="line">    <span class="keyword">return</span> taskExecutor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="HTTP-调用丢失-traceId">HTTP 调用丢失 traceId</h3>
<p>在使用 HTTP 调用第三方服务接口时 traceId 将丢失，需要对 HTTP 调用工具进行改造。发送时，在 request header 中添加 traceId，在下层被调用方添加拦截器获取 header 中的 traceId 添加到 MDC 中。</p>
<p>HTTP 调用有多种方式，比较常见的有 HttpClient、OKHttp、RestTemplate，所以只给出这几种 HTTP 调用的解决方式。</p>
<h4 id="HttpClient">HttpClient</h4>
<ol>
<li>实现 HttpRequestInterceptor 接口并重写 process 方法。</li>
<li>如果调用线程中含有 traceId，则需要将获取到的 traceId 通过 request 中的 header 向下透传下去。</li>
<li>为 HttpClient 添加拦截器</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpClientTraceIdInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HttpRequestInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(HttpRequest httpRequest, HttpContext httpContext)</span> <span class="keyword">throws</span> HttpException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">traceId</span> <span class="operator">=</span> MDC.get(Constants.TRACE_ID);</span><br><span class="line">        <span class="comment">//当前线程调用中有 traceId，则将该 traceId 进行透传</span></span><br><span class="line">        <span class="keyword">if</span> (traceId != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//添加请求体</span></span><br><span class="line">            httpRequest.addHeader(Constants.TRACE_ID, traceId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClientBuilder.create()</span><br><span class="line">            .addInterceptorFirst(<span class="keyword">new</span> <span class="title class_">HttpClientTraceIdInterceptor</span>())</span><br><span class="line">            .build();</span><br></pre></td></tr></table></figure>
<h4 id="OkHttp">OkHttp</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OkHttpTraceIdInterceptor</span> <span class="keyword">implements</span> <span class="title class_">Interceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Response <span class="title function_">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">traceId</span> <span class="operator">=</span> MDC.get(Constants.TRACE_ID);</span><br><span class="line">        <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (traceId != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//添加请求体</span></span><br><span class="line">            request = chain.request().newBuilder().addHeader(Constants.TRACE_ID, traceId).build();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Response</span> <span class="variable">originResponse</span> <span class="operator">=</span> chain.proceed(request);</span><br><span class="line">        <span class="keyword">return</span> originResponse;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">OkHttpClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>.Builder()</span><br><span class="line">        .addNetworkInterceptor(<span class="keyword">new</span> <span class="title class_">OkHttpTraceIdInterceptor</span>())</span><br><span class="line">        .build();</span><br></pre></td></tr></table></figure>
<h4 id="RestTemplate">RestTemplate</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestTemplateTraceIdInterceptor</span> <span class="keyword">implements</span> <span class="title class_">ClientHttpRequestInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ClientHttpResponse <span class="title function_">intercept</span><span class="params">(HttpRequest httpRequest, <span class="type">byte</span>[] bytes, ClientHttpRequestExecution clientHttpRequestExecution)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">traceId</span> <span class="operator">=</span> MDC.get(Constants.TRACE_ID);</span><br><span class="line">        <span class="keyword">if</span> (traceId != <span class="literal">null</span>) &#123;</span><br><span class="line">            httpRequest.getHeaders().add(Constants.TRACE_ID, traceId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> clientHttpRequestExecution.execute(httpRequest, bytes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">restTemplate.setInterceptors(Arrays.asList(<span class="keyword">new</span> <span class="title class_">RestTemplateTraceIdInterceptor</span>()));</span><br></pre></td></tr></table></figure>
<h4 id="第三方服务拦截器">第三方服务拦截器</h4>
<p>HTTP 调用第三方服务接口全流程 traceId 需要第三方服务配合，第三方服务需要添加拦截器拿到 request header 中的 traceId 并添加到 MDC 中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//如果有上层调用就用上层的 ID</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">traceId</span> <span class="operator">=</span> request.getHeader(Constants.TRACE_ID);</span><br><span class="line">        <span class="keyword">if</span> (traceId == <span class="literal">null</span>) &#123;</span><br><span class="line">            traceId = TraceIdUtils.getTraceId();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        MDC.put(<span class="string">&quot;traceId&quot;</span>, traceId);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span>             <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span>             <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        MDC.remove(Constants.TRACE_ID);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringSecurity5（11-跨域配置）</title>
    <url>/blog/2025/02/18/Java/SpringSecurity/SpringSecurity5/SpringSecurity5%EF%BC%8811-%E8%B7%A8%E5%9F%9F%E9%85%8D%E7%BD%AE%EF%BC%89/</url>
    <content><![CDATA[<h2 id="SpringBoot跨域处理">SpringBoot跨域处理</h2>
<h3 id="CrossOrigin（局部跨域）">@CrossOrigin（局部跨域）</h3>
<ol>
<li>作用在方法上</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CrossOrigin(value = &quot;http://localhost:8082&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;get hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CrossOrigin(value = &quot;http://localhost:8082&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;post hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>作用在类上</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin(origins = &quot;http://example.com&quot;, maxAge = 3600)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/account&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(method = RequestMethod.GET, path = &quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Account <span class="title function_">retrieve</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(method = RequestMethod.DELETE, path = &quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="WebMvcConfigurer（全局跨域）">WebMvcConfigurer（全局跨域）</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .allowedHeaders(<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;X-Requested-With&quot;</span>,<span class="string">&quot;accept,Origin&quot;</span>,<span class="string">&quot;Access-Control-Request-Method&quot;</span>,<span class="string">&quot;Access-Control-Request-Headers&quot;</span>,<span class="string">&quot;token&quot;</span>)</span><br><span class="line">                .allowedMethods(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                .allowedOrigins(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                .allowCredentials(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="SpringSecurity跨域处理">SpringSecurity跨域处理</h2>
<h3 id="跨域配置详解">跨域配置详解</h3>
<p>如果使用了 Spring Security，上面的跨域配置会失效，因为请求被 Spring Security 拦截了</p>
<p>在项目中使用 Spring Security，我们必须采取额外的步骤确保它与 CORS 协作良好。这是因为 CORS 需要首先处理，否则，Spring Security 会在请求到达 Spring MVC 之前将其拒绝</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringSecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.cors().and()...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以配置 CORS 以覆盖默认的 Spring Security CORS 处理器。为此，我们需要添加一个 CorsConfigurationSource Bean，使用 CorsConfiguration 实例来处理 CORS 配置。如果添加了 CorsFilter Bean，http.cors() 方法就会使用 CorsFilter，否则就会使用 CorsConfigurationSource。如果两者都未配置，则使用 Spring MVC pattern inspector handler。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfigurer</span>&lt;H <span class="keyword">extends</span> <span class="title class_">HttpSecurityBuilder</span>&lt;H&gt;&gt;</span><br><span class="line">		<span class="keyword">extends</span> <span class="title class_">AbstractHttpConfigurer</span>&lt;CorsConfigurer&lt;H&gt;, H&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">HANDLER_MAPPING_INTROSPECTOR</span> <span class="operator">=</span> <span class="string">&quot;org.springframework.web.servlet.handler.HandlerMappingIntrospector&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CORS_CONFIGURATION_SOURCE_BEAN_NAME</span> <span class="operator">=</span> <span class="string">&quot;corsConfigurationSource&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CORS_FILTER_BEAN_NAME</span> <span class="operator">=</span> <span class="string">&quot;corsFilter&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CorsConfigurationSource configurationSource;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CorsConfigurer</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CorsConfigurer&lt;H&gt; <span class="title function_">configurationSource</span><span class="params">(</span></span><br><span class="line"><span class="params">            CorsConfigurationSource configurationSource)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.configurationSource = configurationSource;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(H http)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> http.getSharedObject(ApplicationContext.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">CorsFilter</span> <span class="variable">corsFilter</span> <span class="operator">=</span> getCorsFilter(context);</span><br><span class="line">        <span class="keyword">if</span> (corsFilter == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(</span><br><span class="line">                    <span class="string">&quot;Please configure either a &quot;</span> + CORS_FILTER_BEAN_NAME + <span class="string">&quot; bean or a &quot;</span></span><br><span class="line">                            + CORS_CONFIGURATION_SOURCE_BEAN_NAME + <span class="string">&quot;bean.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        http.addFilter(corsFilter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CorsFilter <span class="title function_">getCorsFilter</span><span class="params">(ApplicationContext context)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.configurationSource != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsFilter</span>(<span class="built_in">this</span>.configurationSource);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查找是否有名为corsFilter的Bean对象</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">containsCorsFilter</span> <span class="operator">=</span> context</span><br><span class="line">                .containsBeanDefinition(CORS_FILTER_BEAN_NAME);</span><br><span class="line">        <span class="keyword">if</span> (containsCorsFilter) &#123;</span><br><span class="line">            <span class="keyword">return</span> context.getBean(CORS_FILTER_BEAN_NAME, CorsFilter.class);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查找是否有名为corsConfigurationSource的Bean对象</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">containsCorsSource</span> <span class="operator">=</span> context</span><br><span class="line">                .containsBean(CORS_CONFIGURATION_SOURCE_BEAN_NAME);</span><br><span class="line">        <span class="keyword">if</span> (containsCorsSource) &#123;</span><br><span class="line">            <span class="type">CorsConfigurationSource</span> <span class="variable">configurationSource</span> <span class="operator">=</span> context.getBean(</span><br><span class="line">                    CORS_CONFIGURATION_SOURCE_BEAN_NAME, CorsConfigurationSource.class);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsFilter</span>(configurationSource);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查找是否有org.springframework.web.servlet.handler.HandlerMappingIntrospector该类</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">mvcPresent</span> <span class="operator">=</span> ClassUtils.isPresent(HANDLER_MAPPING_INTROSPECTOR,</span><br><span class="line">                context.getClassLoader());</span><br><span class="line">        <span class="keyword">if</span> (mvcPresent) &#123;</span><br><span class="line">            <span class="keyword">return</span> MvcCorsFilter.getMvcCorsFilter(context);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MvcCorsFilter</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME</span> <span class="operator">=</span> <span class="string">&quot;mvcHandlerMappingIntrospector&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> CorsFilter <span class="title function_">getMvcCorsFilter</span><span class="params">(ApplicationContext context)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!context.containsBean(HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchBeanDefinitionException</span>(HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME, <span class="string">&quot;A Bean named &quot;</span> + HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME +<span class="string">&quot; of type &quot;</span> + HandlerMappingIntrospector.class.getName()</span><br><span class="line">                        + <span class="string">&quot; is required to use MvcRequestMatcher. Please ensure Spring Security &amp; Spring MVC are configured in a shared ApplicationContext.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 获取名为mvcHandlerMappingIntrospector的Bean对象</span></span><br><span class="line">            <span class="type">HandlerMappingIntrospector</span> <span class="variable">mappingIntrospector</span> <span class="operator">=</span> context.getBean(HANDLER_MAPPING_INTROSPECTOR_BEAN_NAME, HandlerMappingIntrospector.class);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsFilter</span>(mappingIntrospector);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="CorsConfigurationSource（全局跨域）">CorsConfigurationSource（全局跨域）</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringSecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">            .anyRequest()</span><br><span class="line">            .permitAll()</span><br><span class="line">            .and()</span><br><span class="line">            .formLogin()</span><br><span class="line">            .permitAll()</span><br><span class="line">            .and()</span><br><span class="line">            .httpBasic()</span><br><span class="line">            .and()</span><br><span class="line">            <span class="comment">// 支持跨域访问</span></span><br><span class="line">            .cors()</span><br><span class="line">            <span class="comment">// 可以选择配置</span></span><br><span class="line">            <span class="comment">//.configurationSource(corsConfigurationSource())</span></span><br><span class="line">            .and()</span><br><span class="line">            .csrf()</span><br><span class="line">            .disable();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CorsConfigurationSource <span class="title function_">corsConfigurationSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">        configuration.setAllowedOrigins(Arrays.asList(<span class="string">&quot;*&quot;</span>));</span><br><span class="line">        configuration.setAllowedMethods(Arrays.asList(<span class="string">&quot;*&quot;</span>));</span><br><span class="line">        configuration.setAllowedHeaders(Arrays.asList(<span class="string">&quot;*&quot;</span>));</span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, configuration);</span><br><span class="line">        <span class="keyword">return</span> source;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="CosFilter（全局跨域）">CosFilter（全局跨域）</h3>
<p>还有一种情况就是支持 OAuth2 相关接口的跨域，比如用户要访问 OAuth2 中的 /oauth/token 等接口，可以配置一个全局的 CorsFilter 跨域过滤器类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalCorsConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CorsFilter <span class="title function_">corsFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1.添加CORS配置信息</span></span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">        <span class="comment">//放行哪些原始域</span></span><br><span class="line">        config.addAllowedOrigin(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">//是否发送Cookie信息</span></span><br><span class="line">        config.setAllowCredentials(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//放行哪些原始域(请求方式)</span></span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">//放行哪些原始域(头部信息）</span></span><br><span class="line">        config.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">//暴露哪些头部信息（因为跨域访问默认不能获取全部头部信息）</span></span><br><span class="line">        config.addExposedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//2.添加映射路径</span></span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">configSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">        configSource.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, config);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//3.返回新的CorsFilter.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsFilter</span>(configSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="自定义Filter（全局跨域）">自定义Filter（全局跨域）</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">orignalHeader</span> <span class="operator">=</span> StringUtils.defaultIfBlank(request.getHeader(<span class="string">&quot;Origin&quot;</span>), <span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 指定本次预检请求的有效期</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Max-Age&quot;</span>, <span class="string">&quot;3600&quot;</span>);</span><br><span class="line">        <span class="comment">// 服务器支持的所有头信息字段</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, request.getHeader(<span class="string">&quot;Access-Control-Request-Headers&quot;</span>));</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, orignalHeader);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="string">&quot;POST, GET, OPTIONS, DELETE, PUT&quot;</span>);</span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.addFilterBefore(<span class="keyword">new</span> <span class="title class_">CorsFilter</span>(), WebAsyncManagerIntegrationFilter.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringSecurity</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringSecurity5（10-动态权限管理）</title>
    <url>/blog/2025/02/17/Java/SpringSecurity/SpringSecurity5/SpringSecurity5%EF%BC%8810-%E5%8A%A8%E6%80%81%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%EF%BC%89/</url>
    <content><![CDATA[<h2 id="授权流程">授权流程</h2>
<p><img src="2.png" alt=""> SpringSecurity 的授权流程如下：</p>
<ol>
<li>拦截请求，已认证用户访问受保护的 web 资源将被 SecurityFilterChain 中的 FilterSecurityInterceptor 的子类拦截。</li>
<li>获取资源访问策略，FilterSecurityInterceptor 会从 SecurityMetadataSource 的子类 DefaultFilterInvocationSecurityMetadataSource 获取要访问当前资源所需要的权限 Collection &lt; ConfigAttribute &gt;。SecurityMetadataSource 其实就是读取访问策略的抽象，而读取的内容其实就是我们配置的访问规则， 读取访问策略如下：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http.authorizeRequests()</span><br><span class="line">	.antMatchers(<span class="string">&quot;/r/r1&quot;</span>).hasAuthority(<span class="string">&quot;p1&quot;</span>)</span><br><span class="line">	.antMatchers(<span class="string">&quot;/r/r2&quot;</span>).hasAuthority(<span class="string">&quot;p2&quot;</span>)</span><br><span class="line">	...</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>FilterSecurityInterceptor 会调用 AccessDecisionManager 进行授权决策，若决策通过，则允许访问资源，否则将禁止访问</li>
</ol>
<p><img src="3.png" alt=""></p>
<p><img src="4.png" alt=""></p>
<p><img src="5.png" alt=""></p>
<h2 id="相关组件">相关组件</h2>
<h3 id="权限资源">权限资源</h3>
<p>要实现动态的权限验证，首先要有对应的访问权限资源，Spring Security 是通过 SecurityMetadataSource 来加载访问时所需要的具体权限</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SecurityMetadataSource</span> <span class="keyword">extends</span> <span class="title class_">AopInfrastructureBean</span> &#123;</span><br><span class="line">    <span class="comment">//根据提供的受保护对象的信息（URI），获取该 URI 配置的所有角色</span></span><br><span class="line">    Collection&lt;ConfigAttribute&gt; <span class="title function_">getAttributes</span><span class="params">(Object var1)</span> <span class="keyword">throws</span> IllegalArgumentException;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取全部角色，如果返回了所有定义的权限资源，Spring Security 会在启动时</span></span><br><span class="line">    <span class="comment">//校验每个 ConfigAttribute 是否配置正确，不需要校验直接返回 null</span></span><br><span class="line">    Collection&lt;ConfigAttribute&gt; <span class="title function_">getAllConfigAttributes</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//对特定的安全对象是否提供 ConfigAttribute 支持</span></span><br><span class="line">    <span class="comment">//web 项目一般使用 FilterInvocation 来判断，或者直接返回 true</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(Class&lt;?&gt; var1)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>SecurityMetadataSource 是一个接口，同时还有一个接口 FilterInvocationSecurityMetadataSource 继承于它，但其只是一个标识接口，对应于 FilterInvocation，本身并无任何内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">FilterInvocationSecurityMetadataSource</span> <span class="keyword">extends</span> <span class="title class_">SecurityMetadataSource</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="权限决策管理器">权限决策管理器</h3>
<p>有了权限资源，知道了当前访问的 url 需要的具体权限，接下来就是决策当前的访问是否能通过权限验证了，AccessDecisionManager 中包含的一系列 AccessDecisionVoter 将会被用来对 Authentication 是否有权访问受保护对象进行投票，AccessDecisionManager 根据投票结果做出最终决策</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccessDecisionManager</span> &#123;</span><br><span class="line">    <span class="comment">// 决策主要通过其持有的 AccessDecisionVoter 来进行投票决策</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">decide</span><span class="params">(Authentication authentication, Object object, Collection&lt;ConfigAttribute&gt; configAttributes)</span> <span class="keyword">throws</span> AccessDeniedException, InsufficientAuthenticationException;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 以确定 AccessDecisionManager 是否可以处理传递的 ConfigAttribute</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(ConfigAttribute var1)</span>;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 以确保配置的 AccessDecisionManager 支持安全拦截器将呈现的安全 object 类型。</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(Class&lt;?&gt; var1)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>authentication：要访问资源的访问者的身份</li>
<li>object：要访问的受保护资源，web 请求对应的 FilterInvocation</li>
<li>configAttributes：受保护资源的访问策略，通过 SecurityMetadataSource 获取</li>
</ol>
<p>Spring Security 内置了三个基于投票的 AccessDecisionManager 实现类如下，它们分别是 AffirmativeBased、ConsensusBased 和 UnanimousBased</p>
<h4 id="AffirmativeBased">AffirmativeBased</h4>
<p>基于肯定的决策器，用户持有一个同意访问的角色就能通过</p>
<ol>
<li>只要有 AccessDecisionVoter 的投票为 ACCESS_GRANTED 则同意用户进行访问；</li>
<li>如果全部弃权也表示通过；</li>
<li>如果没有一个人投赞成票，但是有人投反对票，则将抛出 AccessDeniedException。 Spring Security 默认使用的是 AffirmativeBased</li>
</ol>
<h4 id="ConsensusBased">ConsensusBased</h4>
<p>基于共识的决策器，用户持有同意的角色数量多于禁止的角色数量</p>
<ol>
<li>如果赞成票多于反对票则表示通过；如果反对票多于赞成票则将抛出 AccessDeniedException</li>
<li>如果赞成票与反对票相同且不等于 0，并且属性 allowIfEqualGrantedDeniedDecisions 的值为 true（默认为 true），则表示通过，否则将抛出异常 AccessDeniedException</li>
<li>如果所有的 AccessDecisionVoter 都弃权了，则将视参数 allowIfAllAbstainDecisions 的值而定（默认为 false），如果该值为 true 则表示通过，否则将抛出异常 AccessDeniedException</li>
</ol>
<h4 id="UnanimousBased">UnanimousBased</h4>
<p>基于一致的决策器，用户持有的所有角色都同意访问才能放行</p>
<ol>
<li>如果受保护对象配置的某一个 ConfigAttribute 被任意的 AccessDecisionVoter 反对了，则将抛出 AccessDeniedException。</li>
<li>如果没有反对票，但是有赞成票，则表示通过。</li>
<li>如果全部弃权了，则将视参数 allowIfAllAbstainDecisions 的值而定，true 则通过，false 则抛出 AccessDeniedException。</li>
</ol>
<h3 id="权限决策投票器">权限决策投票器</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccessDecisionVoter</span>&lt;S&gt; &#123;</span><br><span class="line">    <span class="comment">// 赞成</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">ACCESS_GRANTED</span> <span class="operator">=</span> <span class="number">1</span>; </span><br><span class="line">    <span class="comment">// 弃权</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">ACCESS_ABSTAIN</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 否决</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">ACCESS_DENIED</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 用于判断对于当前 ConfigAttribute 访问规则是否支持</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(ConfigAttribute attribute)</span>;</span><br><span class="line">    <span class="comment">// 用于判断该类是否支持</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(Class&lt;?&gt; clazz)</span>;</span><br><span class="line">    <span class="comment">// 如果支持的情况下，vote 方法对其进行判断投票返回对应的授权结果</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">vote</span><span class="params">(Authentication authentication, S object, Collection&lt;ConfigAttribute&gt; attributes)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="WebExpressionVoter">WebExpressionVoter</h4>
<p>最常用的，也是 SpringSecurity 中默认的 FilterSecurityInterceptor 实例中 AccessDecisionManager 默认的投票器，它其实就是 http.authorizeRequests()基于 Spring-EL 进行控制权限的授权决策类。</p>
<h4 id="AuthenticatedVoter">AuthenticatedVoter</h4>
<p>AuthenticatedVoter 针对的是 ConfigAttribute#getAttribute() 中配置为 IS_AUTHENTICATED_FULLY 、IS_AUTHENTICATED_REMEMBERED、IS_AUTHENTICATED_ANONYMOUSLY 权限标识时的授权决策。因此，其投票策略比较简单</p>
<h4 id="PreInvocationAuthorizationAdviceVoter">PreInvocationAuthorizationAdviceVoter</h4>
<p>用于处理基于注解 @PreFilter 和 @PreAuthorize 生成的 PreInvocationAuthorizationAdvice，来处理授权决策的实现</p>
<h4 id="RoleVoter">RoleVoter</h4>
<p>角色投票器。用于 ConfigAttribute#getAttribute() 中配置为角色的授权决策。其默认前缀为 ROLE_，可以自定义，也可以设置为空，直接使用角色标识进行判断。这就意味着，任何属性都可以使用该投票器投票，也就偏离了该投票器的本意，是不可取的。</p>
<h4 id="RoleHierarchyVoter">RoleHierarchyVoter</h4>
<p>基于 RoleVoter，唯一的不同就是该投票器中的角色是附带上下级关系的。也就是说，角色 A 包含角色 B，角色 B 包含 角色 C，此时，如果用户拥有角色 A，那么理论上可以同时拥有角色 B、角色 C 的全部资源访问权限.</p>
<h2 id="自定义动态权限控制">自定义动态权限控制</h2>
<h3 id="实现逻辑">实现逻辑</h3>
<ol>
<li>自定义 FilterSecurityInterceptor，可仿写 FilterSecurityInterceptor，实现抽象类 AbstractSecurityInterceptor 以及 Filter 接口，其主要的是把自定义的 SecurityMetadataSource 与自定义 accessDecisionManager 配置到自定义 FilterSecurityInterceptor 的拦截器中</li>
<li>自定义 SecurityMetadataSource，实现接口 FilterInvocationSecurityMetadataSource，实现从数据库或者其他数据源中加载 ConfigAttribute（即是从数据库或者其他数据源中加载资源权限）</li>
<li>自定义 AccessDecisionManager，可使用基于 AccessDecisionVoter 实现权限认证的官方 UnanimousBased</li>
<li>自定义 AccessDecisionVoter</li>
<li>自定义 MyFilterSecurityInterceptor</li>
</ol>
<ul>
<li>加载自定义的 SecurityMetadataSource 到自定义的 FilterSecurityInterceptor 中；</li>
<li>加载自定义的 AccessDecisionManager 到自定义的 FilterSecurityInterceptor 中；</li>
<li>重写 invoke 方法</li>
</ul>
<h3 id="基于用户的权限控制">基于用户的权限控制</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UmsAdminServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span>&#123;</span><br><span class="line">        <span class="comment">// 数据库获取用户信息</span></span><br><span class="line">        <span class="type">UmsAdmin</span> <span class="variable">admin</span> <span class="operator">=</span> getAdminByUsername(username);</span><br><span class="line">        <span class="keyword">if</span> (admin != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 获取用户权限</span></span><br><span class="line">            List&lt;UmsPermission&gt; permissionList = getPermissionList(admin.getId());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AdminUserDetails</span>(admin,permissionList);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Spring Security 把用户拥有的权限值和接口上注解定义的权限值进行比对，如果包含则可以访问，反之就不可以访问；但是这样做会带来一些问题，我们需要在每个接口上都定义好访问该接口的权限值，而且只能挨个控制接口的权限，无法批量控制</p>
<h3 id="基于路径的动态权限控制">基于路径的动态权限控制</h3>
<h4 id="动态权限数据源">动态权限数据源</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动态权限相关业务类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DynamicSecurityService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载资源 ANT 通配符和资源对应 MAP</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Map&lt;String, ConfigAttribute&gt; <span class="title function_">loadDataSource</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MallSecurityConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后台获取资源服务类（自定义）</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UmsResourceService resourceService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DynamicSecurityService <span class="title function_">dynamicSecurityService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DynamicSecurityService</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Map&lt;String, ConfigAttribute&gt; <span class="title function_">loadDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">                Map&lt;String, ConfigAttribute&gt; map = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line">                List&lt;UmsResource&gt; resourceList = resourceService.listAll();</span><br><span class="line">                <span class="keyword">for</span> (UmsResource resource : resourceList) &#123;</span><br><span class="line">                    map.put(resource.getUrl(), <span class="keyword">new</span> <span class="title class_">org</span>.springframework.security.access.SecurityConfig(resource.getName()));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> map;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动态权限数据源，用于获取动态权限规则</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicSecurityMetadataSource</span> <span class="keyword">implements</span> <span class="title class_">FilterInvocationSecurityMetadataSource</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, ConfigAttribute&gt; configAttributeMap = <span class="literal">null</span>;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DynamicSecurityService dynamicSecurityService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">loadDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        configAttributeMap = dynamicSecurityService.loadDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clearDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        configAttributeMap.clear();</span><br><span class="line">        configAttributeMap = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;ConfigAttribute&gt; <span class="title function_">getAttributes</span><span class="params">(Object o)</span> <span class="keyword">throws</span> IllegalArgumentException &#123;</span><br><span class="line">        <span class="keyword">if</span> (configAttributeMap == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.loadDataSource();</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;ConfigAttribute&gt; configAttributes = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//获取当前访问的路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> ((FilterInvocation) o).getRequestUrl();</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> URLUtil.getPath(url);</span><br><span class="line">        <span class="type">PathMatcher</span> <span class="variable">pathMatcher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AntPathMatcher</span>();</span><br><span class="line">        Iterator&lt;String&gt; iterator = configAttributeMap.keySet().iterator();</span><br><span class="line">        <span class="comment">//获取访问该路径所需资源</span></span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">pattern</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            <span class="keyword">if</span> (pathMatcher.match(pattern, path)) &#123;</span><br><span class="line">                configAttributes.add(configAttributeMap.get(pattern));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 未设置操作请求权限，返回空集合</span></span><br><span class="line">        <span class="keyword">return</span> configAttributes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;ConfigAttribute&gt; <span class="title function_">getAllConfigAttributes</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(Class&lt;?&gt; aClass)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>流程如下：</p>
<ol>
<li>从数据库中查询出来所有的菜单，然后再过滤找到满足当前请求 URL 的，只要满足前面匹配的都需要权限控制</li>
<li>由于我们的后台资源规则被缓存在了一个 Map 对象之中，所以当后台资源发生变化时，我们需要清空缓存的数据，然后下次查询时就会被重新加载进来，需要调用 clearDataSource 方法来清空缓存的数据</li>
<li>之后我们需要实现 AccessDecisionManager 接口来实现权限校验，对于没有配置资源的接口我们直接允许访问，对于配置了资源的接口，我们把访问所需资源和用户拥有的资源进行比对，如果匹配则允许访问</li>
</ol>
<p>注意：菜单权限是每次都要全量查询数据库，如果数据多的话，可能会影响性能，这里改造读取缓存，但是新增修改菜单时，记得更新缓存数据</p>
<h4 id="动态权限决策管理器">动态权限决策管理器</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动态权限决策管理器，用于判断用户是否有访问权限</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicAccessDecisionManager</span> <span class="keyword">implements</span> <span class="title class_">AccessDecisionManager</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">decide</span><span class="params">(Authentication authentication, Object object,</span></span><br><span class="line"><span class="params">                       Collection&lt;ConfigAttribute&gt; configAttributes)</span> <span class="keyword">throws</span> AccessDeniedException, InsufficientAuthenticationException &#123;</span><br><span class="line">        <span class="comment">// 当接口未被配置资源时直接放行</span></span><br><span class="line">        <span class="keyword">if</span> (CollUtil.isEmpty(configAttributes)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Iterator&lt;ConfigAttribute&gt; iterator = configAttributes.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">ConfigAttribute</span> <span class="variable">configAttribute</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            <span class="comment">//将访问所需资源或用户拥有资源进行比对</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">needAuthority</span> <span class="operator">=</span> configAttribute.getAttribute();</span><br><span class="line">            <span class="keyword">for</span> (GrantedAuthority grantedAuthority : authentication.getAuthorities()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (needAuthority.trim().equals(grantedAuthority.getAuthority())) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AccessDeniedException</span>(<span class="string">&quot;抱歉，您没有访问权限&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(ConfigAttribute configAttribute)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(Class&lt;?&gt; aClass)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="JWT-登录授权">JWT 登录授权</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JWT 登录授权过滤器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtAuthenticationTokenFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOGGER</span> <span class="operator">=</span> LoggerFactory.getLogger(JwtAuthenticationTokenFilter.class);</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtTokenUtil jwtTokenUtil;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.tokenHeader&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String tokenHeader;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.tokenHead&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String tokenHead;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">                                    HttpServletResponse response,</span></span><br><span class="line"><span class="params">                                    FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">authHeader</span> <span class="operator">=</span> request.getHeader(<span class="built_in">this</span>.tokenHeader);</span><br><span class="line">        <span class="keyword">if</span> (authHeader != <span class="literal">null</span> &amp;&amp; authHeader.startsWith(<span class="built_in">this</span>.tokenHead)) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">authToken</span> <span class="operator">=</span> authHeader.substring(<span class="built_in">this</span>.tokenHead.length());<span class="comment">// The part after &quot;Bearer &quot;</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> jwtTokenUtil.getUserNameFromToken(authToken);</span><br><span class="line">            LOGGER.info(<span class="string">&quot;checking username:&#123;&#125;&quot;</span>, username);</span><br><span class="line">            <span class="keyword">if</span> (username != <span class="literal">null</span> &amp;&amp; SecurityContextHolder.getContext().getAuthentication() == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">UserDetails</span> <span class="variable">userDetails</span> <span class="operator">=</span> <span class="built_in">this</span>.userDetailsService.loadUserByUsername(username);</span><br><span class="line">                <span class="keyword">if</span> (jwtTokenUtil.validateToken(authToken, userDetails)) &#123;</span><br><span class="line">                    <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authentication</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(userDetails, <span class="literal">null</span>, userDetails.getAuthorities());</span><br><span class="line">                    authentication.setDetails(<span class="keyword">new</span> <span class="title class_">WebAuthenticationDetailsSource</span>().buildDetails(request));</span><br><span class="line">                    LOGGER.info(<span class="string">&quot;authenticated user:&#123;&#125;&quot;</span>, username);</span><br><span class="line">                    SecurityContextHolder.getContext().setAuthentication(authentication);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtTokenUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOGGER</span> <span class="operator">=</span> LoggerFactory.getLogger(JwtTokenUtil.class);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CLAIM_KEY_USERNAME</span> <span class="operator">=</span> <span class="string">&quot;sub&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CLAIM_KEY_CREATED</span> <span class="operator">=</span> <span class="string">&quot;created&quot;</span>;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.secret&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String secret;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.expiration&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long expiration;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.tokenHead&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String tokenHead;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据负责生成 JWT 的 token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">generateToken</span><span class="params">(Map&lt;String, Object&gt; claims)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Jwts.builder()</span><br><span class="line">                .setClaims(claims)</span><br><span class="line">                .setExpiration(generateExpirationDate())</span><br><span class="line">                .signWith(SignatureAlgorithm.HS512, secret)</span><br><span class="line">                .compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从 token 中获取 JWT 中的负载</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Claims <span class="title function_">getClaimsFromToken</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            claims = Jwts.parser()</span><br><span class="line">                    .setSigningKey(secret)</span><br><span class="line">                    .parseClaimsJws(token)</span><br><span class="line">                    .getBody();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOGGER.info(<span class="string">&quot;JWT格式验证失败:&#123;&#125;&quot;</span>, token);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> claims;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成 token 的过期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date <span class="title function_">generateExpirationDate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + expiration * <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从 token 中获取登录用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUserNameFromToken</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        String username;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> getClaimsFromToken(token);</span><br><span class="line">            username = claims.getSubject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            username = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证 token 是否还有效</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token       客户端传入的 token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userDetails 从数据库中查询出来的用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">validateToken</span><span class="params">(String token, UserDetails userDetails)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> getUserNameFromToken(token);</span><br><span class="line">        <span class="keyword">return</span> username.equals(userDetails.getUsername()) &amp;&amp; !isTokenExpired(token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断 token 是否已经失效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isTokenExpired</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">expiredDate</span> <span class="operator">=</span> getExpiredDateFromToken(token);</span><br><span class="line">        <span class="keyword">return</span> expiredDate.before(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从 token 中获取过期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date <span class="title function_">getExpiredDateFromToken</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> getClaimsFromToken(token);</span><br><span class="line">        <span class="keyword">return</span> claims.getExpiration();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户信息生成 token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">generateToken</span><span class="params">(UserDetails userDetails)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; claims = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        claims.put(CLAIM_KEY_USERNAME, userDetails.getUsername());</span><br><span class="line">        claims.put(CLAIM_KEY_CREATED, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="keyword">return</span> generateToken(claims);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当原来的 token 没过期时是可以刷新的</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> oldToken 带 tokenHead 的 token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">refreshHeadToken</span><span class="params">(String oldToken)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(StrUtil.isEmpty(oldToken))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> oldToken.substring(tokenHead.length());</span><br><span class="line">        <span class="keyword">if</span>(StrUtil.isEmpty(token))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//token 校验不通过</span></span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> getClaimsFromToken(token);</span><br><span class="line">        <span class="keyword">if</span>(claims==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果 token 已经过期，不支持刷新</span></span><br><span class="line">        <span class="keyword">if</span>(isTokenExpired(token))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果 token 在 30 分钟之内刚刷新过，返回原 token</span></span><br><span class="line">        <span class="keyword">if</span>(tokenRefreshJustBefore(token,<span class="number">30</span>*<span class="number">60</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> token;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            claims.put(CLAIM_KEY_CREATED, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">            <span class="keyword">return</span> generateToken(claims);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断 token 在指定时间内是否刚刚刷新过</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token 原 token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 指定时间（秒）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">tokenRefreshJustBefore</span><span class="params">(String token, <span class="type">int</span> time)</span> &#123;</span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> getClaimsFromToken(token);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">created</span> <span class="operator">=</span> claims.get(CLAIM_KEY_CREATED, Date.class);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">refreshDate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="comment">//刷新时间在创建时间的指定时间内</span></span><br><span class="line">        <span class="keyword">if</span>(refreshDate.after(created)&amp;&amp;refreshDate.before(DateUtil.offsetSecond(created,time)))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="动态权限过滤器">动态权限过滤器</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动态权限过滤器，用于实现基于路径的动态权限过滤</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicSecurityFilter</span> <span class="keyword">extends</span> <span class="title class_">AbstractSecurityInterceptor</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DynamicSecurityMetadataSource dynamicSecurityMetadataSource;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IgnoreUrlsConfig ignoreUrlsConfig;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DynamicAccessDecisionManager dynamicAccessDecisionManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMyAccessDecisionManager</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.setAccessDecisionManager(dynamicAccessDecisionManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">        <span class="type">FilterInvocation</span> <span class="variable">fi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterInvocation</span>(servletRequest, servletResponse, filterChain);</span><br><span class="line">        <span class="comment">//OPTIONS 请求直接放行</span></span><br><span class="line">        <span class="keyword">if</span>(request.getMethod().equals(HttpMethod.OPTIONS.toString()))&#123;</span><br><span class="line">            fi.getChain().doFilter(fi.getRequest(), fi.getResponse());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//白名单请求直接放行</span></span><br><span class="line">        <span class="type">PathMatcher</span> <span class="variable">pathMatcher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AntPathMatcher</span>();</span><br><span class="line">        <span class="keyword">for</span> (String path : ignoreUrlsConfig.getUrls()) &#123;</span><br><span class="line">            <span class="keyword">if</span>(pathMatcher.match(path,request.getRequestURI()))&#123;</span><br><span class="line">                fi.getChain().doFilter(fi.getRequest(), fi.getResponse());</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//此处会调用 AccessDecisionManager 中的 decide 方法进行鉴权操作</span></span><br><span class="line">        <span class="type">InterceptorStatusToken</span> <span class="variable">token</span> <span class="operator">=</span> <span class="built_in">super</span>.beforeInvocation(fi);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fi.getChain().doFilter(fi.getRequest(), fi.getResponse());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>.afterInvocation(token, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getSecureObjectClass() &#123;</span><br><span class="line">        <span class="keyword">return</span> FilterInvocation.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> SecurityMetadataSource <span class="title function_">obtainSecurityMetadataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dynamicSecurityMetadataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="自定义登录处理器">自定义登录处理器</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义返回结果：未登录或登录过期</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestAuthenticationEntryPoint</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationEntryPoint</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commence</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Cache-Control&quot;</span>,<span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        response.getWriter().println(JSONUtil.parse(CommonResult.unauthorized(authException.getMessage())));</span><br><span class="line">        response.getWriter().flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当前端跨域访问没有权限的接口时，会出现跨域问题，只需要在没有权限访问的处理类 RestfulAccessDeniedHandler 中添加允许跨域访问的响应头即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义返回结果：没有权限访问时</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestfulAccessDeniedHandler</span> <span class="keyword">implements</span> <span class="title class_">AccessDeniedHandler</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">                       HttpServletResponse response,</span></span><br><span class="line"><span class="params">                       AccessDeniedException e)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Cache-Control&quot;</span>,<span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        response.getWriter().println(JSONUtil.parse(CommonResult.forbidden(e.getMessage())));</span><br><span class="line">        response.getWriter().flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="配置类">配置类</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于配置白名单资源路径</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;secure.ignored&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IgnoreUrlsConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; urls = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringSecurity 通用配置</span></span><br><span class="line"><span class="comment"> * 包括通用 Bean、Security 通用 Bean 及动态权限通用 Bean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonSecurityConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> IgnoreUrlsConfig <span class="title function_">ignoreUrlsConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">IgnoreUrlsConfig</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JwtTokenUtil <span class="title function_">jwtTokenUtil</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JwtTokenUtil</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestfulAccessDeniedHandler <span class="title function_">restfulAccessDeniedHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestfulAccessDeniedHandler</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestAuthenticationEntryPoint <span class="title function_">restAuthenticationEntryPoint</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestAuthenticationEntryPoint</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JwtAuthenticationTokenFilter <span class="title function_">jwtAuthenticationTokenFilter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JwtAuthenticationTokenFilter</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DynamicAccessDecisionManager <span class="title function_">dynamicAccessDecisionManager</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DynamicAccessDecisionManager</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DynamicSecurityMetadataSource <span class="title function_">dynamicSecurityMetadataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DynamicSecurityMetadataSource</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DynamicSecurityFilter <span class="title function_">dynamicSecurityFilter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DynamicSecurityFilter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IgnoreUrlsConfig ignoreUrlsConfig;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestfulAccessDeniedHandler restfulAccessDeniedHandler;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestAuthenticationEntryPoint restAuthenticationEntryPoint;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DynamicSecurityService dynamicSecurityService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DynamicSecurityFilter dynamicSecurityFilter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity httpSecurity)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ExpressionUrlAuthorizationConfigurer&lt;HttpSecurity&gt;.<span class="type">ExpressionInterceptUrlRegistry</span> <span class="variable">registry</span> <span class="operator">=</span> httpSecurity.authorizeRequests();</span><br><span class="line">        <span class="comment">// 不需要保护的资源路径允许访问</span></span><br><span class="line">        <span class="keyword">for</span> (String url : ignoreUrlsConfig().getUrls()) &#123;</span><br><span class="line">            registry.antMatchers(url).permitAll();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 允许跨域的 OPTIONS 请求</span></span><br><span class="line">        registry.antMatchers(HttpMethod.OPTIONS)</span><br><span class="line">                .permitAll();</span><br><span class="line">        <span class="comment">// 其他任何请求都需要身份认证</span></span><br><span class="line">        registry.and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .anyRequest()</span><br><span class="line">                .authenticated()</span><br><span class="line">                <span class="comment">// 关闭跨站请求防护及不使用 session</span></span><br><span class="line">                .and()</span><br><span class="line">                .csrf()</span><br><span class="line">                .disable()</span><br><span class="line">                .sessionManagement()</span><br><span class="line">                .sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line">                <span class="comment">// 自定义权限拒绝处理类</span></span><br><span class="line">                .and()</span><br><span class="line">                .exceptionHandling()</span><br><span class="line">                .accessDeniedHandler(restfulAccessDeniedHandler)</span><br><span class="line">                .authenticationEntryPoint(restAuthenticationEntryPoint)</span><br><span class="line">                <span class="comment">// 自定义权限拦截器 JWT 过滤器</span></span><br><span class="line">                .and()</span><br><span class="line">                .addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class="line">        <span class="comment">//有动态权限配置时添加动态权限校验过滤器</span></span><br><span class="line">        <span class="keyword">if</span>(dynamicSecurityService!=<span class="literal">null</span>)&#123;</span><br><span class="line">            registry.and().addFilterBefore(dynamicSecurityFilter, FilterSecurityInterceptor.class);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringSecurity</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringSecurity5（12-Csrf防护）</title>
    <url>/blog/2025/02/19/Java/SpringSecurity/SpringSecurity5/SpringSecurity5%EF%BC%8812-Csrf%E9%98%B2%E6%8A%A4%EF%BC%89/</url>
    <content><![CDATA[<h2 id="工作原理">工作原理</h2>
<p>从 Spring Security 4.x 开始，默认启用 CSRF 保护，该默认配置将 CSRF Token 添加到名为 _csrf 的 HttpServletRequest 属性中。Spring Security 通过 CsrfFilter 实现 CSRF 防护，如果 CSRF Token 不存在或值不正确，则拒绝该请求并将响应的状态设置为 403</p>
<p>SpringSecurity 的 Csrf 机制把请求方式分为两类来处理</p>
<ol>
<li>GET、HEAD、TRACE、OPTIONS 这四类请求可以直接通过</li>
<li>除去上面，包括 POST 都要被验证携带 token 才能通过</li>
</ol>
<p>为了保护 MVC 应用，Spring 会在每个生成的视图中添加一个 CSRF Token，该 Token 必须在每次修改状态的 HTTP 请求（PATCH、POST、PUT 和 DELETE）中提交给服务器，这可以保护应用免受 CSRF 攻击，因为攻击者无法从自己的页面获取此 Token。</p>
<p>用户登录时，系统发放一个 CsrfToken 值，用户携带该 CsrfToken 值与用户名、密码等参数完成登录，系统记录该会话的 CsrfToken 值，之后在用户的任何请求中，都必须带上该 CsrfToken 值，并由系统进行校验。这种方法需要与前端配置，包括存储 CsrfToken 值，以及在任何请求中（表单和 ajax）携带 CsrfToken 值，如果都是 XMLHttpRequest，则可以统一添加 CsrfToken 值，但如果存在大量的表单和 a 标签，就会变得非常烦琐</p>
<p>_csrf 属性包含以下信息：</p>
<ol>
<li>token：CSRF Token 值</li>
<li>parameterName：HTML 表单参数的名称，其中必须包含 Token 值</li>
<li>headerName：HTTP Header 的名称，其中必须包含 Token 值</li>
</ol>
<p><strong>HTML 表单</strong></p>
<p>如果视图使用 HTML 表单，可以使用 parameterName 和 token 值添加隐藏 input</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;_csrf.parameterName&#125;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;_csrf.token&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>JSON 请求</strong></p>
<p>如果视图使用 JSON，则需要使用 headerName 和 token 值添加 HTTP 请求头信息。</p>
<ol>
<li>在 meta 标签中包含 Token 值和 Header 名称</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;_csrf&quot;</span> <span class="attr">content</span>=<span class="string">&quot;$&#123;_csrf.token&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;_csrf_header&quot;</span> <span class="attr">content</span>=<span class="string">&quot;$&#123;_csrf.headerName&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>用 JQuery 获取 meta 标签值</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> token = $(<span class="string">&quot;meta[name=&#x27;_csrf&#x27;]&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;content&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> header = $(<span class="string">&quot;meta[name=&#x27;_csrf_header&#x27;]&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;content&quot;</span>);</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>使用这些值来设置 XHR Header</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">$(document).ajaxSend(function(e<span class="punctuation">,</span> xhr<span class="punctuation">,</span> options) <span class="punctuation">&#123;</span></span><br><span class="line">    xhr.setRequestHeader(header<span class="punctuation">,</span> token);</span><br><span class="line"><span class="punctuation">&#125;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="CsrfFilter">CsrfFilter</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    request.setAttribute(HttpServletResponse.class.getName(), response);</span><br><span class="line">    <span class="comment">// 从 CsrfTokenRepository 中获取当前用户的 CsrfToken</span></span><br><span class="line">    <span class="type">CsrfToken</span> <span class="variable">csrfToken</span> <span class="operator">=</span> <span class="built_in">this</span>.tokenRepository.loadToken(request);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">missingToken</span> <span class="operator">=</span> (csrfToken == <span class="literal">null</span>);</span><br><span class="line">    <span class="comment">// 如果找不到 CsrfToken 就生成一个并保存到 CsrfTokenRepository 中</span></span><br><span class="line">    <span class="keyword">if</span> (missingToken) &#123;</span><br><span class="line">        csrfToken = <span class="built_in">this</span>.tokenRepository.generateToken(request);</span><br><span class="line">        <span class="built_in">this</span>.tokenRepository.saveToken(csrfToken, request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 在请求中添加 CsrfToken</span></span><br><span class="line">    request.setAttribute(CsrfToken.class.getName(), csrfToken);</span><br><span class="line">    request.setAttribute(csrfToken.getParameterName(), csrfToken);</span><br><span class="line">    <span class="comment">// 如果是 &quot;GET&quot;, &quot;HEAD&quot;, &quot;TRACE&quot;, &quot;OPTIONS&quot; 这些方法，直接放行</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.requireCsrfProtectionMatcher.matches(request)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.logger.isTraceEnabled()) &#123;</span><br><span class="line">            <span class="built_in">this</span>.logger.trace(<span class="string">&quot;Did not protect against CSRF since request did not match &quot;</span></span><br><span class="line">                    + <span class="built_in">this</span>.requireCsrfProtectionMatcher);</span><br><span class="line">        &#125;</span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 从用户请求头中获取 CsrfToken</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">actualToken</span> <span class="operator">=</span> request.getHeader(csrfToken.getHeaderName());</span><br><span class="line">    <span class="keyword">if</span> (actualToken == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 头信息中拿不到，再从 param 中获取一次</span></span><br><span class="line">        actualToken = request.getParameter(csrfToken.getParameterName());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果请求所携带的 CsrfToken 与从 Repository 中获取的不同，则阻止访问</span></span><br><span class="line">    <span class="keyword">if</span> (!equalsConstantTime(csrfToken.getToken(), actualToken)) &#123;</span><br><span class="line">        <span class="built_in">this</span>.logger.debug(</span><br><span class="line">                LogMessage.of(() -&gt; <span class="string">&quot;Invalid CSRF token found for &quot;</span> + UrlUtils.buildFullRequestUrl(request)));</span><br><span class="line">        <span class="type">AccessDeniedException</span> <span class="variable">exception</span> <span class="operator">=</span> (!missingToken) ? <span class="keyword">new</span> <span class="title class_">InvalidCsrfTokenException</span>(csrfToken, actualToken): <span class="keyword">new</span> <span class="title class_">MissingCsrfTokenException</span>(actualToken);</span><br><span class="line">        <span class="built_in">this</span>.accessDeniedHandler.handle(request, response, exception);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 正常情况下继续执行过滤器链的后续流程</span></span><br><span class="line">    filterChain.doFilter(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="CsrfToken">CsrfToken</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CsrfToken</span> <span class="keyword">extends</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="comment">// 获取请求头名称</span></span><br><span class="line">    String <span class="title function_">getHeaderName</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 获取应该包含 Token 的参数名称</span></span><br><span class="line">    String <span class="title function_">getParameterName</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 获取具体的 Token 值</span></span><br><span class="line">    String <span class="title function_">getToken</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="CsrfTokenRepository">CsrfTokenRepository</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CsrfTokenRepository</span> &#123;</span><br><span class="line">    <span class="comment">// 生成新的 token</span></span><br><span class="line">    CsrfToken <span class="title function_">generateToken</span><span class="params">(HttpServletRequest request)</span>;</span><br><span class="line">    <span class="comment">// 保存 token，如果 token 传入 null 等同于删除</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">saveToken</span><span class="params">(CsrfToken token, HttpServletRequest request, HttpServletResponse response)</span>;</span><br><span class="line">    <span class="comment">// 从目标地点获取 token</span></span><br><span class="line">    CsrfToken <span class="title function_">loadToken</span><span class="params">(HttpServletRequest request)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="CookieCsrfTokenRepository">CookieCsrfTokenRepository</h3>
<p>它将 CsrfToken 值存储在用户的 cookie 内，减少了服务器 HttpSession 存储的内存消耗，并且当用 cookie 存储 CsrfToken 值时，前端可以用 JS 读取（需要设置该 cookie 的 httpOnly 属性为 false），而不需要服务器注入参数。默认情况下 CookieCsrfTokenRepository 将编写一个名为 XSRF-TOKEN 的 cookie 和从头部命名 X-XSRF-TOKEN 或 HTTP 参数 _csrf 中读取</p>
<p>存储在 cookie 中是不可以被 Csrf 利用的，cookie 只有在同域的情况下才能被读取，所以杜绝了第三方站点跨域读取 CsrfToken 值的可能。CSRF 攻击本身是不知道 cookie 内容的，只是利用了当请求自动携带 cookie 时可以通过身份验证的漏洞，但服务器对 CsrfToken 值的校验并非取自 cookie，而是需要前端手动将 CsrfToken 值作为参数携带在请求里</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveToken</span><span class="params">(CsrfToken token, HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="comment">// 判断参数 token 是否为空</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">tokenValue</span> <span class="operator">=</span> (token != <span class="literal">null</span>) ? token.getToken() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="comment">// 根据 token，创建 Cookies</span></span><br><span class="line">    <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="built_in">this</span>.cookieName, tokenValue);</span><br><span class="line">    cookie.setSecure((<span class="built_in">this</span>.secure != <span class="literal">null</span>) ? <span class="built_in">this</span>.secure : request.isSecure());</span><br><span class="line">    cookie.setPath(StringUtils.hasLength(<span class="built_in">this</span>.cookiePath) ? <span class="built_in">this</span>.cookiePath : <span class="built_in">this</span>.getRequestContext(request));</span><br><span class="line">    cookie.setMaxAge((token != <span class="literal">null</span>) ? <span class="built_in">this</span>.cookieMaxAge : <span class="number">0</span>);</span><br><span class="line">    cookie.setHttpOnly(<span class="built_in">this</span>.cookieHttpOnly);</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.hasLength(<span class="built_in">this</span>.cookieDomain)) &#123;</span><br><span class="line">        cookie.setDomain(<span class="built_in">this</span>.cookieDomain);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 最终返回给浏览器</span></span><br><span class="line">    response.addCookie(cookie);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> CsrfToken <span class="title function_">loadToken</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取请求 Cookies</span></span><br><span class="line">    <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> WebUtils.getCookie(request, <span class="built_in">this</span>.cookieName);</span><br><span class="line">    <span class="keyword">if</span> (cookie == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取 Cookeis 中的 Token</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> cookie.getValue();</span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.hasLength(token)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取到以后，创建 Token 对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DefaultCsrfToken</span>(<span class="built_in">this</span>.headerName, <span class="built_in">this</span>.parameterName, token);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="HttpSessionCsrfTokenRepository">HttpSessionCsrfTokenRepository</h3>
<p>在默认情况下，SpringSecurity 加载的是一个 HttpSessionCsrfTokenRepository，HttpSessionCsrfTokenRepository 将 CsrfToken 值存储在 HttpSession 中，并指定前端把 CsrfToken 值放在 &quot;_csrf &quot; 的请求参数或名为 &quot; X-CSRF-TOKEN &quot; 的请求头字段里。校验时，通过对比 HttpSession 内存储的 CsrfToken 值与前端携带的 CsrfToken 值是否一致，便能断定本次请求是否为 CSRF 攻击</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveToken</span><span class="params">(CsrfToken token, HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="comment">// 如果传入 token 为空，则删除当前会话的 Session</span></span><br><span class="line">    <span class="keyword">if</span> (token == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession(<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (session != <span class="literal">null</span>) &#123;</span><br><span class="line">            session.removeAttribute(<span class="built_in">this</span>.sessionAttributeName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 否则将 token 存入当前会话</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        session.setAttribute(<span class="built_in">this</span>.sessionAttributeName, token);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> CsrfToken <span class="title function_">loadToken</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">if</span> (session == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取会话中的 Token 对象</span></span><br><span class="line">    <span class="keyword">return</span> (CsrfToken) session.getAttribute(<span class="built_in">this</span>.sessionAttributeName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用案例">使用案例</h2>
<p>如果无状态 API 使用基于 Token 的身份验证（如 JWT），就不需要 CSRF 保护。反之，如果使用 Session Cookie 进行身份验证，就需要启用 CSRF 保护。无状态 API 无法像 MVC 配置那样添加 CSRF Token，因为它不会生成任何 HTML 视图。</p>
<h3 id="Session-Cookie">Session Cookie</h3>
<h4 id="后端配置">后端配置</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSecurityConfigurer</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.csrf()</span><br><span class="line">          .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这种情况下，可以使用 CookieCsrfTokenRepository 在 Cookie 中发送 CSRF Token，此配置将为前端设置一个名为 XSRF-TOKEN 的 Cookie。由于将 HTTP-only 标志设置为 false，因此前端能使用 JavaScript 获取此 Cookie。</p>
<h4 id="前端配置">前端配置</h4>
<p>通过 JavaScript 从 document.cookie 列表中搜索 XSRF-TOKEN Cookie 值。</p>
<p>由于该列表以字符串形式存储，因此可以使用此 regex （正则）进行检索：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> csrfToken = <span class="variable language_">document</span>.<span class="property">cookie</span>.<span class="title function_">replace</span>(<span class="regexp">/(?:(?:^|.*;\s*)XSRF-TOKEN\s*\=\s*([^;]*).*$)|^.*$/</span>, <span class="string">&#x27;$1&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>然后，必须向每个修改 API 状态的 REST 请求发送 Token（POST、PUT、DELETE 和 PATCH），Spring 会通过 X-XSRF-TOKEN Header 来接收它，只需使用 JavaScript Fetch API 设置即可：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(url, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  <span class="attr">body</span>: <span class="comment">/* 发送给服务器的请求体 */</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123; <span class="string">&#x27;X-XSRF-TOKEN&#x27;</span>: csrfToken &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="无状态-API">无状态 API</h3>
<h4 id="JWT-配置">JWT 配置</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSecurityConfigurer</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.csrf().disable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringSecurity</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringSecurity5（13-核心组件和认证流程）</title>
    <url>/blog/2025/02/26/Java/SpringSecurity/SpringSecurity5/SpringSecurity5%EF%BC%8813-%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6%E5%92%8C%E8%AE%A4%E8%AF%81%E6%B5%81%E7%A8%8B%EF%BC%89/</url>
    <content><![CDATA[<h2 id="SecurityContextHolder">SecurityContextHolder</h2>
<p>SecurityContextHolder 持有的是安全上下文的信息，当前操作的用户是谁，用户是否已经被认证，他拥有哪些角色权限等，这些都被保存在 SecurityContextHolder 中。SecurityContextHolder 默认使用 ThreadLocal 策略来存储认证信息，在 web 环境下，SpringSecurity 在用户登录时自动绑定认证信息到当前线程，在用户退出时，自动清除当前线程的认证信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityContextHolder</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 三种工作模式的定义，每种工作模式对应一种策略</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MODE_THREADLOCAL</span> <span class="operator">=</span> <span class="string">&quot;MODE_THREADLOCAL&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MODE_INHERITABLETHREADLOCAL</span> <span class="operator">=</span> <span class="string">&quot;MODE_INHERITABLETHREADLOCAL&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MODE_GLOBAL</span> <span class="operator">=</span> <span class="string">&quot;MODE_GLOBAL&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类加载时首先尝试从环境属性中获取所指定的工作模式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SYSTEM_PROPERTY</span> <span class="operator">=</span> <span class="string">&quot;spring.security.strategy&quot;</span>;	</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">strategyName</span> <span class="operator">=</span> System.getProperty(SYSTEM_PROPERTY);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SecurityContextHolderStrategy strategy;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化计数器, 初始为 0,</span></span><br><span class="line">    <span class="comment">// 1. 类加载过程中会被初始化一次，此值变为 1</span></span><br><span class="line">    <span class="comment">// 2. 此后每次调用 setStrategyName 会对新的策略对象执行一次初始化，相应的该值会增 1</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">initializeCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        initialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清除上下文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">clearContext</span><span class="params">()</span> &#123;</span><br><span class="line">        strategy.clearContext();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取上下文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SecurityContext <span class="title function_">getContext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> strategy.getContext();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取计数器的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getInitializeCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> initializeCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.hasText(strategyName)) &#123;</span><br><span class="line">            <span class="comment">// Set default, 设置缺省工作模式/策略 MODE_THREADLOCAL</span></span><br><span class="line">            strategyName = MODE_THREADLOCAL;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (strategyName.equals(MODE_THREADLOCAL)) &#123;</span><br><span class="line">            strategy = <span class="keyword">new</span> <span class="title class_">ThreadLocalSecurityContextHolderStrategy</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (strategyName.equals(MODE_INHERITABLETHREADLOCAL)) &#123;</span><br><span class="line">            strategy = <span class="keyword">new</span> <span class="title class_">InheritableThreadLocalSecurityContextHolderStrategy</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (strategyName.equals(MODE_GLOBAL)) &#123;</span><br><span class="line">            strategy = <span class="keyword">new</span> <span class="title class_">GlobalSecurityContextHolderStrategy</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Try to load a custom strategy</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Class&lt;?&gt; clazz = Class.forName(strategyName);</span><br><span class="line">                Constructor&lt;?&gt; customStrategy = clazz.getConstructor();</span><br><span class="line">                strategy = (SecurityContextHolderStrategy) customStrategy.newInstance();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                ReflectionUtils.handleReflectionException(ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        initializeCount++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置上下文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setContext</span><span class="params">(SecurityContext context)</span> &#123;</span><br><span class="line">        strategy.setContext(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置工作模式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setStrategyName</span><span class="params">(String strategyName)</span> &#123;</span><br><span class="line">        SecurityContextHolder.strategyName = strategyName;</span><br><span class="line">        initialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取对应工作模式的策略</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SecurityContextHolderStrategy <span class="title function_">getContextHolderStrategy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建空的上下文信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SecurityContext <span class="title function_">createEmptyContext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> strategy.createEmptyContext();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;SecurityContextHolder[strategy=&#x27;&quot;</span> + strategyName + <span class="string">&quot;&#x27;; initializeCount=&quot;</span></span><br><span class="line">                + initializeCount + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="SecurityContext">SecurityContext</h2>
<p>安全上下文，主要持有 Authentication 对象，如果用户未鉴权，那么 Authentication 对象将会是空的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SecurityContext</span> <span class="keyword">extends</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前经过身份验证的主体，或身份验证请求令牌</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Authentication <span class="title function_">getAuthentication</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更改当前经过身份验证的主体，或删除身份验证信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setAuthentication</span><span class="params">(Authentication authentication)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Authentication">Authentication</h2>
<p>鉴权对象，该对象主要包含了用户的详细信息（UserDetails）和用户鉴权所需要的信息，如用户提交的用户名密码、Remember-me Token 或 digest hash 值等，按不同鉴权方式使用不同的 Authentication 实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Authentication</span> <span class="keyword">extends</span> <span class="title class_">Principal</span>, Serializable &#123;</span><br><span class="line">    <span class="comment">//用来获取用户的权限。</span></span><br><span class="line">    Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities();</span><br><span class="line">    <span class="comment">//用来获取用户凭证，一般来说就是密码。</span></span><br><span class="line">    Object <span class="title function_">getCredentials</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//用来获取用户携带的详细信息，可能是当前请求之类的东西。</span></span><br><span class="line">    Object <span class="title function_">getDetails</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//用来获取当前用户，可能是一个用户名，也可能是一个用户对象。</span></span><br><span class="line">    Object <span class="title function_">getPrincipal</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//判断当前用户是否认证成功。</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isAuthenticated</span><span class="params">()</span>;</span><br><span class="line">	<span class="comment">//设置用户是否认证成功</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setAuthenticated</span><span class="params">(<span class="type">boolean</span> var1)</span> <span class="keyword">throws</span> IllegalArgumentException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="GrantedAuthority">GrantedAuthority</h2>
<p>表示了当前用户所拥有的权限（或角色）信息，这些信息由授权负责对象 AccessDecisionManager 来使用，并决定最终用户是否可以访问某资源（URL 或方法调用或域对象），鉴权使并不会使用到该对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">GrantedAuthority</span> <span class="keyword">extends</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="comment">//获取当前用户所拥有的权限（或角色）信息</span></span><br><span class="line">    String <span class="title function_">getAuthority</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="UserDetailsService">UserDetailsService</h2>
<p>提供一个接口 loadUserByUsername(String username)，一般通过扩展该接口显式获取我们的用户信息，用户登陆时传递的用户名和密码也是通过这里查找出来的用户名和密码进行校验，真正的校验由 AuthenticationManager 和 AuthenticationProvider 负责的。如果用户不存在时应返回 NULL，而是抛出异常 UsernameNotFoundException</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line">    UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String var1)</span> <span class="keyword">throws</span> UsernameNotFoundException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="UserDetails">UserDetails</h2>
<p>规范了用户详细信息所拥有的字段，如用户名、密码、账号是否过期、是否锁定等，在 SpringSecurity 中，获取当前登录的用户的信息，一般情况是需要在该接口上面进行扩展</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDetails</span> <span class="keyword">extends</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="comment">// 返回权限集合</span></span><br><span class="line">    Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities();</span><br><span class="line">    <span class="comment">// 获取密码</span></span><br><span class="line">    String <span class="title function_">getPassword</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 获取用户名</span></span><br><span class="line">    String <span class="title function_">getUsername</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 判断用户是否未过期</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isAccountNonExpired</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 判断账户是否未锁定</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isAccountNonLocked</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 判断用户凭证是否没过期，即密码是否未过期</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isCredentialsNonExpired</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 判断用户是否可用</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isEnabled</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="获取用户信息">获取用户信息</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取安全上下文对象，就是那个保存在 ThreadLocal 里面的安全上下文对象</span></span><br><span class="line"><span class="comment">// 总是不为 null(如果不存在，则创建一个 authentication 属性为 null 的 empty 安全上下文对象)</span></span><br><span class="line"><span class="type">SecurityContext</span> <span class="variable">securityContext</span> <span class="operator">=</span> SecurityContextHolder.getContext();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前认证了的 principal(当事人), 或者 request token (令牌)</span></span><br><span class="line"><span class="comment">// 如果没有认证，会是 null, 该例子是认证之后的情况</span></span><br><span class="line"><span class="type">Authentication</span> <span class="variable">authentication</span> <span class="operator">=</span> securityContext.getAuthentication()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当事人信息对象，返回结果是 Object 类型，但实际上可以是应用程序自定义的带有更多应用相关信息的某个类型。</span></span><br><span class="line"><span class="comment">// 很多情况下，该对象是 Spring Security 核心接口 UserDetails 的一个实现类，你可以把 UserDetails 想像</span></span><br><span class="line"><span class="comment">// 成我们数据库中保存的一个用户信息到 SecurityContextHolder 中 Spring Security 需要的用户信息格式的</span></span><br><span class="line"><span class="comment">// 一个适配器。</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">principal</span> <span class="operator">=</span> authentication.getPrincipal();</span><br><span class="line"><span class="keyword">if</span> (principal <span class="keyword">instanceof</span> UserDetails) &#123;</span><br><span class="line">	<span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> ((UserDetails)principal).getUsername();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> principal.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="安全身份认证流程">安全身份认证流程</h2>
<h3 id="过滤器链">过滤器链</h3>
<p><img src="1.png" alt=""></p>
<p>当初始化 Spring Security 时，在 org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration 中会往 Spring 容器中注入一个名为 SpringSecurityFilterChain 的 Servlet 过滤器，类型为 org.springframework.security.web.FilterChainProxy。它实现了 javax.servlet.Filter，因此外部的请求都会经过这个类，而 FilterChainProxy 是一个代理，真正起作用的是 FilterChainProxy 中 SecurityFilterChain 所包含的各个 Filter</p>
<ol>
<li>SecurityContextPersistenceFilter</li>
</ol>
<p>这个 Filter 是整个拦截过程的入口和出口（也就是第一个和最后一个拦截器），会在请求开始时从配置好的 SecurityContextRepository 中获取 SecurityContext，然后把它设置给 SecurityContextHolder。在请求完成后将 SecurityContextHolder 持有的 SecurityContext 再保存到配置好的 SecurityContextRepository，同时清除 securityContextHolder 所持有的 SecurityContext</p>
<ol start="2">
<li>UsernamePasswordAuthenticationFilter</li>
</ol>
<p>用于处理来自表单提交的认证。该表单必须提供对应的用户名和密码，其内部还有登录成功或失败后进行处理的 AuthenticationSuccessHandler 和 AuthenticationFailureHandler，这些都可以根据需求做相关改变</p>
<ol start="3">
<li>FilterSecurityInterceptor</li>
</ol>
<p>是用于保护 web 资源的，使用 AccessDecisionManager 对当前用户进行授权访问</p>
<ol start="4">
<li>ExceptionTranslationFilter</li>
</ol>
<p>能够捕获来自 FilterChain 所有的异常，并进行处理。但是它只会处理两类异常：AuthenticationException 和 AccessDeniedException，其它的异常它会继续抛出</p>
<h3 id="认证流程">认证流程</h3>
<p><img src="2.png" alt=""></p>
<p><img src="3.png" alt=""></p>
<ol>
<li>Spring Security 定义了一个过滤器链，当认证请求到达这个链时，该请求将会穿过这个链条用于认证和授权，这个链上可以定义 1~N 个过滤器，过滤器的用途是获取请求中的认证信息，根据认证方法进行路由，把认证信息传递给对应的认证处理程序进行处理，不同的过滤器处理不同的认证信息</li>
</ol>
<ul>
<li>HTTP Basic 认证通过过滤器链，到达 BasicAuthenticationFilter</li>
<li>HTTP Digest 认证被 DigestAuthenticationFilter 识别，拦截并处理</li>
<li>表单登录认证被 UsernamePasswordAuthenticationFilter 识别，拦截并处理</li>
</ul>
<ol start="2">
<li>基于用户凭证创建 AuthenticationToken</li>
</ol>
<p>如：用户在登录表单中输入用户名和密码，并点击确定，浏览器提交 POST 请求到服务器，穿过过滤器链，被 UsernamePasswordAuthenticationFilter 识别，UsernamePasswordAuthenticationFilter 提取请求中的用户名和密码来创建 UsernamePasswordAuthenticationToken 对象</p>
<ol start="3">
<li>把组装好的 AuthenticationToken 传递给 AuthenticationManager</li>
</ol>
<p>如：组装好的 UsernamePasswordAuthenticationToken 对象被传递给 AuthenticationManager 的 authenticate 方法进行认证决策，AuthenticationManager 只是一个接口，实际的实现是 ProviderManager</p>
<ol start="4">
<li>ProviderManager 委托给 AuthenticationProvider 进行认证处理</li>
</ol>
<p>AuthenticationProvider 提供了不同的实现类，ProviderManager 会把收到的 UsernamePasswordAuthenticationToken 对象传递给列表中的每一个 AuthenticationProvider 进行认证，那 UsernamePasswordAuthenticationToken 会被哪一个接收和处理呢？是由 supports 方法来决定的</p>
<ol start="5">
<li>UserDetailsService 获取用户信息</li>
</ol>
<p>例如：DaoAuthenticationProvider 通过 UserDetailsService 查找对应的用户信息</p>
<ol start="6">
<li>认证结果处理</li>
</ol>
<p>例如：如果认证成功（用户名和密码完全正确），AuthenticationProvider 将会返回一个完全有效的 Authentication 对象（UsernamePasswordAuthenticationToken），否则抛出 AuthenticationException 异常</p>
<p>认证完成后，AuthenticationManager 将会返回该认证对象（UsernamePasswordAuthenticationToken）返回给过滤器</p>
<ol start="7">
<li>存储认证对象</li>
</ol>
<p>相关的过滤器获得一个认证对象后，把他存储在安全上下文中（SecurityContext）用于后续的授权判断</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringSecurity</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringSecurity5（14-Gateway整合）</title>
    <url>/blog/2025/02/27/Java/SpringSecurity/SpringSecurity5/SpringSecurity5%EF%BC%8814-Gateway%E6%95%B4%E5%90%88%EF%BC%89/</url>
    <content><![CDATA[<h2 id="MVC-与-WebFlux-关系">MVC 与 WebFlux 关系</h2>
<p>SpringSecurity 设置要采用响应式配置，基于 WebFlux 中 WebFilter 实现，与 Spring MVC 的 Security 是通过 Servlet 的 Filter 实现类似，也是一系列 filter 组成的过滤链。</p>
<p>Reactor 与传统 MVC 配置对应：</p>
<table>
<thead>
<tr>
<th>webflux</th>
<th>mvc</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>@EnableWebFluxSecurity</td>
<td>@EnableWebSecurity</td>
<td>开启 security 配置</td>
</tr>
<tr>
<td>ServerAuthenticationSuccessHandler</td>
<td>AuthenticationSuccessHandler</td>
<td>登录成功 Handler</td>
</tr>
<tr>
<td>ServerAuthenticationFailureHandler</td>
<td>AuthenticationFailureHandler</td>
<td>登录失败 Handler</td>
</tr>
<tr>
<td>ServerLogoutSuccessHandler</td>
<td>LogoutSuccessHandler</td>
<td>注销成功Handler</td>
</tr>
<tr>
<td>ServerSecurityContextRepository</td>
<td>SecurityContextHolder</td>
<td>认证信息存储管理</td>
</tr>
<tr>
<td>ReactiveUserDetailsService</td>
<td>UserDetailsService</td>
<td>用户登录逻辑处理</td>
</tr>
<tr>
<td>ReactiveAuthenticationManager</td>
<td>AuthorizationManager</td>
<td>认证管理</td>
</tr>
<tr>
<td>ReactiveAuthorizationManager</td>
<td>AccessDecisionManager</td>
<td>鉴权管理</td>
</tr>
<tr>
<td>ServerAuthenticationEntryPoint</td>
<td>AuthenticationEntryPoint</td>
<td>未认证 Handler</td>
</tr>
<tr>
<td>ServerAccessDeniedHandler</td>
<td>AccessDeniedHandler</td>
<td>鉴权失败 Handler</td>
</tr>
<tr>
<td>AuthenticationWebFilter</td>
<td>FilterSecurityInterceptor</td>
<td>拦截器</td>
</tr>
</tbody>
</table>
<h2 id="快速入门">快速入门</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="内存管理用户信息">内存管理用户信息</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebFluxSecurity</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SecurityWebFilterChain <span class="title function_">filterChain</span><span class="params">(ServerHttpSecurity http)</span> &#123;</span><br><span class="line">       http.httpBasic()</span><br><span class="line">               .and()</span><br><span class="line">               .authorizeExchange()</span><br><span class="line">               .anyExchange()</span><br><span class="line">               .authenticated();</span><br><span class="line">        <span class="keyword">return</span> http.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 内存管理用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MapReactiveUserDetailsService <span class="title function_">userDetailsService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UserDetails</span> <span class="variable">user</span> <span class="operator">=</span> User.withDefaultPasswordEncoder()</span><br><span class="line">                .username(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">                .password(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">                .roles(<span class="string">&quot;USER&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MapReactiveUserDetailsService</span>(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="自定义登录、注销处理器">自定义登录、注销处理器</h3>
<ol>
<li>自定义登录成功处理器</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginSuccessHandler</span> <span class="keyword">implements</span> <span class="title class_">ServerAuthenticationSuccessHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">onAuthenticationSuccess</span><span class="params">(WebFilterExchange webFilterExchange, Authentication authentication)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Mono.defer(() -&gt; Mono.just(webFilterExchange.getExchange().getResponse()).flatMap(response -&gt; &#123;</span><br><span class="line">            <span class="type">DataBufferFactory</span> <span class="variable">dataBufferFactory</span> <span class="operator">=</span> response.bufferFactory();</span><br><span class="line">            <span class="type">DataBuffer</span> <span class="variable">dataBuffer</span> <span class="operator">=</span> dataBufferFactory.wrap(<span class="string">&quot;登录成功&quot;</span>.getBytes());</span><br><span class="line">            <span class="keyword">return</span> response.writeWith(Mono.just(dataBuffer));</span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>自定义登录失败处理器</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginFailHandler</span> <span class="keyword">implements</span> <span class="title class_">ServerAuthenticationFailureHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">onAuthenticationFailure</span><span class="params">(WebFilterExchange webFilterExchange, AuthenticationException exception)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Mono.defer(() -&gt; Mono.just(webFilterExchange.getExchange().getResponse()).flatMap(response -&gt; &#123;</span><br><span class="line">            <span class="type">DataBufferFactory</span> <span class="variable">dataBufferFactory</span> <span class="operator">=</span> response.bufferFactory();</span><br><span class="line">            <span class="type">DataBuffer</span> <span class="variable">dataBuffer</span> <span class="operator">=</span> dataBufferFactory.wrap(<span class="string">&quot;登录失败&quot;</span>.getBytes());</span><br><span class="line">            <span class="keyword">return</span> response.writeWith(Mono.just(dataBuffer));</span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>自定义注销成功处理器</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogoutSuccessHandler</span> <span class="keyword">implements</span> <span class="title class_">ServerLogoutSuccessHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">onLogoutSuccess</span><span class="params">(WebFilterExchange exchange, Authentication authentication)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Mono.defer(() -&gt; Mono.just(exchange.getExchange().getResponse()).flatMap(response -&gt; &#123;</span><br><span class="line">            <span class="type">DataBufferFactory</span> <span class="variable">dataBufferFactory</span> <span class="operator">=</span> response.bufferFactory();</span><br><span class="line">            <span class="type">DataBuffer</span> <span class="variable">dataBuffer</span> <span class="operator">=</span> dataBufferFactory.wrap(<span class="string">&quot;logout success&quot;</span>.getBytes());</span><br><span class="line">            <span class="keyword">return</span> response.writeWith(Mono.just(dataBuffer));</span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebFluxSecurity</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> LoginSuccessHandler loginSuccessHandler;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> LoginFailHandler loginFailHandler;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> LogoutSuccessHandler logoutSuccessHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SecurityWebFilterChain <span class="title function_">filterChain</span><span class="params">(ServerHttpSecurity http)</span> &#123;</span><br><span class="line">        http.httpBasic()</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeExchange()</span><br><span class="line">                .anyExchange()</span><br><span class="line">                .authenticated();</span><br><span class="line"></span><br><span class="line">        http.formLogin()</span><br><span class="line">                .authenticationSuccessHandler(loginSuccessHandler)</span><br><span class="line">                .authenticationFailureHandler(loginFailHandler)</span><br><span class="line">            	.and()</span><br><span class="line">                .logout()</span><br><span class="line">                .logoutSuccessHandler(logoutSuccessHandler);</span><br><span class="line">        <span class="keyword">return</span> http.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 内存管理用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MapReactiveUserDetailsService <span class="title function_">userDetailsService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UserDetails</span> <span class="variable">user</span> <span class="operator">=</span> User.withDefaultPasswordEncoder()</span><br><span class="line">                .username(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">                .password(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">                .roles(<span class="string">&quot;USER&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MapReactiveUserDetailsService</span>(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="自定义用户信息">自定义用户信息</h3>
<ol>
<li>仿照 MapReactiveUserDetailsService 编写获取用户认证类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDetailService</span> <span class="keyword">implements</span> <span class="title class_">ReactiveUserDetailsService</span>, ReactiveUserDetailsPasswordService &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, UserDetails&gt; users = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;UserDetails&gt; <span class="title function_">findByUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;user&quot;</span>.equals(username)) &#123;</span><br><span class="line">            user = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;user&quot;</span>, passwordEncoder.encode(<span class="string">&quot;123456&quot;</span>), <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Mono.justOrEmpty(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;UserDetails&gt; <span class="title function_">updatePassword</span><span class="params">(UserDetails user, String newPassword)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Mono.just(user)</span><br><span class="line">                .map(u -&gt;</span><br><span class="line">                        User.withUserDetails(u)</span><br><span class="line">                                .password(newPassword)</span><br><span class="line">                                .build()</span><br><span class="line">                )</span><br><span class="line">                .doOnNext(u -&gt; &#123;</span><br><span class="line">                    <span class="built_in">this</span>.users.put(user.getUsername().toLowerCase(), u);</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>仿照 AbstractUserDetailsReactiveAuthenticationManager 编写用户认证管理类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserAuthenticationManager</span> <span class="keyword">extends</span> <span class="title class_">AbstractUserDetailsReactiveAuthenticationManager</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ReactiveUserDetailsService userDetailService;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ReactiveUserDetailsPasswordService userDetailsPswService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> Schedulers.boundedElastic();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">UserDetailsChecker</span> <span class="variable">preAuthenticationChecks</span> <span class="operator">=</span> user -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (!user.isAccountNonLocked()) &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;User account is locked&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">LockedException</span>(<span class="built_in">this</span>.messages.getMessage(</span><br><span class="line">                    <span class="string">&quot;AbstractUserDetailsAuthenticationProvider.locked&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;User account is locked&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!user.isEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;User account is disabled&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DisabledException</span>(<span class="built_in">this</span>.messages.getMessage(</span><br><span class="line">                    <span class="string">&quot;AbstractUserDetailsAuthenticationProvider.disabled&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;User is disabled&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!user.isAccountNonExpired()) &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;User account is expired&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AccountExpiredException</span>(<span class="built_in">this</span>.messages.getMessage(</span><br><span class="line">                    <span class="string">&quot;AbstractUserDetailsAuthenticationProvider.expired&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;User account has expired&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">UserDetailsChecker</span> <span class="variable">postAuthenticationChecks</span> <span class="operator">=</span> user -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (!user.isCredentialsNonExpired()) &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;User account credentials have expired&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CredentialsExpiredException</span>(<span class="built_in">this</span>.messages.getMessage(</span><br><span class="line">                    <span class="string">&quot;AbstractUserDetailsAuthenticationProvider.credentialsExpired&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;User credentials have expired&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Authentication&gt; <span class="title function_">authenticate</span><span class="params">(Authentication authentication)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> authentication.getName();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">presentedPassword</span> <span class="operator">=</span> (String) authentication.getCredentials();</span><br><span class="line">        <span class="keyword">return</span> retrieveUser(username)</span><br><span class="line">                .doOnNext(<span class="built_in">this</span>.preAuthenticationChecks::check)</span><br><span class="line">                .publishOn(<span class="built_in">this</span>.scheduler)</span><br><span class="line">                .filter(u -&gt; <span class="built_in">this</span>.passwordEncoder.matches(presentedPassword, u.getPassword()))</span><br><span class="line">                .switchIfEmpty(Mono.defer(() -&gt; Mono.error(<span class="keyword">new</span> <span class="title class_">BadCredentialsException</span>(<span class="string">&quot;Invalid Credentials&quot;</span>))))</span><br><span class="line">                .flatMap(u -&gt; &#123;</span><br><span class="line">                    <span class="type">boolean</span> <span class="variable">upgradeEncoding</span> <span class="operator">=</span> <span class="built_in">this</span>.userDetailsPswService != <span class="literal">null</span></span><br><span class="line">                            &amp;&amp; <span class="built_in">this</span>.passwordEncoder.upgradeEncoding(u.getPassword());</span><br><span class="line">                    <span class="keyword">if</span> (upgradeEncoding) &#123;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">newPassword</span> <span class="operator">=</span> <span class="built_in">this</span>.passwordEncoder.encode(presentedPassword);</span><br><span class="line">                        <span class="keyword">return</span> <span class="built_in">this</span>.userDetailsPswService.updatePassword(u, newPassword);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> Mono.just(u);</span><br><span class="line">                &#125;)</span><br><span class="line">                .doOnNext(<span class="built_in">this</span>.postAuthenticationChecks::check)</span><br><span class="line">                .map(u -&gt; <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(u, u.getPassword(), u.getAuthorities()) );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Mono&lt;UserDetails&gt; <span class="title function_">retrieveUser</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userDetailService.findBysername(username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebFluxSecurity</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> LoginSuccessHandler loginSuccessHandler;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> LoginFailHandler loginFailHandler;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> LogoutSuccessHandler logoutSuccessHandler;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserAuthenticationManager userAuthenticationManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SecurityWebFilterChain <span class="title function_">filterChain</span><span class="params">(ServerHttpSecurity http)</span> &#123;</span><br><span class="line">        http.httpBasic()</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeExchange()</span><br><span class="line">                .anyExchange()</span><br><span class="line">                .authenticated();</span><br><span class="line"></span><br><span class="line">        http.formLogin()</span><br><span class="line">                .authenticationManager(authenticationManager())</span><br><span class="line">                .authenticationSuccessHandler(loginSuccessHandler)</span><br><span class="line">                .authenticationFailureHandler(loginFailHandler)</span><br><span class="line">				.and()</span><br><span class="line">                .logout()</span><br><span class="line">                .logoutSuccessHandler(logoutSuccessHandler);</span><br><span class="line">        <span class="keyword">return</span> http.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册用户信息验证管理器，可按需求添加多个按顺序执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ReactiveAuthenticationManager <span class="title function_">authenticationManager</span><span class="params">()</span> &#123;</span><br><span class="line">        LinkedList&lt;ReactiveAuthenticationManager&gt; managers = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        managers.add(userAuthenticationManager);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DelegatingReactiveAuthenticationManager</span>(managers);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="权限注解">权限注解</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebFluxSecurity</span></span><br><span class="line"><span class="meta">@EnableReactiveMethodSecurity</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> &#123;</span><br><span class="line">	<span class="comment">// ....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Secured(&#123;&quot;ROLE_ADMIN&quot;&#125;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;String&gt; <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Mono.just(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasRole(&#x27;ADMIN&#x27;)&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/test1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;String&gt; <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Mono.just(<span class="string">&quot;test1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Secured(&#123;&quot;ROLE_TEST&quot;&#125;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/test2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;String&gt; <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Mono.just(<span class="string">&quot;test2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="自定义权限处理器">自定义权限处理器</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccessDeniedHandler</span> <span class="keyword">implements</span> <span class="title class_">ServerAccessDeniedHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">handle</span><span class="params">(ServerWebExchange exchange, AccessDeniedException denied)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Mono.defer(() -&gt; Mono.just(exchange.getResponse()).flatMap(response -&gt; &#123;</span><br><span class="line">            <span class="type">DataBufferFactory</span> <span class="variable">dataBufferFactory</span> <span class="operator">=</span> response.bufferFactory();</span><br><span class="line">            <span class="type">DataBuffer</span> <span class="variable">dataBuffer</span> <span class="operator">=</span> dataBufferFactory.wrap(<span class="string">&quot;permission denied&quot;</span>.getBytes());</span><br><span class="line">            <span class="keyword">return</span> response.writeWith(Mono.just(dataBuffer));</span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebFluxSecurity</span></span><br><span class="line"><span class="meta">@EnableReactiveMethodSecurity</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> LoginSuccessHandler loginSuccessHandler;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> LoginFailHandler loginFailHandler;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> LogoutSuccessHandler logoutSuccessHandler;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserAuthenticationManager userAuthenticationManager;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AccessDeniedHandler accessDeniedHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SecurityWebFilterChain <span class="title function_">filterChain</span><span class="params">(ServerHttpSecurity http)</span> &#123;</span><br><span class="line">        http.httpBasic()</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeExchange()</span><br><span class="line">                .anyExchange()</span><br><span class="line">                .authenticated();</span><br><span class="line"></span><br><span class="line">        http.formLogin()</span><br><span class="line">                .authenticationManager(authenticationManager())</span><br><span class="line">                .authenticationSuccessHandler(loginSuccessHandler)</span><br><span class="line">                .authenticationFailureHandler(loginFailHandler)</span><br><span class="line">                .and()</span><br><span class="line">                .logout()</span><br><span class="line">                .logoutSuccessHandler(logoutSuccessHandler)</span><br><span class="line">                .and()</span><br><span class="line">                .exceptionHandling()</span><br><span class="line">                .accessDeniedHandler(accessDeniedHandler);</span><br><span class="line">        <span class="keyword">return</span> http.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册用户信息验证管理器，可按需求添加多个按顺序执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ReactiveAuthenticationManager <span class="title function_">authenticationManager</span><span class="params">()</span> &#123;</span><br><span class="line">        LinkedList&lt;ReactiveAuthenticationManager&gt; managers = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        managers.add(userAuthenticationManager);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DelegatingReactiveAuthenticationManager</span>(managers);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="自定义认证处理器">自定义认证处理器</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthenticationEntryPoint</span> <span class="keyword">implements</span> <span class="title class_">ServerAuthenticationEntryPoint</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">commence</span><span class="params">(ServerWebExchange exchange, AuthenticationException e)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Mono.defer(() -&gt; Mono.just(exchange.getResponse()).flatMap(response -&gt; &#123;</span><br><span class="line">            <span class="type">DataBufferFactory</span> <span class="variable">dataBufferFactory</span> <span class="operator">=</span> response.bufferFactory();</span><br><span class="line">            <span class="type">DataBuffer</span> <span class="variable">dataBuffer</span> <span class="operator">=</span> dataBufferFactory.wrap(<span class="string">&quot;Authentication fail&quot;</span>.getBytes());</span><br><span class="line">            <span class="keyword">return</span> response.writeWith(Mono.just(dataBuffer));</span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebFluxSecurity</span></span><br><span class="line"><span class="meta">@EnableReactiveMethodSecurity</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> LoginSuccessHandler loginSuccessHandler;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> LoginFailHandler loginFailHandler;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> LogoutSuccessHandler logoutSuccessHandler;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserAuthenticationManager userAuthenticationManager;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AccessDeniedHandler accessDeniedHandler;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationEntryPoint authenticationEntryPoint;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SecurityWebFilterChain <span class="title function_">filterChain</span><span class="params">(ServerHttpSecurity http)</span> &#123;</span><br><span class="line">        http.httpBasic()</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeExchange()</span><br><span class="line">                .anyExchange()</span><br><span class="line">                .authenticated();</span><br><span class="line"></span><br><span class="line">        http.formLogin()</span><br><span class="line">                .authenticationManager(authenticationManager())</span><br><span class="line">                .authenticationSuccessHandler(loginSuccessHandler)</span><br><span class="line">                .authenticationFailureHandler(loginFailHandler)</span><br><span class="line">                .and()</span><br><span class="line">                .logout()</span><br><span class="line">                .logoutSuccessHandler(logoutSuccessHandler)</span><br><span class="line">                .and()</span><br><span class="line">                .exceptionHandling()</span><br><span class="line">                .accessDeniedHandler(accessDeniedHandler)</span><br><span class="line">                .authenticationEntryPoint(authenticationEntryPoint);</span><br><span class="line">        <span class="keyword">return</span> http.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册用户信息验证管理器，可按需求添加多个按顺序执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ReactiveAuthenticationManager <span class="title function_">authenticationManager</span><span class="params">()</span> &#123;</span><br><span class="line">        LinkedList&lt;ReactiveAuthenticationManager&gt; managers = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        managers.add(userAuthenticationManager);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DelegatingReactiveAuthenticationManager</span>(managers);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="自定义鉴权处理器">自定义鉴权处理器</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthorizeConfigManager</span> <span class="keyword">implements</span> <span class="title class_">ReactiveAuthorizationManager</span>&lt;AuthorizationContext&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AntPathMatcher</span> <span class="variable">antPathMatcher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AntPathMatcher</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;AuthorizationDecision&gt; <span class="title function_">check</span><span class="params">(Mono&lt;Authentication&gt; authentication,</span></span><br><span class="line"><span class="params">                                             AuthorizationContext authorizationContext)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> authentication.map(auth -&gt; &#123;</span><br><span class="line">            <span class="type">ServerWebExchange</span> <span class="variable">exchange</span> <span class="operator">=</span> authorizationContext.getExchange();</span><br><span class="line">            <span class="type">ServerHttpRequest</span> <span class="variable">request</span> <span class="operator">=</span> exchange.getRequest();</span><br><span class="line"></span><br><span class="line">            Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; authorities = auth.getAuthorities();</span><br><span class="line">            <span class="keyword">for</span> (GrantedAuthority authority : authorities) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">authorityAuthority</span> <span class="operator">=</span> authority.getAuthority();</span><br><span class="line">                <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> request.getURI().getPath();</span><br><span class="line">                <span class="keyword">if</span> (antPathMatcher.match(authorityAuthority, path)) &#123;</span><br><span class="line">                    log.info(String.format(<span class="string">&quot;用户请求API校验通过，GrantedAuthority:&#123;%s&#125;  Path:&#123;%s&#125; &quot;</span>, authorityAuthority, path));</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AuthorizationDecision</span>(<span class="literal">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AuthorizationDecision</span>(<span class="literal">false</span>);</span><br><span class="line">        &#125;).defaultIfEmpty(<span class="keyword">new</span> <span class="title class_">AuthorizationDecision</span>(<span class="literal">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">verify</span><span class="params">(Mono&lt;Authentication&gt; authentication, AuthorizationContext object)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> check(authentication, object)</span><br><span class="line">                .filter(AuthorizationDecision::isGranted)</span><br><span class="line">                .switchIfEmpty(Mono.defer(() -&gt; Mono.error(<span class="keyword">new</span> <span class="title class_">AccessDeniedException</span>(<span class="string">&quot;Access Denied&quot;</span>))))</span><br><span class="line">                .flatMap(d -&gt; Mono.empty());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebFluxSecurity</span></span><br><span class="line"><span class="meta">@EnableReactiveMethodSecurity</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> LoginSuccessHandler loginSuccessHandler;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> LoginFailHandler loginFailHandler;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> LogoutSuccessHandler logoutSuccessHandler;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserAuthenticationManager userAuthenticationManager;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AccessDeniedHandler accessDeniedHandler;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationEntryPoint authenticationEntryPoint;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AuthorizeConfigManager authorizeConfigManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SecurityWebFilterChain <span class="title function_">filterChain</span><span class="params">(ServerHttpSecurity http)</span> &#123;</span><br><span class="line">        http.httpBasic()</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeExchange(e -&gt; e</span><br><span class="line">                        .anyExchange()</span><br><span class="line">                        .access(authorizeConfigManager));</span><br><span class="line"></span><br><span class="line">        http.formLogin()</span><br><span class="line">                .authenticationManager(authenticationManager())</span><br><span class="line">                .authenticationSuccessHandler(loginSuccessHandler)</span><br><span class="line">                .authenticationFailureHandler(loginFailHandler)</span><br><span class="line">                .and()</span><br><span class="line">                .logout()</span><br><span class="line">                .logoutSuccessHandler(logoutSuccessHandler)</span><br><span class="line">                .and()</span><br><span class="line">                .exceptionHandling()</span><br><span class="line">                .accessDeniedHandler(accessDeniedHandler)</span><br><span class="line">                .authenticationEntryPoint(authenticationEntryPoint);</span><br><span class="line">        <span class="keyword">return</span> http.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册用户信息验证管理器，可按需求添加多个按顺序执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ReactiveAuthenticationManager <span class="title function_">authenticationManager</span><span class="params">()</span> &#123;</span><br><span class="line">        LinkedList&lt;ReactiveAuthenticationManager&gt; managers = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        managers.add(userAuthenticationManager);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DelegatingReactiveAuthenticationManager</span>(managers);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringSecurity</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringSecurity5（2-自定义用户信息）</title>
    <url>/blog/2024/12/30/Java/SpringSecurity/SpringSecurity5/SpringSecurity5%EF%BC%882-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%EF%BC%89/</url>
    <content><![CDATA[<h2 id="配置文件自定义用户名和密码">配置文件自定义用户名和密码</h2>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">root</span>    <span class="comment">#通过配置文件，设置静态用户名</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span>    <span class="comment">#配置文件，设置静态登录密码</span></span><br></pre></td></tr></table></figure>
<h3 id="SecurityProperties">SecurityProperties</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.security&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BASIC_AUTH_ORDER</span> <span class="operator">=</span> Ordered.LOWEST_PRECEDENCE - <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">IGNORED_ORDER</span> <span class="operator">=</span> Ordered.HIGHEST_PRECEDENCE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_FILTER_ORDER</span> <span class="operator">=</span> OrderedFilter.REQUEST_WRAPPER_FILTER_MAX_ORDER - <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Filter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Filter</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Filter <span class="title function_">getFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.filter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> <span class="variable">order</span> <span class="operator">=</span> DEFAULT_FILTER_ORDER;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Set&lt;DispatcherType&gt; dispatcherTypes = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(</span><br><span class="line">                Arrays.asList(DispatcherType.ASYNC, DispatcherType.ERROR, DispatcherType.REQUEST));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.order;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOrder</span><span class="params">(<span class="type">int</span> order)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.order = order;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Set&lt;DispatcherType&gt; <span class="title function_">getDispatcherTypes</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.dispatcherTypes;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDispatcherTypes</span><span class="params">(Set&lt;DispatcherType&gt; dispatcherTypes)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.dispatcherTypes = dispatcherTypes;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;user&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> List&lt;String&gt; roles = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">passwordGenerated</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.password;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!StringUtils.hasLength(password)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.passwordGenerated = <span class="literal">false</span>;</span><br><span class="line">            <span class="built_in">this</span>.password = password;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getRoles</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.roles;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRoles</span><span class="params">(List&lt;String&gt; roles)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.roles = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(roles);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPasswordGenerated</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.passwordGenerated;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>SecuityProperties 会获取配置文件中的信息，UserDetailsServiceAutoConfiguration 在自动装配时获取 SecuityProperties 的属性信息</p>
<h3 id="UserDetailsServiceAutoConfiguration">UserDetailsServiceAutoConfiguration</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(AuthenticationManager.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(ObjectPostProcessor.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(</span></span><br><span class="line"><span class="meta">    value = &#123; AuthenticationManager.class, AuthenticationProvider.class, UserDetailsService.class &#125;,</span></span><br><span class="line"><span class="meta">    type = &#123; &quot;org.springframework.security.oauth2.jwt.JwtDecoder&quot;, &quot;org.springframework.security.oauth2.server.resource.introspection.OpaqueTokenIntrospector&quot; &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDetailsServiceAutoConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">NOOP_PASSWORD_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;&#123;noop&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Pattern</span> <span class="variable">PASSWORD_ALGORITHM_PATTERN</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;^\\&#123;.+&#125;.*$&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Log</span> <span class="variable">logger</span> <span class="operator">=</span> LogFactory.getLog(UserDetailsServiceAutoConfiguration.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean(</span></span><br><span class="line"><span class="meta">            type = &quot;org.springframework.security.oauth2.client.registration.ClientRegistrationRepository&quot;)</span></span><br><span class="line">    <span class="meta">@Lazy</span></span><br><span class="line">    <span class="keyword">public</span> InMemoryUserDetailsManager <span class="title function_">inMemoryUserDetailsManager</span><span class="params">(SecurityProperties properties,</span></span><br><span class="line"><span class="params">            ObjectProvider&lt;PasswordEncoder&gt; passwordEncoder)</span> &#123;</span><br><span class="line">        SecurityProperties.<span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> properties.getUser();</span><br><span class="line">        List&lt;String&gt; roles = user.getRoles();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">InMemoryUserDetailsManager</span>(</span><br><span class="line">                User.withUsername(user.getName()).password(getOrDeducePassword(user, passwordEncoder.getIfAvailable()))</span><br><span class="line">                        .roles(StringUtils.toStringArray(roles)).build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getOrDeducePassword</span><span class="params">(SecurityProperties.User user, PasswordEncoder encoder)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> user.getPassword();</span><br><span class="line">        <span class="keyword">if</span> (user.isPasswordGenerated()) &#123;</span><br><span class="line">            logger.info(String.format(<span class="string">&quot;%n%nUsing generated security password: %s%n&quot;</span>, user.getPassword()));</span><br><span class="line">        &#125;	</span><br><span class="line">        <span class="keyword">if</span> (encoder != <span class="literal">null</span> || PASSWORD_ALGORITHM_PATTERN.matcher(password).matches()) &#123;</span><br><span class="line">            <span class="keyword">return</span> password;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> NOOP_PASSWORD_PREFIX + password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当容器中没有 AuthenticationManager、AuthenticationProvider、UserDetailsService 对应的实例类，且没有 org.springframework.security.oauth2.client.registration.ClientRegistrationRepository 时，会实例化 InMemoryUserDetailsManager 从而获取 SecurityProperties 的配置信息，加载用户信息在内存中</p>
<h2 id="基于内存存储认证信息">基于内存存储认证信息</h2>
<ol>
<li>在 Spring Security 5.0 版本前，加密的 PasswordEncoder 接口默认实现类为 NoOpPasswordEncoder ，这个是可以不用加密的，直接使用明文密码存储。当前已经标注过时了。</li>
<li>在 Spring Security 5.0 版本后 ，默认实现类改为了 DelegatingPasswordEncoder，这个实现类要求我们必须对加密后存储，如果不加密处理则会报错。</li>
</ol>
<h3 id="基本使用">基本使用</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码编码器，密码不能明文存储</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 设置默认的加密方式，使用 BCryptPasswordEncoder 密码编码器，</span></span><br><span class="line">        <span class="comment">// 该编码器会将随机产生的 salt 混入最终生成的密文中</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定制基于 HTTP 请求的用户访问控制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * fromLogin()：表单认证</span></span><br><span class="line"><span class="comment">         * httpBasic()：弹出框认证</span></span><br><span class="line"><span class="comment">         * authorizeRequests()：身份认证请求</span></span><br><span class="line"><span class="comment">         * anyRequest()：所有请求</span></span><br><span class="line"><span class="comment">         * authenticated()：身份认证</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        http.httpBasic()</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                <span class="comment">// 其它任何请求访问都需要先通过认证</span></span><br><span class="line">                .anyRequest()</span><br><span class="line">                .authenticated();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 认证管理器：</span></span><br><span class="line"><span class="comment">    * 1、认证信息提供方式（用户名、密码、当前用户的资源权限）</span></span><br><span class="line"><span class="comment">    * 2、可采用内存存储方式，也可能采用数据库方式等</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 用户信息存储在内存中</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> passwordEncoder().encode(<span class="string">&quot;1234&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;加密之后存储的密码：&quot;</span> + password);</span><br><span class="line">        auth.inMemoryAuthentication()</span><br><span class="line">            .withUser(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">            .password(password)</span><br><span class="line">            .authorities(<span class="string">&quot;ADMIN&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定制一些全局性的安全配置，例如：不拦截静态资源的访问</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 静态资源的访问不需要拦截，直接放行</span></span><br><span class="line">        web.ignoring().antMatchers(<span class="string">&quot;/**/*.css&quot;</span>, <span class="string">&quot;/**/*.js&quot;</span>, <span class="string">&quot;/**/*.png&quot;</span>, <span class="string">&quot;/**/*.jpg&quot;</span>, <span class="string">&quot;/**/*.jpeg&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="加密处理分析">加密处理分析</h3>
<p><img src="4.png" alt=""></p>
<p><img src="1.png" alt=""></p>
<p><img src="2.png" alt=""></p>
<p><img src="3.png" alt=""></p>
<h2 id="UserDetailsService-自定义登录请求">UserDetailsService 自定义登录请求</h2>
<p>在实际开发中，Spring Security 应该动态的从数据库中获取信息进行自定义身份认证，采用数据库方式进行身份认证一般需要实现两个核心接口 UserDetailsService 和 UserDetails</p>
<h3 id="UserDetailService-接口">UserDetailService 接口</h3>
<p>该接口只有一个方法 loadUserByUsername()，用于定义从数据库中获取指定用户信息的逻辑。如果未获取到用户信息，则需要手动抛出 UsernameNotFoundException 异常；如果获取到用户信息，则将该用户信息封装到 UserDetails 接口的实现类中并返回</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line">    <span class="comment">// 输入参数 username 是前端传入的用户名</span></span><br><span class="line">    UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="UserDetails-接口">UserDetails 接口</h3>
<p>UserDetails 接口定义了用于描述用户信息的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDetails</span> <span class="keyword">extends</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="comment">// 返回用户权限集合</span></span><br><span class="line">    Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回用户的密码</span></span><br><span class="line">    String <span class="title function_">getPassword</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回用户的用户名</span></span><br><span class="line">    String <span class="title function_">getUsername</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 账户是否未过期（true 未过期, false 过期）</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isAccountNonExpired</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 账户是否未锁定（true 未锁定, false 锁定）</span></span><br><span class="line">    <span class="comment">// 用户账户可能会被封锁，达到一定要求可恢复</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isAccountNonLocked</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 密码是否未过期（true 未过期, false 过期）</span></span><br><span class="line">    <span class="comment">// 一些安全级别高的系统，可能要求 30 天更换一次密码</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isCredentialsNonExpired</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 账户是否可用（true 可用, false 不可用）</span></span><br><span class="line">    <span class="comment">// 系统一般不会真正的删除用户信息，而是假删除，通过一个状态码标志用户是否被删除</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isEnabled</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="用户登录逻辑处理">用户登录逻辑处理</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDetailServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Spring Security 接收 login 请求调用 UserDetailService 这个接口中的 loadUserByUsername</span></span><br><span class="line"><span class="comment">     * loadUserByUsername 根据传进来的用户名进行校验工作，</span></span><br><span class="line"><span class="comment">     * 最后将查询到的用户信息封装到 UserDetails 这个接口的实现类中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String s)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;登录用户名：&#123;&#125;&quot;</span>,s);</span><br><span class="line">        <span class="comment">//根据用户名查询用户数据</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(s,<span class="string">&quot;123456&quot;</span>, AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="string">&quot;admin&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在使用了 Spring Security5.x 版本，需要手动提供一个 PasswordEncoder 实现类，进行密码校验，PasswordEncoder 是 SpringSecurity 的密码解析器，用户密码校验、加密，自定义登录逻辑时要求必须给容器注入 PasswordEncoder 的 bean 对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PasswordEncoderImpl</span> <span class="keyword">implements</span> <span class="title class_">PasswordEncoder</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">encode</span><span class="params">(CharSequence charSequence)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> charSequence.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(CharSequence charSequence, String s)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> s.equals(charSequence.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定制基于 HTTP 请求的用户访问控制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * fromLogin()：表单认证</span></span><br><span class="line"><span class="comment">         * httpBasic()：弹出框认证</span></span><br><span class="line"><span class="comment">         * authorizeRequests()：身份认证请求</span></span><br><span class="line"><span class="comment">         * anyRequest()：所有请求</span></span><br><span class="line"><span class="comment">         * authenticated()：身份认证</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        http.httpBasic()</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">            	<span class="comment">// 其它任何请求访问都需要先通过认证</span></span><br><span class="line">                .anyRequest()</span><br><span class="line">                .authenticated();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 认证管理器：</span></span><br><span class="line"><span class="comment">    * 1、认证信息提供方式（用户名、密码、当前用户的资源权限）</span></span><br><span class="line"><span class="comment">    * 2、可采用内存存储方式，也可能采用数据库方式等</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 不再使用内存方式存储用户认证信息，而是动态从数据库中获取</span></span><br><span class="line">        auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定制一些全局性的安全配置，例如：不拦截静态资源的访问</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 静态资源的访问不需要拦截，直接放行</span></span><br><span class="line">        web.ignoring().antMatchers(<span class="string">&quot;/**/*.css&quot;</span>, <span class="string">&quot;/**/*.js&quot;</span>, <span class="string">&quot;/**/*.png&quot;</span>, <span class="string">&quot;/**/*.jpg&quot;</span>, <span class="string">&quot;/**/*.jpeg&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong></p>
<p>上面自定义的密码解析器密码加密后与原来的一致，如果使用其他的密码解析器密码加密后与原来的不一致时，采用以下方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 密码编码器，密码不能明文存储</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> BCryptPasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 使用 BCryptPasswordEncoder 密码编码器，该编码器会将随机产生的 salt 混入最终生成的密文中</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    auth.userDetailsService(userDetailService).passwordEncoder(passwordEncoder());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDetailServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Spring Security 接收 login 请求调用 UserDetailService 这个接口中的 loadUserByUsername</span></span><br><span class="line"><span class="comment">     * loadUserByUsername 根据传进来的用户名进行校验工作，</span></span><br><span class="line"><span class="comment">     * 最后将查询到的用户信息封装到 UserDetails 这个接口的实现类中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String s)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;登录用户名：&#123;&#125;&quot;</span>,s);</span><br><span class="line">        <span class="comment">//根据用户名查询用户数据</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(s, passwordEncoder.encode(<span class="string">&quot;123456&quot;</span>), AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="string">&quot;admin&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="自定义返回-UserDetails-信息">自定义返回 UserDetails 信息</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountUser</span> <span class="keyword">implements</span> <span class="title class_">UserDetails</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">540L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Log</span> <span class="variable">logger</span> <span class="operator">=</span> LogFactory.getLog(User.class);</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; authorities;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">boolean</span> accountNonExpired;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">boolean</span> accountNonLocked;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">boolean</span> credentialsNonExpired;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">boolean</span> enabled;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AccountUser</span><span class="params">(Long userId, String username, String password, Collection&lt;? extends GrantedAuthority&gt; authorities)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(userId, username, password, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, authorities);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AccountUser</span><span class="params">(Long userId, String username, String password, <span class="type">boolean</span> enabled, <span class="type">boolean</span> accountNonExpired, <span class="type">boolean</span> credentialsNonExpired, <span class="type">boolean</span> accountNonLocked, Collection&lt;? extends GrantedAuthority&gt; authorities)</span> &#123;</span><br><span class="line">        Assert.isTrue(username != <span class="literal">null</span> &amp;&amp; !<span class="string">&quot;&quot;</span>.equals(username) &amp;&amp; password != <span class="literal">null</span>, <span class="string">&quot;Cannot pass null or empty values to constructor&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.userId = userId;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">        <span class="built_in">this</span>.enabled = enabled;</span><br><span class="line">        <span class="built_in">this</span>.accountNonExpired = accountNonExpired;</span><br><span class="line">        <span class="built_in">this</span>.credentialsNonExpired = credentialsNonExpired;</span><br><span class="line">        <span class="built_in">this</span>.accountNonLocked = accountNonLocked;</span><br><span class="line">        <span class="built_in">this</span>.authorities = authorities;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.authorities;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.accountNonExpired;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonLocked</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.accountNonLocked;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCredentialsNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.credentialsNonExpired;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEnabled</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.enabled;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDetailServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;admin&quot;</span>.equals(username)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AccountUser</span>(<span class="number">12L</span>, <span class="string">&quot;admin&quot;</span>, passwordEncoder.encode(<span class="string">&quot;123&quot;</span>), AuthorityUtils.NO_AUTHORITIES);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailServiceImpl userDetailService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.formLogin()</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .anyRequest()</span><br><span class="line">                .authenticated();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        auth.userDetailsService(userDetailService);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringSecurity</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringSecurity5（3-密码解析器）</title>
    <url>/blog/2024/12/31/Java/SpringSecurity/SpringSecurity5/SpringSecurity5%EF%BC%883-%E5%AF%86%E7%A0%81%E8%A7%A3%E6%9E%90%E5%99%A8%EF%BC%89/</url>
    <content><![CDATA[<h2 id="PasswordEncoder">PasswordEncoder</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PasswordEncoder</span> &#123;</span><br><span class="line">    <span class="comment">//加密</span></span><br><span class="line">    String <span class="title function_">encode</span><span class="params">(CharSequence var1)</span>;</span><br><span class="line">	<span class="comment">//比较密码</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(CharSequence var1, String var2)</span>;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">upgradeEncoding</span><span class="params">(String encodedPassword)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="1.png" alt=""></p>
<h2 id="工作流程">工作流程</h2>
<p>WebSecurityConfigurerAdapter 初始化密码解析器时，如果没有自定义 Bean 的话，会默认初始化 DelegatingPasswordEncoder</p>
<p><img src="2.png" alt=""></p>
<p><img src="3.png" alt=""></p>
<p><img src="4.png" alt=""></p>
<p>DaoAuthenticationProvider 在 additionalAuthenticationChecks 方法中会获取 Spring 容器中的 PasswordEncoder 来对用户输入的密码进行比较</p>
<p><strong>BCryptPasswordEncoder 密码匹配流程</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BCryptPasswordEncoder</span> <span class="keyword">implements</span> <span class="title class_">PasswordEncoder</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">Pattern</span> <span class="variable">BCRYPT_PATTERN</span> <span class="operator">=</span> Pattern</span><br><span class="line">			.compile(<span class="string">&quot;\\A\\$2(a|y|b)?\\$(\\d\\d)\\$[./0-9A-Za-z]&#123;53&#125;&quot;</span>);</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Log</span> <span class="variable">logger</span> <span class="operator">=</span> LogFactory.getLog(getClass());</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> strength;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> BCryptVersion version;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> SecureRandom random;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数：原密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">encode</span><span class="params">(CharSequence rawPassword)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (rawPassword == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;rawPassword cannot be null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String salt;</span><br><span class="line">        <span class="keyword">if</span> (random != <span class="literal">null</span>) &#123;</span><br><span class="line">            salt = BCrypt.gensalt(version.getVersion(), strength, random);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            salt = BCrypt.gensalt(version.getVersion(), strength);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> BCrypt.hashpw(rawPassword.toString(), salt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数一：原密码，</span></span><br><span class="line"><span class="comment">     * 参数二：加密后保存在数据库的密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(CharSequence rawPassword, String encodedPassword)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (encodedPassword == <span class="literal">null</span> || encodedPassword.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            logger.warn(<span class="string">&quot;Empty encoded password&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!BCRYPT_PATTERN.matcher(encodedPassword).matches()) &#123;</span><br><span class="line">            logger.warn(<span class="string">&quot;Encoded password does not look like BCrypt&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> BCrypt.checkpw(rawPassword.toString(), encodedPassword);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从数据库得到的“密码”（参数： salt ）进行一系列校验（长度校验等）并截取“密码”中相应的密码盐，利用这个密码盐进行同样的一系列计算 Hash 操作和 Base64 编码拼接一些标识符生成所谓的“密码”，最后 equalsNoEarlyReturn 方法对同一个密码盐生成的两个“密码”进行匹配</p>
<ol>
<li>每次使用 BCryptPasswordEncoder 编码同一个密码都是不一样的，因为用到的随机密码盐每次都是不一样的，同一个密码和不同的密码盐组合计算出来的 Hash 值不一样</li>
<li>BCryptPasswordEncoder 编码同一个密码后结果都不一样，怎么进行匹配？因为密码盐是随机生成的，但是可以根据数据库查询出来的“密码”拿到密码盐，同一个密码盐+原密码计算 Hash 结果值是能匹配的</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BCrypt</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">hashpw</span><span class="params">(String password, String salt)</span> &#123;</span><br><span class="line">        <span class="type">byte</span> passwordb[];</span><br><span class="line">        passwordb = password.getBytes(StandardCharsets.UTF_8);</span><br><span class="line">        <span class="keyword">return</span> hashpw(passwordb, salt);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">hashpw</span><span class="params">(<span class="type">byte</span> passwordb[], String salt)</span> &#123;</span><br><span class="line">        BCrypt B;</span><br><span class="line">        String real_salt;</span><br><span class="line">        <span class="type">byte</span> saltb[], hashed[];</span><br><span class="line">        <span class="type">char</span> <span class="variable">minor</span> <span class="operator">=</span> (<span class="type">char</span>) <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> rounds, off;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">if</span> (salt == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;salt cannot be null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">saltLength</span> <span class="operator">=</span> salt.length();</span><br><span class="line">        <span class="keyword">if</span> (saltLength &lt; <span class="number">28</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Invalid salt&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (salt.charAt(<span class="number">0</span>) != <span class="string">&#x27;$&#x27;</span> || salt.charAt(<span class="number">1</span>) != <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span> (<span class="string">&quot;Invalid salt version&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (salt.charAt(<span class="number">2</span>) == <span class="string">&#x27;$&#x27;</span>)</span><br><span class="line">            off = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            minor = salt.charAt(<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> ((minor != <span class="string">&#x27;a&#x27;</span> &amp;&amp; minor != <span class="string">&#x27;x&#x27;</span> &amp;&amp; minor != <span class="string">&#x27;y&#x27;</span> &amp;&amp; minor != <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">                    || salt.charAt(<span class="number">3</span>) != <span class="string">&#x27;$&#x27;</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span> (<span class="string">&quot;Invalid salt revision&quot;</span>);</span><br><span class="line">            off = <span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Extract number of rounds</span></span><br><span class="line">        <span class="keyword">if</span> (salt.charAt(off + <span class="number">2</span>) &gt; <span class="string">&#x27;$&#x27;</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span> (<span class="string">&quot;Missing salt rounds&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (off == <span class="number">4</span> &amp;&amp; saltLength &lt; <span class="number">29</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Invalid salt&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        rounds = Integer.parseInt(salt.substring(off, off + <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        real_salt = salt.substring(off + <span class="number">3</span>, off + <span class="number">25</span>);</span><br><span class="line">        saltb = decode_base64(real_salt, BCRYPT_SALT_LEN);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (minor &gt;= <span class="string">&#x27;a&#x27;</span>) <span class="comment">// add null terminator</span></span><br><span class="line">            passwordb = Arrays.copyOf(passwordb, passwordb.length + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        B = <span class="keyword">new</span> <span class="title class_">BCrypt</span>();</span><br><span class="line">        hashed = B.crypt_raw(passwordb, saltb, rounds, minor == <span class="string">&#x27;x&#x27;</span>, minor == <span class="string">&#x27;a&#x27;</span> ? <span class="number">0x10000</span> : <span class="number">0</span>);</span><br><span class="line">        rs.append(<span class="string">&quot;$2&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (minor &gt;= <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">            rs.append(minor);</span><br><span class="line">        rs.append(<span class="string">&quot;$&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (rounds &lt; <span class="number">10</span>)</span><br><span class="line">            rs.append(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        rs.append(rounds);</span><br><span class="line">        rs.append(<span class="string">&quot;$&quot;</span>);</span><br><span class="line">        encode_base64(saltb, saltb.length, rs);</span><br><span class="line">        encode_base64(hashed, bf_crypt_ciphertext.length * <span class="number">4</span> - <span class="number">1</span>, rs);</span><br><span class="line">        <span class="keyword">return</span> rs.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">checkpw</span><span class="params">(String plaintext, String hashed)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> equalsNoEarlyReturn(hashed, hashpw(plaintext, hashed));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">equalsNoEarlyReturn</span><span class="params">(String a, String b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> MessageDigest.isEqual(a.getBytes(StandardCharsets.UTF_8), b.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="自定义密码解析器">自定义密码解析器</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMD5PasswordEncoder</span> <span class="keyword">implements</span> <span class="title class_">PasswordEncoder</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> charSequence  明文字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">encode</span><span class="params">(CharSequence charSequence)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">MessageDigest</span> <span class="variable">digest</span> <span class="operator">=</span> MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> toHexString(digest.digest(charSequence.toString().getBytes()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码校验</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> charSequence 明文，页面收集密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s 密文 ，数据库中存放密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(CharSequence charSequence, String s)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> s.equals(encode(charSequence));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tmp 转 16 进制字节数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 饭回 16 进制字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">toHexString</span><span class="params">(<span class="type">byte</span> [] tmp)</span>&#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">byte</span> b :tmp)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> Integer.toHexString(b &amp; <span class="number">0xFF</span>);</span><br><span class="line">            <span class="keyword">if</span> (s.length()==<span class="number">1</span>)&#123;</span><br><span class="line">                builder.append(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            builder.append(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> builder.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//return new BCryptPasswordEncoder(); //自带的</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyMD5PasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDetailServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String s)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> passwordEncoder.encode(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;登录用户：&#123;&#125;，密码：&#123;&#125;&quot;</span>, s, password);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(s, password, AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="string">&quot;admin&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringSecurity</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringSecurity5（4-自定义登录、登出处理器）</title>
    <url>/blog/2025/02/07/Java/SpringSecurity/SpringSecurity5/SpringSecurity5%EF%BC%884-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%99%BB%E5%BD%95%E3%80%81%E7%99%BB%E5%87%BA%E5%A4%84%E7%90%86%E5%99%A8%EF%BC%89/</url>
    <content><![CDATA[<h2 id="自定义登录页面">自定义登录页面</h2>
<h3 id="常用方法">常用方法</h3>
<p><strong>http.formLogin()</strong></p>
<ol>
<li>loginPage(String loginPage)：设置用户登录页面的访问路径，默认为 GET 请求的 /login</li>
<li>loginProcessingUrl(String loginProcessingUrl)：设置登录表单提交的路径，默认为是 POST 请求的 loginPage() 设置的路径</li>
<li>successForwardUrl(String forwordUrl)：设置用户认证成功后转发的地址</li>
<li>successHandler(AuthenticationSuccessHandler successHandler)：配置用户认证成功后的自定义处理器</li>
<li>defaultSuccessUrl(String defaultSuccessUrl)：设置用户认证成功后重定向的地址。这里需要注意，该路径是用户直接访问登录页面认证成功后重定向的路径，如果是其他路径跳转到登录页面认证成功后会重定向到原始访问路径。可设置第二个参数为 true，使认证成功后始终重定向到该地址</li>
<li>failureForwrad(String forwardUrl)：设置用户认证失败后转发的地址</li>
<li>failureHandler(AuthenticationFailureHandler authenticationFailureHandler)：设置用户登录失败后的自定义错误处理器</li>
<li>failureUrl(String authenticationFailureUrl)：设置用户登录失败后重定向的地址，指定的路径要能匿名访问，默认为 loginPage() + ?error</li>
<li>usernameParamter(String usernameParamter)：设置登录表单中的用户名参数，默认为 username</li>
<li>passwordParamter(String passwordParamter)：设置登录表单中的密码参数，默认为 password</li>
</ol>
<h3 id="使用案例">使用案例</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;login-page&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/login&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>账户登录<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户名&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">required</span>=<span class="string">&quot;required&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;密码&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">required</span>=<span class="string">&quot;required&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * fromLogin()：表单认证</span></span><br><span class="line"><span class="comment">         * httpBasic()：弹出框认证</span></span><br><span class="line"><span class="comment">         * authorizeRequests()：身份认证请求</span></span><br><span class="line"><span class="comment">         * anyRequest()：所有请求</span></span><br><span class="line"><span class="comment">         * authenticated()：身份认证</span></span><br><span class="line"><span class="comment">         * loginPage()：登录页面地址</span></span><br><span class="line"><span class="comment">         * loginProcessingUrl()：登录表单提交地址</span></span><br><span class="line"><span class="comment">         * csrf().disable()：关闭 Spring Security 的跨站请求伪造的功能</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        http.csrf().disable()</span><br><span class="line">                .formLogin()</span><br><span class="line">                .loginPage(<span class="string">&quot;/login.html&quot;</span>)</span><br><span class="line">                .loginProcessingUrl(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/login.html&quot;</span>).permitAll()</span><br><span class="line">                .anyRequest()</span><br><span class="line">                .authenticated();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：SpringBoot 项目集成 Spring Security 5.3.4RELEASE 后，默认情况 crsf 是开启的。每次请求会校验请求头中 X-CSRF-TOKEN 的值与内存中保存的是否一致，如果一致框架则认为登录页面是安全的，如果不一致，会报 403。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/login.html&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>转发</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http.formLogin()</span><br><span class="line">    .usernameParameter(<span class="string">&quot;name&quot;</span>) <span class="comment">// 设置请求参数中，用户名参数名称。 默认 username</span></span><br><span class="line">    .passwordParameter(<span class="string">&quot;pswd&quot;</span>) <span class="comment">// 设置请求参数中，密码参数名称。 默认 password</span></span><br><span class="line">    .loginPage(<span class="string">&quot;/toLogin&quot;</span>) <span class="comment">// 当用户未登录的时候，跳转的登录页面地址是什么？ 默认 /login</span></span><br><span class="line">    .loginProcessingUrl(<span class="string">&quot;/login&quot;</span>) <span class="comment">// 用户登录逻辑请求地址是什么。 默认是 /login</span></span><br><span class="line">    .failureForwardUrl(<span class="string">&quot;/failure&quot;</span>); <span class="comment">// 登录失败后，请求转发的位置。Security 请求转发使用 Post 请求。默认转发到：loginPage?error</span></span><br><span class="line">    .successForwardUrl(<span class="string">&quot;/toMain&quot;</span>); <span class="comment">// 用户登录成功后，请求转发到的位置。Security 请求转发使用 POST 请求。</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>重定向</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http.formLogin()</span><br><span class="line">    .usernameParameter(<span class="string">&quot;name&quot;</span>) <span class="comment">// 设置请求参数中，用户名参数名称。 默认 username</span></span><br><span class="line">    .passwordParameter(<span class="string">&quot;pswd&quot;</span>) <span class="comment">// 设置请求参数中，密码参数名称。 默认 password</span></span><br><span class="line">    .loginPage(<span class="string">&quot;/toLogin&quot;</span>) <span class="comment">// 当用户未登录的时候，跳转的登录页面地址是什么？ 默认 /login</span></span><br><span class="line">    .loginProcessingUrl(<span class="string">&quot;/login&quot;</span>) <span class="comment">// 用户登录逻辑请求地址是什么。 默认是 /login</span></span><br><span class="line">    .defaultSuccessUrl(<span class="string">&quot;/toMain&quot;</span>,<span class="literal">true</span>); <span class="comment">//用户登录成功后，响应重定向到的位置。GET 请求。必须配置绝对地址。</span></span><br><span class="line">    .failureUrl(<span class="string">&quot;/failure&quot;</span>); <span class="comment">// 登录失败后，重定向的位置。</span></span><br></pre></td></tr></table></figure>
<h2 id="自定义登录处理器">自定义登录处理器</h2>
<h3 id="AuthenticationSuccessHandler">AuthenticationSuccessHandler</h3>
<p>用来处理认证成功的情况</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AuthenticationSuccessHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">onAuthenticationSuccess</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">            HttpServletResponse response, FilterChain chain, Authentication authentication)</span></span><br><span class="line">            <span class="keyword">throws</span> IOException, ServletException&#123;</span><br><span class="line">        onAuthenticationSuccess(request, response, authentication);</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">onAuthenticationSuccess</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">            HttpServletResponse response, Authentication authentication)</span></span><br><span class="line">            <span class="keyword">throws</span> IOException, ServletException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthenticationSuccessHandlerImpl</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationSuccessHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAuthenticationSuccess</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">        httpServletResponse.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">        httpServletResponse.getWriter().write(objectMapper.writeValueAsString(authentication));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="AuthenticationFailureHandler">AuthenticationFailureHandler</h3>
<p>用来处理认证失败的情况</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AuthenticationFailureHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">onAuthenticationFailure</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">            HttpServletResponse response, AuthenticationException exception)</span></span><br><span class="line">            <span class="keyword">throws</span> IOException, ServletException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthenticationFailureHandlerImpl</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationFailureHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAuthenticationFailure</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AuthenticationException e)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">        httpServletResponse.setStatus(HttpStatus.INTERNAL_SERVER_ERROR.value());</span><br><span class="line">        httpServletResponse.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">        httpServletResponse.getWriter().write(objectMapper.writeValueAsString(e));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="SimpleUrlAuthenticationSuccessHandler">SimpleUrlAuthenticationSuccessHandler</h3>
<p>用来处理认证成功后跳转的 URL 信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleUrlAuthenticationSuccessHandler</span> <span class="keyword">extends</span></span><br><span class="line">		<span class="title class_">AbstractAuthenticationTargetUrlRequestHandler</span> <span class="keyword">implements</span></span><br><span class="line">		<span class="title class_">AuthenticationSuccessHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SimpleUrlAuthenticationSuccessHandler</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SimpleUrlAuthenticationSuccessHandler</span><span class="params">(String defaultTargetUrl)</span> &#123;</span><br><span class="line">        setDefaultTargetUrl(defaultTargetUrl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAuthenticationSuccess</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">            HttpServletResponse response, Authentication authentication)</span></span><br><span class="line">            <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">        handle(request, response, authentication);</span><br><span class="line">        clearAuthenticationAttributes(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">clearAuthenticationAttributes</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession(<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (session == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        session.removeAttribute(WebAttributes.AUTHENTICATION_EXCEPTION);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="使用案例-2">使用案例</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationSuccessHandlerImpl authenticationSuccessHandler;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationFailureHandlerImpl authenticationFailureHandler;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * fromLogin()：表单认证</span></span><br><span class="line"><span class="comment">         * httpBasic()：弹出框认证</span></span><br><span class="line"><span class="comment">         * authorizeRequests()：身份认证请求</span></span><br><span class="line"><span class="comment">         * anyRequest()：所有请求</span></span><br><span class="line"><span class="comment">         * authenticated()：身份认证</span></span><br><span class="line"><span class="comment">         * loginPage()：登录页面地址</span></span><br><span class="line"><span class="comment">         * loginProcessingUrl()：登录表单提交地址</span></span><br><span class="line"><span class="comment">         * csrf().disable()：关闭 Spring Security 的跨站请求伪造的功能</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        http.csrf().disable()</span><br><span class="line">                .formLogin()</span><br><span class="line">                .loginPage(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">                .loginProcessingUrl(<span class="string">&quot;/auth/login&quot;</span>)</span><br><span class="line">                .successHandler(authenticationSuccessHandler)</span><br><span class="line">                .failureHandler(authenticationFailureHandler)</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/login&quot;</span>).permitAll()</span><br><span class="line">                .anyRequest()</span><br><span class="line">                .authenticated();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="自定义退出处理器">自定义退出处理器</h2>
<h3 id="LogoutSuccessHandler">LogoutSuccessHandler</h3>
<p>用来处理退出成功的情况</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LogoutSuccessHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">onLogoutSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class="line"><span class="params">            Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLogOutSuccessHandler</span> <span class="keyword">implements</span> <span class="title class_">LogoutSuccessHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onLogoutSuccess</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        httpServletResponse.setStatus(HttpStatus.UNAUTHORIZED.value());</span><br><span class="line">        httpServletResponse.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">        httpServletResponse.getWriter().write(<span class="string">&quot;退出成功，请重新登录&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="SimpleUrlLogoutSuccessHandler">SimpleUrlLogoutSuccessHandler</h3>
<p>用来处理退出成功跳转的 URL 信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleUrlLogoutSuccessHandler</span> <span class="keyword">extends</span></span><br><span class="line">		<span class="title class_">AbstractAuthenticationTargetUrlRequestHandler</span> <span class="keyword">implements</span> <span class="title class_">LogoutSuccessHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onLogoutSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class="line"><span class="params">            Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="built_in">super</span>.handle(request, response, authentication);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="LogoutHandler">LogoutHandler</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http.and()</span><br><span class="line">    .logout() <span class="comment">//提供系统退出支持，使用 WebSecurityConfigurerAdapter 会自动被应用</span></span><br><span class="line">    .logoutUrl(<span class="string">&quot;/logout&quot;</span>) <span class="comment">//默认退出地址</span></span><br><span class="line">    .logoutSuccessUrl(<span class="string">&quot;/login‐view?logout&quot;</span>) <span class="comment">//退出后的跳转地址</span></span><br><span class="line">    .addLogoutHandler(logoutHandler) <span class="comment">//添加一个 LogoutHandler，用于实现用户退出时的清理工作.默认 SecurityContextLogoutHandler 会被添加为最后一个 LogoutHandler 。</span></span><br><span class="line">    .invalidateHttpSession(<span class="literal">true</span>);  <span class="comment">//指定是否在退出时让 HttpSession 失效，默认是 true</span></span><br></pre></td></tr></table></figure>
<p>一般来说， LogoutHandler 的实现类被用来执行必要的清理，因而他们不应该抛出异常。</p>
<p>下面是 Spring Security 提供的一些实现：</p>
<ol>
<li>PersistentTokenBasedRememberMeServices：基于持久化 token 的 RememberMe 功能的相关清理</li>
<li>TokenBasedRememberMeService：基于 token 的 RememberMe 功能的相关清理</li>
<li>CookieClearingLogoutHandler：退出时 Cookie 的相关清理</li>
<li>CsrfLogoutHandler：负责在退出时移除 csrfToken</li>
<li>SecurityContextLogoutHandler：退出时 SecurityContext 的相关清理</li>
</ol>
<h3 id="使用案例-3">使用案例</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/signout/success&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">signout</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;退出成功，请重新登录&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationSuccessHandlerImpl authenticationSuccessHandler;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationFailureHandlerImpl authenticationFailureHandler;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MyLogOutSuccessHandler logOutSuccessHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.formLogin()</span><br><span class="line">            .successHandler(authenticationSuccessHandler)</span><br><span class="line">            .failureHandler(authenticationFailureHandler)</span><br><span class="line">            .and()</span><br><span class="line">            .logout()</span><br><span class="line">            <span class="comment">//.logoutUrl(&quot;/signout&quot;)</span></span><br><span class="line">            .logoutSuccessUrl(<span class="string">&quot;/signout/success&quot;</span>)</span><br><span class="line">            .deleteCookies(<span class="string">&quot;JSESSIONID&quot;</span>)</span><br><span class="line">            .logoutSuccessHandler(logoutSuccessHandler)</span><br><span class="line">            .and()</span><br><span class="line">            .authorizeRequests()</span><br><span class="line">            .anyRequest()</span><br><span class="line">            .authenticated();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Spring Security 默认的退出登录 URL 为/logout，退出登录后，Spring Security 会做如下处理：</p>
<ol>
<li>使当前的 Session 失效</li>
<li>清除与当前用户关联的 RememberMe 记录</li>
<li>清空当前的 SecurityContext</li>
<li>重定向到登录页</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringSecurity</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringSecurity5（6-记住我）</title>
    <url>/blog/2025/02/12/Java/SpringSecurity/SpringSecurity5/SpringSecurity5%EF%BC%886-%E8%AE%B0%E4%BD%8F%E6%88%91%EF%BC%89/</url>
    <content><![CDATA[<h2 id="记住我原理">记住我原理</h2>
<h3 id="登录流程">登录流程</h3>
<p><img src="20.png" alt=""></p>
<p>Remember-Me 功能的开启需要在 configure(HttpSecurity http)方法中通过 http.rememberMe()配置，该配置主要会在过滤器链中添加 RememberMeAuthenticationFilter 过滤器，通过该过滤器实现自动登录。该过滤器的位置在其它认证过滤器之后，其它认证过滤器没有进行认证处理时，该过滤器尝试工作</p>
<p>Remember-Me 功能工作流程如下：</p>
<ol>
<li>当用户成功登录认证后，浏览器中存在两个 Cookie，一个是 remember-me，另一个是 JSESSIONID。用户再次请求访问时，请求首先被 SecurityContextPersistenceFilter 过滤器拦截，该过滤器会根据 JSESSIONID 获取对应 Session 中存储的 SecurityContext 对象。如果获取到的 SecurityContext 对象中存储了认证用户信息对象 Authentiacaion，也就是说线程可以直接获得认证用户信息，那么后续的认证过滤器不需要对该请求进行拦截，remember-me 不起作用。</li>
<li>当 JSESSIONID 过期后，浏览器中只存在 remember-me 的 Cookie。用户再次请求访问时，由于请求没有携带 JSESSIONID，SecurityContextPersistenceFilter 过滤器无法获取 Session 中的 SecurityContext 对象，也就没法获得认证用户信息，后续需要进行登录认证。如果没有 remember-me 的 Cookie，浏览器会重定向到登录页面进行表单登录认证；但是 remember-me 的 Cookie 存在，RememberMeAuthenticationFilter 过滤器会将请求进行拦截，根据 remember-me 存储的 Token 值实现自动登录，并将成功登录后的认证用户信息对象 Authentiacaion 存储到 SecurityContext 中。当响应返回时，SecurityContextPersistenceFilter 过滤器会将 SecurityContext 存储在 Session 中，下次请求又通过 JSEESIONID 获取认证用户信息。</li>
</ol>
<p>总结：remember-me 只有在 JSESSIONID 失效和前面的过滤器认证失败或者未进行认证时才发挥作用。此时，只要 remember-me 的 Cookie 不过期，我们就不需要填写登录表单，就能实现再次登录，并且 remember-me 自动登录成功之后，会生成新的 Token 替换旧的 Token，相应 Cookie 的 Max-Age 也会重置。</p>
<p><img src="9.png" alt=""></p>
<p><img src="10.png" alt=""></p>
<p><img src="11.png" alt=""></p>
<h3 id="首次登录">首次登录</h3>
<p>在用户选择“记住我”登录并成功认证后，Spring Security 将默认会生成一个名为 remember-me 的 Cookie 存储 Token 并发送给浏览器；用户注销登录后，该 Cookie 的 Max-Age 会被设置为 0，即删除该 Cookie。Token 值由下列方式组合而成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">base64(username + &quot;:&quot; + expirationTime + &quot;:&quot; + md5Hex(username + &quot;:&quot; + expirationTime + &quot;:&quot; + password + &quot;:&quot; + key))</span><br></pre></td></tr></table></figure>
<ol>
<li>username 代表用户名；</li>
<li>password 代表用户密码；</li>
<li>expirationTime 表示记住我的 Token 的失效日期，以毫秒为单位；</li>
<li>key 表示防止修改 Token 的标识，默认是一个随机的 UUID 值</li>
</ol>
<p><img src="2.png" alt=""></p>
<p><img src="3.png" alt=""></p>
<p><img src="5.png" alt=""></p>
<p><img src="4.png" alt=""></p>
<h3 id="二次登录">二次登录</h3>
<p><img src="6.png" alt=""></p>
<p><img src="7.png" alt=""></p>
<p><img src="8.png" alt=""></p>
<h3 id="数据库存储">数据库存储</h3>
<p>Token 与用户的对应关系是在内存中存储的，当我们重启应用之后所有的 Token 都将消失，即：所有的用户必须重新登陆。为此，Spring Security 还给我们提供了一种将 Token 存储到数据库中的方式，重启应用也不受影响</p>
<p><img src="21.png" alt=""></p>
<ol>
<li>用户选择“记住我”功能成功登录认证后，SpringSecurity 会把用户名 username、序列号 series、令牌值 token 和最后一次使用自动登录的时间 last_used 作为一条 Token 记录存入数据库表中，同时生成一个名为 remember-me 的 Cookie 存储 series: token 的 base64 编码，该编码为发送给浏览器的 Token。</li>
<li>当用户需要再次登录时，RememberMeAuthenticationFilter 过滤器首先会检查请求是否有 remember-me 的 Cookie。如果存在，则检查其 Token 值中的 series 和 token 字段是否与数据库中的相关记录一致，一致则通过验证，并且系统重新生成一个新 token 值替换数据库中对应记录的旧 token，该记录的序列号 series 保持不变，认证时间 last_used 更新，同时重新生成新的 Token（旧 series : 新 token）通过 Cookie 发送给浏览器，remember-me 的 Cookie 的 Max-Age 也因此重置。</li>
<li>上述验证通过后，获取数据库中对应 Token 记录的 username 字段，调用 UserDetailsService 获取用户信息。之后进行登录认证，认证成功后将认证用户信息 Authentication 对象存入 SecurityContext。</li>
<li>如果对应的 Cookie 值包含的 token 字段与数据库中对应 Token 记录的 token 字段不匹配，则有可能是用户的 Cookie 被盗用，这时将会删除数据库中与当前用户相关的所有 Token 记录，用户需要重新进行表单登录。</li>
<li>如果对应的 Cookie 不存在，或者其值包含的 series 和 token 字段与数据库中的记录不匹配，则用户需要重新进行表单登录。如果用户退出登录，则删除数据库中对应的 Token 记录，并将相应的 Cookie 的 Max-Age 设置为 0。</li>
</ol>
<p><img src="12.png" alt=""></p>
<p><img src="13.png" alt=""></p>
<h2 id="使用案例">使用案例</h2>
<h3 id="本地存储">本地存储</h3>
<p><strong>http.remember()</strong></p>
<ol>
<li>rememberMeParameter(String rememberMeParameter)：指定在登录时“记住我”的 HTTP 参数，默认为 remember-me。</li>
<li>key(String key)：“记住我”的 Token 中的标识字段，默认是一个随机的 UUID 值。</li>
<li>tokenValiditySeconds(int tokenValiditySeconds)：“记住我” 的 Token 令牌有效期，单位为秒，即对应的 cookie 的 Max-Age 值，默认时间为 2 周。</li>
<li>userDetailsService(UserDetailsService userDetailsService)：指定 Remember-Me 功能自动登录过程使用的 UserDetailsService 对象，默认使用 Spring 容器中的 UserDetailsService 对象.</li>
<li>tokenRepository(PersistentTokenRepository tokenRepository)：指定 TokenRepository 对象，用来配置持久化 Token。</li>
<li>alwaysRemember(boolean alwaysRemember)：是否应该始终创建记住我的 Token，默认为 false。</li>
<li>useSecureCookie(boolean useSecureCookie)：是否设置 Cookie 为安全，如果设置为 true，则必须通过 https 进行连接请求。</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>\</span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.3.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDetailServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(username, passwordEncoder.encode(<span class="string">&quot;123&quot;</span>), AuthorityUtils.NO_AUTHORITIES);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.formLogin()</span><br><span class="line">            .and()</span><br><span class="line">            .rememberMe()</span><br><span class="line">            <span class="comment">// 指定在登录时“记住我”的 HTTP 参数，默认为 remember-me</span></span><br><span class="line">            .rememberMeCookieName(<span class="string">&quot;remember-me&quot;</span>)</span><br><span class="line">            <span class="comment">// 设置 Token 有效期为 15s，（默认是 2 周内免登录）</span></span><br><span class="line">            .tokenValiditySeconds(<span class="number">15</span>)</span><br><span class="line">            .tokenRepository(<span class="keyword">new</span> <span class="title class_">InMemoryTokenRepositoryImpl</span>())</span><br><span class="line">            <span class="comment">// 指定 UserDetailsService 对象</span></span><br><span class="line">            .userDetailsService(userDetailsService)</span><br><span class="line">            .and()</span><br><span class="line">            .authorizeRequests()</span><br><span class="line">            .anyRequest()</span><br><span class="line">            .authenticated();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="15.png" alt=""></p>
<p><img src="16.png" alt=""></p>
<p><img src="17.png" alt=""></p>
<p>此时登录页中会出现 “记住我” 按钮，且提交表单后也有对应的参数信息，登录成功后会在浏览器中存储对应的 cookie 信息</p>
<h3 id="数据库存储-2">数据库存储</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/security?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//配置记住密码</span></span><br><span class="line">        http.csrf().disable()</span><br><span class="line">            .formLogin()</span><br><span class="line">            .loginPage(<span class="string">&quot;/toLogin&quot;</span>)</span><br><span class="line">            .loginProcessingUrl(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">            .and()</span><br><span class="line">            .rememberMe()</span><br><span class="line">            <span class="comment">// 修改请求参数名。 默认是 remember-me</span></span><br><span class="line">            .rememberMeParameter(<span class="string">&quot;remember-me&quot;</span>)</span><br><span class="line">            <span class="comment">// 设置记住我有效时间。单位是秒。默认是 14 天</span></span><br><span class="line">            .tokenValiditySeconds(<span class="number">14</span>*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>) </span><br><span class="line">            <span class="comment">// 修改 remember me 的 cookie 名称。默认是 remember-me</span></span><br><span class="line">            .rememberMeCookieName(<span class="string">&quot;remember-me&quot;</span>) </span><br><span class="line">            <span class="comment">// 配置用户登录标记的持久化工具对象。</span></span><br><span class="line">            .tokenRepository(persistentTokenRepository) </span><br><span class="line">            <span class="comment">// 配置自定义的 UserDetailsService 接口实现类对象</span></span><br><span class="line">            .userDetailsService(userDetailsService) </span><br><span class="line">            .and()</span><br><span class="line">            .authorizeRequests()</span><br><span class="line">            .antMatchers(<span class="string">&quot;/toLogin&quot;</span>).permitAll()</span><br><span class="line">            .anyRequest()</span><br><span class="line">            .authenticated();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PersistentTokenRepository <span class="title function_">persistentTokenRepository</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">JdbcTokenRepositoryImpl</span> <span class="variable">jdbcTokenRepository</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTokenRepositoryImpl</span>();</span><br><span class="line">        <span class="comment">// 设置数据库</span></span><br><span class="line">        jdbcTokenRepository.setDataSource(dataSource);</span><br><span class="line">        <span class="comment">// 是否启动项目时创建保存 token 信息的数据表</span></span><br><span class="line">        jdbcTokenRepository.setCreateTableOnStartup(<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">return</span> jdbcTokenRepository;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：JdbcTokenRepositoryImpl 中有建表语句</p>
<p>在 cookie 未失效之前，无论是重开浏览器或者重启项目，用户都无需再次登录就可以访问系统资源了</p>
<p><img src="18.png" alt=""><img src="19.png" alt=""></p>
<h3 id="注销登录">注销登录</h3>
<p><strong>http.logout()</strong></p>
<ol>
<li>logoutUrl(String outUrl)：指定用户注销登录时请求访问的地址，默认为 POST 方式的/logout。</li>
<li>logoutSuccessUrl(String logoutSuccessUrl)：指定用户成功注销登录后的重定向地址，默认为/登录页面 url?logout。</li>
<li>logoutSuccessHandler(LogoutSuccessHandler logoutSuccessHandler)：指定用户成功注销登录后使用的处理器。</li>
<li>deleteCookies(String …cookieNamesToClear)：指定用户注销登录后删除的 Cookie。</li>
<li>invalidateHttpSession(boolean invalidateHttpSession)：指定用户注销登录后是否立即清除用户的 Session，默认为 true。</li>
<li>clearAuthentication(boolean clearAuthentication)：指定用户退出登录后是否立即清除用户认证信息对象 Authentication，默认为 true。</li>
<li>addLogoutHandler(LogoutHandler logoutHandler)：指定用户注销登录时使用的处理器。</li>
</ol>
<p><strong>注意</strong></p>
<p>Spring Security 默认以 POST 方式请求访问/logout 注销登录，以 POST 方式请求的原因是为了防止 csrf（跨站请求伪造），如果想使用 GET 方式的请求，则需要关闭 csrf 防护。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 继承 SimpleUrlLogoutSuccessHandler 处理器，该类是 logoutSuccessUrl() 方法使用的成功注销登录处理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomLogoutSuccessHandler</span> <span class="keyword">extends</span> <span class="title class_">SimpleUrlLogoutSuccessHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onLogoutSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">xRequestedWith</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;x-requested-with&quot;</span>);</span><br><span class="line">        <span class="comment">// 判断前端的请求是否为 ajax 请求</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;XMLHttpRequest&quot;</span>.equals(xRequestedWith)) &#123;</span><br><span class="line">            <span class="comment">// 成功注销登录，响应 JSON 数据</span></span><br><span class="line">            response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">            response.getWriter().write(<span class="string">&quot;注销登录成功&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 以下配置等同于在 http.logout() 后配置 logoutSuccessUrl(&quot;/login/page?logout&quot;)</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 设置默认的重定向路径</span></span><br><span class="line">            <span class="built_in">super</span>.setDefaultTargetUrl(<span class="string">&quot;/login/page?logout&quot;</span>);</span><br><span class="line">            <span class="comment">// 调用父类的 onLogoutSuccess() 方法</span></span><br><span class="line">            <span class="built_in">super</span>.onLogoutSuccess(request, response, authentication);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringSecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomLogoutSuccessHandler logoutSuccessHandler;  <span class="comment">// 自定义成功注销登录处理器</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定制基于 HTTP 请求的用户访问控制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="comment">// 开启注销登录功能</span></span><br><span class="line">        http.logout()</span><br><span class="line">            <span class="comment">// 用户注销登录时访问的 url，默认为 /logout</span></span><br><span class="line">            .logoutUrl(<span class="string">&quot;/logout&quot;</span>)</span><br><span class="line">            <span class="comment">// 用户成功注销登录后重定向的地址，默认为 loginPage() + ?logout</span></span><br><span class="line">            <span class="comment">//.logoutSuccessUrl(&quot;/login/page?logout&quot;)</span></span><br><span class="line">            <span class="comment">// 不再使用 logoutSuccessUrl() 方法，使用自定义的成功注销登录处理器</span></span><br><span class="line">            .logoutSuccessHandler(logoutSuccessHandler)</span><br><span class="line">            <span class="comment">// 指定用户注销登录时删除的 Cookie</span></span><br><span class="line">            .deleteCookies(<span class="string">&quot;JSESSIONID&quot;</span>)</span><br><span class="line">            <span class="comment">// 用户注销登录时是否立即清除用户的 Session，默认为 true</span></span><br><span class="line">            .invalidateHttpSession(<span class="literal">true</span>)</span><br><span class="line">            <span class="comment">// 用户注销登录时是否立即清除用户认证信息 Authentication，默认为 true</span></span><br><span class="line">            .clearAuthentication(<span class="literal">true</span>);        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringSecurity</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringSecurity5（5-自定义短信、手机验证码）</title>
    <url>/blog/2025/02/08/Java/SpringSecurity/SpringSecurity5/SpringSecurity5%EF%BC%885-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9F%AD%E4%BF%A1%E3%80%81%E6%89%8B%E6%9C%BA%E9%AA%8C%E8%AF%81%E7%A0%81%EF%BC%89/</url>
    <content><![CDATA[<h2 id="图形验证码">图形验证码</h2>
<p>SpringSecurity 实现的用户名、密码登录是在 UsernamePasswordAuthenticationFilter 过滤器进行认证的，而图形验证码一般是在用户名、密码认证之前进行验证的，所以需要在 UsernamePasswordAuthenticationFilter 过滤器之前添加一个自定义过滤器 ImageCodeValidateFilter，用来校验用户输入的图形验证码是否正确。</p>
<h3 id="实现逻辑">实现逻辑</h3>
<p>自定义过滤器继承 OncePerRequestFilter 类，该类是 Spring 提供的在一次请求中只会调用一次的 filter，确保每个请求只会进入过滤器一次，避免了多次执行的情况</p>
<p>自定义的过滤器 ImageCodeValidateFilter 首先会判断请求是否为 POST 方式的登录表单提交请求，如果是就将其拦截进行图形验证码校验。如果验证错误，会抛出自定义异常类对象 ValidateCodeException，该异常类需要继承 AuthenticationException 类。在自定义过滤器中，我们需要手动捕获自定义异常类对象，并将捕获到自定义异常类对象交给自定义失败处理器进行处理</p>
<p><img src="1.png" alt=""></p>
<h3 id="添加验证码配置">添加验证码配置</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 图形验证码工具 kaptcha --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.penggle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kaptcha<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 图形验证码的配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KaptchaConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DefaultKaptcha <span class="title function_">captchaProducer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DefaultKaptcha</span> <span class="variable">defaultKaptcha</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultKaptcha</span>();</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">// 是否有边框</span></span><br><span class="line">        properties.setProperty(Constants.KAPTCHA_BORDER, <span class="string">&quot;yes&quot;</span>);</span><br><span class="line">        <span class="comment">// 边框颜色</span></span><br><span class="line">        properties.setProperty(Constants.KAPTCHA_BORDER_COLOR, <span class="string">&quot;192,192,192&quot;</span>);</span><br><span class="line">        <span class="comment">// 验证码图片的宽和高</span></span><br><span class="line">        properties.setProperty(Constants.KAPTCHA_IMAGE_WIDTH, <span class="string">&quot;110&quot;</span>);</span><br><span class="line">        properties.setProperty(Constants.KAPTCHA_IMAGE_HEIGHT, <span class="string">&quot;40&quot;</span>);</span><br><span class="line">        <span class="comment">// 验证码颜色</span></span><br><span class="line">        properties.setProperty(Constants.KAPTCHA_TEXTPRODUCER_FONT_COLOR, <span class="string">&quot;0,0,0&quot;</span>);</span><br><span class="line">        <span class="comment">// 验证码字体大小</span></span><br><span class="line">        properties.setProperty(Constants.KAPTCHA_TEXTPRODUCER_FONT_SIZE, <span class="string">&quot;32&quot;</span>);</span><br><span class="line">        <span class="comment">// 验证码生成几个字符</span></span><br><span class="line">        properties.setProperty(Constants.KAPTCHA_TEXTPRODUCER_CHAR_LENGTH, <span class="string">&quot;4&quot;</span>);</span><br><span class="line">        <span class="comment">// 验证码随机字符库</span></span><br><span class="line">        properties.setProperty(Constants.KAPTCHA_TEXTPRODUCER_CHAR_STRING, <span class="string">&quot;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYAZ&quot;</span>);</span><br><span class="line">        <span class="comment">// 验证码图片默认是有线条干扰的，我们设置成没有干扰</span></span><br><span class="line">        properties.setProperty(Constants.KAPTCHA_NOISE_IMPL, <span class="string">&quot;com.google.code.kaptcha.impl.NoNoise&quot;</span>);</span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>(properties);</span><br><span class="line">        defaultKaptcha.setConfig(config);</span><br><span class="line">        <span class="keyword">return</span> defaultKaptcha;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="提供验证码接口">提供验证码接口</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CheckCode</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String code;           <span class="comment">// 验证码字符</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime expireTime;  <span class="comment">// 过期时间</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code 验证码字符</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expireTime 过期时间，单位秒</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CheckCode</span><span class="params">(String code, <span class="type">int</span> expireTime)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.expireTime = LocalDateTime.now().plusSeconds(expireTime);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CheckCode</span><span class="params">(String code)</span> &#123;</span><br><span class="line">        <span class="comment">// 默认验证码 60 秒后过期</span></span><br><span class="line">        <span class="built_in">this</span>(code, <span class="number">60</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否过期</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isExpried</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.expireTime.isBefore(LocalDateTime.now());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Session 中存储图形验证码的属性名</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KAPTCHA_SESSION_KEY</span> <span class="operator">=</span> <span class="string">&quot;KAPTCHA_SESSION_KEY&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DefaultKaptcha defaultKaptcha;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/login/page&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/code/image&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">imageCode</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 创建验证码文本</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">capText</span> <span class="operator">=</span> defaultKaptcha.createText();</span><br><span class="line">        <span class="comment">// 创建验证码图片</span></span><br><span class="line">        <span class="type">BufferedImage</span> <span class="variable">image</span> <span class="operator">=</span> defaultKaptcha.createImage(capText);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将验证码文本放进 Session 中</span></span><br><span class="line">        <span class="type">CheckCode</span> <span class="variable">code</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CheckCode</span>(capText);</span><br><span class="line">        request.getSession().setAttribute(KAPTCHA_SESSION_KEY, code);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将验证码图片返回，禁止验证码图片缓存</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;Cache-Control&quot;</span>, <span class="string">&quot;no-store&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Pragma&quot;</span>, <span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">        response.setDateHeader(<span class="string">&quot;Expires&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">        ImageIO.write(image, <span class="string">&quot;jpg&quot;</span>, response.getOutputStream());</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>表单登录<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/login/form&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户名&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;密码&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;imageCode&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;验证码&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">th:onclick</span>=<span class="string">&quot;this.src=&#x27;/code/image?&#x27;+Math.random()&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/code/image&#125;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;验证码&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;param.error&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;session.SPRING_SECURITY_LAST_EXCEPTION.message&#125;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color:red&quot;</span>&gt;</span>用户名或密码错误<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="自定义验证码过滤器">自定义验证码过滤器</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义验证码校验错误的异常类，继承 AuthenticationException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValidateCodeException</span> <span class="keyword">extends</span> <span class="title class_">AuthenticationException</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ValidateCodeException</span><span class="params">(String msg, Throwable t)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(msg, t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ValidateCodeException</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImageCodeValidateFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">codeParamter</span> <span class="operator">=</span> <span class="string">&quot;imageCode&quot;</span>;  <span class="comment">// 前端输入的图形验证码参数名</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationFailureHandlerImpl authenticationFailureHandler;  <span class="comment">// 自定义认证失败处理器</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 非 POST 方式的表单提交请求不校验图形验证码</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;/login/form&quot;</span>.equals(request.getRequestURI()) &amp;&amp; <span class="string">&quot;POST&quot;</span>.equals(request.getMethod())) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 校验图形验证码合法性</span></span><br><span class="line">                validate(request);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ValidateCodeException e) &#123;</span><br><span class="line">                <span class="comment">// 手动捕获图形验证码校验过程抛出的异常，将其传给失败处理器进行处理</span></span><br><span class="line">                authenticationFailureHandler.onAuthenticationFailure(request, response, e);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 放行请求，进入下一个过滤器</span></span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断验证码的合法性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">validate</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取用户传入的图形验证码值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">requestCode</span> <span class="operator">=</span> request.getParameter(<span class="built_in">this</span>.codeParamter);</span><br><span class="line">        <span class="keyword">if</span>(requestCode == <span class="literal">null</span>) &#123;</span><br><span class="line">            requestCode = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        requestCode = requestCode.trim();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 Session</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="comment">// 获取存储在 Session 里的验证码值</span></span><br><span class="line">        <span class="type">CheckCode</span> <span class="variable">savedCode</span> <span class="operator">=</span> (CheckCode) session.getAttribute(LoginController.KAPTCHA_SESSION_KEY);</span><br><span class="line">        <span class="keyword">if</span> (savedCode != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 随手清除验证码，无论是失败，还是成功。客户端应在登录失败时刷新验证码</span></span><br><span class="line">            session.removeAttribute(LoginController.KAPTCHA_SESSION_KEY);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 校验出错，抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(requestCode)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ValidateCodeException</span>(<span class="string">&quot;验证码的值不能为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (savedCode == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ValidateCodeException</span>(<span class="string">&quot;验证码不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (savedCode.isExpried()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ValidateCodeException</span>(<span class="string">&quot;验证码过期&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!requestCode.equalsIgnoreCase(savedCode.getCode())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ValidateCodeException</span>(<span class="string">&quot;验证码输入错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDetailServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;root&quot;</span>.equals(username)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(username, passwordEncoder.encode(<span class="string">&quot;123&quot;</span>), AuthorityUtils.createAuthorityList(<span class="string">&quot;admin&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户名不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="设置过滤器顺序">设置过滤器顺序</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringSecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationSuccessHandlerImpl authenticationSuccessHandler;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationFailureHandlerImpl authenticationFailureHandler;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ImageCodeValidateFilter imageCodeValidateFilter; <span class="comment">// 自定义过滤器（图形验证码校验）</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailServiceImpl userDetailService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码编码器，密码不能明文存储</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> BCryptPasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 使用 BCryptPasswordEncoder 密码编码器，该编码器会将随机产生的 salt 混入最终生成的密文中</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        auth.userDetailsService(userDetailService).passwordEncoder(passwordEncoder());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定制基于 HTTP 请求的用户访问控制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 启动 form 表单登录</span></span><br><span class="line">        http.formLogin()</span><br><span class="line">            <span class="comment">// 设置登录页面的访问路径，默认为 /login，GET 请求；该路径不设限访问</span></span><br><span class="line">            .loginPage(<span class="string">&quot;/login/page&quot;</span>)</span><br><span class="line">            <span class="comment">// 设置登录表单提交路径，默认为 loginPage() 设置的路径，POST 请求</span></span><br><span class="line">            .loginProcessingUrl(<span class="string">&quot;/login/form&quot;</span>)</span><br><span class="line">            <span class="comment">// 使用自定义的认证成功和失败处理器</span></span><br><span class="line">            .successHandler(authenticationSuccessHandler)</span><br><span class="line">            .failureHandler(authenticationFailureHandler);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开启基于 HTTP 请求访问控制</span></span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">            <span class="comment">// 以下访问不需要任何权限，任何人都可以访问</span></span><br><span class="line">            .antMatchers(<span class="string">&quot;/login/page&quot;</span>, <span class="string">&quot;/code/image&quot;</span>).permitAll()</span><br><span class="line">            <span class="comment">// 其它任何请求访问都需要先通过认证</span></span><br><span class="line">            .anyRequest().authenticated();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭 csrf 防护</span></span><br><span class="line">        http.csrf().disable();</span><br><span class="line">        <span class="comment">// 将自定义过滤器（图形验证码校验）添加到 UsernamePasswordAuthenticationFilter 之前</span></span><br><span class="line">        http.addFilterBefore(imageCodeValidateFilter, UsernamePasswordAuthenticationFilter.class);        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定制一些全局性的安全配置，例如：不拦截静态资源的访问</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 静态资源的访问不需要拦截，直接放行</span></span><br><span class="line">        web.ignoring().antMatchers(<span class="string">&quot;/**/*.css&quot;</span>, <span class="string">&quot;/**/*.js&quot;</span>, <span class="string">&quot;/**/*.png&quot;</span>, <span class="string">&quot;/**/*.jpg&quot;</span>, <span class="string">&quot;/**/*.jpeg&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="手机短信验证码">手机短信验证码</h2>
<h3 id="验证流程">验证流程</h3>
<p>带有图形验证码的用户名、密码登录流程：</p>
<ol>
<li>在 ImageCodeValidateFilter 过滤器中校验用户输入的图形验证码是否正确。</li>
<li>在 UsernamePasswordAuthenticationFilter 过滤器中将 username 和 password 生成一个用于认证的 Token（UsernamePasswordAuthenticationToken），并将其传递给 ProviderManager 接口的实现类 AuthenticationManager。</li>
<li>AuthenticationManager 管理器寻找到一个合适的处理器 DaoAuthenticationProvider 来处理 UsernamePasswordAuthenticationToken。</li>
<li>DaoAuthenticationProvider 通过 UserDetailsService 接口的实现类 CustomUserDetailsService 从数据库中获取指定 username 的相关信息，并校验用户输入的 password。如果校验成功，那就认证通过，用户信息类对象 Authentication 标记为已认证。</li>
<li>认证通过后，将已认证的用户信息对象 Authentication 存储到 SecurityContextHolder 中，最终存储到 Session 中。</li>
</ol>
<p>仿照上述流程，我们分析手机短信验证码登录流程：</p>
<ol>
<li>仿照 ImageCodeValidateFilter 过滤器设计 MobileVablidateFilter 过滤器，该过滤器用来校验用户输入手机短信验证码。</li>
<li>仿照 UsernamePasswordAuthenticationFilter 过滤器设计 MobileAuthenticationFilter 过滤器，该过滤器将用户输入的手机号生成一个 Token（MobileAuthenticationToken），并将其传递给 ProviderManager 接口的实现类 AuthenticationManager。</li>
<li>AuthenticationManager 管理器寻找到一个合适的处理器 MobileAuthenticationProvider 来处理 MobileAuthenticationToken，该处理器是仿照 DaoAuthenticationProvider 进行设计的。</li>
<li>MobileAuthenticationProvider 通过 UserDetailsService 接口的实现类 MobileUserDetailsService 从数据库中获取指定手机号对应的用户信息，此处不需要进行任何校验，直接将用户信息类对象 Authentication 标记为已认证。</li>
<li>认证通过后，将已认证的用户信息对象 Authentication 存储到 SecurityContextHolder 中，最终存储到 Session 中，此处的操作不需要我们编写。</li>
</ol>
<p>最后通过自定义配置类 MobileAuthenticationConfig 组合上述组件，并添加到安全配置类 SpringSecurityConfig 中。</p>
<p><img src="2.png" alt=""></p>
<h3 id="提供短信发送接口">提供短信发送接口</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Session 中存储手机短信验证码的属性名</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MOBILE_SESSION_KEY</span> <span class="operator">=</span> <span class="string">&quot;MOBILE_SESSION_KEY&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/mobile/page&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">mobileLoginPage</span><span class="params">()</span> &#123;  <span class="comment">// 跳转到手机短信验证码登录页面</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login-mobile&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/code/mobile&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">sendMoblieCode</span><span class="params">(HttpServletRequest request)</span> &#123; </span><br><span class="line">        <span class="comment">// 随机生成一个 4 位的验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> RandomStringUtils.randomNumeric(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将手机验证码文本存储在 Session 中，设置过期时间为 10 * 60s</span></span><br><span class="line">        <span class="type">CheckCode</span> <span class="variable">mobileCode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CheckCode</span>(code, <span class="number">10</span> * <span class="number">60</span>);</span><br><span class="line">        request.getSession().setAttribute(MOBILE_SESSION_KEY, mobileCode);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> mobileCode;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://s3.pstatp.com/cdn/expire-1-M/jquery/3.3.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/mobile/form&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;mobile&quot;</span> <span class="attr">name</span>=<span class="string">&quot;mobile&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;手机号码&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;mobileCode&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;验证码&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sendCode&quot;</span>&gt;</span>获取验证码<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;param.error&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;session.SPRING_SECURITY_LAST_EXCEPTION.message&#125;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color:red&quot;</span>&gt;</span>用户名或密码错误<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取手机短信验证码</span></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&quot;#sendCode&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> mobile = $(<span class="string">&#x27;#mobile&#x27;</span>).<span class="title function_">val</span>().<span class="title function_">trim</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(mobile == <span class="string">&#x27;&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;手机号不能为空&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// /code/mobile?mobile=123123123</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> url = <span class="string">&quot;/code/mobile?mobile=&quot;</span> + mobile;</span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">get</span>(url, <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(data);</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="自定义短信验证码校验过滤器">自定义短信验证码校验过滤器</h3>
<p>更改自定义失败处理器 CustomAuthenticationFailureHandler，原先的处理器在认证失败时，会直接重定向到/login/page?error 显示认证异常信息。现在我们有两种登录方式，应该进行以下处理：</p>
<ol>
<li>带图形验证码的用户名、密码方式登录方式出现认证异常，重定向到/login/page?error</li>
<li>手机短信验证码方式登录出现认证异常，重定向到/mobile/page?error</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 继承 SimpleUrlAuthenticationFailureHandler 处理器，该类是 failureUrl() 方法使用的认证失败处理器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomAuthenticationFailureHandler</span> <span class="keyword">extends</span> <span class="title class_">SimpleUrlAuthenticationFailureHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAuthenticationFailure</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException e)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">xRequestedWith</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;x-requested-with&quot;</span>);</span><br><span class="line">        <span class="comment">// 判断前端的请求是否为 ajax 请求</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;XMLHttpRequest&quot;</span>.equals(xRequestedWith)) &#123;</span><br><span class="line">            <span class="comment">// 认证成功，响应 JSON 数据</span></span><br><span class="line">            response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">            response.getWriter().write(<span class="string">&quot;认证失败&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 用户名、密码方式登录出现认证异常，需要重定向到 /login/page?error</span></span><br><span class="line">            <span class="comment">// 手机短信验证码方式登录出现认证异常，需要重定向到 /mobile/page?error</span></span><br><span class="line">            <span class="comment">// 使用 Referer 获取当前登录表单提交请求是从哪个登录页面(/login/page 或 /mobile/page)链接过来的</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">refer</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Referer&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">lastUrl</span> <span class="operator">=</span> StringUtils.substringBefore(refer, <span class="string">&quot;?&quot;</span>);</span><br><span class="line">            <span class="comment">// 设置默认的重定向路径</span></span><br><span class="line">            <span class="built_in">super</span>.setDefaultFailureUrl(lastUrl + <span class="string">&quot;?error&quot;</span>);</span><br><span class="line">            <span class="comment">// 调用父类的 onAuthenticationFailure() 方法</span></span><br><span class="line">            <span class="built_in">super</span>.onAuthenticationFailure(request, response, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 手机短信验证码校验</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MobileCodeValidateFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">codeParamter</span> <span class="operator">=</span> <span class="string">&quot;mobileCode&quot;</span>;  <span class="comment">// 前端输入的手机短信验证码参数名</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomAuthenticationFailureHandler authenticationFailureHandler; <span class="comment">// 自定义认证失败处理器</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 非 POST 方式的手机短信验证码提交请求不进行校验</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;/mobile/form&quot;</span>.equals(request.getRequestURI()) &amp;&amp; <span class="string">&quot;POST&quot;</span>.equals(request.getMethod())) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 检验手机验证码的合法性</span></span><br><span class="line">                validate(request);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ValidateCodeException e) &#123;</span><br><span class="line">                <span class="comment">// 将异常交给自定义失败处理器进行处理</span></span><br><span class="line">                authenticationFailureHandler.onAuthenticationFailure(request, response, e);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 放行，进入下一个过滤器</span></span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检验用户输入的手机验证码的合法性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">validate</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取用户传入的手机验证码值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">requestCode</span> <span class="operator">=</span> request.getParameter(<span class="built_in">this</span>.codeParamter);</span><br><span class="line">        <span class="keyword">if</span>(requestCode == <span class="literal">null</span>) &#123;</span><br><span class="line">            requestCode = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        requestCode = requestCode.trim();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 Session</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="comment">// 获取 Session 中存储的手机短信验证码</span></span><br><span class="line">        <span class="type">CheckCode</span> <span class="variable">savedCode</span> <span class="operator">=</span> (CheckCode) session.getAttribute(LoginController.MOBILE_SESSION_KEY);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (savedCode != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 随手清除验证码，无论是失败，还是成功。客户端应在登录失败时刷新验证码</span></span><br><span class="line">            session.removeAttribute(LoginController.MOBILE_SESSION_KEY);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 校验出错，抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(requestCode)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ValidateCodeException</span>(<span class="string">&quot;验证码的值不能为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (savedCode == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ValidateCodeException</span>(<span class="string">&quot;验证码不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (savedCode.isExpried()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ValidateCodeException</span>(<span class="string">&quot;验证码过期&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!requestCode.equalsIgnoreCase(savedCode.getCode())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ValidateCodeException</span>(<span class="string">&quot;验证码输入错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="自定义短信验证码认证过滤器">自定义短信验证码认证过滤器</h3>
<ol>
<li>仿照 UsernamePasswordAuthenticationToken 类进行编写</li>
<li>仿照 UsernamePasswordAuthenticationFilter 过滤器进行编写</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MobileAuthenticationToken</span> <span class="keyword">extends</span> <span class="title class_">AbstractAuthenticationToken</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">520L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object principal;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 认证前，使用该构造器进行封装信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MobileAuthenticationToken</span><span class="params">(Object principal)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="literal">null</span>);     <span class="comment">// 用户权限为 null</span></span><br><span class="line">        <span class="built_in">this</span>.principal = principal;   <span class="comment">// 前端传入的手机号</span></span><br><span class="line">        <span class="built_in">this</span>.setAuthenticated(<span class="literal">false</span>); <span class="comment">// 标记为未认证</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 认证成功后，使用该构造器封装用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MobileAuthenticationToken</span><span class="params">(Object principal, Collection&lt;? extends GrantedAuthority&gt; authorities)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(authorities);          <span class="comment">// 用户权限集合</span></span><br><span class="line">        <span class="built_in">this</span>.principal = principal;  <span class="comment">// 封装认证用户信息的 UserDetails 对象，不再是手机号</span></span><br><span class="line">        <span class="built_in">super</span>.setAuthenticated(<span class="literal">true</span>); <span class="comment">// 标记认证成功</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getCredentials</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 由于使用手机短信验证码登录不需要密码，所以直接返回 null</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getPrincipal</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.principal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAuthenticated</span><span class="params">(<span class="type">boolean</span> isAuthenticated)</span> <span class="keyword">throws</span> IllegalArgumentException &#123;</span><br><span class="line">        <span class="keyword">if</span> (isAuthenticated) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Cannot set this token to trusted - use constructor which takes a GrantedAuthority list instead&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>.setAuthenticated(<span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eraseCredentials</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 手机短信验证码认证方式不必去除额外的敏感信息，所以直接调用父类方法</span></span><br><span class="line">        <span class="built_in">super</span>.eraseCredentials();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 手机短信验证码认证过滤器，仿照 UsernamePasswordAuthenticationFilter 过滤器编写</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MobileAuthenticationFilter</span> <span class="keyword">extends</span> <span class="title class_">AbstractAuthenticationProcessingFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">mobileParamter</span> <span class="operator">=</span> <span class="string">&quot;mobile&quot;</span>;  <span class="comment">// 默认手机号参数名为 mobile</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">postOnly</span> <span class="operator">=</span> <span class="literal">true</span>;    <span class="comment">// 默认请求方式只能为 POST</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">MobileAuthenticationFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 默认登录表单提交路径为 /mobile/form，POST 方式请求</span></span><br><span class="line">        <span class="built_in">super</span>(<span class="keyword">new</span> <span class="title class_">AntPathRequestMatcher</span>(<span class="string">&quot;/mobile/form&quot;</span>, <span class="string">&quot;POST&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Authentication <span class="title function_">attemptAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> AuthenticationException, IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">//(1) 默认情况下，如果请求方式不是 POST，会抛出异常</span></span><br><span class="line">        <span class="keyword">if</span>(postOnly &amp;&amp; !request.getMethod().equals(<span class="string">&quot;POST&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AuthenticationServiceException</span>(<span class="string">&quot;Authentication method not supported: &quot;</span> + request.getMethod());</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//(2) 获取请求携带的 mobile</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">mobile</span> <span class="operator">=</span> request.getParameter(mobileParamter);</span><br><span class="line">            <span class="keyword">if</span>(mobile == <span class="literal">null</span>) &#123;</span><br><span class="line">                mobile = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mobile = mobile.trim();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//(3) 使用前端传入的 mobile 构造 Authentication 对象，标记该对象未认证</span></span><br><span class="line">            <span class="comment">// MobileAuthenticationToken 是我们自定义的 Authentication 类，后续介绍</span></span><br><span class="line">            <span class="type">MobileAuthenticationToken</span> <span class="variable">authRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MobileAuthenticationToken</span>(mobile);</span><br><span class="line">            <span class="comment">//(4) 将请求中的一些属性信息设置到 Authentication 对象中，如：remoteAddress，sessionId</span></span><br><span class="line">            <span class="built_in">this</span>.setDetails(request, authRequest);</span><br><span class="line">            <span class="comment">//(5) 调用 ProviderManager 类的 authenticate() 方法进行身份认证</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.getAuthenticationManager().authenticate(authRequest);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">protected</span> String <span class="title function_">obtainMobile</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> request.getParameter(<span class="built_in">this</span>.mobileParamter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">setDetails</span><span class="params">(HttpServletRequest request, MobileAuthenticationToken authRequest)</span> &#123;</span><br><span class="line">        authRequest.setDetails(<span class="built_in">this</span>.authenticationDetailsSource.buildDetails(request));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMobileParameter</span><span class="params">(String mobileParamter)</span> &#123;</span><br><span class="line">        Assert.hasText(mobileParamter, <span class="string">&quot;Mobile par ameter must not be empty or null&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.mobileParamter = mobileParamter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPostOnly</span><span class="params">(<span class="type">boolean</span> postOnly)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.postOnly = postOnly;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMobileParameter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mobileParamter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="自定义短信验证码认证处理器">自定义短信验证码认证处理器</h3>
<ol>
<li>仿照 DaoAuthenticationProvider 处理器进行编写</li>
<li>MobileAuthenticationProvider 处理器传入的 UserDetailsService 对象的类型需要我们自定义</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MobileAuthenticationProvider</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationProvider</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">MessageSourceAccessor</span> <span class="variable">messages</span> <span class="operator">=</span> SpringSecurityMessageSource.getAccessor();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">UserDetailsChecker</span> <span class="variable">authenticationChecks</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MobileAuthenticationProvider</span>.DefaultAuthenticationChecks();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理认证</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Authentication <span class="title function_">authenticate</span><span class="params">(Authentication authentication)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        <span class="comment">//(1) 如果入参的 Authentication 类型不是 MobileAuthenticationToken，抛出异常</span></span><br><span class="line">        Assert.isInstanceOf(MobileAuthenticationToken.class, authentication, () -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.messages.getMessage(<span class="string">&quot;MobileAuthenticationProvider.onlySupports&quot;</span>, <span class="string">&quot;Only MobileAuthenticationToken is supported&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取手机号</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">mobile</span> <span class="operator">=</span> authentication.getPrincipal() == <span class="literal">null</span> ? <span class="string">&quot;NONE_PROVIDED&quot;</span> : authentication.getName();</span><br><span class="line">        <span class="comment">//(2) 根据手机号从数据库中查询用户信息</span></span><br><span class="line">        <span class="type">UserDetails</span> <span class="variable">user</span> <span class="operator">=</span> <span class="built_in">this</span>.userDetailsService.loadUserByUsername(mobile);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//(3) 未查询到用户信息，抛出异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AuthenticationServiceException</span>(<span class="string">&quot;该手机号未注册&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(4) 检查账号是否锁定、账号是否可用、账号是否过期、密码是否过期</span></span><br><span class="line">        <span class="built_in">this</span>.authenticationChecks.check(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(5) 查询到了用户信息，则认证通过，构建标记认证成功用户信息类对象 AuthenticationToken</span></span><br><span class="line">        <span class="type">MobileAuthenticationToken</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MobileAuthenticationToken</span>(user, user.getAuthorities());</span><br><span class="line">        <span class="comment">// 需要把认证前 Authentication 对象中的 details 信息加入认证后的 Authentication</span></span><br><span class="line">        result.setDetails(authentication.getDetails());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ProviderManager 管理器通过此方法来判断是否采用此 AuthenticationProvider 类</span></span><br><span class="line"><span class="comment">     * 来处理由 AuthenticationFilter 过滤器传入的 Authentication 对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(Class&lt;?&gt; authentication)</span> &#123;</span><br><span class="line">        <span class="comment">// isAssignableFrom 返回 true 当且仅当调用者为父类.class，参数为本身或者其子类.class</span></span><br><span class="line">        <span class="comment">// ProviderManager 会获取 MobileAuthenticationFilter 过滤器传入的 Authentication 类型</span></span><br><span class="line">        <span class="comment">// 所以当且仅当 authentication 的类型为 MobileAuthenticationToken 才返回 true</span></span><br><span class="line">        <span class="keyword">return</span> MobileAuthenticationToken.class.isAssignableFrom(authentication);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 此处传入自定义的 MobileUserDetailsSevice 对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDetailsService</span><span class="params">(UserDetailsService userDetailsService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDetailsService = userDetailsService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> UserDetailsService <span class="title function_">getUserDetailsService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userDetailsService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查账号是否锁定、账号是否可用、账号是否过期、密码是否过期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">DefaultAuthenticationChecks</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsChecker</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="title function_">DefaultAuthenticationChecks</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">check</span><span class="params">(UserDetails user)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!user.isAccountNonLocked()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">LockedException</span>(MobileAuthenticationProvider.<span class="built_in">this</span>.messages.getMessage(<span class="string">&quot;AbstractUserDetailsAuthenticationProvider.locked&quot;</span>, <span class="string">&quot;User account is locked&quot;</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!user.isEnabled()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DisabledException</span>(MobileAuthenticationProvider.<span class="built_in">this</span>.messages.getMessage(<span class="string">&quot;AbstractUserDetailsAuthenticationProvider.disabled&quot;</span>, <span class="string">&quot;User is disabled&quot;</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!user.isAccountNonExpired()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AccountExpiredException</span>(MobileAuthenticationProvider.<span class="built_in">this</span>.messages.getMessage(<span class="string">&quot;AbstractUserDetailsAuthenticationProvider.expired&quot;</span>, <span class="string">&quot;User account has expired&quot;</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!user.isCredentialsNonExpired()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CredentialsExpiredException</span>(MobileAuthenticationProvider.<span class="built_in">this</span>.messages.getMessage(<span class="string">&quot;AbstractUserDetailsAuthenticationProvider.credentialsExpired&quot;</span>, <span class="string">&quot;User credentials have expired&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MobileUserDetailsService</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String mobile)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        <span class="comment">//(1) 从数据库尝试读取该用户</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectByMobile(mobile);</span><br><span class="line">        <span class="comment">// 用户不存在，抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(2) 将数据库形式的 roles 解析为 UserDetails 的权限集合</span></span><br><span class="line">        <span class="comment">// AuthorityUtils.commaSeparatedStringToAuthorityList() 是 Spring Security 提供的方法，用于将逗号隔开的权限集字符串切割为可用权限对象列表</span></span><br><span class="line">        user.setAuthorities(AuthorityUtils.commaSeparatedStringToAuthorityList(user.getRoles()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(3) 返回 UserDetails 对象</span></span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="自定义短信验证码认证方式配置类">自定义短信验证码认证方式配置类</h3>
<ol>
<li>将上述组件进行管理，仿照 SecurityConfigurerAdapter类进行编写</li>
<li>绑定到最终的安全配置类 SpringSecurityConfig 中</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MobileAuthenticationConfig</span> <span class="keyword">extends</span> <span class="title class_">SecurityConfigurerAdapter</span>&lt;DefaultSecurityFilterChain, HttpSecurity&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomAuthenticationSuccessHandler customAuthenticationSuccessHandler;  <span class="comment">// 自定义认证成功处理器</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomAuthenticationFailureHandler customAuthenticationFailureHandler;  <span class="comment">// 自定义认证失败处理器</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MobileCodeValidateFilter mobileCodeValidaterFilter;  <span class="comment">// 手机短信验证码校验过滤器</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MobileUserDetailsService userDetailsService;  <span class="comment">// 手机短信验证方式的 UserDetail</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//(1) 将短信验证码认证的自定义过滤器绑定到 HttpSecurity 中</span></span><br><span class="line">        <span class="comment">//(1.1) 创建手机短信验证码认证过滤器的实例 filer</span></span><br><span class="line">        <span class="type">MobileAuthenticationFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MobileAuthenticationFilter</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(1.2) 设置 filter 使用 AuthenticationManager(ProviderManager 接口实现类) 认证管理器</span></span><br><span class="line">        <span class="comment">// 多种登录方式应该使用同一个认证管理器实例，所以获取 Spring 容器中已经存在的 AuthenticationManager 实例</span></span><br><span class="line">        <span class="type">AuthenticationManager</span> <span class="variable">authenticationManager</span> <span class="operator">=</span> http.getSharedObject(AuthenticationManager.class);</span><br><span class="line">        filter.setAuthenticationManager(authenticationManager);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(1.3) 设置 filter 使用自定义成功和失败处理器</span></span><br><span class="line">        filter.setAuthenticationSuccessHandler(customAuthenticationSuccessHandler);</span><br><span class="line">        filter.setAuthenticationFailureHandler(customAuthenticationFailureHandler);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(1.4) 设置 filter 使用 SessionAuthenticationStrategy 会话管理器</span></span><br><span class="line">        <span class="comment">// 多种登录方式应该使用同一个会话管理器实例，获取 Spring 容器已经存在的 SessionAuthenticationStrategy 实例</span></span><br><span class="line">        <span class="type">SessionAuthenticationStrategy</span> <span class="variable">sessionAuthenticationStrategy</span> <span class="operator">=</span> http.getSharedObject(SessionAuthenticationStrategy.class);</span><br><span class="line">        filter.setSessionAuthenticationStrategy(sessionAuthenticationStrategy);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(1.5) 在 UsernamePasswordAuthenticationFilter 过滤器之前添加 MobileCodeValidateFilter 过滤器</span></span><br><span class="line">        <span class="comment">// 在 UsernamePasswordAuthenticationFilter 过滤器之后添加 MobileAuthenticationFilter 过滤器</span></span><br><span class="line">        http.addFilterBefore(mobileCodeValidaterFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class="line">        http.addFilterAfter(filter, UsernamePasswordAuthenticationFilter.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(2) 将自定义的 MobileAuthenticationProvider 处理器绑定到 HttpSecurity 中</span></span><br><span class="line">        <span class="comment">//(2.1) 创建手机短信验证码认证过滤器的 AuthenticationProvider 实例，并指定所使用的 UserDetailsService</span></span><br><span class="line">        <span class="type">MobileAuthenticationProvider</span> <span class="variable">provider</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MobileAuthenticationProvider</span>();</span><br><span class="line">        provider.setUserDetailsService(userDetailsService);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(2.2) 将该 AuthenticationProvider 实例绑定到 HttpSecurity 中</span></span><br><span class="line">        http.authenticationProvider(provider);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringSecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailServiceImpl userDetailsService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomAuthenticationSuccessHandler authenticationSuccessHandler; <span class="comment">// 自定义认证成功处理器</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomAuthenticationFailureHandler authenticationFailureHandler; <span class="comment">// 自定义认证失败处理器</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ImageCodeValidateFilter imageCodeValidateFilter; <span class="comment">// 自定义过滤器（图形验证码校验）</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MobileAuthenticationConfig mobileAuthenticationConfig; <span class="comment">// 手机短信验证码认证方式的配置类</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码编码器，密码不能明文存储</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> BCryptPasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 使用 BCryptPasswordEncoder 密码编码器，该编码器会将随机产生的 salt 混入最终生成的密文中</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定制用户认证管理器来实现用户认证</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;       </span><br><span class="line">        <span class="comment">// 不再使用内存方式存储用户认证信息，而是动态从数据库中获取</span></span><br><span class="line">        auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定制基于 HTTP 请求的用户访问控制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 启动 form 表单登录</span></span><br><span class="line">        http.formLogin()</span><br><span class="line">            <span class="comment">// 设置登录页面的访问路径，默认为 /login，GET 请求；该路径不设限访问</span></span><br><span class="line">            .loginPage(<span class="string">&quot;/login/page&quot;</span>)</span><br><span class="line">            <span class="comment">// 设置登录表单提交路径，默认为 loginPage() 设置的路径，POST 请求</span></span><br><span class="line">            .loginProcessingUrl(<span class="string">&quot;/login/form&quot;</span>)</span><br><span class="line">            <span class="comment">// 使用自定义的认证成功和失败处理器</span></span><br><span class="line">            .successHandler(authenticationSuccessHandler)</span><br><span class="line">            .failureHandler(authenticationFailureHandler);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开启基于 HTTP 请求访问控制</span></span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">            <span class="comment">// 以下访问不需要任何权限，任何人都可以访问</span></span><br><span class="line">            .antMatchers(<span class="string">&quot;/login/page&quot;</span>, <span class="string">&quot;/code/image&quot;</span>,<span class="string">&quot;/mobile/page&quot;</span>, <span class="string">&quot;/code/mobile&quot;</span>).permitAll()</span><br><span class="line">            <span class="comment">// 其它任何请求访问都需要先通过认证</span></span><br><span class="line">            .anyRequest().authenticated();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭 csrf 防护</span></span><br><span class="line">        http.csrf().disable();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将自定义过滤器（图形验证码校验）添加到 UsernamePasswordAuthenticationFilter 之前</span></span><br><span class="line">        http.addFilterBefore(imageCodeValidateFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将手机短信验证码认证的配置与当前的配置绑定</span></span><br><span class="line">        http.apply(mobileAuthenticationConfig);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定制一些全局性的安全配置，例如：不拦截静态资源的访问</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 静态资源的访问不需要拦截，直接放行</span></span><br><span class="line">        web.ignoring().antMatchers(<span class="string">&quot;/**/*.css&quot;</span>, <span class="string">&quot;/**/*.js&quot;</span>, <span class="string">&quot;/**/*.png&quot;</span>, <span class="string">&quot;/**/*.jpg&quot;</span>, <span class="string">&quot;/**/*.jpeg&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringSecurity</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringSecurity5（8-权限注解）</title>
    <url>/blog/2025/02/15/Java/SpringSecurity/SpringSecurity5/SpringSecurity5%EF%BC%888-%E6%9D%83%E9%99%90%E6%B3%A8%E8%A7%A3%EF%BC%89/</url>
    <content><![CDATA[<h2 id="注解使用">注解使用</h2>
<p>Spring Security 默认是禁用注解的，要想开启注解，需要加上@EnableMethodSecurity 注解</p>
<ol>
<li>使用@Secured 需要在配置类中添加注解@EnableGlobalMethodSecurity(securedEnabled = true)才能生效</li>
<li>使用@PreAuthorize 和@PostAuthorize 需要在配置类中配置注解@EnableGlobalMethodSecurity(prePostEnable = true)才能生效</li>
</ol>
<h3 id="Secured">@Secured</h3>
<p>角色校验，请求到来访问控制单元方法时必须包含 XX 角色才能访问</p>
<p>注意：</p>
<ol>
<li>角色必须添加 ROLE_前缀</li>
<li>如果要求只有同时拥有 admin 和 user 的用户才能访问某个方法时，@Secured 就无能为力了</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDetailServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        <span class="keyword">if</span> (username.equals(<span class="string">&quot;root&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(username, passwordEncoder.encode(<span class="string">&quot;123&quot;</span>), AuthorityUtils.createAuthorityList(<span class="string">&quot;ROLE_read&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (username.equals(<span class="string">&quot;user&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(username, passwordEncoder.encode(<span class="string">&quot;123&quot;</span>), AuthorityUtils.createAuthorityList(<span class="string">&quot;ROLE_write&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(username, passwordEncoder.encode(<span class="string">&quot;123&quot;</span>), AuthorityUtils.createAuthorityList(<span class="string">&quot;read&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/read&quot;)</span></span><br><span class="line">    <span class="meta">@Secured(value = &#123;&quot;ROLE_read&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">read</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;read&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/write&quot;)</span></span><br><span class="line">    <span class="meta">@Secured(value = &#123;&quot;ROLE_write&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">write</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;write&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 错误实例</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/read2&quot;)</span></span><br><span class="line">    <span class="meta">@Secured(value = &#123;&quot;read&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">read2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;read2&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="PreAuthorize">@PreAuthorize</h3>
<p>权限校验，请求到来访问控制单元之前必须包含 XX 权限才能访问，控制单元方法执行前进行角色校验</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/read3&quot;)</span></span><br><span class="line">    <span class="meta">@PreAuthorize(value = &quot;hasRole(&#x27;ROLE_read&#x27;)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">read3</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;read3&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/read4&quot;)</span></span><br><span class="line">    <span class="meta">@PreAuthorize(value = &quot;hasAnyRole(&#x27;ROLE_read&#x27;,&#x27;ROLE_write&#x27;)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">read4</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;read4&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/read5&quot;)</span></span><br><span class="line">    <span class="meta">@PreAuthorize(value = &quot;hasAnyAuthority(&#x27;ROLE_read&#x27;,&#x27;read&#x27;)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">read5</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;read5&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>hasRole 与 hasAuthority 的区别</strong></p>
<ol>
<li>hasRole 的值会添加 ROLE_开头进行判断，而 hasAuthority 不会</li>
<li>其他方法判断一致</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">SecurityExpressionRoot</span> <span class="keyword">implements</span> <span class="title class_">SecurityExpressionOperations</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Authentication authentication;</span><br><span class="line">    <span class="keyword">private</span> AuthenticationTrustResolver trustResolver;</span><br><span class="line">    <span class="keyword">private</span> RoleHierarchy roleHierarchy;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; roles;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">defaultRolePrefix</span> <span class="operator">=</span> <span class="string">&quot;ROLE_&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Allows &quot;permitAll&quot; expression */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">permitAll</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Allows &quot;denyAll&quot; expression */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">denyAll</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> PermissionEvaluator permissionEvaluator;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">read</span> <span class="operator">=</span> <span class="string">&quot;read&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">write</span> <span class="operator">=</span> <span class="string">&quot;write&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">create</span> <span class="operator">=</span> <span class="string">&quot;create&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">delete</span> <span class="operator">=</span> <span class="string">&quot;delete&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">admin</span> <span class="operator">=</span> <span class="string">&quot;administration&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">hasAuthority</span><span class="params">(String authority)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> hasAnyAuthority(authority);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">hasAnyAuthority</span><span class="params">(String... authorities)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> hasAnyAuthorityName(<span class="literal">null</span>, authorities);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">hasRole</span><span class="params">(String role)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> hasAnyRole(role);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">hasAnyRole</span><span class="params">(String... roles)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> hasAnyAuthorityName(defaultRolePrefix, roles);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">hasAnyAuthorityName</span><span class="params">(String prefix, String... roles)</span> &#123;</span><br><span class="line">        Set&lt;String&gt; roleSet = getAuthoritySet();</span><br><span class="line">        <span class="keyword">for</span> (String role : roles) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">defaultedRole</span> <span class="operator">=</span> getRoleWithDefaultPrefix(prefix, role);</span><br><span class="line">            <span class="keyword">if</span> (roleSet.contains(defaultedRole)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ....</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getRoleWithDefaultPrefix</span><span class="params">(String defaultRolePrefix, String role)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (role == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> role;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (defaultRolePrefix == <span class="literal">null</span> || defaultRolePrefix.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> role;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断是否以 ROLE_开头</span></span><br><span class="line">        <span class="keyword">if</span> (role.startsWith(defaultRolePrefix)) &#123;</span><br><span class="line">            <span class="keyword">return</span> role;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> defaultRolePrefix + role;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="PostAuthorize">@PostAuthorize</h3>
<p>权限校验，请求到来访问控制单元之后必须包含 XX 权限才能访问，在方法执行后进行权限校验，适合验证带有返回值的权限</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostAuthorize(&quot;hasRole(&#x27;ROLE_管理员&#x27;)&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/toMain&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toMain</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/helloUser&quot;)</span></span><br><span class="line"><span class="meta">@PostAuthorize(&quot;returnObject!=null &amp;&amp; returnObject.username == authentication.name&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">helloUser</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">pricipal</span> <span class="operator">=</span> SecurityContextHolder.getContext().getAuthentication().getPrincipal();</span><br><span class="line">    User user;</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&quot;anonymousUser&quot;</span>.equals(pricipal)) &#123;</span><br><span class="line">        user = <span class="literal">null</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        user = (User) pricipal;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="PreFilter">@PreFilter</h3>
<p>对传递参数值做过滤</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/preFilter&quot;)</span></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;hasAnyAuthority(&#x27;admin&#x27;,&#x27;update&#x27;)&quot;)</span> <span class="comment">// 注意单引号</span></span><br><span class="line"><span class="meta">@PreFilter(&quot;filterObject.id % 2 == 0&quot;)</span> <span class="comment">// id 为偶数才能请求</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">preFilter</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;User&gt; userLists)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;=== 进入当前 preFilter ====&quot;</span>);</span><br><span class="line">    log.info(userLists.toString());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;security test 5  preFilter  需要验证的接口&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="PostFilter">@PostFilter</h3>
<p>权限验证通过后，留下指定用户名的数据，对返回数据做过滤</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/postFilter&quot;)</span></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;hasAnyAuthority(&#x27;admin&#x27;,&#x27;update&#x27;)&quot;)</span> <span class="comment">// 注意单引号</span></span><br><span class="line"><span class="meta">@PostFilter(&quot;filterObject.username == &#x27;xiangjiao&#x27;&quot;)</span> <span class="comment">// 针对返回数据做过滤</span></span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">postFilter</span><span class="params">()</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;=== 进入当前 postFilter ====&quot;</span>);</span><br><span class="line">    List&lt;User&gt; userLists = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    userLists.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>,<span class="string">&quot;xiangjiao&quot;</span>,<span class="string">&quot;bunana&quot;</span>,<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line">    userLists.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2</span>,<span class="string">&quot;xiangjiao2&quot;</span>,<span class="string">&quot;bunana2&quot;</span>,<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">return</span> userLists;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="使用注意">使用注意</h3>
<ol>
<li>使用@EnableGlobalMethodSecurity 开启注解支持后，用户必须实现 UserDetailsService 方法，使用 auth.inMemoryAuthentication()内存管理用户信息会失效</li>
<li>如果注解要使用 permitAll()、isAnonymous()等方法时，需要在 config 方法中取消.anyRequest().authenticated()的设置，否则会无效。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled=true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyWebSecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BCryptPasswordEncoder bCryptPasswordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.cors()</span><br><span class="line">            .and()</span><br><span class="line">            .csrf().disable();</span><br><span class="line">        <span class="comment">// 下面需注释，否则注解无效，生效的是这里的配置</span></span><br><span class="line">            <span class="comment">/*.authorizeRequests()</span></span><br><span class="line"><span class="comment">        	.anyRequest()</span></span><br><span class="line"><span class="comment">        	.authenticated(); */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        auth.userDetailsService(userDetailsService)</span><br><span class="line">        	.passwordEncoder(bCryptPasswordEncoder);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/read3&quot;)</span></span><br><span class="line">    <span class="meta">@PreAuthorize(value = &quot;hasRole(&#x27;ROLE_read&#x27;)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">read3</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;read3&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/read4&quot;)</span></span><br><span class="line">    <span class="meta">@PreAuthorize(value = &quot;hasAnyRole(&#x27;ROLE_read&#x27;,&#x27;ROLE_write&#x27;)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">read4</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;read4&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/read5&quot;)</span></span><br><span class="line">    <span class="meta">@PreAuthorize(value = &quot;hasAnyAuthority(&#x27;ROLE_read&#x27;,&#x27;read&#x27;)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">read5</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;read5&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/isAnonymous&quot;)</span></span><br><span class="line">    <span class="meta">@PreAuthorize(value = &quot;isAnonymous()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">isAnonymous</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;isAnonymous&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="注解方法">注解方法</h2>
<ol>
<li>hasAuthority(String)：判断角色是否具有特定权限</li>
</ol>
<p>http.authorizeRequests().antMatchers(“/main1.html”).hasAuthority(“admin”)</p>
<ol start="2">
<li>hasAnyAuthority(String …)：如果用户具备给定权限中某一个，就允许访问</li>
</ol>
<p>http.authorizeRequests().antMatchers(“/admin/read”).hasAnyAuthority(“xxx”, “xxx”)</p>
<ol start="3">
<li>hasRole(String)：如果用户具备给定角色就允许访问，否则出现 403</li>
</ol>
<p>http.authorizeRequests().antMatchers(“/admin/read”).hasRole(“ROLE_管理员”)</p>
<ol start="4">
<li>hasAnyRole(String …)：如果用户具备给定角色的任意一个，就允许被访问</li>
</ol>
<p>http.authorizeRequests().antMatchers(“/guest/read”).hasAnyRole(“ROLE_管理员”, “ROLE_访客”)</p>
<ol start="5">
<li>hasIpAddress(String)：请求是指定的 IP 就允许访问</li>
</ol>
<p>http.authorizeRequests().antMatchers(“/ip”).hasIpAddress(“127.0.0.1”)</p>
<ol start="6">
<li>permitAll()：允许所有人（可无任何权限）访问</li>
<li>denyAll()：不允许任何（即使有最大权限）访问。</li>
<li>isAnonymous()：为可匿名（不登录）访问。</li>
<li>isAuthenticated()：为身份证认证后访问。</li>
<li>isRememberMe()：为记住我用户操作访问。</li>
<li>isFullyAuthenticated()：为非匿名且非记住我用户允许访问</li>
</ol>
<h2 id="JSR-250-注解">JSR-250 注解</h2>
<p>注意：使用 JSR-250 注解需要设置@EnableGlobalMethodSecurity(jsr250Enabled = true)才能使用</p>
<ol>
<li>@DenyAll</li>
<li>@PermitAll</li>
<li>@RolesAllowed</li>
</ol>
<p>例如：@RolesAllowed({“USER”, “ADMIN”})，代表标注的方法只要具有 USER、ADMIN 任意一种权限就可以访问</p>
<h2 id="使用案例">使用案例</h2>
<h3 id="自定义权限校验">自定义权限校验</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">TestPermissionEvaluator</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(Authentication authentication)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service(&quot;testPermissionEvaluator&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPermissionEvaluatorImpl</span> <span class="keyword">implements</span> <span class="title class_">TestPermissionEvaluator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(Authentication authentication)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;进入了自定义的匹配器&quot;</span> + authentication);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PreAuthorize(&quot;@testPermissionEvaluator.check(authentication)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test0</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;说明你有自定义权限&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="权限异常处理">权限异常处理</h3>
<h4 id="AuthenticationEntryPoint">AuthenticationEntryPoint</h4>
<p>用来解决匿名用户访问无权限资源时的异常</p>
<p>注意：使用 AuthenticationEntryPoint 会导致原来的/login 登录页面失效</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomAuthenticationEntryPoint</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationEntryPoint</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commence</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class="line"><span class="params">            AuthenticationException authException)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/javascript;charset=utf-8&quot;</span>);</span><br><span class="line">        response.getWriter().print(JSONObject.toJSONString(RestMsg.error(<span class="string">&quot;没有访问权限!&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="AccessDeniedHandler">AccessDeniedHandler</h4>
<p>用来解决认证过的用户访问无权限资源时的异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAccessDeniedHandler</span> <span class="keyword">implements</span> <span class="title class_">AccessDeniedHandler</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AccessDeniedException e)</span> </span><br><span class="line">            <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        response.setStatus(HttpServletResponse.SC_OK);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        response.getWriter().write(</span><br><span class="line">                <span class="string">&quot;&lt;html&gt;&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;body&gt;&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;div style=&#x27;width:800px;text-align:center;margin:auto;font-size:24px&#x27;&gt;&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;权限不足，请联系管理员&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;/div&gt;&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;/body&gt;&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;/html&gt;&quot;</span></span><br><span class="line">        );</span><br><span class="line">        response.getWriter().flush();<span class="comment">//刷新缓冲区</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="SecurityConfig-配置">SecurityConfig 配置</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled=true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyWebSecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BCryptPasswordEncoder bCryptPasswordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.cors()</span><br><span class="line">            .and()</span><br><span class="line">            .csrf().disable()</span><br><span class="line">            .authorizeRequests()</span><br><span class="line">            .antMatchers(<span class="string">&quot;/user/sign&quot;</span>).permitAll()</span><br><span class="line">            .anyRequest()</span><br><span class="line">            .authenticated();</span><br><span class="line">             </span><br><span class="line">        <span class="comment">//添加自定义异常入口</span></span><br><span class="line">        http.exceptionHandling()</span><br><span class="line">            .authenticationEntryPoint(<span class="keyword">new</span> <span class="title class_">CustomAuthenticationEntryPoint</span>())</span><br><span class="line">            .accessDeniedHandler(<span class="keyword">new</span> <span class="title class_">CustomAccessDeineHandler</span>());       </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        auth.userDetailsService(userDetailsService)</span><br><span class="line">        	.passwordEncoder(bCryptPasswordEncoder);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringSecurity</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringSecurity5（9-JWT整合）</title>
    <url>/blog/2025/02/16/Java/SpringSecurity/SpringSecurity5/SpringSecurity5%EF%BC%889-JWT%E6%95%B4%E5%90%88%EF%BC%89/</url>
    <content><![CDATA[<h2 id="依赖配置">依赖配置</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.axet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kaptcha<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.7.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="自定义全局返回结果">自定义全局返回结果</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">succ</span><span class="params">(Object data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> succ(<span class="number">200</span>, <span class="string">&quot;操作成功&quot;</span>, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">fail</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fail(<span class="number">400</span>, msg, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">succ</span> <span class="params">(<span class="type">int</span> code, String msg, Object data)</span> &#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Result</span>();</span><br><span class="line">        result.setCode(code);</span><br><span class="line">        result.setMsg(msg);</span><br><span class="line">        result.setData(data);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">fail</span> <span class="params">(<span class="type">int</span> code, String msg, Object data)</span> &#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Result</span>();</span><br><span class="line">        result.setCode(code);</span><br><span class="line">        result.setMsg(msg);</span><br><span class="line">        result.setData(data);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="JWT-配置类">JWT 配置类</h2>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">jwt:</span></span><br><span class="line">  <span class="attr">header:</span> <span class="string">Authorization</span></span><br><span class="line">  <span class="attr">expire:</span> <span class="number">604800</span>  <span class="comment">#7天，s为单位</span></span><br><span class="line">  <span class="attr">secret:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;jwt&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtils</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> expire;</span><br><span class="line">    <span class="keyword">private</span> String secret;</span><br><span class="line">    <span class="keyword">private</span> String header;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成 JWT</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">generateToken</span><span class="params">(String username)</span>&#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">nowDate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">Date</span> <span class="variable">expireDate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(nowDate.getTime() + <span class="number">1000</span> * expire);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> Jwts.builder()</span><br><span class="line">                .setHeaderParam(<span class="string">&quot;typ&quot;</span>,<span class="string">&quot;JWT&quot;</span>)</span><br><span class="line">                .setSubject(username)</span><br><span class="line">                .setIssuedAt(nowDate)</span><br><span class="line">                .setExpiration(expireDate)  <span class="comment">//7 天过期</span></span><br><span class="line">                .signWith(SignatureAlgorithm.HS512,secret)</span><br><span class="line">                .compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析 JWT</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jwt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Claims <span class="title function_">getClaimsByToken</span><span class="params">(String jwt)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Jwts.parser()</span><br><span class="line">                    .setSigningKey(secret)</span><br><span class="line">                    .parseClaimsJws(jwt)</span><br><span class="line">                    .getBody();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断 JWT 是否过期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> claims</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isTokenExpired</span><span class="params">(Claims claims)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> claims.getExpiration().before(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="自定义登录处理器">自定义登录处理器</h2>
<p>登录失败后，我们需要向前端发送错误信息，登录成功后，我们需要生成 JWT，并将 JWT 返回给前端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登录成功控制器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginSuccessHandler</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationSuccessHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtUtils jwtUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAuthenticationSuccess</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Authentication authentication)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        httpServletResponse.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> httpServletResponse.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//生成 JWT，并放置到请求头中</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> jwtUtils.generateToken(authentication.getName());</span><br><span class="line">        httpServletResponse.setHeader(jwtUtils.getHeader(), jwt);</span><br><span class="line"></span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> Result.succ(<span class="string">&quot;SuccessLogin&quot;</span>);</span><br><span class="line">        outputStream.write(JSONUtil.toJsonStr(result).getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        outputStream.flush();</span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登录失败控制器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginFailureHandler</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationFailureHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAuthenticationFailure</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AuthenticationException e)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        httpServletResponse.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> httpServletResponse.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">errorMessage</span> <span class="operator">=</span> <span class="string">&quot;用户名或密码错误&quot;</span>;</span><br><span class="line">        Result result;</span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> CaptchaException) &#123;</span><br><span class="line">            errorMessage = <span class="string">&quot;验证码错误&quot;</span>;</span><br><span class="line">            result = Result.fail(errorMessage);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result = Result.fail(errorMessage);</span><br><span class="line">        &#125;</span><br><span class="line">        outputStream.write(JSONUtil.toJsonStr(result).getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        outputStream.flush();</span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="自定义登出处理器">自定义登出处理器</h2>
<p>在用户退出登录时，我们需将原来的 JWT 置为空返给前端，这样前端会将空字符串覆盖之前的 jwt，JWT 是无状态化的，销毁 JWT 是做不到的，JWT 生成之后，只有等 JWT 过期之后，才会失效。因此我们采取置空策略来清除浏览器中保存的 JWT。同时我们还要将我们之前置入 SecurityContext 中的用户信息进行清除，这可以通过创建 SecurityContextLogoutHandler 对象，调用它的 logout 方法完成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登出处理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JWTLogoutSuccessHandler</span> <span class="keyword">implements</span> <span class="title class_">LogoutSuccessHandler</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtUtils jwtUtils;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onLogoutSuccess</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="keyword">if</span> (authentication!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">SecurityContextLogoutHandler</span>().logout(httpServletRequest, httpServletResponse, authentication);</span><br><span class="line">        &#125;</span><br><span class="line">        httpServletResponse.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> httpServletResponse.getOutputStream();</span><br><span class="line">        </span><br><span class="line">        httpServletResponse.setHeader(jwtUtils.getHeader(), <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> Result.succ(<span class="string">&quot;SuccessLogout&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        outputStream.write(JSONUtil.toJsonStr(result).getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        outputStream.flush();</span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="验证码配置">验证码配置</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CaptchaException</span> <span class="keyword">extends</span> <span class="title class_">AuthenticationException</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CaptchaException</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证码配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KaptchaConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DefaultKaptcha <span class="title function_">producer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.put(<span class="string">&quot;kaptcha.border&quot;</span>, <span class="string">&quot;no&quot;</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;kaptcha.textproducer.font.color&quot;</span>, <span class="string">&quot;black&quot;</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;kaptcha.textproducer.char.space&quot;</span>, <span class="string">&quot;4&quot;</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;kaptcha.image.height&quot;</span>, <span class="string">&quot;40&quot;</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;kaptcha.image.width&quot;</span>, <span class="string">&quot;120&quot;</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;kaptcha.textproducer.font.size&quot;</span>, <span class="string">&quot;30&quot;</span>);</span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>(properties);</span><br><span class="line">        <span class="type">DefaultKaptcha</span> <span class="variable">defaultKaptcha</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultKaptcha</span>();</span><br><span class="line">        defaultKaptcha.setConfig(config);</span><br><span class="line">        <span class="keyword">return</span> defaultKaptcha;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CaptchaController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Producer producer;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisUtil redisUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/captcha&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">imageCode</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> producer.createText();</span><br><span class="line">        <span class="type">BufferedImage</span> <span class="variable">image</span> <span class="operator">=</span> producer.createImage(code);</span><br><span class="line"></span><br><span class="line">        redisUtil.set(<span class="string">&quot;captcha&quot;</span>, code, <span class="number">120</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将验证码图片返回，禁止验证码图片缓存</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;Cache-Control&quot;</span>, <span class="string">&quot;no-store&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Pragma&quot;</span>, <span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">        response.setDateHeader(<span class="string">&quot;Expires&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">        ImageIO.write(image, <span class="string">&quot;jpg&quot;</span>, response.getOutputStream());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="自定义过滤器">自定义过滤器</h2>
<p>OncePerRequestFilter：在每次请求时只执行一次过滤，保证一次请求只通过一次 filter，而不需要重复执行</p>
<p>因为验证码是一次性使用的，一个验证码对应一个用户的一次登录过程，所以需用 hdel 将存储的 key 删除。当校验失败时，则交给登录认证失败处理器 LoginFailureHandler 进行处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证码过滤器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CaptchaFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisUtil redisUtil;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoginFailureHandler loginFailureHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> httpServletRequest.getRequestURI();</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;/login/form&quot;</span>.equals(url) &amp;&amp; httpServletRequest.getMethod().equals(<span class="string">&quot;POST&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">//校验验证码</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                validate(httpServletRequest);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (CaptchaException e) &#123;</span><br><span class="line">                <span class="comment">//交给认证失败处理器</span></span><br><span class="line">                loginFailureHandler.onAuthenticationFailure(httpServletRequest, httpServletResponse, e);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        filterChain.doFilter(httpServletRequest, httpServletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">validate</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;code&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(code)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CaptchaException</span>(<span class="string">&quot;验证码错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">captcha</span> <span class="operator">=</span> (String) redisUtil.get(<span class="string">&quot;captcha&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!code.equals(captcha)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CaptchaException</span>(<span class="string">&quot;验证码错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//若验证码正确，执行以下语句，一次性使用</span></span><br><span class="line">        redisUtil.del(<span class="string">&quot;captcha&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>login.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>表单登录<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/login/form&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户名&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;密码&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;code&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;验证码&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">th:onclick</span>=<span class="string">&quot;this.src=&#x27;/captcha?&#x27;+Math.random()&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/captcha&#125;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;验证码&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;param.error&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;session.SPRING_SECURITY_LAST_EXCEPTION.message&#125;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color:red&quot;</span>&gt;</span>用户名或密码错误<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>BasicAuthenticationFilter：OncePerRequestFilter 执行完后，由 BasicAuthenticationFilter 检测和处理 http basic 认证，取出请求头中的 jwt，校验 jwt</p>
<ol>
<li>
<p>当前端发来的请求有 JWT 信息时，该过滤器将检验 JWT 是否正确以及是否过期，若检验成功，则获取 JWT 中的用户名信息，检索数据库获得用户实体类，并将用户信息告知 Spring Security，后续我们就能调用 security 的接口获取到当前登录的用户信息。</p>
</li>
<li>
<p>若前端发的请求不含 JWT，我们也不能拦截该请求，因为一般的项目都是允许匿名访问的，有的接口允许不登录就能访问，没有 JWT 也放行是安全的，因为我们可以通过 Spring Security 进行权限管理，设置一些接口需要权限才能访问，不允许匿名访问</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JWT 过滤器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtAuthenticationFilter</span> <span class="keyword">extends</span> <span class="title class_">BasicAuthenticationFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtUtils jwtUtils;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailServiceImpl userDetailService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JwtAuthenticationFilter</span><span class="params">(AuthenticationManager authenticationManager)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(authenticationManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> request.getHeader(jwtUtils.getHeader());</span><br><span class="line">        <span class="comment">//这里如果没有 jwt，继续往后走，因为后面还有鉴权管理器等去判断是否拥有身份凭证，所以是可以放行的</span></span><br><span class="line">        <span class="comment">//没有 jwt 相当于匿名访问，若有一些接口是需要权限的，则不能访问这些接口</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlankOrUndefined(jwt)) &#123;</span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claim</span> <span class="operator">=</span> jwtUtils.getClaimsByToken(jwt);</span><br><span class="line">        <span class="keyword">if</span> (claim == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JwtException</span>(<span class="string">&quot;token异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (jwtUtils.isTokenExpired(claim)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JwtException</span>(<span class="string">&quot;token已过期&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> claim.getSubject();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> UserDetailServiceImpl.userMap.get(username);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构建 token，这里密码为 null，是因为提供了正确的 JWT，实现自动登录</span></span><br><span class="line">        <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">token</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(username, <span class="literal">null</span>, userDetailService.getUserAuthority(user.getId()));</span><br><span class="line">        SecurityContextHolder.getContext().setAuthentication(token);</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="自定义权限异常处理器">自定义权限异常处理器</h2>
<p>当 BasicAuthenticationFilter 认证失败的时候会进入 AuthenticationEntryPoint</p>
<p>我们之前放行了匿名请求，但有的接口是需要权限的，当用户权限不足时，会进入 AccessDenieHandler 进行处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JWT 认证失败处理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtAuthenticationEntryPoint</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationEntryPoint</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commence</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AuthenticationException e)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        httpServletResponse.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">        httpServletResponse.setStatus(HttpServletResponse.SC_UNAUTHORIZED);</span><br><span class="line">        <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> httpServletResponse.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> Result.fail(<span class="string">&quot;请先登录&quot;</span>);</span><br><span class="line">        outputStream.write(JSONUtil.toJsonStr(result).getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        outputStream.flush();</span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 无权限访问的处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtAccessDeniedHandler</span> <span class="keyword">implements</span> <span class="title class_">AccessDeniedHandler</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AccessDeniedException e)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        httpServletResponse.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">        httpServletResponse.setStatus(HttpServletResponse.SC_FORBIDDEN);</span><br><span class="line">        <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> httpServletResponse.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> Result.fail(e.getMessage());</span><br><span class="line">        </span><br><span class="line">        outputStream.write(JSONUtil.toJsonStr(result).getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        outputStream.flush();</span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="自定义用户登录逻辑">自定义用户登录逻辑</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountUser</span> <span class="keyword">implements</span> <span class="title class_">UserDetails</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">540L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Log</span> <span class="variable">logger</span> <span class="operator">=</span> LogFactory.getLog(User.class);</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; authorities;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">boolean</span> accountNonExpired;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">boolean</span> accountNonLocked;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">boolean</span> credentialsNonExpired;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">boolean</span> enabled;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AccountUser</span><span class="params">(Long userId, String username, String password, Collection&lt;? extends GrantedAuthority&gt; authorities)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(userId, username, password, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, authorities);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AccountUser</span><span class="params">(Long userId, String username, String password, <span class="type">boolean</span> enabled, <span class="type">boolean</span> accountNonExpired, <span class="type">boolean</span> credentialsNonExpired, <span class="type">boolean</span> accountNonLocked, Collection&lt;? extends GrantedAuthority&gt; authorities)</span> &#123;</span><br><span class="line">        Assert.isTrue(username != <span class="literal">null</span> &amp;&amp; !<span class="string">&quot;&quot;</span>.equals(username) &amp;&amp; password != <span class="literal">null</span>, <span class="string">&quot;Cannot pass null or empty values to constructor&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.userId = userId;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">        <span class="built_in">this</span>.enabled = enabled;</span><br><span class="line">        <span class="built_in">this</span>.accountNonExpired = accountNonExpired;</span><br><span class="line">        <span class="built_in">this</span>.credentialsNonExpired = credentialsNonExpired;</span><br><span class="line">        <span class="built_in">this</span>.accountNonLocked = accountNonLocked;</span><br><span class="line">        <span class="built_in">this</span>.authorities = authorities;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.authorities;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.accountNonExpired;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonLocked</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.accountNonLocked;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCredentialsNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.credentialsNonExpired;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEnabled</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.enabled;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDetailServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, User&gt; userMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        userMap.put(<span class="string">&quot;root&quot;</span>, <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;root&quot;</span>, <span class="string">&quot;123&quot;</span>, AuthorityUtils.createAuthorityList(<span class="string">&quot;all&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String s)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMap.get(s);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AccountUser</span>(<span class="number">1L</span>, user.getUsername(), passwordEncoder.encode(user.getPassword()), user.getAuthorities());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PasswordEncoder</span> <span class="keyword">extends</span> <span class="title class_">BCryptPasswordEncoder</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> charSequence  明文字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">encode</span><span class="params">(CharSequence charSequence)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">MessageDigest</span> <span class="variable">digest</span> <span class="operator">=</span> MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> toHexString(digest.digest(charSequence.toString().getBytes()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码校验</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> charSequence 明文，页面收集密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s 密文 ，数据库中存放密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(CharSequence charSequence, String s)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> s.equals(encode(charSequence));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tmp 转 16 进制字节数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 饭回 16 进制字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">toHexString</span><span class="params">(<span class="type">byte</span> [] tmp)</span>&#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">byte</span> b :tmp)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> Integer.toHexString(b &amp; <span class="number">0xFF</span>);</span><br><span class="line">            <span class="keyword">if</span> (s.length()==<span class="number">1</span>)&#123;</span><br><span class="line">                builder.append(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            builder.append(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> builder.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    LoginFailureHandler loginFailureHandler;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    LoginSuccessHandler loginSuccessHandler;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    CaptchaFilter captchaFilter;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JwtAuthenticationEntryPoint jwtAuthenticationEntryPoint;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JwtAccessDeniedHandler jwtAccessDeniedHandler;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserDetailServiceImpl userDetailService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JWTLogoutSuccessHandler jwtLogoutSuccessHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    JwtAuthenticationFilter <span class="title function_">jwtAuthenticationFilter</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">JwtAuthenticationFilter</span> <span class="variable">jwtAuthenticationFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JwtAuthenticationFilter</span>(authenticationManager());</span><br><span class="line">        <span class="keyword">return</span> jwtAuthenticationFilter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] URL_WHITELIST = &#123;</span><br><span class="line">            <span class="string">&quot;/login&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/logout&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/captcha&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/favicon.ico&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoderImpl <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PasswordEncoderImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.cors()</span><br><span class="line">            .and()</span><br><span class="line">            .csrf().disable()</span><br><span class="line">            <span class="comment">//登录配置</span></span><br><span class="line">            .formLogin()</span><br><span class="line">            .loginPage(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">            .loginProcessingUrl(<span class="string">&quot;/login/form&quot;</span>)</span><br><span class="line">            .successHandler(loginSuccessHandler)</span><br><span class="line">            .failureHandler(loginFailureHandler)</span><br><span class="line"></span><br><span class="line">            .and()</span><br><span class="line">            .logout()</span><br><span class="line">            .logoutSuccessHandler(jwtLogoutSuccessHandler)</span><br><span class="line"></span><br><span class="line">            <span class="comment">//禁用 session</span></span><br><span class="line">            .and()</span><br><span class="line">            .sessionManagement()</span><br><span class="line">            .sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line"></span><br><span class="line">            <span class="comment">//配置拦截规则</span></span><br><span class="line">            .and()</span><br><span class="line">            .authorizeRequests()</span><br><span class="line">            .antMatchers(URL_WHITELIST).permitAll()</span><br><span class="line">            .anyRequest().authenticated()</span><br><span class="line"></span><br><span class="line">            <span class="comment">//异常处理器</span></span><br><span class="line">            .and()</span><br><span class="line">            .exceptionHandling()</span><br><span class="line">            .authenticationEntryPoint(jwtAuthenticationEntryPoint)</span><br><span class="line">            .accessDeniedHandler(jwtAccessDeniedHandler)</span><br><span class="line"></span><br><span class="line">            <span class="comment">//配置自定义的过滤器</span></span><br><span class="line">            .and()</span><br><span class="line">            .addFilter(jwtAuthenticationFilter())</span><br><span class="line">            <span class="comment">//验证码过滤器放在 UsernamePassword 过滤器之前</span></span><br><span class="line">            .addFilterBefore(captchaFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        auth.userDetailsService(userDetailService)</span><br><span class="line">            .passwordEncoder(passwordEncoder());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定制一些全局性的安全配置，例如：不拦截静态资源的访问</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 静态资源的访问不需要拦截，直接放行</span></span><br><span class="line">        web.ignoring().antMatchers(<span class="string">&quot;/**/*.css&quot;</span>, <span class="string">&quot;/**/*.js&quot;</span>, <span class="string">&quot;/**/*.png&quot;</span>, <span class="string">&quot;/**/*.jpg&quot;</span>, <span class="string">&quot;/**/*.jpeg&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringSecurity</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS（1-基本概念）</title>
    <url>/blog/2025/04/17/%E5%89%8D%E7%AB%AF/%E4%B8%89%E4%BB%B6%E5%A5%97/css/CSS%EF%BC%881-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%EF%BC%89/</url>
    <content><![CDATA[<h2 id="CSS">CSS</h2>
<p>CSS 是层叠样式表（Cascading Style Sheet）的缩写，它的主要目的是为网页提供样式和时尚，CSS 提供颜色、布局、背景、字体和边框等属性。CSS 的功能允许更好的内容可及性，增强的灵活性和控制力，以及规范的表现特征。</p>
<p><strong>核心概念</strong></p>
<ol>
<li>选择器（Selectors）：匹配 HTML 元素（如 <code>p</code>、<code>.class</code>、<code>#id</code>、<code>[attr]</code>）。</li>
<li>属性和值（Properties &amp; Values）：定义样式，如 <code>color: red;</code>。</li>
<li>盒模型（Box Model）：元素由 <code>content</code>、<code>padding</code>、<code>border</code>、<code>margin</code> 组成。</li>
<li>布局方式：</li>
</ol>
<ul>
<li>标准流（Normal Flow）：默认文档流。</li>
<li>浮动（Float）：使元素脱离文档流（如 <code>float: left;</code>）。</li>
<li>定位（Positioning）：<code>static</code>（默认）、<code>relative</code>、<code>absolute</code>、<code>fixed</code>、<code>sticky</code>。</li>
</ul>
<ol start="5">
<li>层叠与继承：样式按优先级（<code>!important</code> &gt; 内联 &gt; ID &gt; 类 &gt; 标签）生效，部分属性可继承。</li>
</ol>
<h2 id="CSS3">CSS3</h2>
<p>CSS3 是层叠样式表第 3 级的缩写，是 CSS 的高级版本，它用于结构化、风格化和格式化网页。CSS3 增加了一些新功能，所有现代网络浏览器都支持它，CSS3 最重要的特点是将 CSS 标准分割成独立的模块，使之更容易学习和使用。</p>
<p>CSS3 的新功能如下：</p>
<ol>
<li>组合器：CSS3 有一个新的通用兄弟姐妹组合器，它通过 tilde(~)组合器与兄弟姐妹元素相匹配。</li>
<li>CSS 选择器：与 CSS 提供的简单选择器相比，CSS3 的选择器要先进得多，它被称为一系列易于使用和简单的选择器。</li>
<li>伪元素：大量新的伪元素已经被添加到 CSS3 中，以方便深入地进行样式设计。甚至还增加了一个新的双冒号惯例::。</li>
<li>边框样式：最新的 CSS3 也有新的边框样式特性，如 border-radius、image-slice、image-source 和 “width stretch “的值等。</li>
<li>背景样式属性：CSS3 中增加了新的功能，如 background-clip、size、style 和 origin 属性。</li>
</ol>
<p><strong>新特性</strong></p>
<ol>
<li>选择器增强</li>
</ol>
<ul>
<li>属性选择器：<code>input[type=&quot;text&quot;]</code></li>
<li>伪类选择器：<code>:hover</code>、<code>:focus</code>、<code>:nth-child(n)</code></li>
<li>伪元素：<code>::before</code>、<code>::after</code></li>
</ul>
<ol start="2">
<li>盒模型优化</li>
</ol>
<ul>
<li><code>box-sizing</code>：
<ul>
<li><code>content-box</code>（默认，宽度不含 <code>padding</code> 和 <code>border</code>）</li>
<li><code>border-box</code>（宽度包含 <code>padding</code> 和 <code>border</code>）</li>
</ul>
</li>
</ul>
<ol start="3">
<li>背景与边框</li>
</ol>
<ul>
<li>多背景：<code>background: url(bg1.png), url(bg2.png);</code></li>
<li>圆角：<code>border-radius: 10px;</code></li>
<li>阴影：<code>box-shadow: 5px 5px 10px #000;</code></li>
<li>渐变：<code>background: linear-gradient(red, blue);</code></li>
</ul>
<ol start="4">
<li>动画与过渡</li>
</ol>
<ul>
<li>
<p>过渡（Transition）：平滑变化，如 <code>transition: all 0.3s ease;</code></p>
</li>
<li>
<p>动画（Animation）：关键帧动画 <code>@keyframes</code> + <code>animation</code> 属性</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> slide &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123; </span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123; </span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">100px</span>); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123; </span><br><span class="line">    <span class="attribute">animation</span>: slide <span class="number">2s</span> infinite; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>Flexbox 弹性布局</li>
</ol>
<ul>
<li>容器属性：<code>display: flex;</code>、<code>justify-content</code>、<code>align-items</code></li>
<li>子项属性：<code>flex-grow</code>、<code>flex-shrink</code>、<code>flex-basis</code></li>
</ul>
<ol start="6">
<li>Grid 网格布局</li>
</ol>
<ul>
<li>定义网格：<code>display: grid;</code> + <code>grid-template-columns</code></li>
<li>布局控制：<code>grid-column</code>、<code>grid-row</code>、<code>gap</code></li>
</ul>
<ol start="7">
<li>响应式设计（媒体查询）</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">body</span> &#123; </span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">14px</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="CSS-和-CSS3">CSS 和 CSS3</h2>
<p><strong>区别</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">编号</th>
<th style="text-align:center">CSS</th>
<th style="text-align:center">CSS3</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">CSS 能够对文本和对象进行定位。</td>
<td style="text-align:center">CSS3 能够使网页更有吸引力，而且创建时间更短。CSS3 与 CSS 是向后兼容的。</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">CSS 中不支持响应式设计</td>
<td style="text-align:center">CSS3 是最新的版本，因此它支持响应式设计。</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">CSS 不能被分割成模块。</td>
<td style="text-align:center">CSS3 可以被分解成模块。</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">使用 CSS，不能建立 3D 动画和转换。</td>
<td style="text-align:center">但在 CSS3 中，可以进行各种动画和转换，因为它支持动画和 3D 转换。</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">与 CSS3 相比，CSS 的速度非常慢</td>
<td style="text-align:center">CSS3 则比 CSS 快。</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">在 CSS 中，我们有一套标准的颜色，它只使用基本的颜色方案。</td>
<td style="text-align:center">CSS3 有一个很好的 HSL RGBA、HSLA 和渐变色的集合。</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">在 CSS 中，我们只能使用单个文本块。</td>
<td style="text-align:center">但在 CSS3 中，我们可以使用多列文本块。</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center">CSS 不支持媒体查询。</td>
<td style="text-align:center">但 CSS3 支持媒体查询</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td style="text-align:center">CSS 代码不被所有类型的现代浏览器所支持。</td>
<td style="text-align:center">作为最新的版本，CSS3 代码被所有现代浏览器所支持。</td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td style="text-align:center">在 CSS 中，设计师必须手动开发圆滑的梯度和角。</td>
<td style="text-align:center">但 CSS3 提供了先进的代码来设置圆滑的梯度和角。</td>
</tr>
<tr>
<td style="text-align:center">11</td>
<td style="text-align:center">在 CSS 中没有像阴影文本、文本动画等特殊效果，该动画是在 jQuery 和 JavaScript 中编码的。</td>
<td style="text-align:center">CSS3 有许多先进的功能，如文本阴影、视觉效果以及各种字体样式和颜色。</td>
</tr>
<tr>
<td style="text-align:center">12</td>
<td style="text-align:center">在 CSS 中，用户可以为列表项和列表添加背景色，为列表项设置图像等。</td>
<td style="text-align:center">而 CSS3 的列表中定义了一个特殊的显示属性。甚至列表项也有计数器重置属性。</td>
</tr>
<tr>
<td style="text-align:center">13</td>
<td style="text-align:center">CSS 是在 1996 年开发的。</td>
<td style="text-align:center">CSS3 是 CSS 的最新版本，于 2005 年发布。</td>
</tr>
<tr>
<td style="text-align:center">14</td>
<td style="text-align:center">CSS 是内存密集型的。</td>
<td style="text-align:center">与 CSS 相比，CSS3 的内存消耗很低。</td>
</tr>
</tbody>
</table>
<p><strong>总结</strong></p>
<ol>
<li>CSS 负责网页的基本样式，核心包括选择器、盒模型、浮动和定位。</li>
<li>CSS3 扩展了 CSS 的能力，提供动画、弹性布局、网格布局、响应式设计等现代 Web 开发必备功能。</li>
<li>Flexbox 和 Grid 极大简化了复杂布局的实现，而媒体查询让网页适配不同设备。</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS（2-语法与选择器）</title>
    <url>/blog/2025/04/19/%E5%89%8D%E7%AB%AF/%E4%B8%89%E4%BB%B6%E5%A5%97/css/CSS%EF%BC%882-%E8%AF%AD%E6%B3%95%E4%B8%8E%E9%80%89%E6%8B%A9%E5%99%A8%EF%BC%89/</url>
    <content><![CDATA[<h2 id="基本语法">基本语法</h2>
<h3 id="注释">注释</h3>
<p>只能使用 <code>/*</code> 和 <code>*/</code> 包裹。即不管是单行注释，还是多行注释，都是以 <code>/*</code> 开头，以 <code>*/</code> 结尾</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* css中的单行注释 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">css中的多行注释</span></span><br><span class="line"><span class="comment">css中的多行注释</span></span><br><span class="line"><span class="comment">css中的多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h3 id="选择器">选择器</h3>
<p><code>选择器 声明块</code></p>
<p>通过选择器可以选中页面中的指定元素，比如 <code>p</code> 的作用就是选中页面中所有的 <code>p</code> 元素声明块</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="声明块">声明块</h3>
<p>通过声明块来指定要为元素设置的样式</p>
<ol>
<li>声明块由一个一个的声明组成，声明是一个名值对结构</li>
<li>一个样式名对应一个样式值，名和值之间以 <code>:</code> 连接，以 <code>;</code> 结尾</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="样式">样式</h2>
<h3 id="内联样式（行内样式）">内联样式（行内样式）</h3>
<p>在标签内部通过 <code>style</code> 属性来设置元素的样式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color:red;font-size:60px;&quot;</span>&gt;</span>内联样式（行内样式）<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>存在问题：使用内联样式，样式只能对一个标签生效。如果希望影响到多个元素，必须在每一个元素中都复制一遍；并且当样式发生变化时，我们必须要一个一个的修改，非常的不方便。</p>
<p>注意：开发时不要使用内联样式</p>
<h3 id="内部样式">内部样式</h3>
<p>将样式编写到 <code>head</code> 中的 <code>style</code> 标签里，然后通过 CSS 的选择器来选中元素并为其设置各种样式，可以同时为多个标签设置样式，并且修改时只需要修改一处即可。相比于内联样式，内部样式表更加方便对样式进行复用</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  <span class="selector-tag">p</span>	&#123;</span><br><span class="line">      <span class="attribute">color</span>:green; </span><br><span class="line">      <span class="attribute">font-size</span>:<span class="number">50px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>存在问题：我们的内部样式表只能对一个网页起作用，它里边的样式不能跨页面进行复用</p>
<h3 id="外部样式">外部样式</h3>
<p>可以将 CSS 样式编写到一个外部的 CSS 文件中，然后通过 <code>link</code> 标签来引入外部的 CSS 文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./style.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>外部样式表需要通过 <code>link</code> 标签进行引入，意味着只要想使用这些样式的网页都可以对其进行引用使样式，可以在不同页面之间进行复用</p>
<p>将样式编写到外部的 CSS 文件中，可以使用到浏览器的缓存机制，从而加快网页的加载速度，提高用户的体验。</p>
<h2 id="选择器-2">选择器</h2>
<h3 id="优先级">优先级</h3>
<p>优先级：<code>!important</code> &gt; 内联样式 &gt; ID 选择器 &gt; 类选择器、属性选择器和伪类选择器 &gt; 元素选择器和伪元素选择器 &gt; 通配符选择器（<code>\*</code>），关系选择器（如后代选择器、子选择器、相邻兄弟选择器等），以及从父元素继承的样式</p>
<ol>
<li>优先级高的样式会覆盖优先级低的样式。</li>
<li>如果两个选择器具有相同的优先级，则后面的样式会覆盖前面的样式。</li>
<li>使用 <code>!important</code> 声明可以覆盖所有其他优先级，但不推荐使用，因为后续调试困难。</li>
</ol>
<h3 id="常用选择器">常用选择器</h3>
<h4 id="通配选择器">通配选择器</h4>
<ol>
<li>作用：选中页面中的所有元素</li>
<li>语法：<code>*&#123;&#125;</code></li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="元素-标签选择器">元素/标签选择器</h4>
<ol>
<li>作用：根据标签名来选中指定的元素</li>
<li>语法：<code>elementname&#123;&#125;</code></li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: red; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="类选择器">类选择器</h4>
<ol>
<li>作用：根据元素的 class 属性值选中一组元素</li>
<li>语法：<code>.classname&#123;&#125;</code></li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.blue</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.size</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>类选择器与 ID 选择器比较</strong></p>
<ol>
<li><code>class</code>  可以重复使用，<code>id</code>  只能使用一次</li>
<li>可以通过  <code>class</code>  属性来为元素分组</li>
<li>可以同时为一个元素指定多个  <code>class</code>  属性</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;blue size&quot;</span>&gt;</span> 类选择器（Class selector）<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="ID-选择器">ID 选择器</h4>
<ol>
<li>作用：根据元素的 <code>id</code> 属性值选中一个元素</li>
<li>语法：<code>#idname&#123;&#125;</code></li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#red</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="属性选择器">属性选择器</h4>
<ol>
<li>作用：根据元素的属性值选中一组元素</li>
<li>语法</li>
</ol>
<ul>
<li><code>[属性名]</code> 选择含有指定属性的元素</li>
<li><code>[属性名=属性值]</code> 选择含有指定属性和属性值的元素</li>
<li><code>[属性名^=属性值]</code> 选择属性值以指定值开头的元素</li>
<li><code>[属性名$=属性值]</code> 选择属性值以指定值结尾的元素</li>
<li><code>[属性名*=属性值]</code> 选择属性值中含有某值的元素</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-attr">[title]</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-attr">[title=e]</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-attr">[title^=e]</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-attr">[title$=e]</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-attr">[title*=e]</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 选择具有 &quot;data-role&quot; 属性的所有元素 */</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-attr">[data-role]</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 选择具有 &quot;data-role&quot; 属性且值为 &quot;banner&quot; 的元素 */</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-attr">[data-role=<span class="string">&quot;banner&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#4CAF50</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 选择属性值包含 &quot;navigation&quot; 的元素（词汇以空格分隔） */</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-attr">[data-role~=<span class="string">&quot;navigation&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 选择属性值以 &quot;profile-&quot; 开头的元素 */</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-attr">[data-role|=<span class="string">&quot;profile-&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#009688</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 选择属性值以 &quot;info&quot; 开头的元素 */</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-attr">[data-role^=<span class="string">&quot;info&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#FFC107</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: black;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 选择属性值以 &quot;-footer&quot; 结尾的元素 */</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-attr">[data-role$=<span class="string">&quot;-footer&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#607D8B</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 选择属性值包含 &quot;side&quot; 的元素 */</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-attr">[data-role*=<span class="string">&quot;side&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">20%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#E91E63</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-role</span>=<span class="string">&quot;banner&quot;</span>&gt;</span>具有 &quot;data-role&quot; 属性且值为 &quot;banner&quot;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">data-role</span>=<span class="string">&quot;navigation&quot;</span>&gt;</span>属性值包含 &quot;navigation&quot;（词汇以空格分隔）<span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">data-role</span>=<span class="string">&quot;profile-user&quot;</span>&gt;</span>属性值以 &quot;profile-&quot; 开头<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">article</span> <span class="attr">data-role</span>=<span class="string">&quot;info-news&quot;</span>&gt;</span>属性值以 &quot;info&quot; 开头<span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-role</span>=<span class="string">&quot;side-nav&quot;</span>&gt;</span>属性值包含 &quot;side&quot;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">data-role</span>=<span class="string">&quot;main-footer&quot;</span>&gt;</span>属性值以 &quot;-footer&quot; 结尾<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="复合选择器">复合选择器</h3>
<h4 id="交集选择器">交集选择器</h4>
<ol>
<li>
<p>作用：选中同时符合多个条件的元素</p>
</li>
<li>
<p>语法：<code>选择器1选择器2选择器3选择器n&#123;&#125;</code></p>
</li>
<li>
<p>注意点：</p>
</li>
</ol>
<ul>
<li>选择器之间没有任何的连接符号</li>
<li>交集选择器中如果有元素选择器，必须使用元素选择器开头</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.red</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.a</span><span class="selector-class">.b</span><span class="selector-class">.c</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="并集选择器">并集选择器</h4>
<ol>
<li>作用：同时选择多个选择器对应的元素</li>
<li>语法：<code>选择器1,选择器2,选择器3,选择器n&#123;&#125;</code></li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#b1</span>,<span class="selector-tag">h1</span>,<span class="selector-tag">span</span>,<span class="selector-tag">div</span><span class="selector-class">.red</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="关系选择器">关系选择器</h3>
<ol>
<li>父元素：直接包含子元素的元素叫做父元素</li>
<li>子元素：直接被父元素包含的元素是子元素</li>
<li>祖先元素：直接或间接包含后代元素的元素叫做祖先元素；一个元素的父元素也是它的祖先元素</li>
<li>后代元素：直接或间接被祖先元素包含的元素叫做后代元素；子元素也是后代元素</li>
<li>兄弟元素：拥有相同父元素的元素是兄弟元素</li>
</ol>
<h4 id="子元素选择器">子元素选择器</h4>
<ol>
<li>作用：选中指定父元素的指定子元素</li>
<li>语法：<code>父元素 &gt; 子元素</code></li>
<li>例子：<code>A &gt; B</code></li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.box</span> &gt; <span class="selector-tag">p</span> &gt; <span class="selector-tag">span</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="后代元素选择器">后代元素选择器</h4>
<ol>
<li>作用：选中指定元素内的指定后代元素</li>
<li>语法：<code>祖先 后代</code></li>
<li>例子：<code>A B</code></li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">span</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: skyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="兄弟元素选择器">兄弟元素选择器</h4>
<ol>
<li>作用：<code>+</code> 选择下一个兄弟，<code>~</code> 选择下一堆兄弟</li>
<li>语法：<code>前一个 + 下一个</code> <code>前一个 ~ 下一组</code></li>
<li>例子：</li>
</ol>
<ul>
<li><code>A1 + A2</code>（Adjacent sibling combinator）</li>
<li><code>A1 ~ An</code>（General sibling combinator）</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> + <span class="selector-tag">span</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> ~ <span class="selector-tag">span</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="伪类选择器">伪类选择器</h3>
<p>伪类（不存在的类，特殊的类）用来描述一个元素的特殊状态，比如：第一个子元素、被点击的元素、鼠标移入的元素.…</p>
<p>伪类一般情况下都是使用 <code>:</code> 开头</p>
<ol>
<li><code>:not(selector)</code> ：否定伪类，将符合条件的元素从选择器中去除</li>
<li><code>:first-child</code> ：第一个子元素</li>
<li><code>:last-child</code> ：最后一个子元素</li>
<li><code>:nth-child(n)</code> ：选中第 n 个子元素</li>
<li><code>:nth-last-child(n)</code>：选中倒数第 n 个子元素</li>
</ol>
<ul>
<li>n：第 n 个，n 的范围 0 到正无穷</li>
<li>2n 或 even：选中偶数位的元素</li>
<li>2n+1 或 odd：选中奇数位的元素</li>
</ul>
<p>以上这些伪类都是根据所有的子元素进行排序的</p>
<ol>
<li><code>:first-of-type</code> ：同类型中的第一个子元素</li>
<li><code>:last-of-type</code> ：同类型中的最后一个子元素</li>
<li><code>:nth-of-type()</code> ：选中同类型中的第 n 个子元素</li>
</ol>
<p>这几个伪类的功能和上述的类似，不同点是他们是在同类型元素中进行排序的</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* ul下所有li，黑色 */</span></span><br><span class="line"><span class="selector-tag">ul</span>&gt;<span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ul下第偶数个li，黄色 */</span></span><br><span class="line"><span class="selector-tag">ul</span>&gt;<span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>n) &#123;</span><br><span class="line">    <span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ul下第奇数个li，绿色 */</span></span><br><span class="line"><span class="selector-tag">ul</span>&gt;<span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(odd) &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ul下第一个li，红色 */</span></span><br><span class="line"><span class="selector-tag">ul</span>&gt;<span class="selector-tag">li</span><span class="selector-pseudo">:first-child</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ul下最后一个li，黄色 */</span></span><br><span class="line"><span class="selector-tag">ul</span>&gt;<span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li><code>:link</code> 未访问的链接</li>
<li><code>:visited</code> 已访问的链接</li>
<li><code>:hover</code> 鼠标悬停的链接</li>
<li><code>:active</code> 鼠标点击的链接</li>
<li><code>:focus</code> 选择获得焦点的元素（如输入框）</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* unvisited link */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* visited link */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* mouse over link */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* selected link */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="1.gif" alt=""></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 选择未被访问的链接 */</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 选择已被访问的链接 */</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: purple;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 选择鼠标悬停的元素 */</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-decoration</span>: underline;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 选择被激活的元素（如鼠标按下时的链接） */</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 选择获得焦点的元素（如输入框） */</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#FFFF99</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 选择其父元素的第一个子元素 */</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">li</span><span class="selector-pseudo">:first-child</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 选择其父元素的最后一个子元素 */</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-style</span>: italic;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 选择其父元素的第2个子元素 */</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 选择其父元素的倒数第2个子元素 */</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">li</span><span class="selector-pseudo">:nth-last-child</span>(<span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-decoration</span>: line-through;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 选择不符合指定选择器的元素 */</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-pseudo">:not</span>(<span class="selector-tag">p</span>) &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>List item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>List item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>List item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>List item 4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>List item 5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://csdn.com&quot;</span>&gt;</span>这是一个链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Focus on me&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这段文字不会受到 :not(p) 选择器的影响。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这个div将会受到:not(p)选择器的影响。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="伪元素选择器">伪元素选择器</h3>
<p>伪元素，表示页面中一些特殊的并不真实的存在的元素（特殊的位置）</p>
<p>伪元素使用  <code>::</code>  开头</p>
<ol>
<li><code>::first-letter</code>  表示第一个字母</li>
<li><code>::first-line</code>  表示第一行</li>
<li><code>::selection</code>  表示选中的内容</li>
<li><code>::before</code>  元素的开始</li>
<li><code>::after</code>  元素的最后</li>
<li><code>::before</code>  和  <code>::after</code>  必须结合  <code>content</code>  属性来使用</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 段落首字母设置大小为30px */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::first-letter</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 段落第一行设置为黄色背景 */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::first-line</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 段落选中的部分变绿色 */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::selection</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: green；</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* div前加上内容 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;BEFORE&#x27;</span>;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* div后加上内容 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;AFTER&#x27;</span>;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="2.gif" alt=""></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringSecurity5（7-会话管理）</title>
    <url>/blog/2025/02/13/Java/SpringSecurity/SpringSecurity5/SpringSecurity5%EF%BC%887-%E4%BC%9A%E8%AF%9D%E7%AE%A1%E7%90%86%EF%BC%89/</url>
    <content><![CDATA[<h2 id="会话管理">会话管理</h2>
<p><strong>http.sessionManagement()</strong></p>
<ol>
<li>invalidSessionUrl(String invalidSessionUrl)：指定会话失效时（请求携带无效的 JSESSIONID 访问系统）重定向的 URL，默认重定向到登录页面。</li>
<li>invalidSessionStrategy(InvalidSessionStrategy invalidSessionStrategy)：指定会话失效时（请求携带无效的 JSESSIONID 访问系统）的处理策略。</li>
<li>maximumSessions(int maximumSessions)：指定每个用户的最大并发会话数量，-1 表示不限数量。</li>
<li>maxSessionsPreventsLogin(boolean maxSessionsPreventsLogin)：如果设置为 true，表示某用户达到最大会话并发数后，新会话请求会被拒绝登录；如果设置为 false，表示某用户达到最大会话并发数后，新会话请求访问时，其最老会话会在下一次请求时失效并根据 expiredUrl() 或者 expiredSessionStrategy() 方法配置的会话失效策略进行处理，默认值为 false。</li>
<li>expiredUrl(String expiredUrl)：如果某用户达到最大会话并发数后，新会话请求访问时，其最老会话会在下一次请求时失效并重定向到 expiredUrl。</li>
<li>expiredSessionStrategy(SessionInformationExpiredStrategy expiredSessionStrategy)：如果某用户达到最大会话并发数后，新会话请求访问时，其最老会话会在下一次请求中失效并按照该策略处理请求。注意如果本方法与 expiredUrl() 同时使用，优先使用 expiredUrl() 的配置。</li>
<li>sessionRegistry(SessionRegistry sessionRegistry)：设置所要使用的 sessionRegistry，默认配置的是 SessionRegistryImpl 实现类</li>
<li>sessionCreationPolicy：控制如何管理 Session</li>
</ol>
<ul>
<li>SessionCreationPolicy.ALWAYS：总是创建 HttpSession</li>
<li>SessionCreationPolicy.IF_REQUIRED：SpringSecurity 只会在需要时创建一个 HttpSession</li>
<li>SessionCreationPolicy.NEVER：SpringSecurity 不会创建 HttpSession，但如果他已经存在，将可以使用 HttpSession</li>
<li>SessionCreationPolicy.STATELESS：SpringSecurity 永远不会创建 HttpSession，他不会使用 HttpSession 来获取 SecurityContext</li>
</ul>
<h3 id="invalidSessionUrl">invalidSessionUrl</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringSecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定制基于 HTTP 请求的用户访问控制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.formLogin()</span><br><span class="line">            .and()</span><br><span class="line">            .authorizeRequests()</span><br><span class="line">            .anyRequest()</span><br><span class="line">            .authenticated();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 开启 Session 会话管理配置</span></span><br><span class="line">        http.sessionManagement()</span><br><span class="line">            <span class="comment">// 设置 Session 会话失效时重定向路径，默认为 loginPage()</span></span><br><span class="line">            .invalidSessionUrl(<span class="string">&quot;/login/page&quot;</span>);        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># session 失效时间，单位是秒，默认为 30min</span></span><br><span class="line"><span class="attr">server.servlet.session.timeout</span>=<span class="string">30m</span></span><br><span class="line"><span class="comment"># JSESSIONID (Cookie)的生命周期，单位是秒，默认为 -1</span></span><br><span class="line"><span class="attr">server.servlet.session.cookie.max-age</span>=<span class="string">-1</span></span><br></pre></td></tr></table></figure>
<p>注意：Session 的失效时间至少要 1 分钟，少于 1 分钟按照 1 分钟配置</p>
<p><img src="1.png" alt=""></p>
<h3 id="invalidSessionStrategy">invalidSessionStrategy</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户请求携带无效的 JSESSIONID 访问时的处理策略，即对应的 Session 会话失效</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomInvalidSessionStrategy</span> <span class="keyword">implements</span> <span class="title class_">InvalidSessionStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">RedirectStrategy</span> <span class="variable">redirectStrategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultRedirectStrategy</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onInvalidSessionDetected</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 清除浏览器中的无效的 JSESSIONID</span></span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;JSESSIONID&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        cookie.setPath(getCookiePath(request));</span><br><span class="line">        cookie.setMaxAge(<span class="number">0</span>);</span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">xRequestedWith</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;x-requested-with&quot;</span>);</span><br><span class="line">        <span class="comment">// 判断前端的请求是否为 ajax 请求</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;XMLHttpRequest&quot;</span>.equals(xRequestedWith)) &#123;</span><br><span class="line">            <span class="comment">// 响应 JSON 数据</span></span><br><span class="line">            response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">            response.getWriter().write(<span class="string">&quot;SESSION 失效，请重新登录！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 重定向到登录页面</span></span><br><span class="line">            redirectStrategy.sendRedirect(request, response, <span class="string">&quot;/login/page&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getCookiePath</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">contextPath</span> <span class="operator">=</span> request.getContextPath();</span><br><span class="line">        <span class="keyword">return</span> contextPath.length() &gt; <span class="number">0</span> ? contextPath : <span class="string">&quot;/&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringSecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义 Session 会话失效策略</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomInvalidSessionStrategy invalidSessionStrategy;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定制基于 HTTP 请求的用户访问控制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.formLogin()</span><br><span class="line">            .and()</span><br><span class="line">            .authorizeRequests()</span><br><span class="line">            .anyRequest()</span><br><span class="line">            .authenticated();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 开启 Session 会话管理配置</span></span><br><span class="line">        http.sessionManagement()</span><br><span class="line">            <span class="comment">// 设置 Session 会话失效时重定向路径，默认为 loginPage()</span></span><br><span class="line">            <span class="comment">// .invalidSessionUrl(&quot;/login/page&quot;)</span></span><br><span class="line">            <span class="comment">// 配置使用自定义的 Session 会话失效处理策略</span></span><br><span class="line">            .invalidSessionStrategy(invalidSessionStrategy);       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="会话并发控制">会话并发控制</h2>
<p>会话并发管理是指在当前系统中，同一个用户可以同时创建多少个会话，如果一台设备对应一个会话，也可以理解为同一个用户可以同时在多少个设备上进行登录。</p>
<p>在 Spring Security 中默认情况下，同一个用户在多少个设备上登录并没有限制，但是我们可以自己设置。</p>
<h3 id="会话销毁监听">会话销毁监听</h3>
<p>Spring Security 中通过一个 Map 集合来维护当前 HttpSession 记录，进而实现会话的并发管理，当用户登录成功后，就向集合添加一条 HttpSession 记录。</p>
<p>Map 的 key 是当前用户对象，value 是一个集合，这个集合中保存着这个用户的所有会话 session（这里存储的 session 是包装后的 session），每次登录后就能够去 Map 里面拿出来这个用户的所有会话然后判断一下（set）就知道该不该登录了，当用户注销登录的时候，用户的 session 会被自动销毁，但是 Map 中的 List 集合中的 session 并不会自动移除，所以就导致每次登录的时候都会判断为 session 已经登录，所以我们应当在用户注销登录的时候，将 list 集合中把用户对应的会话 session 移除掉</p>
<p>HttpSessionEventPublisher 实现了 HttpSessionListener 接口，可以监听到 HttpSession 的创建和销毁事件，并将 HttpSession 的创建和销毁事件发布出去，这样当有 HttpSession 销毁时，Spring Security 就可以感知到该事件了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这个可以监听到 HttpSession 的销毁操作，当有 HttpSession 销毁的时候，就将这个销毁的事件广播出去</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> HttpSessionEventPublisher <span class="title function_">sessionEventPublisher</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HttpSessionEventPublisher</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="2.png" alt=""></p>
<p><img src="3.png" alt=""></p>
<p>Spring Security 是通过监听 HttpSession 对象的销毁事件来触发会话信息集合 principals 和 sessionIds 的清理工作，但是默认情况下是没有注册过相关的监听器，这会导致 Spring Security 无法正常清理过期或已注销的会话</p>
<p><img src="4.png" alt=""></p>
<h3 id="限制用户二次登录">限制用户二次登录</h3>
<p>如果同一个用户在第二个地方登录，则不允许他二次登录</p>
<p>不建议使用该配置，因为用户一旦被盗号，那真正的用户后续就无法登录，只能通过联系管理员解决，所以如果只能一个用户 Session 登录，一般是新会话登录并将老会话踢下线</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringSecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 自定义 Session 会话失效策略</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomInvalidSessionStrategy invalidSessionStrategy;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定制基于 HTTP 请求的用户访问控制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.formLogin()</span><br><span class="line">            .and()</span><br><span class="line">            .authorizeRequests()</span><br><span class="line">            .anyRequest()</span><br><span class="line">            .authenticated();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 开启 Session 会话管理配置</span></span><br><span class="line">        http.sessionManagement()</span><br><span class="line">            <span class="comment">// 配置使用自定义的 Session 会话失效处理策略</span></span><br><span class="line">            .invalidSessionStrategy(invalidSessionStrategy)</span><br><span class="line">            <span class="comment">// 设置单用户的 Session 最大并发会话数量，-1 表示不受限制</span></span><br><span class="line">            .maximumSessions(<span class="number">1</span>)</span><br><span class="line">            <span class="comment">// 设置为 true，表示某用户达到最大会话并发数后，新会话请求会被拒绝登录</span></span><br><span class="line">            .maxSessionsPreventsLogin(<span class="literal">true</span>);      </span><br><span class="line">            <span class="comment">// 设置所要使用的 sessionRegistry，默认为 SessionRegistryImpl 实现类</span></span><br><span class="line">            .sessionRegistry(sessionRegistry());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册 SessionRegistry，该 Bean 用于管理 Session 会话并发控制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SessionRegistry <span class="title function_">sessionRegistry</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SessionRegistryImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置 Session 的监听器（注意：如果使用并发 Sessoion 控制，一般都需要配置该监听器）</span></span><br><span class="line"><span class="comment">     * 解决 Session 失效后, SessionRegistry 中 SessionInformation 没有同步失效的问题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> HttpSessionEventPublisher <span class="title function_">httpSessionEventPublisher</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HttpSessionEventPublisher</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="踢人下线">踢人下线</h3>
<p>如果同一个用户在第二个地方登录，则将第一个踢下线</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 前提：Session 并发处理的配置为 maxSessionsPreventsLogin(false)</span></span><br><span class="line"><span class="comment"> * 用户的并发 Session 会话数量达到上限，新会话登录后，最老会话会在下一次请求中失效，并执行此策略</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomSessionInformationExpiredStrategy</span> <span class="keyword">implements</span> <span class="title class_">SessionInformationExpiredStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">RedirectStrategy</span> <span class="variable">redirectStrategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultRedirectStrategy</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onExpiredSessionDetected</span><span class="params">(SessionInformationExpiredEvent event)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> event.getRequest();</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> event.getResponse();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 最老会话被踢下线时显示的信息</span></span><br><span class="line">        <span class="type">UserDetails</span> <span class="variable">userDetails</span> <span class="operator">=</span> (UserDetails) event.getSessionInformation().getPrincipal();</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> String.format(<span class="string">&quot;用户[%s]在另外一台机器登录，您已下线！&quot;</span>, userDetails.getUsername());</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">xRequestedWith</span> <span class="operator">=</span> event.getRequest().getHeader(<span class="string">&quot;x-requested-with&quot;</span>);</span><br><span class="line">        <span class="comment">// 判断前端的请求是否为 ajax 请求</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;XMLHttpRequest&quot;</span>.equals(xRequestedWith)) &#123;</span><br><span class="line">            <span class="comment">// 认证成功，响应 JSON 数据</span></span><br><span class="line">            response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">            response.getWriter().write(msg);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 返回到登录页面显示信息</span></span><br><span class="line">            <span class="type">AuthenticationException</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AuthenticationServiceException</span>(msg);</span><br><span class="line">            request.getSession().setAttribute(<span class="string">&quot;SPRING_SECURITY_LAST_EXCEPTION&quot;</span>, e);</span><br><span class="line">            redirectStrategy.sendRedirect(request, response, <span class="string">&quot;/login/page?error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringSecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义 Session 会话失效策略</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomInvalidSessionStrategy invalidSessionStrategy;  </span><br><span class="line">    <span class="comment">// 自定义最老会话失效策略</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomSessionInformationExpiredStrategy sessionInformationExpiredStrategy;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定制基于 HTTP 请求的用户访问控制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 开启 Session 会话管理配置</span></span><br><span class="line">        http.sessionManagement()</span><br><span class="line">            <span class="comment">// 配置使用自定义的 Session 会话失效处理策略</span></span><br><span class="line">            .invalidSessionStrategy(invalidSessionStrategy)</span><br><span class="line">            <span class="comment">// 设置单用户的 Session 最大并发会话数量，-1 表示不受限制</span></span><br><span class="line">            .maximumSessions(<span class="number">1</span>)</span><br><span class="line">            <span class="comment">// 设置为 true，表示某用户达到最大会话并发数后，新会话请求会被拒绝登录；</span></span><br><span class="line">            <span class="comment">// 设置为 false，表示某用户达到最大会话并发数后，新会话请求访问时，其最老会话会在下一次请求时失效</span></span><br><span class="line">            .maxSessionsPreventsLogin(<span class="literal">false</span>)</span><br><span class="line">            <span class="comment">// 设置所要使用的 sessionRegistry，默认为 SessionRegistryImpl 实现类</span></span><br><span class="line">            .sessionRegistry(sessionRegistry())</span><br><span class="line">            <span class="comment">// 最老会话在下一次请求时失效，并重定向到 /login/page</span></span><br><span class="line">            <span class="comment">//.expiredUrl(&quot;/login/page&quot;);</span></span><br><span class="line">            <span class="comment">// 最老会话在下一次请求时失效，并按照自定义策略处理</span></span><br><span class="line">            .expiredSessionStrategy(sessionInformationExpiredStrategy);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册 SessionRegistry，该 Bean 用于管理 Session 会话并发控制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SessionRegistry <span class="title function_">sessionRegistry</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SessionRegistryImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置 Session 的监听器（如果使用并发 Sessoion 控制，一般都需要配置）</span></span><br><span class="line"><span class="comment">     * 解决 Session 失效后, SessionRegistry 中 SessionInformation 没有同步失效问题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> HttpSessionEventPublisher <span class="title function_">httpSessionEventPublisher</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HttpSessionEventPublisher</span>();</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="实现原理">实现原理</h3>
<ol>
<li>AbstractAuthenticationProcessingFilter 的 doFilter()</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractAuthenticationProcessingFilter</span> <span class="keyword">extends</span> <span class="title class_">GenericFilterBean</span> <span class="keyword">implements</span> <span class="title class_">ApplicationEventPublisherAware</span>, MessageSourceAware &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">SessionAuthenticationStrategy</span> <span class="variable">sessionStrategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NullAuthenticatedSessionStrategy</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest)req;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse)res;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.requiresAuthentication(request, response)) &#123;</span><br><span class="line">            <span class="comment">//(1) 判断该请求是否为 POST 方式的登录表单提交请求，如果不是则直接放行，进入下一个过滤器</span></span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line">                <span class="built_in">this</span>.logger.debug(<span class="string">&quot;Request is to process authentication&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Authentication 是用来存储用户认证信息的类，后续会进行详细介绍</span></span><br><span class="line">            Authentication authResult;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//(2) 调用子类 UsernamePasswordAuthenticationFilter 重写的方法进行身份认证，</span></span><br><span class="line">                <span class="comment">// 返回的 authResult 对象封装认证后的用户信息</span></span><br><span class="line">                authResult = <span class="built_in">this</span>.attemptAuthentication(request, response);</span><br><span class="line">                <span class="keyword">if</span> (authResult == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//(3) Session 策略处理（如果配置了用户 Session 最大并发数，就是在此处进行判断并处理）</span></span><br><span class="line">                <span class="comment">// 默认使用的是新创建的 NullAuthenticatedSessionStrategy 实例，而 UsernamePasswordAuthenticationFilter 过滤器使用的是 CompositeSessionAuthenticationStrategy 实例</span></span><br><span class="line">                <span class="built_in">this</span>.sessionStrategy.onAuthentication(authResult, request, response);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InternalAuthenticationServiceException var8) &#123;</span><br><span class="line">                <span class="built_in">this</span>.logger.error(<span class="string">&quot;An internal error occurred while trying to authenticate the user.&quot;</span>, var8);</span><br><span class="line">                <span class="comment">//(4) 认证失败，调用认证失败的处理器</span></span><br><span class="line">                <span class="built_in">this</span>.unsuccessfulAuthentication(request, response, var8);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (AuthenticationException var9) &#123;</span><br><span class="line">                <span class="built_in">this</span>.unsuccessfulAuthentication(request, response, var9);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//(4) 认证成功的处理</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.continueChainBeforeSuccessfulAuthentication) &#123;</span><br><span class="line">                <span class="comment">// 默认的 continueChainBeforeSuccessfulAuthentication 为 false，所以认证成功之后不进入下一个过滤器</span></span><br><span class="line">                chain.doFilter(request, response);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 调用认证成功的处理器</span></span><br><span class="line">            <span class="built_in">this</span>.successfulAuthentication(request, response, chain, authResult);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSessionAuthenticationStrategy</span><span class="params">(SessionAuthenticationStrategy sessionStrategy)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sessionStrategy = sessionStrategy;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>CompositeSessionAuthenticationStrategy 的 onAuthentication()</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompositeSessionAuthenticationStrategy</span> <span class="keyword">implements</span> <span class="title class_">SessionAuthenticationStrategy</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;SessionAuthenticationStrategy&gt; delegateStrategies;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAuthentication</span><span class="params">(Authentication authentication, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> SessionAuthenticationException &#123;</span><br><span class="line">        SessionAuthenticationStrategy delegate;</span><br><span class="line">        <span class="comment">// delegateStrategies 是 Session 处理策略集合，会调用这些策略的 onAuthentication() 方法</span></span><br><span class="line">        <span class="comment">// 包括处理 Session 并发数的策略 ConcurrentSessionControlAuthenticationStrategy</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">Iterator</span> <span class="variable">var4</span> <span class="operator">=</span> <span class="built_in">this</span>.delegateStrategies.iterator(); var4.hasNext(); delegate.onAuthentication(authentication, request, response)) &#123;</span><br><span class="line">            delegate = (SessionAuthenticationStrategy)var4.next();</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line">                <span class="built_in">this</span>.logger.debug(<span class="string">&quot;Delegating to &quot;</span> + delegate);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>ConcurrentSessionControlAuthenticationStrategy 的 onAuthentication()</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcurrentSessionControlAuthenticationStrategy</span> <span class="keyword">implements</span> <span class="title class_">MessageSourceAware</span>, SessionAuthenticationStrategy &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAuthentication</span><span class="params">(Authentication authentication, HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="comment">//(1) 获取用户在系统中的 Session 列表，元素类型为 SessionInformation，该类后续会介绍</span></span><br><span class="line">        List&lt;SessionInformation&gt; sessions = <span class="built_in">this</span>.sessionRegistry.getAllSessions(authentication.getPrincipal(), <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//(2) 获取用户在系统的并发 Session 数量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sessionCount</span> <span class="operator">=</span> sessions.size();</span><br><span class="line">        <span class="comment">//(3) 获取用户能够允许的最大并发 Session 数量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">allowedSessions</span> <span class="operator">=</span> <span class="built_in">this</span>.getMaximumSessionsForThisUser(authentication);</span><br><span class="line">        <span class="comment">//(4) 判断当前用户的并发 Session 数量是否达到上限</span></span><br><span class="line">        <span class="keyword">if</span> (sessionCount &gt;= allowedSessions) &#123;</span><br><span class="line">            <span class="comment">// allowedSessions 为 -1，表示并发 Session 数量不受限制</span></span><br><span class="line">            <span class="keyword">if</span> (allowedSessions != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">//(5) 当已存在的 Session 数量等于最大并发 Session 数量时</span></span><br><span class="line">                <span class="keyword">if</span> (sessionCount == allowedSessions) </span><br><span class="line">                    <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession(<span class="literal">false</span>);</span><br><span class="line">                    <span class="keyword">if</span> (session != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="type">Iterator</span> <span class="variable">var8</span> <span class="operator">=</span> sessions.iterator();</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">while</span>(var8.hasNext()) &#123;</span><br><span class="line">                            <span class="type">SessionInformation</span> <span class="variable">si</span> <span class="operator">=</span> (SessionInformation)var8.next();</span><br><span class="line">                            <span class="comment">//(6) 当前验证的会话如果并非新的会话，则不做任何处理</span></span><br><span class="line">                            <span class="keyword">if</span> (si.getSessionId().equals(session.getId())) &#123;</span><br><span class="line">                                <span class="keyword">return</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//(5) 否则，进行策略判断</span></span><br><span class="line">                <span class="built_in">this</span>.allowableSessionsExceeded(sessions, allowedSessions, <span class="built_in">this</span>.sessionRegistry);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">allowableSessionsExceeded</span><span class="params">(List&lt;SessionInformation&gt; sessions, <span class="type">int</span> allowableSessions, SessionRegistry registry)</span> <span class="keyword">throws</span> SessionAuthenticationException &#123;</span><br><span class="line">        <span class="comment">//(1) exceptionIfMaximumExceeded 就是配置类中 maxSessionsPreventsLogin() 方法参数</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.exceptionIfMaximumExceeded &amp;&amp; sessions != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 当配置 maxSessionsPreventsLogin(false) 时，才运行此处代码</span></span><br><span class="line">            <span class="comment">//(2) 将用户的 SessionInformation 列表按照最后一次访问时间进行排序</span></span><br><span class="line">            sessions.sort(Comparator.comparing(SessionInformation::getLastRequest));</span><br><span class="line">            <span class="comment">//(3) 获取需要踢下线的 SessionInformation 列表（最老会话列表）</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">maximumSessionsExceededBy</span> <span class="operator">=</span> sessions.size() - allowableSessions + <span class="number">1</span>;</span><br><span class="line">            List&lt;SessionInformation&gt; sessionsToBeExpired = sessions.subList(<span class="number">0</span>, maximumSessionsExceededBy);</span><br><span class="line">            <span class="type">Iterator</span> <span class="variable">var6</span> <span class="operator">=</span> sessionsToBeExpired.iterator();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(var6.hasNext()) &#123;</span><br><span class="line">                <span class="comment">//(4) 将用户最老会话列表中的所有 SessionInformation 对象记为过期</span></span><br><span class="line">                <span class="comment">// 注意这里只是标记，而不是真正的将 HttpSession 对象过期，</span></span><br><span class="line">                <span class="comment">// 只有最老会话再次请求或者达到过期时间，HttpSession 对象才会真正失效</span></span><br><span class="line">                <span class="type">SessionInformation</span> <span class="variable">session</span> <span class="operator">=</span> (SessionInformation)var6.next();</span><br><span class="line">                session.expireNow();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 当配置 maxSessionsPreventsLogin(true) 时，运行此处代码</span></span><br><span class="line">            <span class="comment">//(2) 当前（最新）会话的请求访问抛出异常，返回信息（超出最大并发 Session 数量）</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SessionAuthenticationException</span>(<span class="built_in">this</span>.messages.getMessage(<span class="string">&quot;ConcurrentSessionControlAuthenticationStrategy.exceededAllowed&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;allowableSessions&#125;, <span class="string">&quot;Maximum sessions of &#123;0&#125; for this principal exceeded&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="其他">其他</h2>
<h3 id="统计未过期的-Session-数量">统计未过期的 Session 数量</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SessionRegistry sessionRegistry;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test4&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getOnlineSession</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 统计当前用户未过期的并发 Session 数量</span></span><br><span class="line">        <span class="type">UserDetails</span> <span class="variable">user</span> <span class="operator">=</span> (UserDetails) SecurityContextHolder.getContext().getAuthentication().getDetails();</span><br><span class="line">        List&lt;SessionInformation&gt; sessions = <span class="built_in">this</span>.sessionRegistry.getAllSessions(user, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResultData</span>&lt;&gt;(sessions.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="统计所有在线用户">统计所有在线用户</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SessionRegistry sessionRegistry;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test5&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getOnlineUsers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 统计所有在线用户</span></span><br><span class="line">        List&lt;String&gt; userList = sessionRegistry.getAllPrincipals().stream()</span><br><span class="line">                .map(user -&gt; ((UserDetails) user).getUsername())</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResultData</span>&lt;&gt;(userList);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="安全会话-Cookie">安全会话 Cookie</h3>
<p><font style="color:rgb(37, 41, 51);"> 可以使用 httpOnly 和 secure 标签来保护我们的会话 cookie：</font></p>
<ol>
<li>httpOnly：如果为 true，那么浏览器脚本将无法访问 cookie</li>
<li>secure：如果为 true，则 cookie 将仅通过 HTTPS 连接发送</li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.servlet.session.cookie.http‐only</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">server.servlet.session.cookie.secure</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>
<h2 id="会话集群控制">会话集群控制</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- redis 依赖启动器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- redis 数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用 Redis 管理 session --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.session<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-session-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Redis 服务器地址</span></span><br><span class="line"><span class="attr">spring.redis.host</span>=<span class="string">localhost</span></span><br><span class="line"><span class="comment"># Redis 服务器连接端口</span></span><br><span class="line"><span class="attr">spring.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="comment"># Redis 服务器连接密码（默认无）</span></span><br><span class="line"><span class="attr">spring.redis.password</span>=<span class="string"></span></span><br><span class="line"><span class="comment"># Redis数据库索引（默认为0）</span></span><br><span class="line"><span class="attr">spring.redis.database</span>=<span class="string">1</span></span><br><span class="line"><span class="comment"># 连接池最大连接数（使用负值表示没有限制），默认 8</span></span><br><span class="line"><span class="attr">spring.redis.lettuce.pool.max-active</span>=<span class="string">100</span></span><br><span class="line"><span class="comment"># 连接池大阻塞等待时间（使用负值表示没有限制），默认 -1</span></span><br><span class="line"><span class="attr">spring.redis.lettuce.pool.max-wait</span>=<span class="string">PT10S</span></span><br><span class="line"><span class="comment"># 连接池中的大空闲连接 默认 8</span></span><br><span class="line"><span class="attr">spring.redis.lettuce.pool.max-idle</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># 连接池中的小空闲连接 默认 0</span></span><br><span class="line"><span class="attr">spring.redis.lettuce.pool.min-idle</span>=<span class="string">1</span></span><br><span class="line"><span class="comment"># 连接超时时间</span></span><br><span class="line"><span class="attr">spring.redis.timeout</span>=<span class="string">PT10S</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 使用 Redis 存储 Session，默认为 none（使用内存存储）</span></span><br><span class="line"><span class="attr">spring.session.store-type</span>=<span class="string">redis</span></span><br><span class="line"><span class="comment"># 指定存储 SessionId 的 Cookie 名（使用 Redis 存储 Session 后，Cookie 名默认会变为 SESSION）</span></span><br><span class="line"><span class="attr">server.servlet.session.cookie.name</span>=<span class="string">JSESSIONID</span></span><br></pre></td></tr></table></figure>
<p>Redis 存储 Session 默认的序列化方式为 JdkSerializationRedisSerializer，所以存入 Session 的对象都要实现 Serializable 接口</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringSecurity</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML（1-基本概念）</title>
    <url>/blog/2025/04/15/%E5%89%8D%E7%AB%AF/%E4%B8%89%E4%BB%B6%E5%A5%97/html/HTML%EF%BC%881-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%EF%BC%89/</url>
    <content><![CDATA[<h2 id="网页结构思想">网页结构思想</h2>
<p>根据 W3C 标准，一个网页主要由三部分组成：结构、表现还有行为。</p>
<ol>
<li>结构（骨架）：HTML 用于描述页面的结构</li>
<li>表现（皮肤）：CSS 用于控制页面中元素的样式</li>
<li>行为（交互）：JavaScript 用于响应用户操作</li>
</ol>
<p><img src="1.png" alt=""></p>
<p><img src="2.gif" alt=""></p>
<h2 id="版本迭代">版本迭代</h2>
<table>
<thead>
<tr>
<th style="text-align:left">版本</th>
<th style="text-align:left">发布时间</th>
<th style="text-align:left">主要特点</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">HTML 2.0</td>
<td style="text-align:left">1995</td>
<td style="text-align:left">首个标准化版本</td>
</tr>
<tr>
<td style="text-align:left">HTML 3.2</td>
<td style="text-align:left">1997</td>
<td style="text-align:left">添加表格、applet和文本环绕图片等功能</td>
</tr>
<tr>
<td style="text-align:left">HTML 4.01</td>
<td style="text-align:left">1999</td>
<td style="text-align:left">引入CSS支持，分离结构与表现</td>
</tr>
<tr>
<td style="text-align:left">XHTML 1.0</td>
<td style="text-align:left">2000</td>
<td style="text-align:left">基于XML的严格语法版本</td>
</tr>
<tr>
<td style="text-align:left">HTML5</td>
<td style="text-align:left">2014</td>
<td style="text-align:left">新增语义元素、多媒体支持、本地存储、Canvas/WebGL等</td>
</tr>
<tr>
<td style="text-align:left">HTML5.1</td>
<td style="text-align:left">2016</td>
<td style="text-align:left">小幅度更新</td>
</tr>
<tr>
<td style="text-align:left">HTML5.2</td>
<td style="text-align:left">2017</td>
<td style="text-align:left">新增dialog元素等</td>
</tr>
<tr>
<td style="text-align:left">HTML5.3</td>
<td style="text-align:left">2021</td>
<td style="text-align:left">工作草案，包含更多现代Web应用特性</td>
</tr>
</tbody>
</table>
<h2 id="什么是-HTML？">什么是 HTML？</h2>
<p>HTML 指的是超文本标记语言（Hyper Text Markup Language）, 它是用来描述网页的一种语言。</p>
<p>HTML 不是一种编程语言，而是一种标记语言（markup language）， 标记语言是一套标记标签（markup tag）。</p>
<p><strong>超文本的含义</strong></p>
<p>它可以加入图片、声音、动画、多媒体等内容（超越文本限制），可以从一个文件跳转到另一个文件，于世界各地主机的文件连接（超级链接文本）</p>
<h2 id="常用浏览器及其内核">常用浏览器及其内核</h2>
<p>浏览器内核（渲染引擎）：负责读取网页内容，整理讯息，计算网页的显示方式并显示页面。</p>
<table>
<thead>
<tr>
<th>浏览器</th>
<th>内核</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>IE</td>
<td>Trident</td>
<td>IE、猎豹安全、360、百度浏览器</td>
</tr>
<tr>
<td>fireFox</td>
<td>Gecko</td>
<td>火狐浏览器内核</td>
</tr>
<tr>
<td>Safari</td>
<td>Webkit</td>
<td>苹果浏览器内核</td>
</tr>
<tr>
<td>Chrome/Opera</td>
<td>Blink</td>
<td>Chrome/Opera 浏览器内核</td>
</tr>
</tbody>
</table>
<h2 id="Web-标准">Web 标准</h2>
<p>Web 标准是由 W3C 组织和其他标准化组织制定的一系列标准的集合。</p>
<p><strong>为什么需要 Web 标准？</strong></p>
<p>浏览器不同，它们显示的页面或者排版有些许差异，遵循 Web 标准除了可以让不同的开发人员写出的页面更标准、更统一外，还有以下优点：</p>
<ol>
<li>让 Web 标准发展前景更为广阔</li>
<li>内容能被更广泛的设备访问</li>
<li>更容易被搜索引擎了搜索</li>
<li>降低网站流量费用</li>
<li>易于维护</li>
<li>提高页面浏览速度</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML（2-语法结构）</title>
    <url>/blog/2025/04/16/%E5%89%8D%E7%AB%AF/%E4%B8%89%E4%BB%B6%E5%A5%97/html/HTML%EF%BC%882-%E8%AF%AD%E6%B3%95%E7%BB%93%E6%9E%84%EF%BC%89/</url>
    <content><![CDATA[<h2 id="HTML5-基本结构">HTML5 基本结构</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 文档声明，声明当前网页的版本 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- html的根标签（元素），网页中的所有内容都要写根元素的里边 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- head是网页的头部，head中的内容不会在网页中直接出现，主要用来帮助浏览器或搜索引擎来解析网页 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- meta标签用来设置网页的元数据，这里meta用来设置网页的字符集，避免乱码问题 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- title中的内容会显示在浏览器的标题栏，搜索引擎会主要根据title中的内容来判断网页的主要内容 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>网页的标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- body是htm1的子元素，表示网页的主体，网页中所有的可见内容都应该写在body里 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- h1网页的一级标题 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>网页的大标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="doctype-文档声明">doctype 文档声明</h3>
<p>文档声明用来告诉浏览器当前网页的版本</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html5的文档声明 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 或者 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!Doctype <span class="keyword">HTML</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>历史演变：</p>
<ol>
<li>HTML4.01 严格型：<code>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot;&gt;</code></li>
<li>XHTML1.0：<code>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot;&gt;</code></li>
<li>HTML5 简化：<code>&lt;!DOCTYPE html&gt;</code></li>
</ol>
<h3 id="lang-语言种类">lang 语言种类</h3>
<p>用来显示当前文档显示的语言。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-Hans&quot;</span>&gt;</span> <span class="comment">&lt;!-- 简体中文 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-Hant&quot;</span>&gt;</span> <span class="comment">&lt;!-- 繁体中文 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ja&quot;</span>&gt;</span>      <span class="comment">&lt;!-- 日语 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span>      <span class="comment">&lt;!-- 韩语 --&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="meta-标签">meta 标签</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf8&quot;</span> <span class="attr">version</span>=<span class="string">&#x27;1&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=yes&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;京东JD.COM-专业的综合网上购物商城,销售家电、数码通讯、电脑、家居百货、服装服饰、母婴、图书、食品等数万个品牌优质商品.便捷、诚信的服务，为您提供愉悦的网上购物体验!&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;Keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;网上购物,网上商城,手机,笔记本,电脑,MP3,CD,VCD,DV,相机,数码,配件,手表,存储卡,京东&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 移动端适配 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0, maximum-scale=5.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 社交媒体优化 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:title&quot;</span> <span class="attr">content</span>=<span class="string">&quot;页面标题&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:image&quot;</span> <span class="attr">content</span>=<span class="string">&quot;https://example.com/logo.png&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 安全策略 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;default-src &#x27;self&#x27;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>以京东网站为例，右键单击，选择 <code>查看网页源代码</code></p>
<p>meta 主要用于设置网页中的一些元数据，元数据并不是给用户看的</p>
<ol>
<li>charset：指定网页的字符集</li>
<li>name：指定的数据的名称</li>
</ol>
<ul>
<li>viewport：移动端适配</li>
<li>keywords：表示网站的关键字，可以同时指定多个关键字，关键字间使用 <code>,</code> 隔开</li>
<li>description：表示网站的描述信息</li>
<li>content：指定的数据的内容，会作为搜索结果的超链接上的文字显示</li>
</ul>
<p><img src="1.png" alt=""></p>
<ol start="3">
<li>http-equiv</li>
</ol>
<p>如果设置了 <code>http-equiv</code> 属性，<code>&lt;meta&gt;</code> 元素就是一个 pragma 指令，提供的信息相当于一个类似名称的 HTTP 头所能提供的信息。</p>
<ul>
<li>content-security-policy：允许页面作者为当前页面定义一个内容策略。内容策略主要指定允许的服务器来源和脚本端点，这有助于防范跨站脚本攻击。</li>
<li>content-type：声明文档的 MIME 类型和字符编码。如果指定，content 属性必须有 &quot;<code>text/html; charset=utf-8</code> &quot; 的值。这相当于一个指定了 charset 属性的 <code>&lt;meta&gt;</code> 元素，并对文档中的位置有同样的限制。注意：只能在使用 <code>text/html</code> 的文档中使用，不能在使用 <code>XML MIME</code> 类型的文档中使用。</li>
<li>default-style：设置默认的 CSS 样式表集的名称。</li>
<li>x-ua-compatible： 如果指定，内容属性必须有 “<code>IE=edge</code>” 的值。用户代理被要求忽略这个 pragma。</li>
<li>refresh：该指令指定页面重新加载及重定向的方式
<ul>
<li>直到页面应该被重新加载的秒数——只有当 content 属性包含一个正整数时。</li>
<li>直到页面重定向到另一个页面的秒数——只有当内容属性包含一个正整数，后面跟着字符串 “<code>;url=</code>”，以及一个有效的 URL。</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Redirect page after 3 seconds --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;3;url=https://www.mozilla.org&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>对 <code>refresh</code> 进行测试，发现过了 3 秒钟之后自动跳转到了指定的网站</p>
<p><img src="2.gif" alt=""></p>
<h3 id="内容修正">内容修正</h3>
<p>浏览器在解析网页时，会自动对网页中不符合规范的内容进行修正，比如：</p>
<ol>
<li>标签写在了根元素的外部</li>
<li><code>&lt;p&gt;</code> 元素中嵌套了块元素</li>
<li>根元素中出现了除 <code>head</code> 和 <code>body</code> 以外的子元素</li>
</ol>
<p>这个通过浏览器中的 <code>查看网页源代码</code> 并不能看到效果，但是使用 F12 进行 <code>开发者调试</code> 时是能够看到上述几种情况被修正的结果。</p>
<h3 id="SEO-优化">SEO 优化</h3>
<p>SEO（Search Engine Optimization），即搜索引擎优化，是一种利用搜索引擎的规则提高网站在有关搜索引擎内自然排名的方式。</p>
<p>SEO 的目的是对网站进行深度优化，从而帮助网站获得免费流量，进而在搜索引擎上提升网站排名，提高网站知名度。</p>
<p>页面必须有三个标签用来进行 SEO 优化。</p>
<ol>
<li>title：是搜索引擎了解网页的入口和对网页主题归属的最佳判断点。</li>
<li>description：description 作为网站的总体业务和主题概括</li>
<li>keyword：keywords 是页面关键词，是搜索引擎的关注点之一。keywords 最好限制为 6～8 个关键词，关键词之间用英文逗号隔开，采用关键词 1, 关键词 2 的形式。</li>
</ol>
<h2 id="HTML5-新特性">HTML5 新特性</h2>
<ol>
<li>语义化标签：</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span>, <span class="tag">&lt;<span class="name">footer</span>&gt;</span>, <span class="tag">&lt;<span class="name">nav</span>&gt;</span>, <span class="tag">&lt;<span class="name">section</span>&gt;</span>, <span class="tag">&lt;<span class="name">article</span>&gt;</span>, <span class="tag">&lt;<span class="name">aside</span>&gt;</span>, <span class="tag">&lt;<span class="name">main</span>&gt;</span>, <span class="tag">&lt;<span class="name">figure</span>&gt;</span>, <span class="tag">&lt;<span class="name">figcaption</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>多媒体支持：</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span>&gt;</span>, <span class="tag">&lt;<span class="name">audio</span>&gt;</span>, <span class="tag">&lt;<span class="name">canvas</span>&gt;</span>, <span class="tag">&lt;<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>表单增强：</li>
</ol>
<ul>
<li>
<p>新的输入类型：<code>email</code>, <code>url</code>, <code>number</code>, <code>range</code>, <code>date</code>, <code>color</code> 等</p>
</li>
<li>
<p>表单属性：<code>placeholder</code>, <code>required</code>, <code>autofocus</code>, <code>pattern</code></p>
</li>
</ul>
<ol start="4">
<li>API 支持：</li>
</ol>
<ul>
<li>本地存储：<code>localStorage</code>, <code>sessionStorage</code></li>
<li>地理定位：Geolocation API</li>
<li>拖放：Drag and Drop API</li>
<li>离线应用：Application Cache</li>
<li>画布：Canvas API</li>
</ul>
<h2 id="常见标签">常见标签</h2>
<h3 id="语义标签">语义标签</h3>
<table>
<thead>
<tr>
<th style="text-align:left">标签</th>
<th style="text-align:left">作用</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>&lt;h1&gt;</code>   <code>&lt;h2&gt;</code>   <code>&lt;h3&gt;</code>   <code>&lt;h4&gt;</code>   <code>&lt;h5&gt;</code>   <code>&lt;h6&gt;</code></td>
<td style="text-align:left">标题</td>
<td>一共有六级标题   从 <code>h1</code>~ <code>h6</code> 重要性递减，<code>h1</code> 最重要，<code>h6</code> 最不重要   h1 在网页中的重要性仅次于 <code>title</code> 标签   一般情况下一个页面中只会有一个 <code>h1</code>   一般情况下标题标签只会使用到 <code>h1</code>～ <code>h3</code>，<code>h4</code>～ <code>h6</code> 很少用</td>
</tr>
<tr>
<td style="text-align:left"><code>&lt;hgroup&gt;</code></td>
<td style="text-align:left">标题组</td>
<td>多层次的标题。它将一组 <code>&lt;h1&gt;</code>～ <code>&lt;h6&gt;</code> 元素分组</td>
</tr>
<tr>
<td style="text-align:left"><code>&lt;p&gt;</code></td>
<td style="text-align:left">段落</td>
<td>页面中的一个段落。由空行或第一行缩进将相邻的文本块分开</td>
</tr>
<tr>
<td style="text-align:left"><code>&lt;blockquote&gt;</code></td>
<td style="text-align:left">长引文</td>
<td>用缩进表示所包含文本。   可以用 <code>cite</code> 属性表示引文来源，用 <code>&lt;cite&gt;</code> 元素表示来源的文本表述</td>
</tr>
<tr>
<td style="text-align:left"><code>&lt;q&gt;</code></td>
<td style="text-align:left">短引文</td>
<td>用一个简短的内联引号包围文本。   大多数浏览器通过在文本周围加上引号来实现。   该元素用于不需要段落分隔的短引文；</td>
</tr>
<tr>
<td style="text-align:left"><code>&lt;br&gt;</code></td>
<td style="text-align:left">换行</td>
<td></td>
</tr>
</tbody>
</table>
<p>HTML5 提供的新语义元素有</p>
<table>
<thead>
<tr>
<th style="text-align:left">标签</th>
<th style="text-align:left">作用</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>&lt;header&gt;</code></td>
<td style="text-align:left">页眉</td>
<td>介绍性的内容</td>
</tr>
<tr>
<td style="text-align:left"><code>&lt;footer&gt;</code></td>
<td style="text-align:left">页脚</td>
<td>通常包含有关作者的信息、版权或文件链接</td>
</tr>
<tr>
<td style="text-align:left"><code>&lt;nav&gt;</code></td>
<td style="text-align:left">导航链接</td>
<td>可以是当前文档内的，也可以是到其他文档的。常见例子是菜单、目录和索引</td>
</tr>
<tr>
<td style="text-align:left"><code>&lt;main&gt;</code></td>
<td style="text-align:left">文档主内容</td>
<td>中心主题直接相关或扩展的内容</td>
</tr>
<tr>
<td style="text-align:left"><code>&lt;article&gt;</code></td>
<td style="text-align:left">文章</td>
<td>自成一体，独立分发，可重复使用</td>
</tr>
<tr>
<td style="text-align:left"><code>&lt;section&gt;</code></td>
<td style="text-align:left">文档中的节</td>
<td>没有一个更具体的语义元素来代表</td>
</tr>
<tr>
<td style="text-align:left"><code>&lt;aside&gt;</code></td>
<td style="text-align:left">页面内容以外的内容</td>
<td>其内容与文档的主要内容只有间接的关系。经常以边栏或呼出框的形式出现</td>
</tr>
<tr>
<td style="text-align:left"><code>&lt;mark&gt;</code></td>
<td style="text-align:left">重要或强调的文本</td>
<td>为参考或记事目的而被标记或突出的文本，表明其相关性和重要性</td>
</tr>
<tr>
<td style="text-align:left"><code>&lt;summary&gt;</code></td>
<td style="text-align:left"><code>&lt;details&gt;</code> 标题</td>
<td>为 <code>&lt;details&gt;</code> 指定一个摘要、标题或图例。点击 <code>&lt;summary&gt;</code> 可以切换 <code>&lt;details&gt;</code> 打开和关闭</td>
</tr>
<tr>
<td style="text-align:left"><code>&lt;details&gt;</code></td>
<td style="text-align:left">用户能够查看或隐藏的额外细节</td>
<td>其中的信息只有被切换到 &quot;打开 &quot; 状态时才可见。必须使用 <code>&lt;summary&gt;</code> 提供一个摘要或标签</td>
</tr>
<tr>
<td style="text-align:left"><code>&lt;figure&gt;</code></td>
<td style="text-align:left">自包含内容</td>
<td>独立的内容，用 <code>&lt;figcaption&gt;</code><br/>元素指定一个可选的标题。比如图示、图表、照片、代码清单等</td>
</tr>
<tr>
<td style="text-align:left"><code>&lt;figcaption&gt;</code></td>
<td style="text-align:left"><code>&lt;figure&gt;</code> 的标题</td>
<td>描述其父元素</td>
</tr>
<tr>
<td style="text-align:left"><code>&lt;time&gt;</code></td>
<td style="text-align:left">定义日期/时间</td>
<td>可能包括 <code>datetime</code> 属性，将日期翻译成机器可读的格式，以便获得更好的搜索引擎结果或自定义功能。如提醒</td>
</tr>
</tbody>
</table>
<h3 id="文本格式化标签">文本格式化标签</h3>
<p>在网页中，有时候需要为文字设置粗体、斜体或下划线等效果，需要使用 HTML 中的文本格式化标签，使文字以特殊方式显示。</p>
<table>
<thead>
<tr>
<th>语义</th>
<th>标签</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>加粗</td>
<td><code>&lt;strong&gt;&lt;/strong&gt;</code> 或 <code>&lt;b&gt;&lt;/b&gt;</code></td>
<td>更推荐 <code>&lt;strong&gt;</code>，语义更强烈</td>
</tr>
<tr>
<td>斜体</td>
<td><code>&lt;em&gt;&lt;/em&gt;</code> 或 <code>&lt;i&gt;&lt;/i&gt;</code></td>
<td>更推荐使用 <code>&lt;em&gt;</code>，语义更强烈</td>
</tr>
<tr>
<td>删除线</td>
<td><code>&lt;del&gt;&lt;/del&gt;</code> 或 <code>&lt;s&gt;&lt;s/&gt;</code></td>
<td>更推荐使用 <code>&lt;del&gt;</code>，语义更强烈</td>
</tr>
<tr>
<td>下划线</td>
<td><code>&lt;ins&gt;&lt;/ins&gt;</code> 或 <code>&lt;u&gt;&lt;/u&gt;</code></td>
<td>更推荐使用 <code>&lt;ins&gt;</code>，语义更强烈</td>
</tr>
</tbody>
</table>
<h3 id="布局标签">布局标签</h3>
<p><img src="3.png" alt=""></p>
<table>
<thead>
<tr>
<th>标签</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>header</td>
<td>表示网页的头部（页眉）</td>
</tr>
<tr>
<td>main</td>
<td>表示网页的主体部分（一个页面中只会有一个 main）</td>
</tr>
<tr>
<td>footer</td>
<td>表示网页的底部（页脚）</td>
</tr>
<tr>
<td>nav</td>
<td>表示网页中的导航</td>
</tr>
<tr>
<td>aside</td>
<td>和主体相关的其他内容（侧边栏）</td>
</tr>
<tr>
<td>article</td>
<td>表示一个独立的文章</td>
</tr>
<tr>
<td>section</td>
<td>表示一个独立的区块，上边的标签都不能表示时使用 section</td>
</tr>
</tbody>
</table>
<h3 id="列表标签">列表标签</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>, <span class="tag">&lt;<span class="name">ol</span>&gt;</span>, <span class="tag">&lt;<span class="name">li</span>&gt;</span>, <span class="tag">&lt;<span class="name">dl</span>&gt;</span>, <span class="tag">&lt;<span class="name">dt</span>&gt;</span>, <span class="tag">&lt;<span class="name">dd</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="表格标签">表格标签</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span>, <span class="tag">&lt;<span class="name">tr</span>&gt;</span>, <span class="tag">&lt;<span class="name">th</span>&gt;</span>, <span class="tag">&lt;<span class="name">td</span>&gt;</span>, <span class="tag">&lt;<span class="name">caption</span>&gt;</span>, <span class="tag">&lt;<span class="name">thead</span>&gt;</span>, <span class="tag">&lt;<span class="name">tbody</span>&gt;</span>, <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="表单标签">表单标签</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span>, <span class="tag">&lt;<span class="name">input</span>&gt;</span>, <span class="tag">&lt;<span class="name">textarea</span>&gt;</span>, <span class="tag">&lt;<span class="name">select</span>&gt;</span>, <span class="tag">&lt;<span class="name">option</span>&gt;</span>, <span class="tag">&lt;<span class="name">button</span>&gt;</span>, <span class="tag">&lt;<span class="name">label</span>&gt;</span>, <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span>, <span class="tag">&lt;<span class="name">legend</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="多媒体标签">多媒体标签</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span>&gt;</span>, <span class="tag">&lt;<span class="name">audio</span>&gt;</span>, <span class="tag">&lt;<span class="name">video</span>&gt;</span>, <span class="tag">&lt;<span class="name">source</span>&gt;</span>, <span class="tag">&lt;<span class="name">canvas</span>&gt;</span>, <span class="tag">&lt;<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="超链接标签">超链接标签</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span>, <span class="tag">&lt;<span class="name">link</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="列表">列表</h2>
<h3 id="有序列表">有序列表</h3>
<p>使用 <code>ol</code> 标签来创建有序列表，使用 <code>li</code> 表示列表项</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Mix flour, baking powder, sugar, and salt.<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>In another bowl, mix eggs, milk, and oil.<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Stir both mixtures together.<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Fill muffin tray 3/4 full.<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Bake for 20 minutes.<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="4.png" alt=""></p>
<h3 id="无序列表">无序列表</h3>
<p>使用 <code>ul</code> 标签来创建无序列表，使用 <code>li</code> 表示列表项</p>
<p>注意：</p>
<ol>
<li>各个列表项之间无需并列关系。</li>
<li><code>&lt;ul&gt;&lt;/ul&gt;</code> 中只能包含 <code>&lt;li&gt;&lt;/li&gt;</code>，写入其他标签或文字是不允许的。</li>
<li>无序列表带有自己的属性，可用 CSS 修改样式属性。</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:left">值</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">disc</td>
<td style="text-align:left">默认值。实心圆。</td>
</tr>
<tr>
<td style="text-align:left">circle</td>
<td style="text-align:left">空心圆。</td>
</tr>
<tr>
<td style="text-align:left">square</td>
<td style="text-align:left">实心方块。</td>
</tr>
</tbody>
</table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Milk<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Cheese</span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>Blue cheese</span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Sweet blue cheese<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Sour blue cheese<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>Feta<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="5.png" alt=""></p>
<h3 id="定义列表">定义列表</h3>
<p>使用 <code>dl</code> 标签来创建定义列表，使用 <code>dt</code> 表示定义的内容，使用 <code>dd</code> 来对内容进行解释说明</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Beast of Bodmin<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>A large feline inhabiting Bodmin Moor.<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Morgawr<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>A sea serpent.<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Owlman<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>A giant owl-like creature.<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="6.png" alt=""></p>
<h2 id="超链接">超链接</h2>
<p>超链接可以让我们从一个页面跳转到其他页面，或者是当前页面的其他的位置</p>
<p>使用 <code>a</code> 标签来定义超链接，<code>href</code> 属性指定跳转的目标路径，值可以是一个外部网站的地址，也可以写一个内部页面的地址</p>
<p>超链接是也是一个行内元素，在 <code>a</code> 标签中可以嵌套除它自身外的任何元素</p>
<h3 id="外部地址">外部地址</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;</span>Website<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto:example@outlook.com&quot;</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;tel:+123456789&quot;</span>&gt;</span>Phone<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="7.gif" alt=""></p>
<h3 id="内部地址">内部地址</h3>
<p>当我们需要跳转一个服务器内部的页面时，一般我们都会使用相对路径，会以 <code>./</code> 或 <code>../</code> 开头</p>
<ol>
<li><code>./</code> 表示当前文件所在目录，可以省略不写</li>
<li><code>../</code> 表示当前文件所在目录的上一级目录</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;./test1.html&quot;</span>&gt;</span>超链接1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;../test2.html&quot;</span>&gt;</span>超链接2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;./test3/test3.html&quot;</span>&gt;</span>超链接3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;../test4/test4.html&quot;</span>&gt;</span>超链接4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="8.gif" alt=""></p>
<h3 id="新建页面">新建页面</h3>
<p><code>target</code> 属性，用来指定超链接打开的位置，可选值：</p>
<ol>
<li>_self：在当前页面中打开超链接（默认值）</li>
<li>_blank：在新建页面中打开超链接</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;./test1.html&quot;</span>&gt;</span>超链接1——默认<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;./test1.html&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span>&gt;</span>超链接1——当前页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;./test1.html&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>超链接1——新建页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="9.gif" alt=""></p>
<h3 id="锚点跳转">锚点跳转</h3>
<ol>
<li>使用 <code>javascript:void(0);</code> 来作为 <code>href</code> 的属性，此时点击这个超链接什么也不会发生</li>
<li>直接将超链接的 <code>href</code>  属性设置为 <code>#</code> ，作为超链接的路径的占位符使用，这样点击超链接以后页面不会发生跳转，而是转到当前页面的顶部的位置</li>
<li>跳转到页面的指定位置（锚点），只需将 <code>href</code>  属性设置 <code>#目标元素的id属性值</code> （唯一不重复）</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 汉皇重色思倾国，御宇多年求不得。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 杨家有女初长成，养在深闺人未识。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 天生丽质难自弃，一朝选在君王侧。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;Anchor1&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#Anchor2&quot;</span>&gt;</span> 回眸一笑百媚生，六宫粉黛无颜色。<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 春寒赐浴华清池，温泉水滑洗凝脂。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 侍儿扶起娇无力，始是新承恩泽时。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 云鬓花颜金步摇，芙蓉帐暖度春宵。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 春宵苦短日高起，从此君王不早朝。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 承欢侍宴无闲暇，春从春游夜专夜。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;Anchor2&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#Anchor3&quot;</span>&gt;</span> 后宫佳丽三千人，三千宠爱在一身。<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 金屋妆成娇侍夜，玉楼宴罢醉和春。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 姊妹弟兄皆列土，可怜光彩生门户。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 遂令天下父母心，不重生男重生女。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 骊宫高处入青云，仙乐风飘处处闻。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 缓歌慢舞凝丝竹，尽日君王看不足。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 渔阳鼙鼓动地来，惊破霓裳羽衣曲。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 九重城阙烟尘生，千乘万骑西南行。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 翠华摇摇行复止，西出都门百余里。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 六军不发无奈何，宛转蛾眉马前死。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 花钿委地无人收，翠翘金雀玉搔头。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 君王掩面救不得，回看血泪相和流。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 黄埃散漫风萧索，云栈萦纡登剑阁。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 峨嵋山下少人行，旌旗无光日色薄。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 蜀江水碧蜀山青，圣主朝朝暮暮情。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 行宫见月伤心色，夜雨闻铃肠断声。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 天旋地转回龙驭，到此踌躇不能去。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 马嵬坡下泥土中，不见玉颜空死处。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 君臣相顾尽沾衣，东望都门信马归。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 归来池苑皆依旧，太液芙蓉未央柳。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 芙蓉如面柳如眉，对此如何不泪垂。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 春风桃李花开夜，秋雨梧桐叶落时。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 西宫南苑多秋草，落叶满阶红不扫。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 梨园弟子白发新，椒房阿监青娥老。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 夕殿萤飞思悄然，孤灯挑尽未成眠。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;Anchor3&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#Anchor4&quot;</span>&gt;</span> 迟迟钟鼓初长夜，耿耿星河欲曙天。 <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 鸳鸯瓦冷霜华重，翡翠衾寒谁与共。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 悠悠生死别经年，魂魄不曾来入梦。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 临邛道士鸿都客，能以精诚致魂魄。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 为感君王辗转思，遂教方士殷勤觅。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 排空驭气奔如电，升天入地求之遍。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 上穷碧落下黄泉，两处茫茫皆不见。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 忽闻海上有仙山，山在虚无缥渺间。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 楼阁玲珑五云起，其中绰约多仙子。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 中有一人字太真，雪肤花貌参差是。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 金阙西厢叩玉扃，转教小玉报双成。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 闻道汉家天子使，九华帐里梦魂惊。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 揽衣推枕起徘徊，珠箔银屏迤逦开。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 云鬓半偏新睡觉，花冠不整下堂来。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;Anchor4&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#Anchor5&quot;</span>&gt;</span> 风吹仙袂飘飖举，犹似霓裳羽衣舞。 <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 玉容寂寞泪阑干，梨花一枝春带雨。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 含情凝睇谢君王，一别音容两渺茫。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 昭阳殿里恩爱绝，蓬莱宫中日月长。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 回头下望人寰处，不见长安见尘雾。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 惟将旧物表深情，钿合金钗寄将去。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 钗留一股合一扇，钗擘黄金合分钿。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 但令心似金钿坚，天上人间会相见。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 临别殷勤重寄词，词中有誓两心知。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 七月七日长生殿，夜半无人私语时。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;Anchor5&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#Anchor6&quot;</span>&gt;</span> 在天愿作比翼鸟，在地愿为连理枝。 <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 天长地久有时尽，此恨绵绵无绝期。 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Heading to link to --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>回到顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="10.gif" alt=""></p>
<h2 id="图片">图片</h2>
<h3 id="属性">属性</h3>
<p>图片标签用于向当前页面中引入一个外部图片</p>
<p><code>img</code> 标签是一个自结束标签，这种元素属于替换元素（块和行内元素之间，具有两种元素的特点）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;图像url&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>属性</th>
<th>属性值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>src</code></td>
<td>图片路径</td>
<td>必须属性</td>
</tr>
<tr>
<td><code>alt</code></td>
<td>文本</td>
<td>替换文本，当图片不显示时显示文字</td>
</tr>
<tr>
<td><code>title</code></td>
<td>文本</td>
<td>提示文本。鼠标放到图像上显示文字</td>
</tr>
<tr>
<td><code>width</code></td>
<td>像素</td>
<td>图像宽度</td>
</tr>
<tr>
<td><code>height</code></td>
<td>像素</td>
<td>图像高度</td>
</tr>
<tr>
<td><code>border</code></td>
<td>像素</td>
<td>图像边框粗细</td>
</tr>
</tbody>
</table>
<p>注意：</p>
<ol>
<li>宽度和高度中如果只修改了一个，则另一个会等比例缩放</li>
<li>一般情况在 pc 端，不建议修改图片的大小，需要多大的图片就裁多大</li>
<li>但是在移动端，经常需要对图片进行缩放（大图缩小）</li>
</ol>
<h3 id="格式">格式</h3>
<ol>
<li>jpeg（jpg）</li>
</ol>
<ul>
<li>支持的颜色比较丰富</li>
<li>不支持透明效果</li>
<li>不支持动图</li>
<li>一般用来显示照片</li>
</ul>
<ol start="2">
<li>gif</li>
</ol>
<ul>
<li>支持的颜色比较单一</li>
<li>支持简单透明</li>
<li>支持动图</li>
</ul>
<ol start="3">
<li>png</li>
</ol>
<ul>
<li>支持的颜色丰富</li>
<li>支持复杂透明</li>
<li>不支持动图</li>
<li>专为网页而生</li>
</ul>
<ol start="4">
<li>webp</li>
</ol>
<ul>
<li>这种格式是谷歌新推出的专门用来表示网页中的图片的一种格式</li>
<li>具备其他图片格式的所有优点，而且文件还特别的小</li>
<li>缺点：兼容性不好</li>
</ul>
<ol start="5">
<li>base64</li>
</ol>
<ul>
<li>将图片使用 base64 编码，这样可以将图片转换为字符，通过字符的形式来引入图片</li>
<li>图片效果一样的，选文件小的</li>
<li>图片效果不一样的，选图片效果好的</li>
<li>尽可能的兼顾和平衡图片效果和文件大小</li>
</ul>
<h2 id="内联框架">内联框架</h2>
<p>内联框架 <code>iframe</code>，用于向当前页面中引入一个其他页面</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>作用</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>src</code></td>
<td>设置嵌入页面的 URL</td>
<td><code>&lt;iframe src=&quot;https://example.com&quot;&gt;&lt;/iframe&gt;</code></td>
</tr>
<tr>
<td><code>width</code></td>
<td>宽度（默认 300px）</td>
<td><code>&lt;iframe width=&quot;500&quot;&gt;&lt;/iframe&gt;</code></td>
</tr>
<tr>
<td><code>height</code></td>
<td>高度（默认 150px）</td>
<td><code>&lt;iframe height=&quot;300&quot;&gt;&lt;/iframe&gt;</code></td>
</tr>
<tr>
<td><code>frameborder</code></td>
<td>是否显示边框（<code>0</code> 无边框）</td>
<td><code>&lt;iframe frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;</code></td>
</tr>
<tr>
<td><code>scrolling</code></td>
<td>滚动条（<code>yes</code>/<code>no</code>/<code>auto</code>）</td>
<td><code>&lt;iframe scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;</code></td>
</tr>
<tr>
<td><code>allowfullscreen</code></td>
<td>允许全屏模式</td>
<td><code>&lt;iframe allowfullscreen&gt;&lt;/iframe&gt;</code></td>
</tr>
<tr>
<td><code>referrerpolicy</code></td>
<td>控制引用信息</td>
<td><code>&lt;iframe referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/iframe&gt;</code></td>
</tr>
</tbody>
</table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;https://www.qq.com&quot;</span> <span class="attr">width</span>=<span class="string">&quot;800&quot;</span> <span class="attr">height</span>=<span class="string">&quot;600&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="11.png" alt=""></p>
<h2 id="表格">表格</h2>
<p>同样在网页中我们也需要使用表格，我们通过 <code>table</code> 标签来创建一个表格</p>
<ol>
<li>在 <code>table</code> 中使用 <code>tr</code> 表示表格中的一行，有几个 <code>tr</code> 就有几行</li>
<li>在 <code>tr</code> 中使用 <code>td</code> 表示一个单元格，有几个 td <code>就有</code> 几个单元格</li>
</ol>
<h3 id="合并单元格">合并单元格</h3>
<ol>
<li>rowspan ：纵向的合并单元格</li>
<li>colspan ：横向的合并单元格</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">width</span>=<span class="string">&quot;50%&quot;</span> <span class="attr">align</span>=<span class="string">&quot; center&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--在table中使用tr表示表格中的一行，有几个tr就有几行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--在tr中使用td表示一个单元格，有几个td就有几个单元格--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>A1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>B1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>C1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>D1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>A2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>B2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>C2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--rouspan 纵向的合并单元格--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>D2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>AB<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>B3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>C3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>A4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>B4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- colspan横向的合并单元格 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>C4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="长表格">长表格</h3>
<p>可以将一个表格分成三个部分：</p>
<ol>
<li>头部 <code>thead</code></li>
<li>主体 <code>tbody</code></li>
<li>底部 <code>tfoot</code></li>
</ol>
<p><code>th</code> 表示头部的单元格</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>日期<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>收入<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>支出<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>合计<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>2000.1.1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>500<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>200<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>300<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>2000.1.1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>500<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>200<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>300<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>2000.1.1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>500<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>200<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>300<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>合计<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>1200<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="样式">样式</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>学号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>地址<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>孙悟空<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>花果山<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>猪八戒<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>28<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>高老庄<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>沙和尚<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>38<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>流沙河<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>唐僧<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>16<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>女儿国<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>孙悟空<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>花果山<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>猪八戒<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>28<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>高老庄<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>沙和尚<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>38<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>流沙河<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>唐僧<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>16<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>女儿国<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>唐僧<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>16<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>女儿国<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>孙悟空<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>花果山<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>猪八戒<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>28<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>高老庄<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>沙和尚<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>38<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>流沙河<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>唐僧<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>16<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>女儿国<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> black solid;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* border-spacing：指定边框之间的距离；边框之间虽然没有距离了，但是实际上是两条边框的和，看起来是变粗了 */</span></span><br><span class="line">    <span class="comment">/* border-spacing: 0; */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*border-collapse:collapse；设置边框的合并；真正的将两条边框合并成一条边框 */</span></span><br><span class="line">    <span class="attribute">border-collapse</span>: collapse;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 默认情况下元素在td中是垂直居中的，可以通过vectical-align来修改 */</span></span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 如果表格中没有使用tbody而是直接使用tr，那么浏览器会自动创建一个tbody，并且将tr全都放到tbody中</span></span><br><span class="line"><span class="comment">   所以说，tr不是table的子元素 */</span></span><br><span class="line"><span class="selector-tag">tbody</span> <span class="selector-tag">tr</span><span class="selector-pseudo">:nth-child</span>(odd) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">211</span>, <span class="number">216</span>, <span class="number">188</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">td</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> black solid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="12.png" alt=""></p>
<h2 id="表单">表单</h2>
<h3 id="属性-2">属性</h3>
<table>
<thead>
<tr>
<th>属性</th>
<th>属性值</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>action</td>
<td>url 地址</td>
<td>指定接受并处理表单数据的服务器的 url 地址</td>
</tr>
<tr>
<td>method</td>
<td>get/post</td>
<td>设置表单数据的提交方式</td>
</tr>
<tr>
<td>name</td>
<td>名称</td>
<td>用于指定表单名称，区分同一个页面中的多个表单域</td>
</tr>
</tbody>
</table>
<p>注意：</p>
<ol>
<li>写表单元素之前需要有表单域将其包含。</li>
<li>表单域是 form 标签。</li>
</ol>
<h3 id="表单元素">表单元素</h3>
<ol>
<li><code>input</code> 标签为单标签</li>
<li><code>type</code> 属性设置不同属性值来指定不同控件类型</li>
</ol>
<p><strong>type 常用属性值</strong></p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>button</td>
<td>定义可点击按钮</td>
</tr>
<tr>
<td>checkox</td>
<td>复选框</td>
</tr>
<tr>
<td>file</td>
<td>定义输入字段和“浏览”按钮，供文件上传</td>
</tr>
<tr>
<td>hidden</td>
<td>定义隐藏的输入字段</td>
</tr>
<tr>
<td>image</td>
<td>定义图像形式的提交按钮</td>
</tr>
<tr>
<td>password</td>
<td>定义密码字段。字符被掩码。</td>
</tr>
<tr>
<td>radio</td>
<td>定义单选按钮</td>
</tr>
<tr>
<td>reset</td>
<td>定义重置按钮，清除表单所有数据。</td>
</tr>
<tr>
<td>submit</td>
<td>定义提交按钮。重置按钮会清除表单所有数据。</td>
</tr>
<tr>
<td>text</td>
<td>定义输入字段。用户可输入文本，默认宽度为 20 个字符。</td>
</tr>
</tbody>
</table>
<p><strong>input 的其他属性</strong></p>
<table>
<thead>
<tr>
<th>属性</th>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>自定义</td>
<td>定义 input 元素名称</td>
</tr>
<tr>
<td>value</td>
<td>自定义</td>
<td>规定 input 元素的值</td>
</tr>
<tr>
<td>checked</td>
<td>checked</td>
<td>规定此 input 元素首次加载时应当被选中</td>
</tr>
<tr>
<td>maxlength</td>
<td>正整数</td>
<td>规定输入字段字符的最大长度</td>
</tr>
</tbody>
</table>
<p>注意</p>
<ol>
<li>对于 <code>radio</code> 单选框，必须使 <code>input</code> 的 <code>name</code> 具有相同的属性值，才能实现多选一。 同理，复选框也要有相同的 <code>name</code> 值。</li>
<li>单选框和复选框可以设置 <code>checked</code> 属性，页面打开默认选择按钮。</li>
<li>设置 <code>type</code> 的值为 <code>submit</code>，点击按钮后可以把表单域 form 里面的表单元素里面的值提交给后台。</li>
<li>设置 <code>type=&quot;button&quot;</code>，普通按钮，后期结合 js 使用</li>
</ol>
<h3 id="其他">其他</h3>
<h4 id="label-标签">label 标签</h4>
<p><code>&lt;label&gt;</code> 标签为 input 元素定义标注。 <code>&lt;label&gt;</code> 标签用于绑定一个表单源深路，当点击 label 标签内的文本时，浏览器自动将焦点转到或者选择对应的表单元素上，提升用户体验。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sex&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>&lt;lable&gt;</code> 标签的 for 属性与相关元素的 id 属性相同。</p>
<h4 id="select-下拉表单">select 下拉表单</h4>
<p><code>select</code> 标签设置多个选项让用户选择，节约页面空间。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>注意</strong></p>
<ol>
<li>select 中至少包含一对 option。</li>
<li>在 option 中定义属性 <code>selected=selected</code>，当前项即为默认选项。</li>
</ol>
<h4 id="textarea-文本域表单">textarea 文本域表单</h4>
<p>场景：输入内容较多时</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">&quot;3&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line">    文本内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>cols：每行字符数</li>
<li>rows：显示的行数</li>
</ol>
<h3 id="使用">使用</h3>
<ol>
<li>文本框</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">文本框<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>密码框</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">密码框<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>提交按钮</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="4">
<li>单选框</li>
</ol>
<p>像这种选择框，必须要措定一个 <code>value</code> 属性，<code>value</code> 属性最终会作为用户填写的值传递给服务器</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">单选框</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">value</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">value</span>=<span class="string">&quot;b&quot;</span> <span class="attr">checked</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="5">
<li>多选框</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">多选框</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;test&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;test&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;test&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span> <span class="attr">checked</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="6">
<li>下拉列表</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">下拉列表</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;haha&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;i&quot;</span>&gt;</span>选项一<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;ii&quot;</span> <span class="attr">selected</span>&gt;</span>选项二<span class="tag">&lt;/<span class="name">option</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;iii&quot;</span>&gt;</span>选项三<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="7">
<li>按钮</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 提交按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 重置按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 普通按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>input</code> 是自闭合标签，不需要 <code>&lt;/input&gt;</code> 就能结束；<code>button</code> 不是自闭合标签，跟一般标签一样是成对出现的</li>
<li><code>button</code> 因为不是自闭合标签，所以使用起来更灵活，可以嵌套其他的标签</li>
</ul>
<h2 id="音视频">音视频</h2>
<h3 id="audio（音频）">audio（音频）</h3>
<p><code>audio</code> 标签用来向页面中引入一个外部的音频文件</p>
<p>音视频文件引入时，默认情况下不允许用户自己控制播放停止</p>
<ol>
<li><code>controls</code> 是否允许用户控制播放</li>
<li><code>autoplay</code> 音频文件是否自动播放</li>
</ol>
<ul>
<li>如果设置了 <code>autoplay</code>，则音乐在打开页面时会自动播放</li>
<li>但是目前来讲大部分浏览器都不会自动对音乐进行播放</li>
</ul>
<ol start="3">
<li><code>loop</code> 音乐是否循环播放</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;./source/audio.mp3&quot;</span> <span class="attr">controls</span> <span class="attr">autoplay</span> <span class="attr">loop</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="source">source</h3>
<p>除了通过 <code>src</code> 属性来指定外部文件的路径以外，还可以通过 <code>&lt;source&gt;</code> 元素来指定文件的路径</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span> <span class="attr">autoplay</span> <span class="attr">loop</span>&gt;</span></span><br><span class="line">    对不起，您的浏览器不支持播放音频！请升级浏览器！</span><br><span class="line">	<span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;./source/audio.mp3&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;./source/audio.ogg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="embed">embed</h3>
<p>IE8 下不支持 <code>audio</code> 元素，但是可以使用 <code>&lt;embed&gt;</code> 元素在文档中的指定位置嵌入外部内容。</p>
<p>这个内容是由外部应用程序或其他互动内容的来源提供的，如浏览器插件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span>=<span class="string">&quot;./source/audio.mp3&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="video（视频）">video（视频）</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.webm&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/webm&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span>=<span class="string">&quot;https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="其他-2">其他</h2>
<h3 id="div-和-span">div 和 span</h3>
<ol>
<li>div：块元素，没有任何的语义，就用来表示一个区块。目前来讲，div 还是主要的布局元素</li>
<li>span：行内元素，没有任何的语义，一般用于在网页中选中文字</li>
</ol>
<p><strong>特点：</strong></p>
<ol>
<li>div 标签用来布局，但是现在一行只能放一个 div，大盒子。</li>
<li>span 标签用来布局，一行可以多个 span，小盒子。</li>
</ol>
<h3 id="块元素和行内元素">块元素和行内元素</h3>
<p><strong>块元素（block element）</strong></p>
<ol>
<li>特点</li>
</ol>
<ul>
<li>独占一行，默认情况下会占满父容器的整个宽度。</li>
<li>可以包含块级元素和行内元素（但部分元素如 <code>&lt;p&gt;</code> 不能包含块级元素）。</li>
<li>默认情况下有宽度、高度、内边距和外边距。</li>
<li>适用于布局结构，如段落、容器、列表等。</li>
</ul>
<ol start="2">
<li>常见块级元素</li>
</ol>
<ul>
<li>结构性元素：<code>&lt;div&gt;</code>、<code>&lt;section&gt;</code>、<code>&lt;article&gt;</code>、<code>&lt;header&gt;</code>、<code>&lt;footer&gt;</code>、<code>&lt;main&gt;</code>、<code>&lt;aside&gt;</code>、<code>&lt;nav&gt;</code></li>
<li>文本块：<code>&lt;p&gt;</code>、<code>&lt;h1&gt;</code> ~ <code>&lt;h6&gt;</code>、<code>&lt;pre&gt;</code></li>
<li>列表：<code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>、<code>&lt;li&gt;</code>、<code>&lt;dl&gt;</code>、<code>&lt;dt&gt;</code>、<code>&lt;dd&gt;</code></li>
<li>表格：<code>&lt;table&gt;</code>、<code>&lt;thead&gt;</code>、<code>&lt;tbody&gt;</code>、<code>&lt;tfoot&gt;</code>、<code>&lt;tr&gt;</code>、<code>&lt;td&gt;</code>、<code>&lt;th&gt;</code></li>
<li>其他：<code>&lt;form&gt;</code>、<code>&lt;fieldset&gt;</code>、<code>&lt;legend&gt;</code>、<code>&lt;blockquote&gt;</code></li>
</ul>
<p><strong>行内元素（inline element）</strong></p>
<ol>
<li>特点</li>
</ol>
<ul>
<li>不会独占一行，元素的宽度只取决于内容的大小。</li>
<li>只能包含文本或其他行内元素（不能直接包含块级元素）。</li>
<li>不能直接设置宽高（部分行内元素如 <code>&lt;img&gt;</code> 例外）。</li>
<li>适用于文本内容的修饰、链接等。</li>
</ul>
<ol start="2">
<li>常见行内元素</li>
</ol>
<ul>
<li>文本格式化：<code>&lt;span&gt;</code>、<code>&lt;strong&gt;</code>、<code>&lt;em&gt;</code>、<code>&lt;b&gt;</code>、<code>&lt;i&gt;</code>、<code>&lt;u&gt;</code>、<code>&lt;small&gt;</code>、<code>&lt;mark&gt;</code>、<code>&lt;sub&gt;</code>、<code>&lt;sup&gt;</code></li>
<li>链接和交互：<code>&lt;a&gt;</code>、<code>&lt;button&gt;</code>（可被 CSS 设置为块级）</li>
<li>输入相关：<code>&lt;label&gt;</code>、<code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code>、<code>&lt;select&gt;</code>、<code>&lt;option&gt;</code>、<code>&lt;br&gt;</code>（换行符）、<code>&lt;wbr&gt;</code>（可换行提示）</li>
<li>媒体：<code>&lt;img&gt;</code>、<code>&lt;svg&gt;</code>、<code>&lt;video&gt;</code>、<code>&lt;audio&gt;</code>（但默认 <code>video</code> 是块级）</li>
<li>其他：<code>&lt;code&gt;</code>、<code>&lt;kbd&gt;</code>、<code>&lt;samp&gt;</code>、<code>&lt;abbr&gt;</code>、<code>&lt;cite&gt;</code></li>
</ul>
<p><strong>行内块元素</strong></p>
<p>有些元素在默认情况下是行内元素，但可以通过 <code>display: inline-block;</code> 让其具备行内元素的排列特性，同时允许设置宽高。</p>
<ol>
<li>特点</li>
</ol>
<ul>
<li>像行内元素一样不会独占一行。</li>
<li>但可以像块级元素一样设置 <code>width</code> 和 <code>height</code>。</li>
</ul>
<ol start="2">
<li>常见行内块元素</li>
</ol>
<ul>
<li>默认即为 <code>inline-block</code> 的元素：<code>&lt;img&gt;</code>、<code>&lt;input&gt;</code>、<code>&lt;button&gt;</code>、<code>&lt;select&gt;</code>、<code>&lt;textarea&gt;</code></li>
</ul>
<p><strong>总结</strong></p>
<table>
<thead>
<tr>
<th>分类</th>
<th>主要特点</th>
<th>例子</th>
</tr>
</thead>
<tbody>
<tr>
<td>块级元素</td>
<td>独占一行，可包含块级和行内元素</td>
<td><code>&lt;div&gt;</code>, <code>&lt;p&gt;</code>, <code>&lt;h1&gt;</code>, <code>&lt;section&gt;</code>, <code>&lt;ul&gt;</code></td>
</tr>
<tr>
<td>行内元素</td>
<td>不换行，仅占自身内容的大小</td>
<td><code>&lt;span&gt;</code>, <code>&lt;a&gt;</code>, <code>&lt;b&gt;</code>, <code>&lt;i&gt;</code></td>
</tr>
<tr>
<td>行内块元素</td>
<td>行内显示，但可以设置宽高</td>
<td><code>&lt;img&gt;</code>, <code>&lt;input&gt;</code>, <code>&lt;button&gt;</code></td>
</tr>
</tbody>
</table>
<h3 id="字符实体">字符实体</h3>
<p>有些时候，在 HTML 中不能直接书写一些特殊符号，如：</p>
<ol>
<li>多个连续的空格（在网页中编写的多个空格默认情况会自动被浏览器解析为一个空格）</li>
<li>比如字母两侧的大于小于号（可能会被认为是标签并解析）</li>
</ol>
<p>如果我们需要在网页中书写这些特殊的符号，则需要使用 html 中的实体（转义字符）实体的语法：<code>&amp;实体的名字;</code>，如：</p>
<table>
<thead>
<tr>
<th style="text-align:left">实体名称</th>
<th style="text-align:left">显示结果</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>&amp;nbsp;</code></td>
<td style="text-align:left"><code> </code></td>
<td>空格</td>
</tr>
<tr>
<td style="text-align:left"><code>&amp;gt;</code></td>
<td style="text-align:left">&gt;</td>
<td>大于号</td>
</tr>
<tr>
<td style="text-align:left"><code>&amp;lt;</code></td>
<td style="text-align:left">&lt;</td>
<td>小于号</td>
</tr>
<tr>
<td style="text-align:left"><code>&amp;amp;</code></td>
<td style="text-align:left">&amp;</td>
<td>与</td>
</tr>
<tr>
<td style="text-align:left"><code>&amp;copy;</code></td>
<td style="text-align:left">©</td>
<td>版权</td>
</tr>
<tr>
<td style="text-align:left"><code>&amp;reg;</code></td>
<td style="text-align:left">®</td>
<td>注册商标</td>
</tr>
<tr>
<td style="text-align:left"><code>&amp;trade;</code></td>
<td style="text-align:left">™</td>
<td>商标</td>
</tr>
<tr>
<td style="text-align:left"><code>&amp;times;</code></td>
<td style="text-align:left">×</td>
<td>乘号</td>
</tr>
<tr>
<td style="text-align:left"><code>&amp;divide;</code></td>
<td style="text-align:left">÷</td>
<td>除号</td>
</tr>
<tr>
<td style="text-align:left"><code>&amp;iquest;</code></td>
<td style="text-align:left">¿</td>
<td>倒问号</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Quartz（1-Job）</title>
    <url>/blog/2024/11/12/Java/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/Quartz/Quartz%EF%BC%881-Job%EF%BC%89/</url>
    <content><![CDATA[<h2 id="基本使用">基本使用</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.quartz-scheduler<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloJob</span> <span class="keyword">implements</span> <span class="title class_">Job</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line">        <span class="comment">//实际触发时间。例如，计划时间可能是 10:00:00，但如果调度程序太忙，实际触发时间可能是 10:00:03。</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">fireTime</span> <span class="operator">=</span> jobExecutionContext.getFireTime();</span><br><span class="line">        System.out.println(<span class="string">&quot;fireTime:&quot;</span> + fireTime);</span><br><span class="line">        <span class="comment">//上次触发时间</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">previousFireTime</span> <span class="operator">=</span> jobExecutionContext.getPreviousFireTime();</span><br><span class="line">        System.out.println(<span class="string">&quot;previousFireTime:&quot;</span> + previousFireTime);</span><br><span class="line">        <span class="comment">//下次触发时间</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">nextFireTime</span> <span class="operator">=</span> jobExecutionContext.getNextFireTime();</span><br><span class="line">        System.out.println(<span class="string">&quot;nextFireTime:&quot;</span> + nextFireTime);</span><br><span class="line">        <span class="comment">//触发器触发的预定时间。</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">scheduledFireTime</span> <span class="operator">=</span> jobExecutionContext.getScheduledFireTime();</span><br><span class="line">        System.out.println(<span class="string">&quot;scheduledFireTime:&quot;</span> + scheduledFireTime);</span><br><span class="line"></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> jobExecutionContext.getJobDetail();</span><br><span class="line">        System.out.println(<span class="string">&quot;jobDataMap:&quot;</span> + JSON.toJSONString(jobDetail.getJobDataMap()));</span><br><span class="line">        System.out.println(<span class="string">&quot;jobKey:&quot;</span> + JSON.toJSONString(jobDetail.getKey()));</span><br><span class="line">        System.out.println(<span class="string">&quot;jobDescription:&quot;</span> + jobDetail.getDescription());</span><br><span class="line">        System.out.println(<span class="string">&quot;==================================&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SchedulerException &#123;</span><br><span class="line">        <span class="comment">//1.创建一个jobDetail的实例，将该实例与HelloJob Class绑定</span></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder</span><br><span class="line">                .newJob(HelloJob.class) <span class="comment">//定义Job类为HelloJob类，真正的执行逻辑所在</span></span><br><span class="line">                .withIdentity(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;group1&quot;</span>)</span><br><span class="line">                .withDescription(<span class="string">&quot;Quartz测试&quot;</span>)</span><br><span class="line">                .usingJobData(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;小米&quot;</span>)</span><br><span class="line">                .usingJobData(<span class="string">&quot;age&quot;</span>, <span class="number">15</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建一个Trigger触发器的实例，定义该job立即执行，并且每2秒执行一次，一直执行</span></span><br><span class="line">        <span class="type">SimpleTrigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .withIdentity(<span class="string">&quot;myTrigger&quot;</span>, <span class="string">&quot;group1&quot;</span>)</span><br><span class="line">                .startNow() <span class="comment">//立即生效</span></span><br><span class="line">                .withSchedule(SimpleScheduleBuilder.simpleSchedule()</span><br><span class="line">                        .withIntervalInSeconds(<span class="number">2</span>) <span class="comment">//每2秒执行一次</span></span><br><span class="line">                        .repeatForever()) <span class="comment">//一直执行</span></span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//3.创建schedule实例</span></span><br><span class="line">        <span class="type">StdSchedulerFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StdSchedulerFactory</span>();</span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> factory.getScheduler();</span><br><span class="line">        scheduler.start(); <span class="comment">//启动</span></span><br><span class="line">        scheduler.scheduleJob(jobDetail, trigger); <span class="comment">// jobDetail和trigger加入调度</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="JobExecutionContext">JobExecutionContext</h2>
<p>当 Scheduler 调用一个 Job 就会将 JobExecutionContext 传递给 Job 的 execute()方法，Job 能通过 JobExecutionContext 对象访问到 Quartz 运行时候的环境和 Job 本身的明细数据</p>
<h2 id="JobDetail、JobBuilder">JobDetail、JobBuilder</h2>
<h3 id="方法">方法</h3>
<ol>
<li>storeDurably</li>
</ol>
<p>JobDetails 信息持久化到数据库的时候有一个属性 storeDurably，如果设置为 true 则无论与其关联的 Trigger 是否存在其都会一直存在，否则只要相关联的 trigger 删除掉了其会自动删除掉</p>
<ol start="2">
<li>requestRecovery</li>
</ol>
<p>请求恢复，也就是说当应用发生故障的时候，是否重新执行默认是 false。如果一个 job 是可恢复的，并且在其执行的时候，scheduler 发生硬关闭（hard shutdown)（比如运行的进程崩溃了，或者关机了），则当 scheduler 重新启动的时候，该 job 会被重新执行。此时，该 job 的 JobExecutionContext.isRecovering() 返回 true</p>
<ol start="3">
<li>usingJobData、setJobData</li>
</ol>
<p>添加 Job 数据，每个 JobDetail 内都有一个 JobDataMap，包含了关联到这个 Job 的数据，在 Job 类中，可以通过 context 取出该数据，进行业务流程处理。</p>
<ol start="4">
<li>withIdentity</li>
</ol>
<p>给 JobDetail 起一个 Id，方便后面检索</p>
<ol start="5">
<li>withDescription</li>
</ol>
<p>用来对 job 进行描述，并没有什么实际作用</p>
<h3 id="JobKey">JobKey</h3>
<p>JobKey 是表明 Job 身份的一个对象，里面封装了 Job 的 name 和 group，TriggerKey 同理。当不指定 group 时，Quartz 会用默认的组名 DEFAULT</p>
<h3 id="JobDataMap">JobDataMap</h3>
<p>JobDetail 是任务的定义，而 Job 是任务的执行逻辑，每一个 JobDetail 都会有一个 JobDataMap，JobDataMap 本质就是一个 Map 的扩展类，可以存储一些任务信息</p>
<h4 id="JobDataMap-获取任务信息">JobDataMap 获取任务信息</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloJob</span> <span class="keyword">implements</span> <span class="title class_">Job</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> jobExecutionContext.getJobDetail();</span><br><span class="line">        <span class="type">JobDataMap</span> <span class="variable">jobDataMap</span> <span class="operator">=</span> jobDetail.getJobDataMap();</span><br><span class="line">        System.out.println(<span class="string">&quot;name:&quot;</span> + jobDataMap.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;age:&quot;</span> + jobDataMap.getInt(<span class="string">&quot;age&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;jobKey:&quot;</span> + JSON.toJSONString(jobDetail.getKey()));</span><br><span class="line">        System.out.println(<span class="string">&quot;jobDescription:&quot;</span> + jobDetail.getDescription());</span><br><span class="line">        System.out.println(<span class="string">&quot;==================================&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SchedulerException &#123;</span><br><span class="line">        <span class="comment">//1.创建一个jobDetail的实例，将该实例与HelloJob Class绑定</span></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder</span><br><span class="line">                .newJob(HelloJob.class) <span class="comment">//定义Job类为HelloJob类，真正的执行逻辑所在</span></span><br><span class="line">                .withIdentity(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;group1&quot;</span>)</span><br><span class="line">                .withDescription(<span class="string">&quot;Quartz测试&quot;</span>)</span><br><span class="line">                .usingJobData(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;小米&quot;</span>)</span><br><span class="line">                .usingJobData(<span class="string">&quot;age&quot;</span>, <span class="number">15</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建一个Trigger触发器的实例，定义该job立即执行，并且每2秒执行一次，一直执行</span></span><br><span class="line">        <span class="type">SimpleTrigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .withIdentity(<span class="string">&quot;myTrigger&quot;</span>, <span class="string">&quot;group1&quot;</span>)</span><br><span class="line">                .startNow() <span class="comment">//立即生效</span></span><br><span class="line">                .withSchedule(SimpleScheduleBuilder.simpleSchedule()</span><br><span class="line">                        .withIntervalInSeconds(<span class="number">2</span>) <span class="comment">//每2秒执行一次</span></span><br><span class="line">                        .repeatForever()) <span class="comment">//一直执行</span></span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//3.创建schedule实例</span></span><br><span class="line">        <span class="type">StdSchedulerFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StdSchedulerFactory</span>();</span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> factory.getScheduler();</span><br><span class="line">        scheduler.start(); <span class="comment">//启动</span></span><br><span class="line">        scheduler.scheduleJob(jobDetail, trigger); <span class="comment">// jobDetail和trigger加入调度</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="实体类获取任务信息">实体类获取任务信息</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloJob3</span> <span class="keyword">implements</span> <span class="title class_">Job</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> Float floatJobValue;</span><br><span class="line">    <span class="keyword">private</span> Double doubleTriggerValue;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Float <span class="title function_">getFloatJobValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> floatJobValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFloatJobValue</span><span class="params">(Float floatJobValue)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.floatJobValue = floatJobValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getDoubleTriggerValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> doubleTriggerValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDoubleTriggerValue</span><span class="params">(Double doubleTriggerValue)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.doubleTriggerValue = doubleTriggerValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line">        <span class="comment">//打印当前的执行时间 例如 2017-11-22 00:00:00</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;现在的时间是：&quot;</span> + sf.format(date));</span><br><span class="line">        <span class="comment">//打印jobDataMap定义的message的值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;jobDataMap定义的message的值 : &quot;</span> + message);</span><br><span class="line">        <span class="comment">//jobDataMap定义的floatJobValue的值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;jobDataMap定义的floatJobValue的值 : &quot;</span> + floatJobValue);   </span><br><span class="line">		System.out.println(<span class="string">&quot;==================================&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SchedulerException &#123;</span><br><span class="line">        <span class="comment">//1.创建一个jobDetail的实例，将该实例与HelloJob Class绑定</span></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder</span><br><span class="line">                .newJob(HelloJob3.class) <span class="comment">//定义Job类为HelloJob类，真正的执行逻辑所在</span></span><br><span class="line">                .withIdentity(<span class="string">&quot;myJob&quot;</span>, <span class="string">&quot;group1&quot;</span>) <span class="comment">//定义name 和 group</span></span><br><span class="line">                .usingJobData(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;hello myJob1&quot;</span>) <span class="comment">//加入属性到jobDataMap</span></span><br><span class="line">                .usingJobData(<span class="string">&quot;FloatJobValue&quot;</span>,<span class="number">8.88f</span>) <span class="comment">//加入属性到jobDataMap</span></span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建一个Trigger触发器的实例，定义该job立即执行，并且每2秒执行一次，一直执行</span></span><br><span class="line">        <span class="type">SimpleTrigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .withIdentity(<span class="string">&quot;myTrigger&quot;</span>, <span class="string">&quot;group1&quot;</span>)</span><br><span class="line">                .startNow() <span class="comment">//立即生效</span></span><br><span class="line">                .withSchedule(SimpleScheduleBuilder.simpleSchedule()</span><br><span class="line">                        .withIntervalInSeconds(<span class="number">2</span>) <span class="comment">//每2秒执行一次</span></span><br><span class="line">                        .repeatForever()) <span class="comment">//一直执行</span></span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//3.创建schedule实例</span></span><br><span class="line">        <span class="type">StdSchedulerFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StdSchedulerFactory</span>();</span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> factory.getScheduler();</span><br><span class="line">        scheduler.start(); <span class="comment">//启动</span></span><br><span class="line">        scheduler.scheduleJob(jobDetail,trigger); <span class="comment">// jobDetail和trigger加入调度</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="注解使用">注解使用</h2>
<h3 id="PersistJobDataAfterExecution">@PersistJobDataAfterExecution</h3>
<p>有状态的 Job 可以理解为多次 Job 调用期间可以持有一些状态信息，这些状态信息存储在 JobDataMap 中，而默认的无状态 Job 每次调用时都会创建一个新的 JobDataMap</p>
<p>注意：没有添加@PersistJobDataAfterExecution 注解，每次调用时都会创建一个新的 JobDataMap，不会累加；添加该注解后，多次调用期间可以持有一些状态信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PersistJobDataAfterExecution</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloJob4</span> <span class="keyword">implements</span> <span class="title class_">Job</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer count;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCount</span><span class="params">(Integer count)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line">        System.out.println(++count);</span><br><span class="line">        jobExecutionContext.getJobDetail().getJobDataMap().put(<span class="string">&quot;count&quot;</span>, count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SchedulerException &#123;</span><br><span class="line">        <span class="comment">//1.创建一个jobDetail的实例，将该实例与HelloJob Class绑定</span></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder</span><br><span class="line">                .newJob(HelloJob4.class) <span class="comment">//定义Job类为HelloJob类，真正的执行逻辑所在</span></span><br><span class="line">                .withIdentity(<span class="string">&quot;myJob&quot;</span>, <span class="string">&quot;group1&quot;</span>) <span class="comment">//定义name 和 group</span></span><br><span class="line">                .usingJobData(<span class="string">&quot;count&quot;</span>,<span class="number">0</span>) <span class="comment">//加入属性到jobDataMap</span></span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建一个Trigger触发器的实例，定义该job立即执行，并且每2秒执行一次，一直执行</span></span><br><span class="line">        <span class="type">SimpleTrigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .withIdentity(<span class="string">&quot;myTrigger&quot;</span>, <span class="string">&quot;group1&quot;</span>)</span><br><span class="line">                .startNow() <span class="comment">//立即生效</span></span><br><span class="line">                .withSchedule(SimpleScheduleBuilder.simpleSchedule()</span><br><span class="line">                        .withIntervalInSeconds(<span class="number">2</span>) <span class="comment">//每2秒执行一次</span></span><br><span class="line">                        .repeatForever()) <span class="comment">//一直执行</span></span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//3.创建schedule实例</span></span><br><span class="line">        <span class="type">StdSchedulerFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StdSchedulerFactory</span>();</span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> factory.getScheduler();</span><br><span class="line">        scheduler.start(); <span class="comment">//启动</span></span><br><span class="line">        scheduler.scheduleJob(jobDetail,trigger); <span class="comment">// jobDetail和trigger加入调度</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="DisallowConcurrentExecution">@DisallowConcurrentExecution</h3>
<p>禁止并发执行多个相同定义的 JobDetail，这个注解是加在 Job 类上的，但意思并不是不能同时执行多个 Job，而是不能并发执行同一个 Job</p>
<p>例如：同一个 Job 实现类 DemoJob 的两个 JobDetail 实例 A 和 B，设置 A 的定时执行频率为每 1 分钟执行一次，A 的实际运行耗时为 3 分钟，B 的定时执行频率也是每 1 分钟执行一次，B 的实际运行耗时为 30 秒。假如在 07:00 分 00 秒时 A 和 B 同时第一次运行，则到 07:00 分 30 秒时 B 运行结束，此时 A 还在运行中，到 07:01 分 00 秒时 A 和 B 又该执行了，但是由于注解@DisallowConcurrentExecution 的缘故，此时 A 不会再次运行，A 只能在其上一次运行结束后才能再次被调用执行。但是 B 会正常运行（B 不受 A 的影响，注解@DisallowConcurrentExecution 是作用于 JobDetail 实例而不是 Job 实现类）</p>
<p>注意：如果你使用了@PersistJobDataAfterExecution 注解，则强烈建议你同时使用@DisallowConcurrentExecution 注解，因为当同一个 job（JobDetail）的两个实例被并发执行时，由于竞争，JobDataMap 中存储的数据很可能是不确定的。</p>
<p><strong>使用同一个Job对象</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DisallowConcurrentExecution</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloJob5</span> <span class="keyword">implements</span> <span class="title class_">Job</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;现在的时间是：&quot;</span> + sf.format(date));</span><br><span class="line">        <span class="type">JobKey</span> <span class="variable">key</span> <span class="operator">=</span> jobExecutionContext.getJobDetail().getKey();</span><br><span class="line">        <span class="comment">//打印jobDetail 的name</span></span><br><span class="line">        System.out.println(<span class="string">&quot;jobDetail 的name ： &quot;</span> + key.getName());</span><br><span class="line">        <span class="comment">//打印jobDetail 的group</span></span><br><span class="line">        System.out.println(<span class="string">&quot;jobDetail 的group ： &quot;</span> + key.getGroup());</span><br><span class="line">        System.out.println(<span class="string">&quot;==============================&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SchedulerException &#123;</span><br><span class="line">        <span class="comment">//1.创建一个jobDetail的实例，将该实例与HelloJob Class绑定</span></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail1</span> <span class="operator">=</span> JobBuilder</span><br><span class="line">                .newJob(HelloJob5.class) <span class="comment">//定义Job类为HelloJob类，真正的执行逻辑所在</span></span><br><span class="line">                .withIdentity(<span class="string">&quot;group1&quot;</span>, <span class="string">&quot;group1&quot;</span>) <span class="comment">//定义name 和 group</span></span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建一个Trigger触发器的实例，定义该job立即执行，并且每2秒执行一次，一直执行</span></span><br><span class="line">        <span class="type">SimpleTrigger</span> <span class="variable">trigger1</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .withIdentity(<span class="string">&quot;myTrigger1&quot;</span>, <span class="string">&quot;group1&quot;</span>)</span><br><span class="line">                .startNow() <span class="comment">//立即生效</span></span><br><span class="line">                .withSchedule(SimpleScheduleBuilder.simpleSchedule()</span><br><span class="line">                        .withIntervalInSeconds(<span class="number">2</span>) <span class="comment">//每2秒执行一次</span></span><br><span class="line">                        .repeatForever()) <span class="comment">//一直执行</span></span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//3.创建schedule实例</span></span><br><span class="line">        <span class="type">StdSchedulerFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StdSchedulerFactory</span>();</span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> factory.getScheduler();</span><br><span class="line">        scheduler.start(); <span class="comment">//启动</span></span><br><span class="line">        scheduler.scheduleJob(jobDetail1, trigger1); <span class="comment">// jobDetail和trigger加入调度</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>使用@DisallowConcurrentExecution前</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 运行结果：</span></span><br><span class="line">现在的时间是：<span class="number">2024</span>-<span class="number">11</span>-<span class="number">12</span> <span class="number">00</span>:<span class="number">59</span>:<span class="number">49</span></span><br><span class="line">jobDetail 的name ： group1</span><br><span class="line">jobDetail 的group ： group1</span><br><span class="line">==============================</span><br><span class="line">现在的时间是：<span class="number">2024</span>-<span class="number">11</span>-<span class="number">12</span> <span class="number">00</span>:<span class="number">59</span>:<span class="number">52</span></span><br><span class="line">jobDetail 的name ： group1</span><br><span class="line">jobDetail 的group ： group1</span><br><span class="line">==============================</span><br><span class="line">现在的时间是：<span class="number">2024</span>-<span class="number">11</span>-<span class="number">12</span> <span class="number">00</span>:<span class="number">59</span>:<span class="number">55</span></span><br><span class="line">jobDetail 的name ： group1</span><br><span class="line">jobDetail 的group ： group1</span><br><span class="line">==============================</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>使用@DisallowConcurrentExecution后</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 运行结果：</span></span><br><span class="line">现在的时间是：<span class="number">2024</span>-<span class="number">11</span>-<span class="number">12</span> <span class="number">01</span>:<span class="number">00</span>:<span class="number">48</span></span><br><span class="line">jobDetail 的name ： group1</span><br><span class="line">jobDetail 的group ： group1</span><br><span class="line">==============================</span><br><span class="line">现在的时间是：<span class="number">2024</span>-<span class="number">11</span>-<span class="number">12</span> <span class="number">01</span>:<span class="number">00</span>:<span class="number">50</span></span><br><span class="line">jobDetail 的name ： group1</span><br><span class="line">jobDetail 的group ： group1</span><br><span class="line">==============================</span><br><span class="line">现在的时间是：<span class="number">2024</span>-<span class="number">11</span>-<span class="number">12</span> <span class="number">01</span>:<span class="number">00</span>:<span class="number">52</span></span><br><span class="line">jobDetail 的name ： group1</span><br><span class="line">jobDetail 的group ： group1</span><br><span class="line">==============================</span><br></pre></td></tr></table></figure>
<p><strong>创建两个 Job 对象</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DisallowConcurrentExecution</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloJob5</span> <span class="keyword">implements</span> <span class="title class_">Job</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;现在的时间是：&quot;</span> + sf.format(date));</span><br><span class="line">        <span class="type">JobKey</span> <span class="variable">key</span> <span class="operator">=</span> jobExecutionContext.getJobDetail().getKey();</span><br><span class="line">        <span class="comment">//打印jobDetail 的name</span></span><br><span class="line">        System.out.println(<span class="string">&quot;jobDetail 的name ： &quot;</span> + key.getName());  </span><br><span class="line">        <span class="comment">//打印jobDetail 的group</span></span><br><span class="line">        System.out.println(<span class="string">&quot;jobDetail 的group ： &quot;</span> + key.getGroup());    </span><br><span class="line">        System.out.println(<span class="string">&quot;==============================&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SchedulerException &#123;</span><br><span class="line">        <span class="comment">//1.创建一个jobDetail的实例，将该实例与HelloJob Class绑定</span></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail1</span> <span class="operator">=</span> JobBuilder</span><br><span class="line">                .newJob(HelloJob5.class) <span class="comment">//定义Job类为HelloJob类，真正的执行逻辑所在</span></span><br><span class="line">                .withIdentity(<span class="string">&quot;group1&quot;</span>, <span class="string">&quot;group1&quot;</span>) <span class="comment">//定义name 和 group</span></span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建一个Trigger触发器的实例，定义该job立即执行，并且每2秒执行一次，一直执行</span></span><br><span class="line">        <span class="type">SimpleTrigger</span> <span class="variable">trigger1</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .withIdentity(<span class="string">&quot;myTrigger1&quot;</span>, <span class="string">&quot;group1&quot;</span>)</span><br><span class="line">                .startNow() <span class="comment">//立即生效</span></span><br><span class="line">                .withSchedule(SimpleScheduleBuilder.simpleSchedule()</span><br><span class="line">                        .withIntervalInSeconds(<span class="number">2</span>) <span class="comment">//每2秒执行一次</span></span><br><span class="line">                        .repeatForever()) <span class="comment">//一直执行</span></span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//3.创建schedule实例</span></span><br><span class="line">        <span class="type">StdSchedulerFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StdSchedulerFactory</span>();</span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> factory.getScheduler();</span><br><span class="line">        scheduler.start(); <span class="comment">//启动</span></span><br><span class="line">        scheduler.scheduleJob(jobDetail1, trigger1); <span class="comment">// jobDetail和trigger加入调度</span></span><br><span class="line"></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail2</span> <span class="operator">=</span> JobBuilder</span><br><span class="line">                .newJob(HelloJob5.class) <span class="comment">//定义Job类为HelloJob类，真正的执行逻辑所在</span></span><br><span class="line">                .withIdentity(<span class="string">&quot;group2&quot;</span>, <span class="string">&quot;group2&quot;</span>) <span class="comment">//定义name 和 group</span></span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建一个Trigger触发器的实例，定义该job立即执行，并且每2秒执行一次，一直执行</span></span><br><span class="line">        <span class="type">SimpleTrigger</span> <span class="variable">trigger2</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .withIdentity(<span class="string">&quot;myTrigger2&quot;</span>, <span class="string">&quot;group2&quot;</span>)</span><br><span class="line">                .startNow() <span class="comment">//立即生效</span></span><br><span class="line">                .withSchedule(SimpleScheduleBuilder.simpleSchedule()</span><br><span class="line">                        .withIntervalInSeconds(<span class="number">3</span>) <span class="comment">//每3秒执行一次</span></span><br><span class="line">                        .repeatForever()) <span class="comment">//一直执行</span></span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//3.创建schedule实例</span></span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler2</span> <span class="operator">=</span> factory.getScheduler();</span><br><span class="line">        scheduler2.start(); <span class="comment">//启动</span></span><br><span class="line">        scheduler2.scheduleJob(jobDetail2, trigger2); <span class="comment">// jobDetail和trigger加入调度</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line">现在的时间是：<span class="number">2024</span>-<span class="number">11</span>-<span class="number">12</span> <span class="number">01</span>:08:<span class="number">37</span></span><br><span class="line">现在的时间是：<span class="number">2024</span>-<span class="number">11</span>-<span class="number">12</span> <span class="number">01</span>:08:<span class="number">37</span></span><br><span class="line">jobDetail 的name ： group2</span><br><span class="line">jobDetail 的name ： group1</span><br><span class="line">jobDetail 的group ： group1</span><br><span class="line">jobDetail 的group ： group2</span><br><span class="line">==============================</span><br><span class="line">==============================</span><br><span class="line">现在的时间是：<span class="number">2024</span>-<span class="number">11</span>-<span class="number">12</span> <span class="number">01</span>:08:<span class="number">40</span></span><br><span class="line">jobDetail 的name ： group2</span><br><span class="line">jobDetail 的group ： group2</span><br><span class="line">==============================</span><br><span class="line">现在的时间是：<span class="number">2024</span>-<span class="number">11</span>-<span class="number">12</span> <span class="number">01</span>:08:<span class="number">40</span></span><br><span class="line">jobDetail 的name ： group1</span><br><span class="line">jobDetail 的group ： group1</span><br><span class="line">==============================</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>定时任务</tag>
        <tag>Quartz</tag>
      </tags>
  </entry>
  <entry>
    <title>Quartz（2-Trigger）</title>
    <url>/blog/2024/11/13/Java/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/Quartz/Quartz%EF%BC%882-Trigger%EF%BC%89/</url>
    <content><![CDATA[<h2 id="Trigger">Trigger</h2>
<h3 id="方法">方法</h3>
<ol>
<li>优先级（priority）</li>
</ol>
<p>如果你的 trigger 很多（或者 Quartz 线程池的工作线程太少），Quartz 可能没有足够的资源同时触发所有的 trigger；这种情况下，你可能希望控制哪些 trigger 优先使用 Quartz 的工作线程，要达到该目的，可以在 trigger 上设置 priority 属性。</p>
<p>比如，你有 N 个 trigger 需要同时触发，但只有 Z 个工作线程，优先级最高的 Z 个 trigger 会被首先触发</p>
<ol start="2">
<li>错过触发（misfire instructions）</li>
</ol>
<p>如果 scheduler 关闭了，或者 Quartz 线程池中没有可用的线程来执行 job，此时持久性的 trigger 就会错过(miss)其触发时间，即错过触发(misfire)。当下次调度器启动或者有可以线程时，会检查处于 misfire 状态的 Trigger。而 misfire 的状态值决定了调度器如何处理这个 Trigger。</p>
<p>不同类型的 trigger，有不同的 misfire 机制。它们默认都使用“智能机制（smart policy）”，即根据 trigger 的类型和配置动态调整行为</p>
<h3 id="分类">分类</h3>
<p><img src="1.png" alt=""></p>
<h2 id="SimpleTrigger">SimpleTrigger</h2>
<p>为需要在特定的日期/时间启动，且以一个可能的间隔时间重复执行 n 次的 job 所设计的</p>
<ol>
<li>startNow()：Scheduler 开始执行时，触发器也即执行</li>
<li>startAt()：在指定的时间开始执行</li>
<li>endAt()：结束时间</li>
</ol>
<p>执行间隔：</p>
<ol>
<li>withInterval(TimeSpan timeSpan)：通用的间隔执行方法</li>
<li>withIntervalInHours(int hours)：以小时为间隔单位进行执行</li>
<li>withIntervalInMinutes(int minutes)：以分钟为间隔单位进行执行</li>
<li>withIntervalInSeconds(int seconds)：以秒为间隔单位进行执行</li>
</ol>
<p>执行时间：</p>
<ol>
<li>withRepeatCount(int repeatCount)：执行多少次以后结束</li>
<li>repeatForever()：永远执行</li>
<li>repeatMinutelyForever()：一分钟执行一次(永远执行)</li>
<li>repeatMinutelyForever(int minutes)：每隔几分钟执行一次(永远执行)</li>
<li>repeatMinutelyForTotalCount(int count, int minutes)：每隔几分钟执行一次(执行次数为 count)类似的还有秒、小时。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Trigger1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SchedulerException &#123;</span><br><span class="line">        <span class="comment">//创建一个 JobDetail 的实例，将该实例与 HelloJob 绑定</span></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder.newJob(HelloJob.class)</span><br><span class="line">                .withIdentity(<span class="string">&quot;testJob&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//开始时间 3 秒钟之后 （具体时间按实际业务编写）</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">sData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        sData.setTime(sData.getTime() + <span class="number">3000</span>);</span><br><span class="line">        <span class="comment">//结束时间 20 秒钟之后 （具体时间按实际业务编写）</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">eData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        eData.setTime(eData.getTime() + <span class="number">20000</span>);</span><br><span class="line">        <span class="comment">//创建一个 Trigger 实例，定义该 job3 秒之后执行，在 6 秒之后结束</span></span><br><span class="line">        <span class="type">SimpleTrigger</span> <span class="variable">zhlTrigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                    .withIdentity(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">                    .startAt(sData) <span class="comment">//设定开始时间</span></span><br><span class="line">                    .endAt(eData)   <span class="comment">//设定结束时间</span></span><br><span class="line">                    .withSchedule(SimpleScheduleBuilder.simpleSchedule()</span><br><span class="line">                            .withIntervalInSeconds(<span class="number">2</span>) <span class="comment">//每两秒打印一次</span></span><br><span class="line">                            .withRepeatCount(<span class="number">2</span>)) <span class="comment">// 重复 2 次</span></span><br><span class="line">                    .build();</span><br><span class="line">        <span class="comment">//创建 Scheduler 实例</span></span><br><span class="line">        <span class="type">StdSchedulerFactory</span> <span class="variable">stdSchedulerFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StdSchedulerFactory</span>();</span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> stdSchedulerFactory.getScheduler();</span><br><span class="line">        scheduler.start();</span><br><span class="line">        scheduler.scheduleJob(jobDetail, zhlTrigger);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloJob</span> <span class="keyword">implements</span> <span class="title class_">Job</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line">        <span class="comment">//打印当前的执行时间 例如 2017-11-22 00:00:00</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;现在的时间是：&quot;</span>+ sf.format(date));</span><br><span class="line">        <span class="comment">//具体的业务逻辑</span></span><br><span class="line">        System.out.println(<span class="string">&quot;具体执行的业务...&quot;</span>);</span><br><span class="line">        <span class="type">JobKey</span> <span class="variable">key</span> <span class="operator">=</span> jobExecutionContext.getJobDetail().getKey();</span><br><span class="line">        <span class="type">Trigger</span> <span class="variable">trigger</span> <span class="operator">=</span> jobExecutionContext.getTrigger();</span><br><span class="line">        System.out.println(<span class="string">&quot;开始的时间：&quot;</span>+sf.format(trigger.getStartTime()));</span><br><span class="line">        System.out.println(<span class="string">&quot;结束的事件：&quot;</span>+sf.format(trigger.getEndTime()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="CronTrigger">CronTrigger</h2>
<p>指定对应的 cron 表达式执行任务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Trigger2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SchedulerException &#123;</span><br><span class="line">        <span class="comment">//创建一个 JobDetail 的实例，将该实例与 HelloJob 绑定</span></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder.newJob(HelloJob.class)</span><br><span class="line">                .withIdentity(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//开始时间 3 秒钟之后 （具体时间按实际业务编写）</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">sData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        sData.setTime(sData.getTime() + <span class="number">3000</span>);</span><br><span class="line">        <span class="comment">//结束时间 20 秒钟之后 （具体时间按实际业务编写）</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">eData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        eData.setTime(eData.getTime() + <span class="number">20000</span>);</span><br><span class="line">        <span class="comment">//创建一个 Trigger 实例，定义该 job3 秒之后执行，在 6 秒之后结束</span></span><br><span class="line">        <span class="type">CronTrigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .withIdentity(<span class="string">&quot;testTrigger&quot;</span>)</span><br><span class="line">                .startAt(sData) <span class="comment">//设定开始时间</span></span><br><span class="line">                .endAt(eData)   <span class="comment">//设定结束时间</span></span><br><span class="line">                .withSchedule(CronScheduleBuilder.cronSchedule(<span class="string">&quot;0/3 * * * * ?&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//创建 Scheduler 实例</span></span><br><span class="line">        <span class="type">StdSchedulerFactory</span> <span class="variable">stdSchedulerFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StdSchedulerFactory</span>();</span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> stdSchedulerFactory.getScheduler();</span><br><span class="line">        scheduler.start();</span><br><span class="line">        scheduler.scheduleJob(jobDetail, trigger);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="CalendarIntervalTrigger">CalendarIntervalTrigger</h2>
<p>用来触发基于定时重复的 JobDetail，Trigger 将会每隔 N 个 Calendar 在 Trigger 中定义的时间单元触发一次，这个 Trigger 不适合使用 SimpleTrigger 完成（例如由于每一个月的时间不是固定的描述），也不适用于 CronTrigger（例如每 5 个月）</p>
<p>相较于 SimpleTrigger 有两个优势：</p>
<ol>
<li>更方便，比如：每隔 1 小时执行，你不用自己去计算 1 小时等于多少毫秒。</li>
<li>支持不是固定长度的间隔，比如：间隔为月和年。但劣势是精度只能到秒。</li>
</ol>
<p>参数：</p>
<ol>
<li>interval：执行间隔</li>
<li>intervalUnit：执行间隔的单位（秒、分钟、小时、天、月、年、星期）</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Trigger4</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SchedulerException &#123;</span><br><span class="line">        <span class="comment">//创建一个 JobDetail 的实例，将该实例与 HelloJob 绑定</span></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder.newJob(HelloJob.class)</span><br><span class="line">                .withIdentity(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//开始时间 3 秒钟之后 （具体时间按实际业务编写）</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">sData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        sData.setTime(sData.getTime() + <span class="number">3000</span>);</span><br><span class="line">        <span class="comment">//结束时间 20 秒钟之后 （具体时间按实际业务编写）</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">eData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        eData.setTime(eData.getTime() + <span class="number">20000</span>);</span><br><span class="line">        <span class="comment">//创建一个 Trigger 实例，定义该 job3 秒之后执行，在 20 秒之后结束</span></span><br><span class="line">        <span class="type">CalendarIntervalTrigger</span> <span class="variable">intervalTrigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .withIdentity(<span class="string">&quot;testTrigger&quot;</span>)</span><br><span class="line">                .startAt(sData) <span class="comment">//设定开始时间</span></span><br><span class="line">                .endAt(eData)   <span class="comment">//设定结束时间</span></span><br><span class="line">                .withSchedule(CalendarIntervalScheduleBuilder.calendarIntervalSchedule()</span><br><span class="line">                        .withIntervalInSeconds(<span class="number">5</span>))	<span class="comment">// 每隔 5 秒执行一次</span></span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//创建 Scheduler 实例</span></span><br><span class="line">        <span class="type">StdSchedulerFactory</span> <span class="variable">stdSchedulerFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StdSchedulerFactory</span>();</span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> stdSchedulerFactory.getScheduler();</span><br><span class="line">        scheduler.start();</span><br><span class="line">        scheduler.scheduleJob(jobDetail, intervalTrigger);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="DailyTimeIntervalTrigger">DailyTimeIntervalTrigger</h2>
<p>指定每天的某个时间段内，以一定的时间间隔执行任务，并且可以支持星期的设置</p>
<p>适合的任务类似于：指定每天 9：00 至 18：00，每隔 10 秒执行一次，并且只要周一至周五执行</p>
<p>参数：</p>
<ol>
<li>onEveryDay：每天</li>
<li>onMondayThroughFriday：周一至周五，即工作日</li>
<li>onSaturdayAndSunday：周六至周天，即休息日 e</li>
<li>onDaysOfTheWeek：用数组的形式单独来指定一周中的哪几天</li>
<li>startingDailyAt：表示开始于几点 （区别于前面的 StartAt）</li>
<li>endingDailyAt：表示结束于几点 （区别于前面的 EndAt）</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Trigger3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SchedulerException &#123;</span><br><span class="line">        <span class="comment">//创建一个 JobDetail 的实例，将该实例与 HelloJob 绑定</span></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder.newJob(HelloJob.class)</span><br><span class="line">                .withIdentity(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//开始时间 3 秒钟之后 （具体时间按实际业务编写）</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">sData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        sData.setTime(sData.getTime() + <span class="number">3000</span>);</span><br><span class="line">        <span class="comment">//结束时间 20 秒钟之后 （具体时间按实际业务编写）</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">eData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        eData.setTime(eData.getTime() + <span class="number">20000</span>);</span><br><span class="line">        <span class="comment">//创建一个 Trigger 实例，定义该 job3 秒之后执行，在 20 秒之后结束</span></span><br><span class="line">        <span class="type">DailyTimeIntervalTrigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .withIdentity(<span class="string">&quot;testTrigger&quot;</span>)</span><br><span class="line">                .startAt(sData) <span class="comment">//设定开始时间</span></span><br><span class="line">                .endAt(eData)   <span class="comment">//设定结束时间</span></span><br><span class="line">                .withSchedule(DailyTimeIntervalScheduleBuilder.dailyTimeIntervalSchedule()</span><br><span class="line">                        .withIntervalInSeconds(<span class="number">3</span>)</span><br><span class="line">                        .onEveryDay()) <span class="comment">//每天每隔 3 秒执行一次</span></span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//创建 Scheduler 实例</span></span><br><span class="line">        <span class="type">StdSchedulerFactory</span> <span class="variable">stdSchedulerFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StdSchedulerFactory</span>();</span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> stdSchedulerFactory.getScheduler();</span><br><span class="line">        scheduler.start();</span><br><span class="line">        scheduler.scheduleJob(jobDetail, trigger);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="MutableTrigger">MutableTrigger</h2>
<p>Trigger 只是定义了相关属性的 Get 方法，并没有 Set 方法，而 MutableTrigger 接口则定义了相关属性的 set 方法，如：setKey 方法。</p>
<h2 id="OperableTrigger">OperableTrigger</h2>
<p>OperableTrigger 接口从字面上来说时可操作的 Trigger，也就是 Trigger 被 QuartzSchedulerThread 获取到之后，在不同情况下需要进行操作的接口。</p>
<ol>
<li>computeFirstFireTime：计算第一次触发时间。</li>
<li>triggered：trigger 被触发时调用的方法。</li>
<li>updateAfterMisfire：对应触发器失火后调用的方法。</li>
<li>executionComplete：触发器本次触发完成时被调用的方法。</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>定时任务</tag>
        <tag>Quartz</tag>
      </tags>
  </entry>
  <entry>
    <title>Quartz（3-Scheduler）</title>
    <url>/blog/2024/11/14/Java/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/Quartz/Quartz%EF%BC%883-Scheduler%EF%BC%89/</url>
    <content><![CDATA[<h2 id="BaseCalendar">BaseCalendar</h2>
<p>专门用于屏蔽一个时间区间，使 Trigger 在这个区间中不被触发</p>
<p><img src="1.png" alt=""></p>
<h3 id="AnnualCalendar">AnnualCalendar</h3>
<p>排除每一年中指定的一天或多少天，精度是天</p>
<h3 id="CronCalendar">CronCalendar</h3>
<p>使用表达式排除某些时间段不执行，精度取决于 Cron 表达式，最大精度到秒</p>
<h3 id="DailyCalendar">DailyCalendar</h3>
<p>指定的时间范围内的每一天不执行，指定每天的时间段，格式是 HH: MM [: SS[mmm]]，即最大精度可以到毫秒</p>
<h3 id="HolidayCalendar">HolidayCalendar</h3>
<p>排除节假日，精度到天</p>
<h3 id="MonthlyCalendar">MonthlyCalendar</h3>
<p>排除月份中的数天，可选值为 1-31，精度是天</p>
<h3 id="WeeklyCalendar">WeeklyCalendar</h3>
<p>排除星期中的一天或多天，可选值比如为：java.util.Calendar.SUNDAY，精度是天</p>
<h3 id="基本使用">基本使用</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalendarSchedule</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SchedulerException &#123;</span><br><span class="line">        <span class="comment">//创建一个 JobDetail 的实例，将该实例与 HelloJob 绑定</span></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder.newJob(HelloJob.class)</span><br><span class="line">                                .withIdentity(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">                                .build();</span><br><span class="line">        <span class="type">AnnualCalendar</span> <span class="variable">holidays</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnualCalendar</span>();</span><br><span class="line">        <span class="comment">// 排除今天的时间 2017 年 11 月 27 日（月份是从 0～11 的）</span></span><br><span class="line">        <span class="type">GregorianCalendar</span> <span class="variable">nationalDay</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GregorianCalendar</span>(<span class="number">2017</span>, <span class="number">10</span>, <span class="number">27</span>);  </span><br><span class="line">        <span class="comment">// 排除的日期，如果为 false 则为包含</span></span><br><span class="line">        holidays.setDayExcluded(nationalDay,<span class="literal">true</span>); </span><br><span class="line"></span><br><span class="line">        <span class="type">Trigger</span> <span class="variable">simpleTrigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .withIdentity(<span class="string">&quot;testTrigger&quot;</span>)</span><br><span class="line">                .withSchedule(SimpleScheduleBuilder.simpleSchedule()</span><br><span class="line">                              .withIntervalInSeconds(<span class="number">1</span>)</span><br><span class="line">                              .repeatForever()) <span class="comment">//每一秒执行一次 job</span></span><br><span class="line">                .modifiedByCalendar(<span class="string">&quot;holidays&quot;</span>)   <span class="comment">//将我们设置好的 Calander 与 trigger 绑定</span></span><br><span class="line">                .build();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//创建 Scheduler 实例</span></span><br><span class="line">        <span class="type">StdSchedulerFactory</span> <span class="variable">stdSchedulerFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StdSchedulerFactory</span>();</span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> stdSchedulerFactory.getScheduler();</span><br><span class="line">        <span class="comment">//向 Scheduler 注册日历</span></span><br><span class="line">        scheduler.addCalendar(<span class="string">&quot;holidays&quot;</span>,holidays,<span class="literal">false</span>,<span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//让 trigger 应用指定的日历规则</span></span><br><span class="line">        scheduler.scheduleJob(jobDetail,simpleTrigger);</span><br><span class="line">        scheduler.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="定时任务增删改查">定时任务增删改查</h2>
<p><strong>参考 Scheduler 源码中的方法</strong></p>
<p>通过配置文件定义每个任务的属性，项目启动后将每个任务加载到内存中，将其中一个任务用来监听配置文件的修改，当其修改后动态刷新任务</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定时任务</span></span><br><span class="line"><span class="attr">quartz:</span></span><br><span class="line">  <span class="attr">jobs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">myName</span> <span class="comment">#（随便取任务名）</span></span><br><span class="line">      <span class="attr">group:</span> <span class="string">collect</span></span><br><span class="line">      <span class="attr">cron:</span> <span class="number">0</span> <span class="number">0</span><span class="string">/5</span> <span class="string">*</span> <span class="string">*</span> <span class="string">*</span> <span class="string">?</span> <span class="string">*</span></span><br><span class="line">      <span class="attr">jobClass:</span> <span class="string">com.gamer.me.quartz.jobs.MyJob</span> <span class="comment">#（自己的定时任务的执行类，也就是你写业务代码的类）</span></span><br><span class="line">      <span class="attr">desc:</span> <span class="string">我的任务</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SchedulerJob</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String group;</span><br><span class="line">    <span class="keyword">private</span> String cron;</span><br><span class="line">    <span class="keyword">private</span> String jobClass;</span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;quartz&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SchedulerJobs</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;SchedulerJob&gt; jobs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SchedulerManager</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Scheduler scheduler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 激活任务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> schedulerJob</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">activeJob</span><span class="params">(SchedulerJob schedulerJob)</span>&#123;</span><br><span class="line">        <span class="type">JobKey</span> <span class="variable">jobKey</span> <span class="operator">=</span> JobKey.jobKey(schedulerJob.getName(), schedulerJob.getGroup());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (scheduler.checkExists(jobKey) &amp;&amp; !MonitorCronJob.JOB_NAME.equals(schedulerJob.getName())) &#123;</span><br><span class="line">                updateJob(schedulerJob);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                createJob(schedulerJob);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;activeJob &#123;&#125;&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建任务并加入调度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> schedulerJob</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createJob</span><span class="params">(SchedulerJob schedulerJob)</span>&#123;</span><br><span class="line">        <span class="type">JobKey</span> <span class="variable">jobKey</span> <span class="operator">=</span> JobKey.jobKey(schedulerJob.getName(), schedulerJob.getGroup());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (scheduler.checkExists(jobKey)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Class&lt;?&gt; clazz = Class.forName(schedulerJob.getJobClass());</span><br><span class="line">            <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> getJobDetail(schedulerJob, (Class&lt;Job&gt;) clazz);</span><br><span class="line">            <span class="type">Trigger</span> <span class="variable">cronTrigger</span> <span class="operator">=</span> getCronTrigger(schedulerJob);</span><br><span class="line">            <span class="comment">//加入调度器</span></span><br><span class="line">            scheduler.scheduleJob(jobDetail, cronTrigger);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | SchedulerException e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;createJob &#123;&#125;&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新任务触发器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> schedulerJob</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateJob</span><span class="params">(SchedulerJob schedulerJob)</span>&#123;</span><br><span class="line">        <span class="type">TriggerKey</span> <span class="variable">triggerKey</span> <span class="operator">=</span> TriggerKey.triggerKey(schedulerJob.getName(), schedulerJob.getGroup());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Trigger</span> <span class="variable">trigger</span> <span class="operator">=</span> scheduler.getTrigger(triggerKey);</span><br><span class="line">            <span class="keyword">if</span> (trigger == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">JobKey</span> <span class="variable">jobKey</span> <span class="operator">=</span> trigger.getJobKey();</span><br><span class="line">            <span class="comment">//查询 cron</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">oldCron</span> <span class="operator">=</span> ((CronTrigger)trigger).getCronExpression();</span><br><span class="line">            <span class="comment">//没有变化则返回</span></span><br><span class="line">            <span class="keyword">if</span> (oldCron.equals(schedulerJob.getCron()))&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Trigger</span> <span class="variable">cronTrigger</span> <span class="operator">=</span> getCronTrigger(schedulerJob);</span><br><span class="line">            <span class="comment">//加入调度器</span></span><br><span class="line">            scheduler.rescheduleJob(triggerKey, cronTrigger);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;updateJob &#123;&#125;&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteJobs</span><span class="params">(List&lt;JobKey&gt; jobKeys)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            scheduler.deleteJobs(jobKeys);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;deleteJobs &#123;&#125;&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建任务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> schedulerJob</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> JobDetail <span class="title function_">getJobDetail</span><span class="params">(SchedulerJob schedulerJob, Class&lt;Job&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> JobBuilder.newJob()</span><br><span class="line">                .ofType(clazz)</span><br><span class="line">                .withIdentity(schedulerJob.getName(), schedulerJob.getGroup())</span><br><span class="line">                .withDescription(schedulerJob.getDesc())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建触发器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> schedulerJob</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Trigger <span class="title function_">getCronTrigger</span><span class="params">(SchedulerJob schedulerJob)</span> &#123;</span><br><span class="line">        <span class="type">CronScheduleBuilder</span> <span class="variable">cronScheduleBuilder</span> <span class="operator">=</span> CronScheduleBuilder.cronSchedule(schedulerJob.getCron());</span><br><span class="line">        <span class="keyword">if</span> (!MonitorCronJob.JOB_NAME.equals(schedulerJob.getName()))&#123;</span><br><span class="line">            <span class="comment">//任务错过执行策略，以错过的第一个频率时间立刻开始执行，重做错过的所有频率周期后，当下一次触发频率发生时间大于当前时间后，再按照正常的 Cron 频率依次执行</span></span><br><span class="line">            cronScheduleBuilder.withMisfireHandlingInstructionIgnoreMisfires();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .withIdentity(schedulerJob.getName(), schedulerJob.getGroup())</span><br><span class="line">                .withDescription(schedulerJob.getDesc())</span><br><span class="line">                .withSchedule(cronScheduleBuilder)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>监控其他定时任务的总任务 MonitorCronJob（用于监控 cron 的更新）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MonitorCronJob</span> <span class="keyword">implements</span> <span class="title class_">Job</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">JOB_NAME</span> <span class="operator">=</span> <span class="string">&quot;monitor_cron&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">GROUP_NAME</span> <span class="operator">=</span> <span class="string">&quot;monitor&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CRON</span> <span class="operator">=</span> <span class="string">&quot;0 0/10 * * * ?&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DESC</span> <span class="operator">=</span> <span class="string">&quot;监控cron更新&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SchedulerManager schedulerManager;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SchedulerJobs schedulerJobs;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ContextRefresher contextRefresher;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line">        <span class="comment">//重新加载配置</span></span><br><span class="line">        contextRefresher.refresh();</span><br><span class="line">        Set&lt;JobKey&gt; oldJobKeys = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            oldJobKeys = jobExecutionContext.getScheduler().getJobKeys(GroupMatcher.anyJobGroup());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;MonitorCronJob &#123;&#125;&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; newJobKeys = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (SchedulerJob job : schedulerJobs.getJobs()) &#123;</span><br><span class="line">            <span class="comment">//过滤掉 monitor_cron 任务</span></span><br><span class="line">            <span class="keyword">if</span> (job.getName().equals(JOB_NAME)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            newJobKeys.add(job.getName());</span><br><span class="line">            logger.info(<span class="string">&quot;job【&#123;&#125;】,cron【&#123;&#125;】&quot;</span>, job.getName(), job.getCron());</span><br><span class="line">            schedulerManager.activeJob(job);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (oldJobKeys == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//删除没有配置的任务</span></span><br><span class="line">        List&lt;JobKey&gt; shouldDeleteJobKeys = oldJobKeys.stream()</span><br><span class="line">                .filter(jobKey -&gt; !JOB_NAME.equals(jobKey.getName()) &amp;&amp; !newJobKeys.contains(jobKey.getName()))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        logger.info(<span class="string">&quot;delete jobs &#123;&#125;&quot;</span>, shouldDeleteJobKeys);</span><br><span class="line">        schedulerManager.deleteJobs(shouldDeleteJobKeys);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Initialization</span> <span class="keyword">implements</span> <span class="title class_">ApplicationRunner</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SchedulerManager schedulerManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SchedulerJob</span> <span class="variable">schedulerJob</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SchedulerJob</span>();</span><br><span class="line">        schedulerJob.setName(MonitorCronJob.JOB_NAME);</span><br><span class="line">        schedulerJob.setGroup(MonitorCronJob.GROUP_NAME);</span><br><span class="line">        schedulerJob.setCron(MonitorCronJob.CRON);</span><br><span class="line">        schedulerJob.setDesc(MonitorCronJob.DESC);</span><br><span class="line">        schedulerJob.setJobClass(MonitorCronJob.class.getName());</span><br><span class="line">        schedulerManager.activeJob(schedulerJob);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="SchedulerRepository-详解">SchedulerRepository 详解</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保持对调度器实例的引用-确保唯一性，以及防止垃圾收集，并允许“全球”查找-所有在一个类加载器空间。</span></span><br><span class="line"><span class="comment"> * 调度程序库，采用单例模式存储任务调度 Schedule</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SchedulerRepository</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String, Scheduler&gt; schedulers;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SchedulerRepository inst;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SchedulerRepository</span><span class="params">()</span> &#123;</span><br><span class="line">        schedulers = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Scheduler&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> SchedulerRepository <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (inst == <span class="literal">null</span>) &#123;</span><br><span class="line">            inst = <span class="keyword">new</span> <span class="title class_">SchedulerRepository</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> inst;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定新的任务调度器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">bind</span><span class="params">(Scheduler sched)</span> <span class="keyword">throws</span> SchedulerException &#123;</span><br><span class="line">        <span class="keyword">if</span> ((Scheduler) schedulers.get(sched.getSchedulerName()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SchedulerException</span>(<span class="string">&quot;Scheduler with name &#x27;&quot;</span></span><br><span class="line">                    + sched.getSchedulerName() + <span class="string">&quot;&#x27; already exists.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        schedulers.put(sched.getSchedulerName(), sched);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除新的任务调度器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(String schedName)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (schedulers.remove(schedName) != <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询新的任务调度器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> Scheduler <span class="title function_">lookup</span><span class="params">(String schedName)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> schedulers.get(schedName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有任务调度器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> Collection&lt;Scheduler&gt; <span class="title function_">lookupAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> java.util.Collections.unmodifiableCollection(schedulers.values());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="StdSchedulerFactory-详解">StdSchedulerFactory 详解</h2>
<p>SchedulerFacotory 是一个接口，它有两个实现：</p>
<ol>
<li>StdSchedulerFacotory 通过配置文件来设置 Scheduler 的各项参数</li>
<li>DirectSchedulerFactory 主要通过硬编码来设置 Scheduler 的各项参数</li>
</ol>
<h3 id="构造方法">构造方法</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">StdSchedulerFactory</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">StdSchedulerFactory</span><span class="params">(Properties props)</span> <span class="keyword">throws</span> SchedulerException &#123;</span><br><span class="line">    initialize(props);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">StdSchedulerFactory</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> SchedulerException &#123;</span><br><span class="line">    initialize(fileName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="getScheduler">getScheduler()</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加载 quartz.properties，初始化 StdScheduler</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Scheduler <span class="title function_">getScheduler</span><span class="params">()</span> <span class="keyword">throws</span> SchedulerException &#123;</span><br><span class="line">	<span class="comment">// 加载 quartz.properties</span></span><br><span class="line">    <span class="keyword">if</span> (cfg == <span class="literal">null</span>) &#123;</span><br><span class="line">        initialize();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 单例的 SchedulerRepository 实例</span></span><br><span class="line">    <span class="type">SchedulerRepository</span> <span class="variable">schedRep</span> <span class="operator">=</span> SchedulerRepository.getInstance();</span><br><span class="line">    <span class="comment">// 从缓存中查询获取 Schedule 任务，任务名称从配置中获取，若无指定，则默认指定 QuartzScheduler</span></span><br><span class="line">    <span class="type">Scheduler</span> <span class="variable">sched</span> <span class="operator">=</span> schedRep.lookup(getSchedulerName());</span><br><span class="line">	<span class="comment">// 判断若存在且已停止运行，则从缓存中移除</span></span><br><span class="line">    <span class="keyword">if</span> (sched != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sched.isShutdown()) &#123;</span><br><span class="line">            schedRep.remove(getSchedulerName());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> sched;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 初始化 StdScheduler</span></span><br><span class="line">    sched = instantiate();</span><br><span class="line">    <span class="keyword">return</span> sched;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>getScheduler()会推迟实例化，当调用其方法时才会去初始化 Quartz 的配置</p>
<h3 id="initialize">initialize()</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据配置文件初始化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">()</span> <span class="keyword">throws</span> SchedulerException &#123;</span><br><span class="line">    <span class="comment">// 如果已经存在，直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (cfg != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (initException != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> initException;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 从环境变量 PROPERTIES_FILE = org.quartz.properties 是否存在指定读取的配置文件</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">requestedFile</span> <span class="operator">=</span> System.getProperty(PROPERTIES_FILE);</span><br><span class="line">    <span class="comment">// 不主动设置，默认设置为 quartz.properties</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">propFileName</span> <span class="operator">=</span> requestedFile != <span class="literal">null</span> ? requestedFile: <span class="string">&quot;quartz.properties&quot;</span>;</span><br><span class="line">    <span class="type">File</span> <span class="variable">propFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(propFileName);</span><br><span class="line"></span><br><span class="line">    <span class="type">Properties</span> <span class="variable">props</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 读取配置文件内容，如果都不存在依次读取 quartz.properties、/quartz.properties、org/quartz/quartz.properties</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (propFile.exists()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (requestedFile != <span class="literal">null</span>) &#123;</span><br><span class="line">                    propSrc = <span class="string">&quot;specified file: &#x27;&quot;</span> + requestedFile + <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    propSrc = <span class="string">&quot;default file in current working dir: &#x27;quartz.properties&#x27;&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                in = <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(propFileName));</span><br><span class="line">                props.load(in);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">                initException = <span class="keyword">new</span> <span class="title class_">SchedulerException</span>(<span class="string">&quot;Properties file: &#x27;&quot;</span></span><br><span class="line">                        + propFileName + <span class="string">&quot;&#x27; could not be read.&quot;</span>, ioe);</span><br><span class="line">                <span class="keyword">throw</span> initException;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (requestedFile != <span class="literal">null</span>) &#123;</span><br><span class="line">            in = Thread.currentThread().getContextClassLoader().getResourceAsStream(requestedFile);</span><br><span class="line">            <span class="keyword">if</span>(in == <span class="literal">null</span>) &#123;</span><br><span class="line">                initException = <span class="keyword">new</span> <span class="title class_">SchedulerException</span>(<span class="string">&quot;Properties file: &#x27;&quot;</span></span><br><span class="line">                    + requestedFile + <span class="string">&quot;&#x27; could not be found.&quot;</span>);</span><br><span class="line">                <span class="keyword">throw</span> initException;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            propSrc = <span class="string">&quot;specified file: &#x27;&quot;</span> + requestedFile + <span class="string">&quot;&#x27; in the class resource path.&quot;</span>;</span><br><span class="line">            in = <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(in);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                props.load(in);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">                initException = <span class="keyword">new</span> <span class="title class_">SchedulerException</span>(<span class="string">&quot;Properties file: &#x27;&quot;</span></span><br><span class="line">                        + requestedFile + <span class="string">&quot;&#x27; could not be read.&quot;</span>, ioe);</span><br><span class="line">                <span class="keyword">throw</span> initException;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            propSrc = <span class="string">&quot;default resource file in Quartz package: &#x27;quartz.properties&#x27;&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">ClassLoader</span> <span class="variable">cl</span> <span class="operator">=</span> getClass().getClassLoader();</span><br><span class="line">            <span class="keyword">if</span>(cl == <span class="literal">null</span>)</span><br><span class="line">                cl = findClassloader();</span><br><span class="line">            <span class="keyword">if</span>(cl == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SchedulerConfigException</span>(<span class="string">&quot;Unable to find a class loader on the current thread or class.&quot;</span>);</span><br><span class="line"></span><br><span class="line">            in = cl.getResourceAsStream(<span class="string">&quot;quartz.properties&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (in == <span class="literal">null</span>) &#123;</span><br><span class="line">                in = cl.getResourceAsStream(<span class="string">&quot;/quartz.properties&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (in == <span class="literal">null</span>) &#123;</span><br><span class="line">                in = cl.getResourceAsStream(<span class="string">&quot;org/quartz/quartz.properties&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (in == <span class="literal">null</span>) &#123;</span><br><span class="line">                initException = <span class="keyword">new</span> <span class="title class_">SchedulerException</span>(</span><br><span class="line">                        <span class="string">&quot;Default quartz.properties not found in class path&quot;</span>);</span><br><span class="line">                <span class="keyword">throw</span> initException;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                props.load(in);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">                initException = <span class="keyword">new</span> <span class="title class_">SchedulerException</span>(</span><br><span class="line">                        <span class="string">&quot;Resource properties file: &#x27;org/quartz/quartz.properties&#x27; &quot;</span></span><br><span class="line">                                + <span class="string">&quot;could not be read from the classpath.&quot;</span>, ioe);</span><br><span class="line">                <span class="keyword">throw</span> initException;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(in != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123; in.close(); &#125; <span class="keyword">catch</span>(IOException ignore) &#123; <span class="comment">/* ignore */</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//赋值</span></span><br><span class="line">    initialize(overrideWithSysProps(props));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加系统配置，如果跟之前的配置相同则覆盖，以系统配置为主</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Properties <span class="title function_">overrideWithSysProps</span><span class="params">(Properties props)</span> &#123;</span><br><span class="line">    <span class="type">Properties</span> <span class="variable">sysProps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        sysProps = System.getProperties();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (AccessControlException e) &#123;</span><br><span class="line">        getLog().warn(</span><br><span class="line">            <span class="string">&quot;Skipping overriding quartz properties with System properties &quot;</span> +</span><br><span class="line">            <span class="string">&quot;during initialization because of an AccessControlException.  &quot;</span> +</span><br><span class="line">            <span class="string">&quot;This is likely due to not having read/write access for &quot;</span> +</span><br><span class="line">            <span class="string">&quot;java.util.PropertyPermission as required by java.lang.System.getProperties().  &quot;</span> +</span><br><span class="line">            <span class="string">&quot;To resolve this warning, either add this permission to your policy file or &quot;</span> +</span><br><span class="line">            <span class="string">&quot;use a non-default version of initialize().&quot;</span>,</span><br><span class="line">            e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (sysProps != <span class="literal">null</span>) &#123;</span><br><span class="line">        props.putAll(sysProps);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> props;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(Properties props)</span> <span class="keyword">throws</span> SchedulerException &#123;</span><br><span class="line">    <span class="keyword">if</span> (propSrc == <span class="literal">null</span>) &#123;</span><br><span class="line">        propSrc = <span class="string">&quot;an externally provided properties instance.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.cfg = <span class="keyword">new</span> <span class="title class_">PropertiesParser</span>(props);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过查看源码可知，quartz 的配置文件加载流程如下：</p>
<ol>
<li>查看是否有系统变量指定了配置文件路径</li>
<li>在当前项目下面查找名为 quartz.properties 的文件</li>
<li>通过类加载器加载当前 classpath 路径下的 quartz.properties、/quartz.properties、org/quartz/quartz.properties 的资源文件</li>
</ol>
<p>这里需要注意的是，一旦自己指定了 quartz.properties 文件，那么 quartz 默认提供的配置将不会被加载，因此也就不会生效</p>
<p><strong>Quartz 默认配置文件</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#实例名称</span></span><br><span class="line"><span class="attr">org.quartz.scheduler.instanceName</span>: <span class="string">DefaultQuartzScheduler</span></span><br><span class="line"><span class="comment">#远程方法调用</span></span><br><span class="line"><span class="attr">org.quartz.scheduler.rmi.export</span>: <span class="string">false</span></span><br><span class="line"><span class="attr">org.quartz.scheduler.rmi.proxy</span>: <span class="string">false</span></span><br><span class="line"><span class="comment">#是否将任务放在事务中执行</span></span><br><span class="line"><span class="attr">org.quartz.scheduler.wrapJobExecutionInUserTransaction</span>: <span class="string">false</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#线程池</span></span><br><span class="line"><span class="attr">org.quartz.threadPool.class</span>: <span class="string">org.quartz.simpl.SimpleThreadPool</span></span><br><span class="line"><span class="comment">#线程个数</span></span><br><span class="line"><span class="attr">org.quartz.threadPool.threadCount</span>: <span class="string">10</span></span><br><span class="line"><span class="comment">#线程优先级</span></span><br><span class="line"><span class="attr">org.quartz.threadPool.threadPriority</span>: <span class="string">5</span></span><br><span class="line"><span class="attr">org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread</span>: <span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#失火的阈值</span></span><br><span class="line"><span class="attr">org.quartz.jobStore.misfireThreshold</span>: <span class="string">60000</span></span><br><span class="line"><span class="comment">#使用内存方式存储</span></span><br><span class="line"><span class="attr">org.quartz.jobStore.class</span>: <span class="string">org.quartz.simpl.RAMJobStore</span></span><br></pre></td></tr></table></figure>
<h3 id="instantiate">instantiate()</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StdSchedulerFactory</span> <span class="keyword">implements</span> <span class="title class_">SchedulerFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROPERTIES_FILE</span> <span class="operator">=</span> <span class="string">&quot;org.quartz.properties&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_SCHED_INSTANCE_NAME</span> <span class="operator">=</span> <span class="string">&quot;org.quartz.scheduler.instanceName&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_SCHED_INSTANCE_ID</span> <span class="operator">=</span> <span class="string">&quot;org.quartz.scheduler.instanceId&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_SCHED_INSTANCE_ID_GENERATOR_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;org.quartz.scheduler.instanceIdGenerator&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_SCHED_INSTANCE_ID_GENERATOR_CLASS</span> <span class="operator">=</span></span><br><span class="line">        PROP_SCHED_INSTANCE_ID_GENERATOR_PREFIX + <span class="string">&quot;.class&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_SCHED_THREAD_NAME</span> <span class="operator">=</span> <span class="string">&quot;org.quartz.scheduler.threadName&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_SCHED_BATCH_TIME_WINDOW</span> <span class="operator">=</span> <span class="string">&quot;org.quartz.scheduler.batchTriggerAcquisitionFireAheadTimeWindow&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_SCHED_MAX_BATCH_SIZE</span> <span class="operator">=</span> <span class="string">&quot;org.quartz.scheduler.batchTriggerAcquisitionMaxCount&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_SCHED_JMX_EXPORT</span> <span class="operator">=</span> <span class="string">&quot;org.quartz.scheduler.jmx.export&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_SCHED_JMX_OBJECT_NAME</span> <span class="operator">=</span> <span class="string">&quot;org.quartz.scheduler.jmx.objectName&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_SCHED_JMX_PROXY</span> <span class="operator">=</span> <span class="string">&quot;org.quartz.scheduler.jmx.proxy&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_SCHED_JMX_PROXY_CLASS</span> <span class="operator">=</span> <span class="string">&quot;org.quartz.scheduler.jmx.proxy.class&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_SCHED_RMI_EXPORT</span> <span class="operator">=</span> <span class="string">&quot;org.quartz.scheduler.rmi.export&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_SCHED_RMI_PROXY</span> <span class="operator">=</span> <span class="string">&quot;org.quartz.scheduler.rmi.proxy&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_SCHED_RMI_HOST</span> <span class="operator">=</span> <span class="string">&quot;org.quartz.scheduler.rmi.registryHost&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_SCHED_RMI_PORT</span> <span class="operator">=</span> <span class="string">&quot;org.quartz.scheduler.rmi.registryPort&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_SCHED_RMI_SERVER_PORT</span> <span class="operator">=</span> <span class="string">&quot;org.quartz.scheduler.rmi.serverPort&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_SCHED_RMI_CREATE_REGISTRY</span> <span class="operator">=</span> <span class="string">&quot;org.quartz.scheduler.rmi.createRegistry&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_SCHED_RMI_BIND_NAME</span> <span class="operator">=</span> <span class="string">&quot;org.quartz.scheduler.rmi.bindName&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_SCHED_WRAP_JOB_IN_USER_TX</span> <span class="operator">=</span> <span class="string">&quot;org.quartz.scheduler.wrapJobExecutionInUserTransaction&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_SCHED_USER_TX_URL</span> <span class="operator">=</span> <span class="string">&quot;org.quartz.scheduler.userTransactionURL&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_SCHED_IDLE_WAIT_TIME</span> <span class="operator">=</span> <span class="string">&quot;org.quartz.scheduler.idleWaitTime&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_SCHED_DB_FAILURE_RETRY_INTERVAL</span> <span class="operator">=</span> <span class="string">&quot;org.quartz.scheduler.dbFailureRetryInterval&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_SCHED_MAKE_SCHEDULER_THREAD_DAEMON</span> <span class="operator">=</span> <span class="string">&quot;org.quartz.scheduler.makeSchedulerThreadDaemon&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_SCHED_SCHEDULER_THREADS_INHERIT_CONTEXT_CLASS_LOADER_OF_INITIALIZING_THREAD</span> <span class="operator">=</span> <span class="string">&quot;org.quartz.scheduler.threadsInheritContextClassLoaderOfInitializer&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_SCHED_CLASS_LOAD_HELPER_CLASS</span> <span class="operator">=</span> <span class="string">&quot;org.quartz.scheduler.classLoadHelper.class&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_SCHED_JOB_FACTORY_CLASS</span> <span class="operator">=</span> <span class="string">&quot;org.quartz.scheduler.jobFactory.class&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_SCHED_JOB_FACTORY_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;org.quartz.scheduler.jobFactory&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_SCHED_INTERRUPT_JOBS_ON_SHUTDOWN</span> <span class="operator">=</span> <span class="string">&quot;org.quartz.scheduler.interruptJobsOnShutdown&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_SCHED_INTERRUPT_JOBS_ON_SHUTDOWN_WITH_WAIT</span> <span class="operator">=</span> <span class="string">&quot;org.quartz.scheduler.interruptJobsOnShutdownWithWait&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_SCHED_CONTEXT_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;org.quartz.context.key&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_THREAD_POOL_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;org.quartz.threadPool&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_THREAD_POOL_CLASS</span> <span class="operator">=</span> <span class="string">&quot;org.quartz.threadPool.class&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_JOB_STORE_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;org.quartz.jobStore&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_JOB_STORE_LOCK_HANDLER_PREFIX</span> <span class="operator">=</span> PROP_JOB_STORE_PREFIX + <span class="string">&quot;.lockHandler&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_JOB_STORE_LOCK_HANDLER_CLASS</span> <span class="operator">=</span> PROP_JOB_STORE_LOCK_HANDLER_PREFIX + <span class="string">&quot;.class&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_TABLE_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;tablePrefix&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_SCHED_NAME</span> <span class="operator">=</span> <span class="string">&quot;schedName&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_JOB_STORE_CLASS</span> <span class="operator">=</span> <span class="string">&quot;org.quartz.jobStore.class&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_JOB_STORE_USE_PROP</span> <span class="operator">=</span> <span class="string">&quot;org.quartz.jobStore.useProperties&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_DATASOURCE_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;org.quartz.dataSource&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_CONNECTION_PROVIDER_CLASS</span> <span class="operator">=</span> <span class="string">&quot;connectionProvider.class&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@deprecated</span> Replaced with &#123;<span class="doctag">@link</span> PoolingConnectionProvider#DB_DRIVER&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_DATASOURCE_DRIVER</span> <span class="operator">=</span> <span class="string">&quot;driver&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@deprecated</span> Replaced with &#123;<span class="doctag">@link</span> PoolingConnectionProvider#DB_URL&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_DATASOURCE_URL</span> <span class="operator">=</span> <span class="string">&quot;URL&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@deprecated</span> Replaced with &#123;<span class="doctag">@link</span> PoolingConnectionProvider#DB_USER&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_DATASOURCE_USER</span> <span class="operator">=</span> <span class="string">&quot;user&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@deprecated</span> Replaced with &#123;<span class="doctag">@link</span> PoolingConnectionProvider#DB_PASSWORD&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_DATASOURCE_PASSWORD</span> <span class="operator">=</span> <span class="string">&quot;password&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@deprecated</span> Replaced with &#123;<span class="doctag">@link</span> PoolingConnectionProvider#DB_MAX_CONNECTIONS&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_DATASOURCE_MAX_CONNECTIONS</span> <span class="operator">=</span> <span class="string">&quot;maxConnections&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@deprecated</span> Replaced with &#123;<span class="doctag">@link</span> PoolingConnectionProvider#DB_VALIDATION_QUERY&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_DATASOURCE_VALIDATION_QUERY</span> <span class="operator">=</span> <span class="string">&quot;validationQuery&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_DATASOURCE_JNDI_URL</span> <span class="operator">=</span> <span class="string">&quot;jndiURL&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_DATASOURCE_JNDI_ALWAYS_LOOKUP</span> <span class="operator">=</span> <span class="string">&quot;jndiAlwaysLookup&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_DATASOURCE_JNDI_INITIAL</span> <span class="operator">=</span> <span class="string">&quot;java.naming.factory.initial&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_DATASOURCE_JNDI_PROVDER</span> <span class="operator">=</span> <span class="string">&quot;java.naming.provider.url&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_DATASOURCE_JNDI_PRINCIPAL</span> <span class="operator">=</span> <span class="string">&quot;java.naming.security.principal&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_DATASOURCE_JNDI_CREDENTIALS</span> <span class="operator">=</span> <span class="string">&quot;java.naming.security.credentials&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_PLUGIN_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;org.quartz.plugin&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_PLUGIN_CLASS</span> <span class="operator">=</span> <span class="string">&quot;class&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_JOB_LISTENER_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;org.quartz.jobListener&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_TRIGGER_LISTENER_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;org.quartz.triggerListener&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_LISTENER_CLASS</span> <span class="operator">=</span> <span class="string">&quot;class&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_INSTANCE_ID</span> <span class="operator">=</span> <span class="string">&quot;NON_CLUSTERED&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">AUTO_GENERATE_INSTANCE_ID</span> <span class="operator">=</span> <span class="string">&quot;AUTO&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_THREAD_EXECUTOR</span> <span class="operator">=</span> <span class="string">&quot;org.quartz.threadExecutor&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROP_THREAD_EXECUTOR_CLASS</span> <span class="operator">=</span> <span class="string">&quot;org.quartz.threadExecutor.class&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SYSTEM_PROPERTY_AS_INSTANCE_ID</span> <span class="operator">=</span> <span class="string">&quot;SYS_PROP&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MANAGEMENT_REST_SERVICE_ENABLED</span> <span class="operator">=</span> <span class="string">&quot;org.quartz.managementRESTService.enabled&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MANAGEMENT_REST_SERVICE_HOST_PORT</span> <span class="operator">=</span> <span class="string">&quot;org.quartz.managementRESTService.bind&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>instantiate()方法主要就是根据之前加载好的配置文件来创建出 scheduler 需要用到的一些对象。</p>
<p>主要对象：</p>
<ol>
<li>Job：业务逻辑类需要时间的接口</li>
<li>JobStore：主要用于存储 Job 和 Trigger</li>
<li>JobFactory：job 实例化工厂</li>
<li>ThreadPool：主要用于分配任务给具体的线程进行执行</li>
<li>QuartzSchedulerThread：管理者线程</li>
<li>WorkThread：工作者线程</li>
<li>DBConnectionManager：数据库连接管理器</li>
<li>ThreadExecutor：线程执行器</li>
<li>SchedulerPlugin：调度器插件</li>
<li>JobListener：任务监听器</li>
<li>Trigger：触发器</li>
<li>Schedule：时间表</li>
<li>TriggerListerne：触发器监听器</li>
<li>JobRunShellFactory：jobRunShell 的工厂</li>
<li>JobRunShell：实现了 Runnale 接口，会调用对应实例化的 job 的 execute 方法</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>定时任务</tag>
        <tag>Quartz</tag>
      </tags>
  </entry>
  <entry>
    <title>Quartz（4-Listener）</title>
    <url>/blog/2024/11/16/Java/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/Quartz/Quartz%EF%BC%884-Listener%EF%BC%89/</url>
    <content><![CDATA[<h2 id="ListenerManager">ListenerManager</h2>
<p>可以通过ListenerManager向scheduler中添加我们的监听器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ListenerManager</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addJobListener</span><span class="params">(JobListener jobListener)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addJobListener</span><span class="params">(JobListener jobListener, Matcher&lt;JobKey&gt; matcher)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addJobListener</span><span class="params">(JobListener jobListener, Matcher&lt;JobKey&gt; ... matchers)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addJobListener</span><span class="params">(JobListener jobListener, List&lt;Matcher&lt;JobKey&gt;&gt; matchers)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addJobListenerMatcher</span><span class="params">(String listenerName, Matcher&lt;JobKey&gt; matcher)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">removeJobListenerMatcher</span><span class="params">(String listenerName, Matcher&lt;JobKey&gt; matcher)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">setJobListenerMatchers</span><span class="params">(String listenerName, List&lt;Matcher&lt;JobKey&gt;&gt; matchers)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Matcher&lt;JobKey&gt;&gt; <span class="title function_">getJobListenerMatchers</span><span class="params">(String listenerName)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">removeJobListener</span><span class="params">(String name)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;JobListener&gt; <span class="title function_">getJobListeners</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> JobListener <span class="title function_">getJobListener</span><span class="params">(String name)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addTriggerListener</span><span class="params">(TriggerListener triggerListener)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addTriggerListener</span><span class="params">(TriggerListener triggerListener, Matcher&lt;TriggerKey&gt; matcher)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addTriggerListener</span><span class="params">(TriggerListener triggerListener, Matcher&lt;TriggerKey&gt; ... matchers)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addTriggerListener</span><span class="params">(TriggerListener triggerListener, List&lt;Matcher&lt;TriggerKey&gt;&gt; matchers)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addTriggerListenerMatcher</span><span class="params">(String listenerName, Matcher&lt;TriggerKey&gt; matcher)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">removeTriggerListenerMatcher</span><span class="params">(String listenerName, Matcher&lt;TriggerKey&gt; matcher)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">setTriggerListenerMatchers</span><span class="params">(String listenerName, List&lt;Matcher&lt;TriggerKey&gt;&gt; matchers)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Matcher&lt;TriggerKey&gt;&gt; <span class="title function_">getTriggerListenerMatchers</span><span class="params">( String listenerName)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">removeTriggerListener</span><span class="params">(String name)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;TriggerListener&gt; <span class="title function_">getTriggerListeners</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TriggerListener <span class="title function_">getTriggerListener</span><span class="params">(String name)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addSchedulerListener</span><span class="params">(SchedulerListener schedulerListener)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">removeSchedulerListener</span><span class="params">(SchedulerListener schedulerListener)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;SchedulerListener&gt; <span class="title function_">getSchedulerListeners</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Matcher">Matcher</h2>
<h3 id="KeyMatcher">KeyMatcher</h3>
<p>根据JobKey进行匹配，每个JobDetail都有一个对应的JobKey，里面存储了JobName和JobGroup来定位唯一的JobDetail</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构造匹配pickNewsJob中的JobKey的keyMatcher。</span></span><br><span class="line">KeyMatcher&lt;JobKey&gt; keyMatcher = KeyMatcher.keyEquals(pickNewsJob.getKey());</span><br><span class="line"><span class="comment">//通过这句完成我们监听器对pickNewsJob的唯一监听</span></span><br><span class="line">scheduler.getListenerManager().addJobListener(myJobListener, keyMatcher);</span><br></pre></td></tr></table></figure>
<h3 id="GroupMatcher">GroupMatcher</h3>
<p>根据组名信息匹配</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">GroupMatcher&lt;JobKey&gt; groupMatcher1 = GroupMatcher.jobGroupContains(<span class="string">&quot;group1&quot;</span>);<span class="comment">//包含特定字符串</span></span><br><span class="line">GroupMatcher&lt;JobKey&gt; groupMatcher2 = GroupMatcher.groupEndsWith(<span class="string">&quot;oup1&quot;</span>);<span class="comment">//以特定字符串结尾</span></span><br><span class="line">GroupMatcher&lt;JobKey&gt; groupMatcher3 = GroupMatcher.groupEquals(<span class="string">&quot;jgroup1&quot;</span>);<span class="comment">//以特定字符串完全匹配</span></span><br><span class="line">GroupMatcher&lt;JobKey&gt; groupMatcher4 = GroupMatcher.groupStartsWith(<span class="string">&quot;jgou&quot;</span>);<span class="comment">//以特定字符串开头</span></span><br></pre></td></tr></table></figure>
<h3 id="AndMatcher">AndMatcher</h3>
<p>对两个匹配器取交集</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">KeyMatcher&lt;JobKey&gt; keyMatcher = KeyMatcher.keyEquals(pickNewsJob.getKey());</span><br><span class="line">GroupMatcher&lt;JobKey&gt; groupMatcher = GroupMatcher.jobGroupContains(<span class="string">&quot;group1&quot;</span>);</span><br><span class="line">AndMatcher&lt;JobKey&gt; andMatcher = AndMatcher.and(keyMatcher, groupMatcher);<span class="comment">//同时满足两个入参匹配</span></span><br></pre></td></tr></table></figure>
<h3 id="OrMatcher">OrMatcher</h3>
<p>对两个匹配器取并集</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OrMatcher&lt;JobKey&gt; orMatcher = OrMatcher.or(keyMatcher, groupMatcher);<span class="comment">//满足任意一个即可</span></span><br></pre></td></tr></table></figure>
<h3 id="EverythingMatcher">EverythingMatcher</h3>
<p>局部全局匹配</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EverythingMatcher.allJobs();<span class="comment">//对全部JobListener匹配</span></span><br><span class="line">EverythingMatcher.allTriggers();<span class="comment">//对全部TriggerListener匹配</span></span><br></pre></td></tr></table></figure>
<h2 id="JobListener">JobListener</h2>
<h3 id="方法">方法</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">JobListener</span> &#123;</span><br><span class="line">    <span class="comment">//用于获取该JobListener的名称</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Scheduler在JobDetail将要被执行时调用这个方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jobToBeExecuted</span><span class="params">(JobExecutionContext context)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Scheduler在JobDetail即将被执行，但又被TriggerListener否决时会调用该方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jobExecutionVetoed</span><span class="params">(JobExecutionContext context)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Scheduler在JobDetail被执行之后调用这个方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jobWasExecuted</span><span class="params">(JobExecutionContext context, JobExecutionException jobException)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="基本使用">基本使用</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Job1</span> <span class="keyword">implements</span> <span class="title class_">Job</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line">        <span class="comment">// 输出当前时间</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">dateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">dateString</span> <span class="operator">=</span> dateFormat.format(date);</span><br><span class="line">        <span class="comment">// 工作内容</span></span><br><span class="line">        System.out.println(<span class="string">&quot;正在进行数据库的备份工作，备份数据库的时间是：&quot;</span> +dateString);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JobListener1</span> <span class="keyword">implements</span> <span class="title class_">JobListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;================================&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getSimpleName();</span><br><span class="line">        System.out.println(<span class="string">&quot;监听器的名称是：&quot;</span> +name);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jobToBeExecuted</span><span class="params">(JobExecutionContext context)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> context.getJobDetail().getKey().getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;Job的名称是：&quot;</span> +name + <span class="string">&quot;，Scheduler在JobDetail被执行之前调用这个方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jobExecutionVetoed</span><span class="params">(JobExecutionContext context)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> context.getJobDetail().getKey().getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;Job的名称是：&quot;</span> +name + <span class="string">&quot;，Scheduler在JobDetail即将被执行，但又被TriggerListener否决时会调用该方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jobWasExecuted</span><span class="params">(JobExecutionContext context, JobExecutionException jobException)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> context.getJobDetail().getKey().getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;Job的名称是：&quot;</span> +name + <span class="string">&quot;，Scheduler在JobDetail被执行之后调用这个方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1、调度器（Scheduler），从工厂中获取调度的实例（默认：实例化new StdSchedulerFactory();）</span></span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> StdSchedulerFactory.getDefaultScheduler();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、任务实例（JobDetail）定义一个任务调度实例，将该实例与HelloJobSimpleTrigger绑定，任务类需要实现Job接口</span></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder.newJob(Job1.class) <span class="comment">// 加载任务类，与HelloJob完成绑定，要求HelloJob实现Job接口</span></span><br><span class="line">                .withIdentity(<span class="string">&quot;job1&quot;</span>, <span class="string">&quot;group1&quot;</span>) <span class="comment">// 参数1：任务的名称（唯一实例）；参数2：任务组的名称</span></span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、触发器（Trigger）定义触发器，马上执行，然后每5秒重复执行一次</span></span><br><span class="line">        <span class="type">Trigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .withIdentity(<span class="string">&quot;trigger1&quot;</span>, <span class="string">&quot;group1&quot;</span>) <span class="comment">// 参数1：触发器的名称（唯一实例）；参数2：触发器组的名称</span></span><br><span class="line">                .startNow()</span><br><span class="line">                .withSchedule(SimpleScheduleBuilder.repeatSecondlyForever(<span class="number">5</span>)</span><br><span class="line">                        .withRepeatCount(<span class="number">2</span>))  <span class="comment">// 每5秒执行一次，连续执行3次后停止，默认是0</span></span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">// 4、让调度器关联任务和触发器，保证按照触发器定义的调整执行任务</span></span><br><span class="line">        scheduler.scheduleJob(jobDetail, trigger);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建并注册一个局部的Job Listener，表示指定的任务Job</span></span><br><span class="line">        scheduler.getListenerManager().addJobListener(<span class="keyword">new</span> <span class="title class_">JobListener1</span>(), KeyMatcher.keyEquals(JobKey.jobKey(<span class="string">&quot;job1&quot;</span>, <span class="string">&quot;group1&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5、启动</span></span><br><span class="line">        scheduler.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 执行结果：</span></span><br><span class="line">================================</span><br><span class="line">监听器的名称是：Listener1</span><br><span class="line">================================</span><br><span class="line">监听器的名称是：Listener1</span><br><span class="line">================================</span><br><span class="line">监听器的名称是：Listener1</span><br><span class="line">================================</span><br><span class="line">监听器的名称是：Listener1</span><br><span class="line">================================</span><br><span class="line">监听器的名称是：Listener1</span><br><span class="line">Job的名称是：job1，Scheduler在JobDetail被执行之前调用这个方法</span><br><span class="line">正在进行数据库的备份工作，备份数据库的时间是：<span class="number">2024</span>-<span class="number">11</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">20</span>:<span class="number">11</span></span><br><span class="line">================================</span><br><span class="line">监听器的名称是：Listener1</span><br><span class="line">Job的名称是：job1，Scheduler在JobDetail被执行之后调用这个方法</span><br><span class="line">================================</span><br><span class="line">监听器的名称是：Listener1</span><br><span class="line">Job的名称是：job1，Scheduler在JobDetail被执行之前调用这个方法</span><br><span class="line">正在进行数据库的备份工作，备份数据库的时间是：<span class="number">2024</span>-<span class="number">11</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">20</span>:<span class="number">16</span></span><br><span class="line">================================</span><br><span class="line">监听器的名称是：Listener1</span><br><span class="line">Job的名称是：job1，Scheduler在JobDetail被执行之后调用这个方法</span><br><span class="line">================================</span><br><span class="line">监听器的名称是：Listener1</span><br><span class="line">Job的名称是：job1，Scheduler在JobDetail被执行之前调用这个方法</span><br><span class="line">正在进行数据库的备份工作，备份数据库的时间是：<span class="number">2024</span>-<span class="number">11</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">20</span>:<span class="number">21</span></span><br><span class="line">================================</span><br><span class="line">监听器的名称是：Listener1</span><br><span class="line">Job的名称是：job1，Scheduler在JobDetail被执行之后调用这个方法</span><br></pre></td></tr></table></figure>
<h2 id="TriggerListener">TriggerListener</h2>
<h3 id="方法-2">方法</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TriggerListener</span> &#123;</span><br><span class="line">    <span class="comment">//用于获取触发器的名称</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//当与监听器关联的Trigger被触发，Job上的Execute()方法将被执行时，Scheduler就调用该方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">triggerFired</span><span class="params">(Trigger trigger, JobExecutionContext context)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//在Trigger触发后，Job将要执行时由Scheduler调用这个方法。TriggerListener给了一个选择去否决Job的执行。</span></span><br><span class="line">    <span class="comment">//假如这个方法返回true，这个Job将不会为此次Trigger触发而得到执行。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">vetoJobExecution</span><span class="params">(Trigger trigger, JobExecutionContext context)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Scheduler调用这个方法是在Trigger错过触发时。你应该关注此方法中持续时间长的逻辑：</span></span><br><span class="line">    <span class="comment">//在出现许多错过触发的Trigger时，长逻辑会导致骨牌效应。你应当保持这个方法尽量的小。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">triggerMisfired</span><span class="params">(Trigger trigger)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Trigger被触发并且完成了Job的执行时，Scheduler调用这个方法。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">triggerComplete</span><span class="params">(Trigger trigger, JobExecutionContext context, CompletedExecutionInstruction triggerInstructionCode)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="基本使用-2">基本使用</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TriggerListener1</span> <span class="keyword">implements</span> <span class="title class_">TriggerListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=========================&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getSimpleName();</span><br><span class="line">        System.out.println(<span class="string">&quot;触发器的名称是：&quot;</span> +name);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">triggerFired</span><span class="params">(Trigger trigger, JobExecutionContext context)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getSimpleName();</span><br><span class="line">        System.out.println(name +<span class="string">&quot;被触发&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">vetoJobExecution</span><span class="params">(Trigger trigger, JobExecutionContext context)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getSimpleName();</span><br><span class="line">        <span class="comment">// TriggerListener给了一个选择去否决Job的执行。假如这个方法返回true，这个Job将不会为此次Trigger触发而得到执行。</span></span><br><span class="line">        System.out.println(name +<span class="string">&quot;否决没有被触发&quot;</span>);</span><br><span class="line">        <span class="comment">// true:表示不会执行Job的方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">triggerMisfired</span><span class="params">(Trigger trigger)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getSimpleName();</span><br><span class="line">        <span class="comment">// Scheduler调用这个方法是在Trigger错过触发时</span></span><br><span class="line">        System.out.println(name +<span class="string">&quot;错过触发&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">triggerComplete</span><span class="params">(Trigger trigger, JobExecutionContext context,</span></span><br><span class="line"><span class="params">                                Trigger.CompletedExecutionInstruction triggerInstructionCode)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getSimpleName();</span><br><span class="line">        <span class="comment">// Trigger被触发并且完成了Job的执行时，Scheduler调用这个方法。</span></span><br><span class="line">        System.out.println(name +<span class="string">&quot;完成之后触发&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1、调度器（Scheduler），从工厂中获取调度的实例（默认：实例化new StdSchedulerFactory();）</span></span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> StdSchedulerFactory.getDefaultScheduler();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、任务实例（JobDetail）定义一个任务调度实例，将该实例与HelloJobSimpleTrigger绑定，任务类需要实现Job接口</span></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder.newJob(Job1.class) <span class="comment">// 加载任务类，与HelloJob完成绑定，要求HelloJob实现Job接口</span></span><br><span class="line">                .withIdentity(<span class="string">&quot;job1&quot;</span>, <span class="string">&quot;group1&quot;</span>) <span class="comment">// 参数1：任务的名称（唯一实例）；参数2：任务组的名称</span></span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、触发器（Trigger）定义触发器，马上执行，然后每5秒重复执行一次</span></span><br><span class="line">        <span class="type">Trigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .withIdentity(<span class="string">&quot;trigger1&quot;</span>, <span class="string">&quot;group1&quot;</span>) <span class="comment">// 参数1：触发器的名称（唯一实例）；参数2：触发器组的名称</span></span><br><span class="line">                .startNow()</span><br><span class="line">                .withSchedule(SimpleScheduleBuilder.repeatSecondlyForever(<span class="number">5</span>)</span><br><span class="line">                        .withRepeatCount(<span class="number">2</span>))  <span class="comment">// 每5秒执行一次，连续执行3次后停止，默认是0</span></span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">// 4、让调度器关联任务和触发器，保证按照触发器定义的调整执行任务</span></span><br><span class="line">        scheduler.scheduleJob(jobDetail, trigger);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建并注册一个局部的Job Listener，表示指定的任务Job</span></span><br><span class="line"><span class="comment">//        scheduler.getListenerManager().addJobListener(new JobListener1(), KeyMatcher.keyEquals(JobKey.jobKey(&quot;job1&quot;, &quot;group1&quot;)));</span></span><br><span class="line">        scheduler.getListenerManager().addTriggerListener(<span class="keyword">new</span> <span class="title class_">TriggerListener1</span>(), KeyMatcher.keyEquals(TriggerKey.triggerKey(<span class="string">&quot;trigger1&quot;</span>, <span class="string">&quot;group1&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5、启动</span></span><br><span class="line">        scheduler.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 执行结果：</span></span><br><span class="line">=========================</span><br><span class="line">触发器的名称是：TriggerListener1</span><br><span class="line">=========================</span><br><span class="line">触发器的名称是：TriggerListener1</span><br><span class="line">=========================</span><br><span class="line">触发器的名称是：TriggerListener1</span><br><span class="line">=========================</span><br><span class="line">触发器的名称是：TriggerListener1</span><br><span class="line">=========================</span><br><span class="line">触发器的名称是：TriggerListener1</span><br><span class="line">TriggerListener1被触发</span><br><span class="line">TriggerListener1否决没有被触发</span><br><span class="line">正在进行数据库的备份工作，备份数据库的时间是：<span class="number">2024</span>-<span class="number">11</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">34</span>:<span class="number">59</span></span><br><span class="line">=========================</span><br><span class="line">触发器的名称是：TriggerListener1</span><br><span class="line">TriggerListener1完成之后触发</span><br><span class="line">=========================</span><br><span class="line">触发器的名称是：TriggerListener1</span><br><span class="line">TriggerListener1被触发</span><br><span class="line">TriggerListener1否决没有被触发</span><br><span class="line">正在进行数据库的备份工作，备份数据库的时间是：<span class="number">2024</span>-<span class="number">11</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">35</span>:<span class="number">04</span></span><br><span class="line">=========================</span><br><span class="line">触发器的名称是：TriggerListener1</span><br><span class="line">TriggerListener1完成之后触发</span><br><span class="line">=========================</span><br><span class="line">触发器的名称是：TriggerListener1</span><br><span class="line">TriggerListener1被触发</span><br><span class="line">TriggerListener1否决没有被触发</span><br><span class="line">正在进行数据库的备份工作，备份数据库的时间是：<span class="number">2024</span>-<span class="number">11</span>-<span class="number">16</span> <span class="number">13</span>:<span class="number">35</span>:09</span><br><span class="line">=========================</span><br><span class="line">触发器的名称是：TriggerListener1</span><br><span class="line">TriggerListener1完成之后触发</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong></p>
<p>Job和Trigger监听器的调用顺序：</p>
<ol>
<li>成功时：triggerFired=&gt;vetoJobExecution=&gt;jobToBeExecuted=&gt;jobWasExecuted=&gt;triggerComplete</li>
<li>失败时：triggerFired=&gt;vetoJobExecution=&gt;jobExecutionVetoed</li>
</ol>
<h2 id="SchedulerListener">SchedulerListener</h2>
<h3 id="方法-3">方法</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SchedulerListener</span> &#123;</span><br><span class="line">    <span class="comment">//用于部署JobDetail时调用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jobScheduled</span><span class="params">(Trigger trigger)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//用于卸载JobDetail时调用。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jobUnscheduled</span><span class="params">(TriggerKey triggerKey)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//当一个Trigger来到了再也不会触发的状态时调用这个方法。除非这个Job已设置成了持久性，否则它就会从Scheduler中移除</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">triggerFinalized</span><span class="params">(Trigger trigger)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Scheduler调用这个方法是发生在一个Trigger或Trigger组被暂停时。假如是Trigger组的话，triggerName参数将为null</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">triggersPaused</span><span class="params">(String triggerGroup)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Scheduler调用这个方法是发生在一个Trigger或Trigger组从暂停中恢复时。假如是Trigger组的话，triggerName参数将为null</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">triggersResumed</span><span class="params">(String triggerGroup)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//当一个或一组JobDetail暂停时调用这个方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jobsPaused</span><span class="params">(String jobGroup)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//当一个或一组Job从暂停上恢复时调用这个方法。假如是一个Job组，jobName将为null</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jobsResumed</span><span class="params">(String jobGroup)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//在Scheduler的正常运行期间产生一个严重错误时调用这个方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">schedulerError</span><span class="params">(String msg, SchedulerException cause)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//当Scheduler开启时，调用该方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">schedulerStarted</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//当Scheduler处于StandBy模式时，调用该方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">schedulerInStandbyMode</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//当Scheduler停止时，调用该方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">schedulerShutdown</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//当Scheduler中的数据被清除时，调用该方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">schedulingDataCleared</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="基本使用-3">基本使用</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SchedulerListener1</span> <span class="keyword">implements</span> <span class="title class_">SchedulerListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jobScheduled</span><span class="params">(Trigger trigger)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> trigger.getKey().getName();</span><br><span class="line">        <span class="comment">// 用于部署JobDetail时调用</span></span><br><span class="line">        System.out.println(name +<span class="string">&quot; 完成部署&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jobUnscheduled</span><span class="params">(TriggerKey triggerKey)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> triggerKey.getName();</span><br><span class="line">        <span class="comment">// 用于卸载JobDetail时调用</span></span><br><span class="line">        System.out.println(name +<span class="string">&quot; 完成卸载&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">triggerFinalized</span><span class="params">(Trigger trigger)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> trigger.getKey().getName();</span><br><span class="line">        <span class="comment">// 当一个Trigger来到了再也不会触发的状态时调用这个方法。除非这个Job已设置成了持久性，否则它就会从Scheduler中移除。</span></span><br><span class="line">        System.out.println(name +<span class="string">&quot; 触发器被移除&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">triggerPaused</span><span class="params">(TriggerKey triggerKey)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> triggerKey.getName();</span><br><span class="line">        <span class="comment">// Scheduler调用这个方法是发生在一个Trigger或Trigger组被暂停时。假如是Trigger组的话，triggerName参数将为null。</span></span><br><span class="line">        System.out.println(name +<span class="string">&quot; 正在被暂停&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">triggersPaused</span><span class="params">(String triggerGroup)</span> &#123;</span><br><span class="line">        <span class="comment">// Scheduler调用这个方法是发生在一个Trigger或Trigger组被暂停时。假如是Trigger组的话，triggerName参数将为null。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;触发器组&quot;</span> +triggerGroup +<span class="string">&quot; 正在被暂停&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">triggerResumed</span><span class="params">(TriggerKey triggerKey)</span> &#123;</span><br><span class="line">        <span class="comment">// Scheduler调用这个方法是发生在一个Trigger或Trigger组从暂停中恢复时。假如是Trigger组的话，triggerName参数将为null。参数将为null。</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> triggerKey.getName();</span><br><span class="line">        System.out.println(name +<span class="string">&quot; 正在从暂停中恢复&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">triggersResumed</span><span class="params">(String triggerGroup)</span> &#123;</span><br><span class="line">        <span class="comment">// Scheduler调用这个方法是发生在一个Trigger或Trigger组从暂停中恢复时。假如是Trigger组的话，triggerName参数将为null。参数将为null。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;触发器组&quot;</span> +triggerGroup +<span class="string">&quot; 正在从暂停中恢复&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jobAdded</span><span class="params">(JobDetail jobDetail)</span> &#123;</span><br><span class="line">        System.out.println(jobDetail.getKey() +<span class="string">&quot; 添加工作任务&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jobDeleted</span><span class="params">(JobKey jobKey)</span> &#123;</span><br><span class="line">        System.out.println(jobKey +<span class="string">&quot; 删除工作任务&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jobPaused</span><span class="params">(JobKey jobKey)</span> &#123;</span><br><span class="line">        System.out.println(jobKey +<span class="string">&quot; 工作任务正在被暂停&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jobsPaused</span><span class="params">(String jobGroup)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;工作组&quot;</span> +jobGroup +<span class="string">&quot; 正在被暂停&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jobResumed</span><span class="params">(JobKey jobKey)</span> &#123;</span><br><span class="line">        System.out.println(jobKey +<span class="string">&quot; 正在从暂停中恢复&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jobsResumed</span><span class="params">(String jobGroup)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;工作组&quot;</span> +jobGroup +<span class="string">&quot; 正在从暂停中恢复&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">schedulerError</span><span class="params">(String msg, SchedulerException cause)</span> &#123;</span><br><span class="line">        <span class="comment">// 在Scheduler的正常运行期间产生一个严重错误时调用这个方法。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;产生严重错误的时候调用&quot;</span> +msg +<span class="string">&quot;    &quot;</span> +cause.getUnderlyingException());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">schedulerInStandbyMode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 当Scheduler处于StandBy模式时，调用该方法。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;调度器被挂起模式的时候调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">schedulerStarted</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调度器开启的时候调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">schedulerStarting</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调度器正在开启的时候调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">schedulerShutdown</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调度器关闭的时候调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">schedulerShuttingdown</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调度器正在关闭的时候调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">schedulingDataCleared</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调度器数据被清除的时候调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1、调度器（Scheduler），从工厂中获取调度的实例（默认：实例化new StdSchedulerFactory();）</span></span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> StdSchedulerFactory.getDefaultScheduler();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、任务实例（JobDetail）定义一个任务调度实例，将该实例与HelloJobSimpleTrigger绑定，任务类需要实现Job接口</span></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder.newJob(Job1.class) <span class="comment">// 加载任务类，与HelloJob完成绑定，要求HelloJob实现Job接口</span></span><br><span class="line">                .withIdentity(<span class="string">&quot;job1&quot;</span>, <span class="string">&quot;group1&quot;</span>) <span class="comment">// 参数1：任务的名称（唯一实例）；参数2：任务组的名称</span></span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、触发器（Trigger）定义触发器，马上执行，然后每5秒重复执行一次</span></span><br><span class="line">        <span class="type">Trigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .withIdentity(<span class="string">&quot;trigger1&quot;</span>, <span class="string">&quot;group1&quot;</span>) <span class="comment">// 参数1：触发器的名称（唯一实例）；参数2：触发器组的名称</span></span><br><span class="line">                .startNow()</span><br><span class="line">                .withSchedule(SimpleScheduleBuilder.repeatSecondlyForever(<span class="number">5</span>)</span><br><span class="line">                        .withRepeatCount(<span class="number">2</span>))  <span class="comment">// 每5秒执行一次，连续执行3次后停止，默认是0</span></span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">// 4、让调度器关联任务和触发器，保证按照触发器定义的调整执行任务</span></span><br><span class="line">        scheduler.scheduleJob(jobDetail, trigger);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建并注册一个局部的Job Listener，表示指定的任务Job</span></span><br><span class="line">        <span class="comment">//scheduler.getListenerManager().addJobListener(new JobListener1(), KeyMatcher.keyEquals(JobKey.jobKey(&quot;job1&quot;, &quot;group1&quot;)));</span></span><br><span class="line">        <span class="comment">//scheduler.getListenerManager().addTriggerListener(new TriggerListener1(), KeyMatcher.keyEquals(TriggerKey.triggerKey(&quot;trigger1&quot;, &quot;group1&quot;)));</span></span><br><span class="line">        scheduler.getListenerManager().addSchedulerListener(<span class="keyword">new</span> <span class="title class_">SchedulerListener1</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5、启动</span></span><br><span class="line">        scheduler.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>定时任务</tag>
        <tag>Quartz</tag>
      </tags>
  </entry>
  <entry>
    <title>Git（1-基本概念）</title>
    <url>/blog/2024/12/05/Java/%E5%B7%A5%E4%BD%9C%E6%8A%80%E5%B7%A7/Git/Git%EF%BC%881-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%EF%BC%89/</url>
    <content><![CDATA[<h2 id="Git-与-SVN">Git 与 SVN</h2>
<p>Git 属于分布式版本控制，而 SVN 属于集中式版本控制</p>
<ol>
<li>集中式版本控制只有中心服务器拥有一份代码，每个开发者只能从中央服务器获取代码，并且提交修改也需要依赖于中央服务器；而分布式版本控制每个人的电脑上都有一份完整的代码，可以独立地进行开发和版本控制，在本地进行提交、分支、合并等操作</li>
<li>集中式版本控制有安全性问题，当中心服务器挂了所有人都没办法工作了，需要连网才能工作，如果网速过慢，那么提交一个文件会慢的无法让人忍受，新建一个分支相当于复制一份完整代码；而分布式版本控制不需要连网就能工作，新建分支、合并分支操作速度非常快</li>
</ol>
<h2 id="基本概念">基本概念</h2>
<table>
<thead>
<tr>
<th style="text-align:left"><strong>概念名称</strong></th>
<th style="text-align:left"><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">工作区（Workspace）</td>
<td style="text-align:left">在电脑里能看到的代码库目录，新增、修改的文件会提交到暂存区</td>
</tr>
<tr>
<td style="text-align:left">暂存区（stage 或 index）</td>
<td style="text-align:left">用于临时存放文件的修改，实际上它只是一个文件（<code>.git/index</code>），保存待提交的文件列表信息。</td>
</tr>
<tr>
<td style="text-align:left">版本库/仓库（Repository）</td>
<td style="text-align:left">Git 的管理仓库，管理版本的数据库，记录文件/目录状态的地方，所有内容的修改记录（版本）都在这里。</td>
</tr>
<tr>
<td style="text-align:left">服务端/远程仓库（origin 或 remote）</td>
<td style="text-align:left">服务端的版本库，专用的 Git 服务器，为多人共享提供服务，承担中心服务器的角色。本地版本库通过 push 指令把代码推送到服务端版本库。</td>
</tr>
<tr>
<td style="text-align:left">本地仓库</td>
<td style="text-align:left">用户机器上直接使用的的的版本库</td>
</tr>
<tr>
<td style="text-align:left">分支（Branch）</td>
<td style="text-align:left">分支是从主线分离出去的“副本”，可以独立操作而互不干扰，仓库初始化就有一个默认主分支 <code>master</code>。</td>
</tr>
<tr>
<td style="text-align:left">头（HEAD）</td>
<td style="text-align:left">HEAD 类似一个“指针”，指向当前活动分支的最新版本。</td>
</tr>
<tr>
<td style="text-align:left">提交（Commit）</td>
<td style="text-align:left">把暂存区的所有变更的内容提交到当前仓库的活动分支。</td>
</tr>
<tr>
<td style="text-align:left">推送（Push）</td>
<td style="text-align:left">将本地仓库的版本推送到服务端（远程）仓库，与他人共享。</td>
</tr>
<tr>
<td style="text-align:left">拉取（Pull）</td>
<td style="text-align:left">从服务端（远程）仓库获取更新到本地仓库，获取他人共享的更新。</td>
</tr>
<tr>
<td style="text-align:left">获取（Fetch）</td>
<td style="text-align:left">从服务端（远程）仓库更新，作用同拉取（Pull），区别是不会自动合并。</td>
</tr>
<tr>
<td style="text-align:left">冲突（Conflict）</td>
<td style="text-align:left">多人对同一文件的工作副本进行更改，并将这些更改合并到仓库时就会面临冲突，需要人工合并处理。</td>
</tr>
<tr>
<td style="text-align:left">合并（Merge）</td>
<td style="text-align:left">对有冲突的文件进行合并操作，Git 会自动合并变更内容，无法自动处理的冲突内容会提示人工处理。</td>
</tr>
<tr>
<td style="text-align:left">标签（Tags）</td>
<td style="text-align:left">标签指的是某个分支某个特定时间点的状态，可以理解为提交记录的别名，常用来标记版本。</td>
</tr>
<tr>
<td style="text-align:left">master（或 main）</td>
<td style="text-align:left">仓库的“<code>master</code>”分支，默认的主分支，初始化仓库就有了。Github 上创建的仓库默认名字为“<code>main</code>”</td>
</tr>
<tr>
<td style="text-align:left">origin/master</td>
<td style="text-align:left">表示远程仓库（<code>origin</code>）的“<code>master</code>”分支</td>
</tr>
<tr>
<td style="text-align:left">origin/HEAD</td>
<td style="text-align:left">表示远程仓库（<code>origin</code>）的最新提交的位置，一般情况等于“<code>origin/master</code>”</td>
</tr>
</tbody>
</table>
<h2 id="工作区-暂存区-仓库">工作区/暂存区/仓库</h2>
<p>新建一个仓库之后，当前目录就成为了工作区，工作区下有一个隐藏目录.git，它属于 Git 的版本库，Git 的版本库有一个称为 Stage 的暂存区以及最后的 History 版本库，History 存储所有分支信息，使用一个 HEAD 指针指向当前分支</p>
<p><img src="1.png" alt=""></p>
<ol>
<li>workspace（工作区）：平时存放项目代码的地方</li>
<li>index/stage（暂存区）：用于临时存放改动文件</li>
<li>repository（仓库区或版本库）：安全存放数据的位置</li>
<li>remote（远程仓库）：托管代码的服务器</li>
</ol>
<p><img src="2.png" alt=""></p>
<ol>
<li>hexo 为项目目录，也就是 Git 工作区。</li>
<li>项目根目录下隐藏的.git 目录就是 Git 仓库目录了，存放了所有 Git 管理的信息。</li>
<li>.git/config 为该仓库的配置文件，可通过指令修改或直接修改。</li>
<li>index 文件就是存放的暂存区内容。</li>
</ol>
<h2 id="分支">分支</h2>
<h3 id="分支实现">分支实现</h3>
<p>使用指针将每个提交连接成一条时间线，HEAD 指针指向当前分支指针</p>
<p><img src="4.png" alt=""></p>
<h3 id="新建分支">新建分支</h3>
<p>新建一个指针指向时间线的最后一个节点，并让 HEAD 指针指向新分支，表示新分支成为当前分支</p>
<p><img src="5.png" alt=""></p>
<p>每次提交只会让当前分支向前移动，而其他分支指针不会移动</p>
<p><img src="6.png" alt=""></p>
<p>合并分支也只需要改变指针即可</p>
<p><img src="7.png" alt=""></p>
<h3 id="分支冲突">分支冲突</h3>
<p>当两个分支都对同一个文件的同一行进行了修改，在分支合并时就会产生冲突</p>
<p><img src="8.png" alt=""></p>
<p>Git 会使用 &lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt; &gt;&gt;&gt;&gt;&gt; 标记出不同分支的内容，只需要把不同分支中冲突部分修改成一样就能解决冲突</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">Creating a <span class="keyword">new</span> <span class="title class_">branch</span> is quick &amp; simple.</span><br><span class="line">=======</span><br><span class="line">Creating a <span class="keyword">new</span> <span class="title class_">branch</span> is quick AND simple.</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature1</span><br></pre></td></tr></table></figure>
<h3 id="快进式合并">快进式合并</h3>
<p>直接将 master 分支指向合并的分支，这种模式下进行分支合并会丢失分支信息，也就不能在分支历史上看出分支信息，可以在合并时加上–no-ff 参数来禁用 Fast forward 模式，并且加上-m 参数让合并产生一个新的 commit，例如：git merge --no-ff -m “merge with no-ff” dev</p>
<p><img src="9.png" alt=""></p>
<h2 id="工作流程">工作流程</h2>
<ol>
<li>暂存（git add）：将需要进行版本管理的文件放入暂存区域。</li>
<li>提交（git commit）：将暂存区域的文件提交到 Git 仓库。</li>
<li>推送（git push）：将本地仓库推送到远程仓库，同步版本库。</li>
<li>获取更新（git fetch/pull）：从服务端更新到本地，获取他人推送的更新，与他人协作、共享。</li>
</ol>
<p><img src="3.png" alt=""></p>
<ol>
<li>git commit -a 指令省略了 add 到暂存区的步骤，直接提交工作区的修改内容到版本库，不包括新增的文件。</li>
<li>git fetch、git pull 都是从远程服务端获取最新记录，区别是 git pull 多了一个步骤，就是自动合并更新工作区。</li>
<li>git checkout .、git checkout [file] 会清除工作区中未添加到暂存区的修改，用暂存区内容替换工作区。</li>
<li>git checkout HEAD .、git checkout HEAD [file] 会清除工作区、暂存区的修改，用 HEAD 指向的当前分支最新版本替换暂存区、工作区。</li>
<li>git diff 用来对比不同部分之间的区别，如暂存区、工作区，最新版本与未提交内容，不同版本之间等。</li>
<li>git reset 是专门用来撤销修改、回退版本的指令，替代上面 checkout 的撤销功能。</li>
</ol>
<h2 id="提交规范">提交规范</h2>
<p><strong>开发提交格式</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;footer&gt;</span><br></pre></td></tr></table></figure>
<p><strong>参数信息</strong></p>
<ol>
<li>type</li>
</ol>
<table>
<thead>
<tr>
<th>功能</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>feat</td>
<td>新功能、新特性</td>
</tr>
<tr>
<td>fix</td>
<td>修改 bug</td>
</tr>
<tr>
<td>perf</td>
<td>更改代码，以提高性能（在不影响代码内部行为的前提下，对程序性能进行优化）</td>
</tr>
<tr>
<td>refactor</td>
<td>代码重构（重构，在不影响代码内部行为、功能下的代码修改）</td>
</tr>
<tr>
<td>docs</td>
<td>文档修改</td>
</tr>
<tr>
<td>style</td>
<td>代码格式修改，注意不是 css 修改（例如分号修改）</td>
</tr>
<tr>
<td>test</td>
<td>测试用例新增、修改</td>
</tr>
<tr>
<td>build</td>
<td>影响项目构建或依赖项修改</td>
</tr>
<tr>
<td>revert</td>
<td>恢复上一次提交</td>
</tr>
<tr>
<td>ci</td>
<td>持续集成相关文件修改</td>
</tr>
<tr>
<td>chore</td>
<td>其他修改（不在上述类型中的修改）</td>
</tr>
<tr>
<td>release</td>
<td>发布新版本</td>
</tr>
<tr>
<td>workflow</td>
<td>工作流相关文件修改</td>
</tr>
</tbody>
</table>
<ol start="2">
<li>scope：commit 影响的范围，比如：route，component，utils，build…</li>
<li>subject：commit 的概述</li>
<li>body：commit 具体修改内容，可以分为多行（或修改的涉及模块）</li>
<li>footer：一些备注，通常是 BREAKING CHANGE 或修复的 bug 的链接</li>
</ol>
<p><strong>使用案例</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">fix：修复bug</span><br><span class="line">report</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Quartz（5-JobStore）</title>
    <url>/blog/2024/12/13/Java/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/Quartz/Quartz%EF%BC%885-JobStore%EF%BC%89/</url>
    <content><![CDATA[<h2 id="JobStore">JobStore</h2>
<p>JobStore 是存放 Job 和 Trigger 的地方。当我们调用 Scheduler 对象的 scheduleJob 时就会将其存入 JobStore 中，然后供 quartzSchedulerThread 使用。</p>
<p><strong>为什么需要 JobStore？</strong></p>
<p>因为我们需要被 Scheduler 调用的任务大多数并不是一次性的任务，而是需要被定时触发，或者某个时间点才能被触发的，因此我们需要一个容器来存储 Job 和 Trigger 的相关内容。</p>
<p>其次，quartz 框架还有考虑到持久化存储的场景，比如说将对应的数据存放到数据库，这时候存放或者读取数据库里面的数据都需要有一个与之对应的容器。</p>
<h3 id="方法">方法</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">JobStore</span> &#123;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//存储job和tigger</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">storeJobAndTrigger</span><span class="params">(JobDetail newJob, OperableTrigger newTrigger)</span> </span><br><span class="line">        <span class="keyword">throws</span> ObjectAlreadyExistsException, JobPersistenceException;</span><br><span class="line">		</span><br><span class="line">   <span class="comment">//获取下一次需要进行触发的触发器</span></span><br><span class="line">   List&lt;OperableTrigger&gt; <span class="title function_">acquireNextTriggers</span><span class="params">(<span class="type">long</span> noLaterThan, <span class="type">int</span> maxCount, <span class="type">long</span> timeWindow)</span></span><br><span class="line">        <span class="keyword">throws</span> JobPersistenceException;</span><br><span class="line">	</span><br><span class="line">   <span class="comment">//释放获取到的触发器</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">releaseAcquiredTrigger</span><span class="params">(OperableTrigger trigger)</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//触发器被触发</span></span><br><span class="line">   List&lt;TriggerFiredResult&gt; <span class="title function_">triggersFired</span><span class="params">(List&lt;OperableTrigger&gt; triggers)</span> <span class="keyword">throws</span> JobPersistenceException;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//触发器触发完成</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">triggeredJobComplete</span><span class="params">(OperableTrigger trigger, JobDetail jobDetail, CompletedExecutionInstruction triggerInstCode)</span>;</span><br><span class="line">    </span><br><span class="line">    .....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="分类">分类</h3>
<p><img src="1.png" alt=""></p>
<h3 id="基本配置">基本配置</h3>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Scheduler 实例名</span></span><br><span class="line"><span class="attr">org.quartz.scheduler.instanceName</span> = <span class="string">MyScheduler</span></span><br><span class="line"><span class="attr">org.quartz.scheduler.instanceId</span> = <span class="string">AUTO</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 集群配置</span></span><br><span class="line"><span class="attr">org.quartz.jobStore.isClustered</span> = <span class="string">true</span></span><br><span class="line"><span class="attr">org.quartz.jobStore.clusterCheckinInterval</span> = <span class="string">20000</span></span><br><span class="line"><span class="comment"># 使用的 JobStore 类型</span></span><br><span class="line"><span class="attr">org.quartz.jobStore.class</span> = <span class="string">org.quartz.impl.jdbcjobstore.JobStoreTX</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 数据源配置</span></span><br><span class="line"><span class="attr">org.quartz.jobStore.dataSource</span> = <span class="string">quartzDataSource</span></span><br><span class="line"><span class="attr">org.quartz.jobStore.tablePrefix</span> = <span class="string">QRTZ_</span></span><br><span class="line"><span class="comment"># 数据源详细信息</span></span><br><span class="line"><span class="attr">org.quartz.dataSource.quartzDataSource.driver</span> = <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">org.quartz.dataSource.quartzDataSource.URL</span> = <span class="string">jdbc:mysql://localhost:3306/quartz</span></span><br><span class="line"><span class="attr">org.quartz.dataSource.quartzDataSource.user</span> = <span class="string">root</span></span><br><span class="line"><span class="attr">org.quartz.dataSource.quartzDataSource.password</span> = <span class="string">password</span></span><br><span class="line"><span class="attr">org.quartz.dataSource.quartzDataSource.maxConnections</span> = <span class="string">10</span></span><br></pre></td></tr></table></figure>
<h2 id="RAMJobStore">RAMJobStore</h2>
<p>在 quartz 的默认配置中使用的就是 RAMJobStore。顾名思义，RAMJobStore 是基于内存来存储的 Job 相关数据，也就是在程序重启之后，对应的数据就会消失，并且它不支持集群，也就是说它不可以把需要调度的任务分配到多台机器上面进行执行。</p>
<h3 id="优缺点">优缺点</h3>
<ol>
<li>
<p>优点：使用内存存储调度数据，速度快，配置简单，适合轻量级或短生命周期的应用场景。</p>
</li>
<li>
<p>缺点：数据仅存储在内存中，系统重启后数据会丢失，不支持多节点集群。</p>
</li>
</ol>
<h3 id="属性">属性</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RAMJobStore</span> <span class="keyword">implements</span> <span class="title class_">JobStore</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> HashMap&lt;JobKey, JobWrapper&gt; jobsByKey = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;JobKey, JobWrapper&gt;(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> HashMap&lt;TriggerKey, TriggerWrapper&gt; triggersByKey = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;TriggerKey, TriggerWrapper&gt;(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> HashMap&lt;String, HashMap&lt;JobKey, JobWrapper&gt;&gt; jobsByGroup = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, HashMap&lt;JobKey, JobWrapper&gt;&gt;(<span class="number">25</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> HashMap&lt;String, HashMap&lt;TriggerKey, TriggerWrapper&gt;&gt; triggersByGroup = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, HashMap&lt;TriggerKey, TriggerWrapper&gt;&gt;(<span class="number">25</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> TreeSet&lt;TriggerWrapper&gt; timeTriggers = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;TriggerWrapper&gt;(<span class="keyword">new</span> <span class="title class_">TriggerWrapperComparator</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> HashMap&lt;String, Calendar&gt; calendarsByName = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Calendar&gt;(<span class="number">25</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Map&lt;JobKey, List&lt;TriggerWrapper&gt;&gt; triggersByJob = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;JobKey, List&lt;TriggerWrapper&gt;&gt;(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> HashSet&lt;String&gt; pausedTriggerGroups = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> HashSet&lt;String&gt; pausedJobGroups = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> HashSet&lt;JobKey&gt; blockedJobs = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;JobKey&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="type">long</span> <span class="variable">misfireThreshold</span> <span class="operator">=</span> <span class="number">5000l</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> SchedulerSignaler signaler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>jobsByKey：按 jobKey 进行分组的 HashMap 集合</li>
<li>triggersByKey：按 jobKey 进行分组的 HashMap 集合</li>
<li>jobsByGroup：按 job 的分组名进行分组的 HashMap 集合</li>
<li>triggersByGroup：按 trigger 的分组名进行分组的 HashMap 集合</li>
<li>timeTriggers：具有下次触发时间的 trigger 集合</li>
<li>triggers：trigger 集合</li>
<li>lock：操作 RAMJobStore 时需要获取的锁</li>
<li>pausedTriggerGroups：被暂停的 trigger 分组名的 HashSet 集合</li>
<li>pausedJobGroups：被暂停的 job 分组名的 HashSet 集合</li>
<li>blockedJobs：被锁住的任务 key 的 HashSet 集合</li>
<li>misfireThreshold：失火阈值</li>
<li>signaler：SchedulerSignaler 信号器</li>
</ol>
<h2 id="TerracottaJobStore">TerracottaJobStore</h2>
<p>TerracottaJobStore 提供了一种无需数据库就可以进行缩放和健壮性的方法。这意味着您的数据库可以避免来自 Quartz 的负载，并且可以将所有的资源保存到您的应用程序的其他部分。</p>
<p>TerracottaJobStore 可以是集群的或非集群的，在这两种情况下，都为您的工作数据提供了一个存储介质，在应用程序重新启动之间是持久的，因为数据存储在 Terracotta 服务器中。它的性能比通过 JDBCJobStore(大约一个数量级更好) 使用数据库要好得多，但是比 RAMJobStore 慢得多。</p>
<p>要使用 TerracottaJobStore(假设您使用的是 StdSchedulerFactory)，只需指定类名称 org.quartz.jobStore.class = org.terracotta.quartz.TerracottaJobStore。作为您用来配置 quartz 的 JobStore 类属性，并添加一个额外的配置行来指定 Terracotta 服务器的位置：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">org.quartz.jobStore.class</span> = <span class="string">org.terracotta.quartz.TerracottaJobStore</span></span><br><span class="line"><span class="attr">org.quartz.jobStore.tcConfigUrl</span> = <span class="string">localhost:9510</span></span><br></pre></td></tr></table></figure>
<h2 id="JobStoreSupport">JobStoreSupport</h2>
<p>JobStoreSupport 是 Quartz 框架中 JDBCJobStore 的核心支持类，它提供了基于 JDBC 的任务存储的基础实现。通过扩展 JobStoreSupport，Quartz 实现了两种 JDBCJobStore：JobStoreTX 和 JobStoreCMT。</p>
<h3 id="作用">作用</h3>
<ol>
<li>它定义了与数据库交互的通用逻辑，比如插入、更新、删除调度数据。</li>
<li>提供了事务管理的基础功能，允许子类（如 JobStoreTX 和 JobStoreCMT）选择具体的事务管理方式。</li>
</ol>
<h3 id="JobStoreTX">JobStoreTX</h3>
<h4 id="特点">特点</h4>
<ol>
<li>使用独立的事务管理。</li>
<li>每次数据库操作开启和提交一个新的事务。</li>
<li>适合独立运行的 Quartz 应用。</li>
</ol>
<h4 id="事务逻辑">事务逻辑</h4>
<ol>
<li>每个调度操作通过 JDBC 手动开启、提交或回滚事务。</li>
<li>不依赖外部容器的事务管理器。</li>
</ol>
<h3 id="JobStoreCMT">JobStoreCMT</h3>
<h4 id="特点-2">特点</h4>
<ol>
<li>使用容器管理的事务（CMT, Container-Managed Transaction）。</li>
<li>适合运行在 J2EE 应用服务器中的 Quartz 应用。</li>
</ol>
<h4 id="事务逻辑-2">事务逻辑</h4>
<ol>
<li>依赖应用服务器（如 WebLogic、JBoss）提供的事务管理器。</li>
<li>Quartz 不直接管理事务，而是将事务逻辑交由容器处理。</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>定时任务</tag>
        <tag>Quartz</tag>
      </tags>
  </entry>
  <entry>
    <title>Quartz（7-基本概念）</title>
    <url>/blog/2024/12/20/Java/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/Quartz/Quartz%EF%BC%887-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%EF%BC%89/</url>
    <content><![CDATA[<h2 id="组件">组件</h2>
<p><img src="1.png" alt=""></p>
<h3 id="Job（任务）">Job（任务）</h3>
<p>可以实现该接口定义其运行任务，JobExecutionContext 类提供了调度上下文的各种信息，Job 运行时的信息保存在 JobDataMap 实例中</p>
<p>Job 有一个 StatefulJob 子接口，代表有状态的任务，该接口是一个没有方法的标签接口，其目的是让 Quartz 知道任务的类型，以便采用不同的执行方案。无状态任务在执行时拥有自己的 JobDataMap 拷贝，对 JobDataMap 的更改不会影响下次的执行；而有状态任务共享共享同一个 JobDataMap 实例，每次任务执行对 JobDataMap 所做的更改会保存下来，后面的执行可以看到这个更改，即每次执行任务后都会对后面的执行发生影响。</p>
<p>正因为这个原因，无状态的 Job 可以并发执行，而有状态的 StatefulJob 不能并发执行，这意味着如果前次的 StatefulJob 还没有执行完毕，下一次的任务将阻塞等待，直到前次任务执行完毕。有状态任务比无状态任务需要考虑更多的因素，程序往往拥有更高的复杂度，因此除非必要，应该尽量使用无状态的 Job。</p>
<p>如果 Quartz 使用了数据库持久化任务调度信息，无状态的 JobDataMap 仅会在 Scheduler 注册任务时保持一次，而有状态任务对应的 JobDataMap 在每次执行任务后都会进行保存。</p>
<h3 id="JobDetail（任务细节）">JobDetail（任务细节）</h3>
<p>Quartz 在每次执行 Job 时都重新创建一个 Job 实例，所以它不直接接受一个 Job 的实例，而是接受一个 Job 实现类，以便运行时通过 newInstance()的反射机制实例化 Job，因此需要通过一个类来描述 Job 的实现类及其他相关的静态信息</p>
<h3 id="Trigger（触发器）">Trigger（触发器）</h3>
<p>描述触发 Job 执行的时间触发规则</p>
<p>Trigger 自身也可以拥有一个 JobDataMap，其关联的 Job 可以通过 JobExecutionContext#getTrigger().getJobDataMap()获取 Trigger 中的 JobDataMap。不管是有状态还是无状态的任务，在任务执行期间对 Trigger 的 JobDataMap 所做的更改都不会进行持久，也即不会对下次的执行产生影响。</p>
<h3 id="Scheduler（调度器）">Scheduler（调度器）</h3>
<p>代表一个 Quartz 的独立运行容器，Trigger 和 JobDetail 可以注册到 Scheduler，两者在 Scheduler 中拥有各自的组及名称，组及名称是 Scheduler 查找定位容器中某一对象的依据，Trigger 的组及名称必须唯一，JobDetail 的组和名称也必须唯一（但可以和 Trigger 的组和名称相同，因为它们是不同类型的）</p>
<p>Scheduler 可以将 Trigger 绑定到某一 JobDetail 中，这样当 Trigger 触发时，对应的 Job 就被执行。</p>
<p>Scheduler 拥有一个 SchedulerContext，它类似于 ServletContext，保存着 Scheduler 上下文信息，Job 和 Trigger 都可以访问 SchedulerContext 内的信息。SchedulerContext 内部通过一个 Map，以键值对的方式维护这些上下文数据，SchedulerContext 为保存和获取数据提供了多个 put()和 getXxx()的方法。可以通过 Scheduler 的 getContext()获取对应的 SchedulerContext 实例</p>
<h3 id="ThreadPool（线程池）">ThreadPool（线程池）</h3>
<p>Scheduler 使用一个线程池作为任务运行的基础设施，任务通过共享线程池中的线程提高运行效率</p>
<h2 id="其他">其他</h2>
<h3 id="工作流程">工作流程</h3>
<ol>
<li>scheduler 是 quartz 的独立运行容器，trigger 和 job 都可以注册在 scheduler 容器中，一个 Job 可以对应多个 Trigger，但一个 Trigger 只能对应一个 Job。</li>
<li>Quartz 中有一个调度线程 QuartzSchedulerThread，调度线程可以找到将要被触发的 trigger 和 job，然后在 ThreadPool 中获取一个线程来执行这个 job。</li>
<li>JobStore 主要作用是存放 job 和 trigger 的信息。</li>
</ol>
<h3 id="线程模型">线程模型</h3>
<p>在 Quartz 中有两类线程：Scheduler 调度线程和任务执行线程。</p>
<ol>
<li>任务执行线程：Quartz 不会在主线程（QuartzSchedulerThread）中处理用户的 Job。Quartz 把线程管理的职责委托给 ThreadPool，一般的设置使用 SimpleThreadPool，SimpleThreadPool 创建了一定数量的 WorkerThread 实例来使得 Job 能够在线程中进行处理。</li>
<li>调度主线程：QuartzScheduler 被创建时创建一个 QuartzSchedulerThread 实例。</li>
</ol>
<h3 id="调度原理">调度原理</h3>
<p>Quartz 中 Scheduler 调度线程主要有两类线程：</p>
<ol>
<li>Regular Scheduler Thread（执行常规调度）：Regular Thread 轮询所有 Trigger，如果发现有将要触发的 Trigger，就从任务线程池中获取一个空闲线程，然后执行与该 Trigger 关联的 Job。</li>
<li>Misfire Scheduler Thread（执行错失的任务）：Misfire Thraed 轮询所有 Trigger，查找有错失的任务，例如系统重启/线程占用等问题导致的任务错失，根据一定的策略进行处理。</li>
</ol>
<h3 id="存储">存储</h3>
<p>Quartz 有两种方式将定时任务存储下来</p>
<ol>
<li>RAMJobStore：将 trigger 和 job 存储到内存里</li>
<li>JobStoreSupport：将 trigger 和 job 存储到数据库里</li>
</ol>
<h2 id="集群">集群</h2>
<p>Quartz 的集群部署方案在架构上是分布式的，没有负责集中管理的节点，而是利用数据库锁的方式来实现集群环境下进行并发控制，分布式部署时需要保证各个节点的系统时间一致。Quartz 应用是通过数据库表来感知到另一应用。只有使用持久的 JobStore 才能完成 Quartz 集群。</p>
<h3 id="集群同步机制">集群同步机制</h3>
<p>每当要进行与某种业务相关的数据库操作时，先去 QRTZ_LOCKS 表中查询操作相关的业务对象所需要的锁，在 select 语句之后加 for update 来实现。例如：TRIGGER_ACCESS 表示对任务触发器相关的信息进行修改、删除操作时所需要获得的锁。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> QRTZ_LOCKS t <span class="keyword">where</span> t.lock_name<span class="operator">=</span><span class="string">&#x27;TRIGGER_ACCESS&#x27;</span> <span class="keyword">for</span> <span class="keyword">update</span></span><br></pre></td></tr></table></figure>
<p>QRTZ_LOCKS 主要有两个行级锁：</p>
<table>
<thead>
<tr>
<th>锁名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>STATE_ACCESS</td>
<td>状态访问锁</td>
</tr>
<tr>
<td>TRIGGER_ACCESS</td>
<td>触发器访问锁</td>
</tr>
</tbody>
</table>
<p>当一个线程对表中的数据执行查询操作时，若查询结果中包含相关的行，数据库就对该行进行 ROW LOCK；若此时，另外一个线程使用相同的 SQL 对表的数据进行查询，由于查询出的数据行已经被数据库锁住了，此时这个线程就只能等待，直到拥有该行锁的线程完成了相关的业务操作，执行了 commit 动作后，数据库才会释放了相关行的锁，这个线程才能继续执行。</p>
<p>通过这样的机制，在集群环境下，结合悲观锁的机制就可以防止一个线程对数据库数据的操作的结果被另外一个线程所覆盖，从而可以避免定时任务重复执行。当然，达到这种效果的前提是需要把 Connection 设置为手动提交，即 autoCommit 为 false。</p>
<h3 id="故障切换">故障切换</h3>
<p>当集群一个节点在执行一个或多个作业期间失败时发生故障切换（Fail Over）。当节点出现故障时，其他节点会检测到该状况并识别数据库中在故障节点内正在进行的作业，任何标记为恢复的作业（在 JobDetail 上都具有“请求恢复 requests recovery”属性）将被剩余的节点重新执行，已达到失效任务转移，没有标记为恢复的作业将在下一次相关的 Triggers 触发时简单地被释放以执行。</p>
<ol>
<li>
<p>每个节点 Scheduler 实例由集群管理线程 ClusterManager 周期性（配置文件中检测周期属性 clusterCheckinInterval 默认值是 15000 (即 15 秒)）定时检测 CHECKIN 数据库，遍历集群各兄弟节点的实例状态，检测集群各个兄弟节点的健康情况。</p>
</li>
<li>
<p>当集群中一个节点的 Scheduler 实例执行 CHECKIN 时，它会查看是否有其他节点的 Scheduler 实例在到达它们所预期的时间还未 CHECKIN。若检测到有节点在预期时间未 CHECKIN，则认为该节点故障。判断节点是否故障与节点 Scheduler 实例最后 CHECKIN 的时间有关，而判断条件：</p>
</li>
</ol>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">LAST<span class="built_in">_</span>CHECKIN<span class="built_in">_</span>TIME + Max(检测周期，检测节点现在距上次最后CHECKIN的时间) + 7500ms &lt; currentTime。</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>集群管理线程检测到故障节点，就会更新触发器状态，状态更新如下：</li>
</ol>
<table>
<thead>
<tr>
<th>更新前状态</th>
<th>更新后状态</th>
</tr>
</thead>
<tbody>
<tr>
<td>BLOCKED</td>
<td>WAITING</td>
</tr>
<tr>
<td>PAUSED_BLOCKED</td>
<td>PAUSED</td>
</tr>
<tr>
<td>ACQUIRED</td>
<td>WAITING</td>
</tr>
<tr>
<td>COMPLETE</td>
<td>无，删除 Trigger</td>
</tr>
</tbody>
</table>
<ol start="4">
<li>集群管理线程删除故障节点的实例状态（qrtz_scheduler_state 表），即重置了所有故障节点触发任务一般。原先故障任务和正常任务一样就交由调度处理线程处理了。</li>
</ol>
<h3 id="负载均衡">负载均衡</h3>
<p>负载均衡自动发生，集群的每个节点都尽可能快地触发 Jobs。当 Triggers 的触发时间发生时，获取它的第一个节点（通过在其上放置一个锁定）是将触发它的节点， 哪个节点运行它或多或少是随机的。</p>
<p>集群下任务的调度存在一定的随机性，谁先拥有触发器行锁 TRIGGER_ACCESS，谁就先可能触发任务。当某一个机子的调度线程拿到该锁（别的机子只能等待）时：</p>
<ol>
<li>acquireNextTriggers 获取待触发队列，查询 Trigger 表的判断条件：</li>
</ol>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">NEXT<span class="built_in">_</span>FIRE<span class="built_in">_</span>TIME &lt; now + idleWaitTime + timeWindow and TRIGGER<span class="built_in">_</span>STATE = &#x27;WAITING&#x27;</span><br></pre></td></tr></table></figure>
<p>然后更新触发器状态为 ACQUIRE。</p>
<ol start="2">
<li>
<p>触发待触发队列，修改 Trigger 表中的 NEXT_FIRE_TIME 字段，也就是下次触发时间，计算下次触发时间的方法与具体的触发器实现有关，如 Cron 表达式触发器，计算触发时间与 Cron 表达式有关。触发待触发队列后及时释放触发器行锁。</p>
</li>
<li>
<p>这样，别的机子拿到该锁，也查询 Trigger 表，但是由于任务触发器的下次触发时间或者状态已经修改，所以不会被查找出来。这时拿到的任务就可能是别的触发任务。这样就实现了多个节点的应用在某一时刻对任务只进行一次调度。对于重复任务每次都不一定是相同的节点, 它或多或少会随机节点运行它。</p>
</li>
</ol>
<h3 id="缺点">缺点</h3>
<ol>
<li>集群特性对于高 CPU 使用率的任务效果很好，但是对于大量的短任务，各个节点都会抢占数据库锁，这样就出现大量的线程等待资源。这种情况随着节点的增加会越来越严重。</li>
<li>没有实现比较好的负载均衡机制，仅依靠各个节点中的 Scheduler 实例随机抢占，可能会导致部分节点负载重，部分节点负载轻的情况。</li>
<li>不能满足更复杂的功能，如任务分片、编排、暂停重启、失败重试等。</li>
<li>当集群放置在不同的机器上时，称之为水平集群。节点跑在同一台机器上时，称之为垂直集群。对于垂直集群，存在着单点故障的问题。这对高可用性的应用来说是无法接受的，因为一旦机器崩溃了，所有的节点也就被终止了。对于水平集群，存在着时间同步问题。</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>定时任务</tag>
        <tag>Quartz</tag>
      </tags>
  </entry>
  <entry>
    <title>Quartz（6-SpringBoot整合）</title>
    <url>/blog/2024/12/14/Java/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/Quartz/Quartz%EF%BC%886-SpringBoot%E6%95%B4%E5%90%88%EF%BC%89/</url>
    <content><![CDATA[<h2 id="Quartz-自动装配机制">Quartz 自动装配机制</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(&quot;spring.quartz&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuartzProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">JobStoreType</span> <span class="variable">jobStoreType</span> <span class="operator">=</span> JobStoreType.MEMORY;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String schedulerName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">autoStartup</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Duration</span> <span class="variable">startupDelay</span> <span class="operator">=</span> Duration.ofSeconds(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">waitForJobsToCompleteOnShutdown</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">overwriteExistingJobs</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, String&gt; properties = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Jdbc</span> <span class="variable">jdbc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jdbc</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Jdbc</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_SCHEMA_LOCATION</span> <span class="operator">=</span> <span class="string">&quot;classpath:org/quartz/impl/&quot;</span></span><br><span class="line">                + <span class="string">&quot;jdbcjobstore/tables_@@platform@@.sql&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="type">String</span> <span class="variable">schema</span> <span class="operator">=</span> DEFAULT_SCHEMA_LOCATION;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="type">DataSourceInitializationMode</span> <span class="variable">initializeSchema</span> <span class="operator">=</span> DataSourceInitializationMode.EMBEDDED;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> List&lt;String&gt; commentPrefix = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(<span class="string">&quot;#&quot;</span>, <span class="string">&quot;--&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123; Scheduler.class, SchedulerFactoryBean.class, PlatformTransactionManager.class &#125;)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(QuartzProperties.class)</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(&#123; DataSourceAutoConfiguration.class, HibernateJpaAutoConfiguration.class,</span></span><br><span class="line"><span class="meta">		LiquibaseAutoConfiguration.class, FlywayAutoConfiguration.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuartzAutoConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="keyword">public</span> SchedulerFactoryBean <span class="title function_">quartzScheduler</span><span class="params">(QuartzProperties properties,</span></span><br><span class="line"><span class="params">            ObjectProvider&lt;SchedulerFactoryBeanCustomizer&gt; customizers, ObjectProvider&lt;JobDetail&gt; jobDetails,</span></span><br><span class="line"><span class="params">            Map&lt;String, Calendar&gt; calendars, ObjectProvider&lt;Trigger&gt; triggers, ApplicationContext applicationContext)</span> &#123;</span><br><span class="line">        <span class="type">SchedulerFactoryBean</span> <span class="variable">schedulerFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SchedulerFactoryBean</span>();</span><br><span class="line">        <span class="type">SpringBeanJobFactory</span> <span class="variable">jobFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringBeanJobFactory</span>();</span><br><span class="line">        jobFactory.setApplicationContext(applicationContext);</span><br><span class="line">        schedulerFactoryBean.setJobFactory(jobFactory);</span><br><span class="line">        <span class="keyword">if</span> (properties.getSchedulerName() != <span class="literal">null</span>) &#123;</span><br><span class="line">            schedulerFactoryBean.setSchedulerName(properties.getSchedulerName());</span><br><span class="line">        &#125;</span><br><span class="line">        schedulerFactoryBean.setAutoStartup(properties.isAutoStartup());</span><br><span class="line">        schedulerFactoryBean.setStartupDelay((<span class="type">int</span>) properties.getStartupDelay().getSeconds());</span><br><span class="line">        schedulerFactoryBean.setWaitForJobsToCompleteOnShutdown(properties.isWaitForJobsToCompleteOnShutdown());</span><br><span class="line">        schedulerFactoryBean.setOverwriteExistingJobs(properties.isOverwriteExistingJobs());</span><br><span class="line">        <span class="keyword">if</span> (!properties.getProperties().isEmpty()) &#123;</span><br><span class="line">            schedulerFactoryBean.setQuartzProperties(asProperties(properties.getProperties()));</span><br><span class="line">        &#125;</span><br><span class="line">        schedulerFactoryBean.setJobDetails(jobDetails.orderedStream().toArray(JobDetail[]::<span class="keyword">new</span>));</span><br><span class="line">        schedulerFactoryBean.setCalendars(calendars);</span><br><span class="line">        schedulerFactoryBean.setTriggers(triggers.orderedStream().toArray(Trigger[]::<span class="keyword">new</span>));</span><br><span class="line">        customizers.orderedStream().forEach((customizer) -&gt; customizer.customize(schedulerFactoryBean));</span><br><span class="line">        <span class="keyword">return</span> schedulerFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Properties <span class="title function_">asProperties</span><span class="params">(Map&lt;String, String&gt; source)</span> &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.putAll(source);</span><br><span class="line">        <span class="keyword">return</span> properties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line">    <span class="meta">@ConditionalOnSingleCandidate(DataSource.class)</span></span><br><span class="line">    <span class="meta">@ConditionalOnProperty(prefix = &quot;spring.quartz&quot;, name = &quot;job-store-type&quot;, havingValue = &quot;jdbc&quot;)</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">JdbcStoreTypeConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="meta">@Order(0)</span></span><br><span class="line">        <span class="keyword">public</span> SchedulerFactoryBeanCustomizer <span class="title function_">dataSourceCustomizer</span><span class="params">(QuartzProperties properties, DataSource dataSource,</span></span><br><span class="line"><span class="params">                <span class="meta">@QuartzDataSource</span> ObjectProvider&lt;DataSource&gt; quartzDataSource,</span></span><br><span class="line"><span class="params">                ObjectProvider&lt;PlatformTransactionManager&gt; transactionManager)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (schedulerFactoryBean) -&gt; &#123;</span><br><span class="line">                <span class="type">DataSource</span> <span class="variable">dataSourceToUse</span> <span class="operator">=</span> getDataSource(dataSource, quartzDataSource);</span><br><span class="line">                schedulerFactoryBean.setDataSource(dataSourceToUse);</span><br><span class="line">                <span class="type">PlatformTransactionManager</span> <span class="variable">txManager</span> <span class="operator">=</span> transactionManager.getIfUnique();</span><br><span class="line">                <span class="keyword">if</span> (txManager != <span class="literal">null</span>) &#123;</span><br><span class="line">                    schedulerFactoryBean.setTransactionManager(txManager);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> DataSource <span class="title function_">getDataSource</span><span class="params">(DataSource dataSource, ObjectProvider&lt;DataSource&gt; quartzDataSource)</span> &#123;</span><br><span class="line">            <span class="type">DataSource</span> <span class="variable">dataSourceIfAvailable</span> <span class="operator">=</span> quartzDataSource.getIfAvailable();</span><br><span class="line">            <span class="keyword">return</span> (dataSourceIfAvailable != <span class="literal">null</span>) ? dataSourceIfAvailable : dataSource;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">        <span class="keyword">public</span> QuartzDataSourceInitializer <span class="title function_">quartzDataSourceInitializer</span><span class="params">(DataSource dataSource,</span></span><br><span class="line"><span class="params">                <span class="meta">@QuartzDataSource</span> ObjectProvider&lt;DataSource&gt; quartzDataSource, ResourceLoader resourceLoader,</span></span><br><span class="line"><span class="params">                QuartzProperties properties)</span> &#123;</span><br><span class="line">            <span class="type">DataSource</span> <span class="variable">dataSourceToUse</span> <span class="operator">=</span> getDataSource(dataSource, quartzDataSource);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">QuartzDataSourceInitializer</span>(dataSourceToUse, resourceLoader, properties);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Additional configuration to ensure that &#123;<span class="doctag">@link</span> SchedulerFactoryBean&#125; and</span></span><br><span class="line"><span class="comment">         * &#123;<span class="doctag">@link</span> Scheduler&#125; beans depend on any beans that perform data source</span></span><br><span class="line"><span class="comment">         * initialization.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">QuartzSchedulerDependencyConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Bean</span></span><br><span class="line">            <span class="keyword">static</span> SchedulerDependsOnBeanFactoryPostProcessor <span class="title function_">quartzSchedulerDataSourceInitializerDependsOnBeanFactoryPostProcessor</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SchedulerDependsOnBeanFactoryPostProcessor</span>(QuartzDataSourceInitializer.class);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Bean</span></span><br><span class="line">            <span class="meta">@ConditionalOnBean(FlywayMigrationInitializer.class)</span></span><br><span class="line">            <span class="keyword">static</span> SchedulerDependsOnBeanFactoryPostProcessor <span class="title function_">quartzSchedulerFlywayDependsOnBeanFactoryPostProcessor</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SchedulerDependsOnBeanFactoryPostProcessor</span>(FlywayMigrationInitializer.class);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line">            <span class="meta">@ConditionalOnClass(SpringLiquibase.class)</span></span><br><span class="line">            <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">LiquibaseQuartzSchedulerDependencyConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Bean</span></span><br><span class="line">                <span class="meta">@ConditionalOnBean(SpringLiquibase.class)</span></span><br><span class="line">                <span class="keyword">static</span> SchedulerDependsOnBeanFactoryPostProcessor <span class="title function_">quartzSchedulerLiquibaseDependsOnBeanFactoryPostProcessor</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SchedulerDependsOnBeanFactoryPostProcessor</span>(SpringLiquibase.class);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> AbstractDependsOnBeanFactoryPostProcessor&#125; for Quartz &#123;<span class="doctag">@link</span> Scheduler&#125; and</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> SchedulerFactoryBean&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SchedulerDependsOnBeanFactoryPostProcessor</span> <span class="keyword">extends</span> <span class="title class_">AbstractDependsOnBeanFactoryPostProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line">        SchedulerDependsOnBeanFactoryPostProcessor(Class&lt;?&gt;... dependencyTypes) &#123;</span><br><span class="line">            <span class="built_in">super</span>(Scheduler.class, SchedulerFactoryBean.class, dependencyTypes);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>SpringBoot 整合 Quartz 后，通过 spring.quartz 前缀可以设置其对应的属性值，实例化 SchedulerFactoryBean 后，调用其 afterPropertiesSet()方法去初始化 Quartz 配置信息（详细查看 SchedulerFactoryBean 的 initialize()方法及 <strong>Quartz（3-Scheduler）文章</strong>）</p>
<p><img src="2.png" alt=""></p>
<p><img src="3.png" alt=""></p>
<p><img src="4.png" alt=""></p>
<h2 id="单机版配置">单机版配置</h2>
<h3 id="依赖">依赖</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="任务创建">任务创建</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJob</span> <span class="keyword">extends</span> <span class="title class_">QuartzJobBean</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Log</span> <span class="variable">logger</span> <span class="operator">=</span> LogFactory.getLog(TestJob.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">executeInternal</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;测试======&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>可以实现 Job 接口，也可以继承 QuartzJobBean</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义任务描述和具体的执行时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuartzConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JobDetail <span class="title function_">jobDetail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//指定任务描述具体的实现类</span></span><br><span class="line">        <span class="keyword">return</span> JobBuilder.newJob(TestJob.class)</span><br><span class="line">                <span class="comment">// 指定任务的名称</span></span><br><span class="line">                .withIdentity(<span class="string">&quot;testJob&quot;</span>)</span><br><span class="line">                <span class="comment">// 任务描述</span></span><br><span class="line">                .withDescription(<span class="string">&quot;testJob&quot;</span>)</span><br><span class="line">                <span class="comment">// 每次任务执行后进行存储</span></span><br><span class="line">                .storeDurably()</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Trigger <span class="title function_">trigger</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//创建触发器</span></span><br><span class="line">        <span class="keyword">return</span> TriggerBuilder.newTrigger()</span><br><span class="line">                <span class="comment">// 绑定工作任务</span></span><br><span class="line">                .forJob(jobDetail())</span><br><span class="line">                <span class="comment">// 每隔 5 秒执行一次 job</span></span><br><span class="line">                .withSchedule(SimpleScheduleBuilder.repeatSecondlyForever(<span class="number">5</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>项目初始化手动创建任务</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JobInit</span> <span class="keyword">implements</span> <span class="title class_">ApplicationRunner</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ID</span> <span class="operator">=</span> <span class="string">&quot;SUMMERDAY&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Scheduler scheduler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder.newJob(TestJob.class)</span><br><span class="line">                .withIdentity(ID + <span class="string">&quot; 01&quot;</span>)</span><br><span class="line">                .storeDurably()</span><br><span class="line">                .build();</span><br><span class="line">        <span class="type">CronScheduleBuilder</span> <span class="variable">scheduleBuilder</span> <span class="operator">=</span></span><br><span class="line">                CronScheduleBuilder.cronSchedule(<span class="string">&quot;0/5 * * * * ? *&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建任务触发器</span></span><br><span class="line">        <span class="type">Trigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .forJob(jobDetail)</span><br><span class="line">                .withIdentity(ID + <span class="string">&quot; 01Trigger&quot;</span>)</span><br><span class="line">                .withSchedule(scheduleBuilder)</span><br><span class="line">                .startNow() <span class="comment">//立即執行一次任務</span></span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">// 手动将触发器与任务绑定到调度器内</span></span><br><span class="line">        scheduler.scheduleJob(jobDetail, trigger);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="yaml-配置">yaml 配置</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># Quartz 的配置，对应 QuartzProperties 配置类</span></span><br><span class="line">  <span class="attr">quartz:</span></span><br><span class="line">    <span class="attr">job-store-type:</span> <span class="string">memory</span> <span class="comment"># Job 存储器类型。默认为 memory 表示内存，可选 jdbc 使用数据库。</span></span><br><span class="line">    <span class="attr">auto-startup:</span> <span class="literal">true</span> <span class="comment"># Quartz 是否自动启动</span></span><br><span class="line">    <span class="attr">startup-delay:</span> <span class="number">0</span> <span class="comment"># 延迟 N 秒启动</span></span><br><span class="line">    <span class="attr">wait-for-jobs-to-complete-on-shutdown:</span> <span class="literal">true</span> <span class="comment"># 应用关闭时，是否等待定时任务执行完成。默认为 false ，建议设置为 true</span></span><br><span class="line">    <span class="attr">overwrite-existing-jobs:</span> <span class="literal">false</span> <span class="comment"># 是否覆盖已有 Job 的配置</span></span><br><span class="line">    <span class="attr">properties:</span> <span class="comment"># 添加 Quartz Scheduler 附加属性</span></span><br><span class="line">      <span class="attr">org:</span></span><br><span class="line">        <span class="attr">quartz:</span></span><br><span class="line">          <span class="attr">threadPool:</span></span><br><span class="line">            <span class="attr">threadCount:</span> <span class="number">25</span> <span class="comment"># 线程池大小。默认为 10 。</span></span><br><span class="line">            <span class="attr">threadPriority:</span> <span class="number">5</span> <span class="comment"># 线程优先级</span></span><br><span class="line">            <span class="attr">class:</span> <span class="string">org.quartz.simpl.SimpleThreadPool</span> <span class="comment"># 线程池类型</span></span><br></pre></td></tr></table></figure>
<h2 id="持久化配置">持久化配置</h2>
<h3 id="集群部署">集群部署</h3>
<p><img src="1.png" alt=""></p>
<p>一个 Quartz 集群中的每个节点是一个独立的 Quartz 应用，它又管理着其他的节点。这就意味着你必须对每个节点分别启动或停止。Quartz 集群中，独立的 Quartz 节点并不与另一其的节点或是管理节点通信，而是通过同一个数据库表来感知到另一 Quartz 应用的。因为 Quartz 集群依赖于数据库，所以必须首先创建 Quartz 数据库表，Quartz 发布包中包括了所有被支持的数据库平台的 SQL 脚本。</p>
<h3 id="创建数据库表">创建数据库表</h3>
<p>针对不同的数据库，org.quartz.impl.jdbcjobstore 包下提供了不同建表脚本，数据库脚本放在 org\quartz-scheduler\quartz\2.3.2\quartz-2.3.2.jar! 包中的\org\quartz\impl\jdbcjobstore 路径下</p>
<table>
<thead>
<tr>
<th>表名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>qrtz_fired_triggers</td>
<td>存储已触发的 trigger 相关信息</td>
</tr>
<tr>
<td>qrtz_paused_trigger_grps</td>
<td>存储已暂停的 trigger 组信息</td>
</tr>
<tr>
<td>qrtz_scheduler_state</td>
<td>存储 Scheduler 状态信息</td>
</tr>
<tr>
<td>qrtz_locks</td>
<td>存储悲观锁的信息</td>
</tr>
<tr>
<td>qrtz_simple_triggers</td>
<td>存储 Simple trigger 信息</td>
</tr>
<tr>
<td>qrtz_simprop_triggers</td>
<td>存储其他几种 trigger 信息</td>
</tr>
<tr>
<td>qrtz_cron_triggers</td>
<td>存储 cron trigger 信息</td>
</tr>
<tr>
<td>qrtz_blob_triggers</td>
<td>blog 类型存储 triggers</td>
</tr>
<tr>
<td>qrtz_triggers</td>
<td>存储已配置的 trigger 信息</td>
</tr>
<tr>
<td>qrtz_job_details</td>
<td>存储每一个已配置的 job details</td>
</tr>
<tr>
<td>qrtz_calendars</td>
<td>以 blog 类型存储 Calendar 信息</td>
</tr>
</tbody>
</table>
<p>所有的表中都含有一个 SCHED_NAME 字段，对应我们配置的 scheduler-name，相同 Scheduler-name 的节点，形成一个 Quartz 集群</p>
<h3 id="存储类型">存储类型</h3>
<p>Quartz 提供两种基本作业存储类型：RAMJobStore 和 JDBC 作业存储。在默认情况下 Quartz 将任务调度的运行信息保存在内存中，这种方法提供了最佳的性能，因为内存中数据访问最快。不足之处是缺乏数据的持久性，当程序路途停止或系统崩溃时，所有运行的信息都会丢失。</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td>RAMJobStore</td>
<td>不要外部数据库，配置容易，运行速度快</td>
<td>因为调度程序信息是存储在被分配给 JVM 的内存里面，所以，当应用程序停止运行时，所有调度信息将被丢失。另外因为存储到 JVM 内存里面，所以可以存储多少个 Job 和 Trigger 将会受到限制</td>
</tr>
<tr>
<td>JDBC 作业存储</td>
<td>支持集群，因为所有的任务信息都会保存到数据库中，可以控制事物，还有就是如果应用服务器关闭或者重启，任务信息都不会丢失，并且可以恢复因服务器关闭或者重启而导致执行失败的任务</td>
<td>运行速度的快慢取决与连接数据库的快慢</td>
</tr>
</tbody>
</table>
<h3 id="事务管理类型">事务管理类型</h3>
<table>
<thead>
<tr>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>JobStoreTX</td>
<td>如果不需要将调度命令（例如添加和删除 triggers）绑定到其他事务，那么可以通过使用 JobStoreTX 管理事务（这是最常见的选择）</td>
</tr>
<tr>
<td>JobStoreCMT</td>
<td>如果需要 Quartz 与其他事务（即 J2EE 应用程序服务器）一起工作，那么应该使用 JobStoreCMT，这种情况下，Quartz 将让应用程序服务器容器管理事务</td>
</tr>
</tbody>
</table>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#需要使用哪一种事务类型，配置文件中就指定谁</span></span><br><span class="line"><span class="comment">#org.quartz.jobStore.class=org.quartz.impl.jdbcjobstore.JobStoreTX</span></span><br><span class="line"><span class="attr">org.quartz.jobStore.class</span>=<span class="string">org.quartz.impl.jdbcjobstore.JobStoreCMT</span></span><br></pre></td></tr></table></figure>
<h3 id="数据库驱动代理">数据库驱动代理</h3>
<p>针对不同的数据库制作了不同的数据库的代理，其中使用最多的是 StdJDBCDelegate ，它是一个使用 JDBC 代码（和 SQL 语句）来执行其工作的委托。其他驱动代理可以在 “org.quartz.impl.jdbcjobstore” 包或其子包中找到。如 DB2v6Delegate（用于 DB2 版本 6 及更早版本），HSQLDBDelegate（HSQLDB），MSSQLDelegate（SQLServer），PostgreSQLDelegate（PostgreSQL），WeblogicDelegate（用于使用 Weblogic 创建的 JDBC 驱动程序）</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">org.quartz.jobStore.driverDelegateClass</span> = <span class="string">org.quartz.impl.jdbcjobstore.StdJDBCDelegate</span></span><br></pre></td></tr></table></figure>
<p><img src="5.png" alt=""></p>
<h3 id="配置信息">配置信息</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 实现对 Quartz 的自动化配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.19<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>yaml 配置（使用其自动装配机制）</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/quartz?serverTimezone=GMT%2B8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">  <span class="attr">quartz:</span></span><br><span class="line">    <span class="comment"># 使用数据库存储</span></span><br><span class="line">    <span class="attr">job-store-type:</span> <span class="string">jdbc</span></span><br><span class="line">    <span class="comment"># 相同 Scheduler 名字的节点，形成一个 Quartz 集群</span></span><br><span class="line">    <span class="attr">scheduler-name:</span> <span class="string">hyhScheduler</span></span><br><span class="line">    <span class="comment"># 应用关闭时，是否等待定时任务执行完成。默认为 false ，建议设置为 true</span></span><br><span class="line">    <span class="attr">wait-for-jobs-to-complete-on-shutdown:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">jdbc:</span></span><br><span class="line">      <span class="comment"># 是否自动使用 SQL 初始化 Quartz 表结构。这里设置成 never ，我们手动创建表结构。</span></span><br><span class="line">      <span class="attr">initialize-schema:</span> <span class="string">never</span></span><br><span class="line">      <span class="comment"># 用于初始化数据库架构的SQL文件的路径</span></span><br><span class="line">      <span class="comment">#schema: classpath:org/quartz/impl/jdbcjobstore/tables_@@platform@@.sql</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">org:</span></span><br><span class="line">        <span class="attr">quartz:</span></span><br><span class="line">          <span class="comment">#延时启动，要有足够长的时间让你的应用先启动完成后再让Scheduler启动（单位秒）</span></span><br><span class="line">          <span class="attr">startup-delay:</span> <span class="number">60</span></span><br><span class="line">          <span class="comment">#是否每次系统运行都会清空数据库中的Job信息，重新进行初始化</span></span><br><span class="line">          <span class="attr">overwrite-existing-jobs:</span> <span class="literal">false</span></span><br><span class="line">          <span class="attr">scheduler:</span></span><br><span class="line">            <span class="comment"># 默认主机名和时间戳生成实例ID,可以是任何字符串，但对于所有调度程序来说，必须是唯一的 对应qrtz_scheduler_state INSTANCE_NAME字段</span></span><br><span class="line">            <span class="attr">instanceId:</span> <span class="string">AUTO</span></span><br><span class="line">            <span class="attr">instanceName:</span> <span class="string">hyhScheduler</span></span><br><span class="line">          <span class="comment"># JobStore 相关配置</span></span><br><span class="line">          <span class="attr">jobStore:</span></span><br><span class="line">            <span class="comment"># 持久化配置</span></span><br><span class="line">            <span class="comment"># 此存储机制用于Quartz独立于应用容器的事务管理，如果是Tomcat容器管理的数据源，那我们定义的事务也不会传播给Quartz框架内部。</span></span><br><span class="line">            <span class="comment"># 通俗的讲就是不管我们的Service服务本身业务代码是否执行成功，只要代码中调用了Quartz API的数据库操作，那任务状态就永久持久化了，</span></span><br><span class="line">            <span class="comment"># 就算业务代码抛出运行时异常任务状态也不会回滚到之前的状态。与之相反的是JobStoreCMT。</span></span><br><span class="line">            <span class="attr">class:</span> <span class="string">org.quartz.impl.jdbcjobstore.JobStoreTX</span></span><br><span class="line">            <span class="comment"># JDBC代理类，仅为数据库制作了特定于数据库的代理</span></span><br><span class="line">            <span class="attr">driverDelegateClass:</span> <span class="string">org.quartz.impl.jdbcjobstore.StdJDBCDelegate</span></span><br><span class="line">            <span class="comment"># Quartz 表前缀</span></span><br><span class="line">            <span class="attr">tablePrefix:</span> <span class="string">QRTZ_</span></span><br><span class="line">            <span class="comment"># 是集群模式</span></span><br><span class="line">            <span class="attr">isClustered:</span> <span class="literal">true</span></span><br><span class="line">            <span class="comment"># 设置此实例&quot;检入&quot;与群集的其他实例的频率（以毫秒为单位）。影响检测失败实例的速度。</span></span><br><span class="line">            <span class="attr">clusterCheckinInterval:</span> <span class="number">1000</span></span><br><span class="line">            <span class="comment">#让JDBCJobStore将JobDataMaps中的所有值都作为字符串，因此可以作为键值对存储而不是在BLOB列中以其序列化形式存储，从而避免序列化的版本问题</span></span><br><span class="line">            <span class="attr">useProperties:</span> <span class="literal">false</span></span><br><span class="line">            <span class="comment">#超过这个时间还未触发的trigger，就被认为发生了misfire，默认60s。job成功触发叫fire，misfire就是未成功触发。</span></span><br><span class="line">            <span class="attr">misfireThreshold:</span> <span class="number">60000</span></span><br><span class="line">          <span class="comment"># 线程池相关配置</span></span><br><span class="line">          <span class="attr">threadPool:</span></span><br><span class="line">            <span class="comment"># 线程池大小。默认为 10</span></span><br><span class="line">            <span class="attr">threadCount:</span> <span class="number">25</span></span><br><span class="line">            <span class="comment"># 线程优先级</span></span><br><span class="line">            <span class="attr">threadPriority:</span> <span class="number">5</span></span><br><span class="line">            <span class="comment"># 线程池类型</span></span><br><span class="line">            <span class="attr">class:</span> <span class="string">org.quartz.simpl.SimpleThreadPool</span></span><br></pre></td></tr></table></figure>
<p>注意：同一集群下，instanceName 必须相同，instanceId 可自动生成，isClustered 为 true，持久化存储，指定数据库类型对应的驱动类和数据源连接。</p>
<ol start="2">
<li>自定义 properties 和配置类（使用 Quartz 的 initialize()方法去查找对应的 quartz.properties 文件）</li>
</ol>
<p><strong>quartz.properties</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#调度标识名 集群中每一个实例都必须使用相同的名称</span></span><br><span class="line"><span class="attr">org.quartz.scheduler.instanceName</span> = <span class="string">hyhScheduler</span></span><br><span class="line"><span class="comment">#ID设置为自动获取 每一个必须不同</span></span><br><span class="line"><span class="attr">org.quartz.scheduler.instanceId</span> = <span class="string">AUTO</span></span><br><span class="line"><span class="comment">#数据保存方式为持久化</span></span><br><span class="line"><span class="comment">#springboot版本2.6.x请使用：org.springframework.scheduling.quartz.LocalDataSourceJobStore</span></span><br><span class="line"><span class="comment">#org.quartz.jobStore.class=org.quartz.impl.jdbcjobstore.JobStoreTX</span></span><br><span class="line"><span class="attr">org.quartz.jobStore.class</span>=<span class="string">org.springframework.scheduling.quartz.JobStoreTX</span></span><br><span class="line"><span class="comment">#表的前缀</span></span><br><span class="line"><span class="attr">org.quartz.jobStore.tablePrefix</span> = <span class="string">QRTZ_</span></span><br><span class="line"><span class="comment">#设置为TRUE不会出现序列化非字符串类到 BLOB 时产生的类版本问题</span></span><br><span class="line"><span class="attr">org.quartz.jobStore.useProperties</span> = <span class="string">true</span></span><br><span class="line"><span class="comment">#加入集群</span></span><br><span class="line"><span class="attr">org.quartz.jobStore.isClustered</span> = <span class="string">true</span></span><br><span class="line"><span class="comment">#ThreadPool 实现的类名</span></span><br><span class="line"><span class="attr">org.quartz.threadPool.class</span> = <span class="string">org.quartz.simpl.SimpleThreadPool</span></span><br><span class="line"><span class="comment">#调度实例失效的检查时间间隔</span></span><br><span class="line"><span class="attr">org.quartz.jobStore.clusterCheckinInterval</span> = <span class="string">20000</span></span><br><span class="line"><span class="comment">#容许的最大作业延长时间</span></span><br><span class="line"><span class="attr">org.quartz.jobStore.misfireThreshold</span> = <span class="string">60000</span></span><br><span class="line"><span class="comment">#线程数量</span></span><br><span class="line"><span class="attr">org.quartz.threadPool.threadCount</span> = <span class="string">10</span></span><br><span class="line"><span class="comment">#线程优先级</span></span><br><span class="line"><span class="attr">org.quartz.threadPool.threadPriority</span> = <span class="string">5</span></span><br><span class="line"><span class="comment">#自创建父线程</span></span><br><span class="line"><span class="attr">org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread</span> = <span class="string">true</span></span><br><span class="line"><span class="comment">#org.quartz.threadPool.threadNamePrefix=liftsail</span></span><br></pre></td></tr></table></figure>
<p><strong>配置类（参考 QuartzAutoConfiguration）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JobFactory</span> <span class="keyword">extends</span> <span class="title class_">AdaptableJobFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AutowireCapableBeanFactory capableBeanFactory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Job 对象的实例化过程是在 Quartz 中进行的，注入的实体类是在 Spring 容器当中的 所以在 job 中无法注入 Spring 容器的实体类。</span></span><br><span class="line">    <span class="comment">// 将 Job Bean 也纳入到 Spring 容器的管理之中，Spring 容器自然能够为 Job Bean 自动装配好所需的依赖。</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">createJobInstance</span><span class="params">(TriggerFiredBundle bundle)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 调用父类的方法，来实现对 Job 的实例化。</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">jobInstance</span> <span class="operator">=</span> <span class="built_in">super</span>.createJobInstance(bundle);</span><br><span class="line">        <span class="comment">// 进行注入，调用自身方法为创建好的 Job 实例进行属性自动装配并将其纳入到 Spring 容器的管理之中</span></span><br><span class="line">        capableBeanFactory.autowireBean(jobInstance);</span><br><span class="line">        <span class="keyword">return</span> jobInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JobConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> JobFactory jobFactory;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SchedulerFactoryBean <span class="title function_">schedulerFactoryBean</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SchedulerFactoryBean</span> <span class="variable">schedulerFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SchedulerFactoryBean</span>();</span><br><span class="line">        schedulerFactoryBean.setJobFactory(jobFactory);</span><br><span class="line">        <span class="comment">// 配置数据源</span></span><br><span class="line">        schedulerFactoryBean.setDataSource(dataSource);</span><br><span class="line">        <span class="comment">// 用于 quartz 集群，QuartzScheduler 启动时更新己存在的 Job</span></span><br><span class="line">        schedulerFactoryBean.setOverwriteExistingJobs(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 延时启动，应用启动 1 秒后</span></span><br><span class="line">        schedulerFactoryBean.setStartupDelay(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 设置加载的配置文件</span></span><br><span class="line">        schedulerFactoryBean.setConfigLocation(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;quartz.properties&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> schedulerFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Scheduler <span class="title function_">scheduler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> schedulerFactoryBean().getScheduler();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="基本使用">基本使用</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JobInit</span> <span class="keyword">implements</span> <span class="title class_">ApplicationRunner</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ID</span> <span class="operator">=</span> <span class="string">&quot;SUMMERDAY&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Scheduler scheduler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder.newJob(SecondJob.class)</span><br><span class="line">                .withIdentity(ID + <span class="string">&quot; 02&quot;</span>)</span><br><span class="line">                .storeDurably()</span><br><span class="line">                .build();</span><br><span class="line">        <span class="type">CronScheduleBuilder</span> <span class="variable">scheduleBuilder</span> <span class="operator">=</span></span><br><span class="line">                CronScheduleBuilder.cronSchedule(<span class="string">&quot;0/10 * * * * ? *&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建任务触发器</span></span><br><span class="line">        <span class="type">Trigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .forJob(jobDetail)</span><br><span class="line">                .withIdentity(ID + <span class="string">&quot; 02Trigger&quot;</span>)</span><br><span class="line">                .withSchedule(scheduleBuilder)</span><br><span class="line">                .startNow() <span class="comment">//立即執行一次任務</span></span><br><span class="line">                .build();</span><br><span class="line">        Set&lt;Trigger&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        set.add(trigger);</span><br><span class="line">        <span class="comment">// boolean replace 表示启动时对数据库中的 quartz 的任务进行覆盖。</span></span><br><span class="line">        scheduler.scheduleJob(jobDetail, set, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>定时任务</tag>
        <tag>Quartz</tag>
      </tags>
  </entry>
  <entry>
    <title>Git（2-常用命令）</title>
    <url>/blog/2024/12/14/Java/%E5%B7%A5%E4%BD%9C%E6%8A%80%E5%B7%A7/Git/Git%EF%BC%882-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%EF%BC%89/</url>
    <content><![CDATA[<h2 id="配置">配置</h2>
<h3 id="配置文件">配置文件</h3>
<p>Git 有三个主要的配置文件：三个配置文件的优先级是 1 &lt; 2 &lt; 3</p>
<ol>
<li>系统全局配置（system）：包含了适用于系统所有用户和所有仓库（项目）的配置信息，存放在 Git 安装目录下：C:\Program Files\Git\etc\gitconfig。</li>
<li>用户全局配置（global）：当前系统用户的全局配置，存放用户目录：C:\Users\[系统用户名]\.gitconfig。</li>
<li>仓库/项目配置（local）：仓库（项目）的特定配置，存放在项目目录下.git/config</li>
</ol>
<h3 id="设置用户信息">设置用户信息</h3>
<ol>
<li>git config --global <a href="http://user.name">user.name</a> “用户名”：设置用户名</li>
<li>git config --global user.email “邮箱”：设置邮箱</li>
<li>git config --list：查看 git 配置信息</li>
<li>git config --list --global：查询当前用户全局配置</li>
<li>git config --system --list：查看系统配置</li>
</ol>
<h3 id="忽略-gitignore">忽略.gitignore</h3>
<p>工作目录中的文件并不是全都需要纳入版本管理，如日志、临时文件、私有配置文件等不需要也不能纳入版本管理，那该怎么办呢？</p>
<p>在工作区根目录下创建.gitignore 文件，文件中配置不需要进行版本管理的文件、文件夹。.gitignore 文件本身是被纳入版本管理的，可以共享。有如下规则：</p>
<ol>
<li>#符号开头为注释。</li>
<li>可以使用 Linux 通配符。</li>
</ol>
<ul>
<li>星号（*）：代表任意多个字符，</li>
<li>问号（？）：代表一个字符，</li>
<li>方括号（[abc]）：代表可选字符范围，</li>
<li>大括号（{string1, string2,…}）：代表可选的字符串等。</li>
</ul>
<ol start="3">
<li>感叹号（!）开头：表示例外规则，将不被忽略。</li>
<li>路径分隔符（/f）开头：，表示要忽略根目录下的文件 f。</li>
<li>路径分隔符（f/）结尾：，表示要忽略文件夹 f 下面的所有文件。</li>
</ol>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="params">#</span>为注释</span><br><span class="line">*.txt <span class="params">#</span>忽略所有“.txt”结尾的文件</span><br><span class="line">!lib.txt <span class="params">#</span>lib.txt除外</span><br><span class="line">/temp <span class="params">#</span>仅忽略项目根目录下的temp文件,不包括其它目录下的temp，如不包括“src/temp”</span><br><span class="line">build/ <span class="params">#</span>忽略build/目录下的所有文件</span><br><span class="line">doc/*.txt <span class="params">#</span>会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span><br></pre></td></tr></table></figure>
<h2 id="查看状态信息">查看状态信息</h2>
<table>
<thead>
<tr>
<th style="text-align:left"><strong>指令</strong></th>
<th style="text-align:left"><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">git --version</td>
<td style="text-align:left">查看 git 版本</td>
</tr>
<tr>
<td style="text-align:left">git status</td>
<td style="text-align:left">查看本地仓库状态，比较常用的指令，加参数 <code>-s</code> 简洁模式</td>
</tr>
<tr>
<td style="text-align:left">git [指令] -h</td>
<td style="text-align:left">查看指令帮助信息</td>
</tr>
<tr>
<td style="text-align:left">git [指令] --help</td>
<td style="text-align:left">打开指令详细帮助页面</td>
</tr>
</tbody>
</table>
<p><img src="1.png" alt=""></p>
<h2 id="代码-仓库管理">代码/仓库管理</h2>
<table>
<thead>
<tr>
<th style="text-align:left"><strong>指令</strong></th>
<th style="text-align:left"><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">git init [文件目录]</td>
<td style="text-align:left">初始化创建 Git 仓库，如果不指定 [文件目录]，则在当前目录创建。</td>
</tr>
<tr>
<td style="text-align:left">git add [file1] [file2]</td>
<td style="text-align:left">添加文件到暂存区，包括修改的文件、新增的文件</td>
</tr>
<tr>
<td style="text-align:left">git add [dir]</td>
<td style="text-align:left">同上，添加目录到暂存区，包括子目录</td>
</tr>
<tr>
<td style="text-align:left">git add .</td>
<td style="text-align:left">同上，添加所有修改、新增文件（未跟踪）到暂存区</td>
</tr>
<tr>
<td style="text-align:left">git rm [file]</td>
<td style="text-align:left">删除工作区文件，并且将这次删除放入暂存区</td>
</tr>
<tr>
<td style="text-align:left">git commit -m ‘说明’</td>
<td style="text-align:left">提交变更，参数 <code>-m</code> 设置提交的描述信息，应该正确提交，不带该参数会进入说明编辑模式</td>
</tr>
<tr>
<td style="text-align:left">git commit -a</td>
<td style="text-align:left">参数 <code>-a</code>，表示直接从工作区提交到版本库，略过了 <code>git add</code> 步骤，不包括新增的文件</td>
</tr>
<tr>
<td style="text-align:left">git commit [file]</td>
<td style="text-align:left">提交暂存区的指定文件到仓库区</td>
</tr>
<tr>
<td style="text-align:left">git commit --amend -m</td>
<td style="text-align:left">使用一次新的 <code>commit</code>，替代上一次提交，会修改 <code>commit</code> 的 <code>hash</code> 值（id）</td>
</tr>
<tr>
<td style="text-align:left">git cherry-pick [commit]</td>
<td style="text-align:left">拣选提交，复制一个特定的提交到当前分支，而不管这个提交在哪个分支</td>
</tr>
<tr>
<td style="text-align:left">git log -n20</td>
<td style="text-align:left">查看日志(最近 20 条)，不带参数 <code>-n</code> 则显示所有日志</td>
</tr>
<tr>
<td style="text-align:left">git log -n20 --oneline</td>
<td style="text-align:left">参数“<code>--oneline</code>”可以让日志输出更简洁（一行）</td>
</tr>
<tr>
<td style="text-align:left">git log -n20 --graph</td>
<td style="text-align:left">参数“<code>--graph</code>”可视化显示分支关系</td>
</tr>
<tr>
<td style="text-align:left">git log --follow [file]</td>
<td style="text-align:left">显示某个文件的版本历史</td>
</tr>
<tr>
<td style="text-align:left">git blame [file]</td>
<td style="text-align:left">以列表形式显示指定文件的修改记录</td>
</tr>
<tr>
<td style="text-align:left">git reflog</td>
<td style="text-align:left">查看所有可用的历史版本记录（实际是 HEAD 变更记录），包含被回退的记录（重要）</td>
</tr>
</tbody>
</table>
<ol>
<li>git init：在当前文件下初始化仓库，之后在该目录下会出现一个.git 文件夹，这个是 Git 来跟踪管理版本库的</li>
</ol>
<p><img src="2.png" alt=""></p>
<ol start="2">
<li>git add 文件：添加文件到工作区（使用 git add .命令，则表示把当前目录下的所有文件全部添加到工作区）</li>
</ol>
<p><img src="3.png" alt=""></p>
<ol start="3">
<li>git log：查看历史记录（显示你所提交的日志）</li>
</ol>
<p><img src="4.png" alt=""></p>
<ol start="4">
<li>git reflog：查看历史记录（只显示版本号和提交信息）</li>
</ol>
<p><img src="5.png" alt=""></p>
<h2 id="查看修改信息">查看修改信息</h2>
<table>
<thead>
<tr>
<th style="text-align:left"><strong>指令</strong></th>
<th style="text-align:left"><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">git diff</td>
<td style="text-align:left">查看暂存区和工作区的差异</td>
</tr>
<tr>
<td style="text-align:left">git diff [file]</td>
<td style="text-align:left">同上，指定文件</td>
</tr>
<tr>
<td style="text-align:left">git diff --cached</td>
<td style="text-align:left">查看已暂存的改动，就是暂存区与新版本 <code>HEAD</code> 进行比较</td>
</tr>
<tr>
<td style="text-align:left">git diff --staged</td>
<td style="text-align:left">同上</td>
</tr>
<tr>
<td style="text-align:left">git diff --cached [file]</td>
<td style="text-align:left">同上，指定文件</td>
</tr>
<tr>
<td style="text-align:left">git diff HEAD</td>
<td style="text-align:left">查看已暂存的+未暂存的所有改动，就是与最新版本 <code>HEAD</code> 进行比较</td>
</tr>
<tr>
<td style="text-align:left">git diff HEAD~</td>
<td style="text-align:left">同上，与上一个版本比较。<code>HEAD~</code> 表示上一个版本，<code>HEAD~10</code> 为最近第 10 个版本</td>
</tr>
<tr>
<td style="text-align:left">git diff [id] [id]</td>
<td style="text-align:left">查看两次提交之间的差异</td>
</tr>
<tr>
<td style="text-align:left">git diff [branch]</td>
<td style="text-align:left">查看工作区和分支直接的差异</td>
</tr>
</tbody>
</table>
<p><img src="6.png" alt=""></p>
<h2 id="暂存区管理">暂存区管理</h2>
<table>
<thead>
<tr>
<th style="text-align:left"><strong>指令</strong></th>
<th style="text-align:left"><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">git stash</td>
<td style="text-align:left">把未提交内容隐藏起来，包括未暂存、已暂存。 等以后恢复现场后继续工作</td>
</tr>
<tr>
<td style="text-align:left">git stash list</td>
<td style="text-align:left">查看所有被隐藏的内容列表</td>
</tr>
<tr>
<td style="text-align:left">git stash pop</td>
<td style="text-align:left">恢复被隐藏的内容，同时删除隐藏记录</td>
</tr>
<tr>
<td style="text-align:left">git stash save “message”</td>
<td style="text-align:left">同 <code>git stash</code>，可以备注说明 <code>message</code></td>
</tr>
<tr>
<td style="text-align:left">git stash apply</td>
<td style="text-align:left">恢复被隐藏的文件，但是隐藏记录不删除</td>
</tr>
<tr>
<td style="text-align:left">git stash drop</td>
<td style="text-align:left">删除隐藏记录</td>
</tr>
</tbody>
</table>
<h2 id="远程仓库管理">远程仓库管理</h2>
<table>
<thead>
<tr>
<th style="text-align:left"><strong>指令</strong></th>
<th style="text-align:left"><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">git clone [git 地址]</td>
<td style="text-align:left">从远程仓库克隆到本地（当前目录）</td>
</tr>
<tr>
<td style="text-align:left">git remote -v</td>
<td style="text-align:left">查看所有远程仓库，不带参数 <code>-v</code> 只显示名称</td>
</tr>
<tr>
<td style="text-align:left">git remote show [remote]</td>
<td style="text-align:left">显示某个远程仓库的信息</td>
</tr>
<tr>
<td style="text-align:left">git remote add [name] [url]</td>
<td style="text-align:left">增加一个新的远程仓库，并命名</td>
</tr>
<tr>
<td style="text-align:left">git remote rename [old] [new]</td>
<td style="text-align:left">修改远程仓库名称</td>
</tr>
<tr>
<td style="text-align:left">git remote rm [remote-name]</td>
<td style="text-align:left">删除远程仓库</td>
</tr>
<tr>
<td style="text-align:left">git pull [remote] [branch]</td>
<td style="text-align:left">取回远程仓库的变化，并与本地版本合并</td>
</tr>
<tr>
<td style="text-align:left">git pull</td>
<td style="text-align:left">同上，针对当前分支</td>
</tr>
<tr>
<td style="text-align:left">git pull --rebase</td>
<td style="text-align:left">使用 rebase 的模式进行合并</td>
</tr>
<tr>
<td style="text-align:left">git fetch [remote]</td>
<td style="text-align:left">获取远程仓库的所有变动到本地仓库，不会自动合并！需要手动合并</td>
</tr>
<tr>
<td style="text-align:left">git push</td>
<td style="text-align:left">推送当前分支到远程仓库</td>
</tr>
<tr>
<td style="text-align:left">git push [remote] [branch]</td>
<td style="text-align:left">推送本地当前分支到远程仓库的指定分支</td>
</tr>
<tr>
<td style="text-align:left">git push [remote] --force/-f</td>
<td style="text-align:left">强行推送当前分支到远程仓库，即使有冲突，⚠️ 很危险！</td>
</tr>
<tr>
<td style="text-align:left">git push [remote] --all</td>
<td style="text-align:left">推送所有分支到远程仓库</td>
</tr>
<tr>
<td style="text-align:left">git push –u</td>
<td style="text-align:left">参数 <code>–u</code> 表示与远程分支建立关联，第一次执行的时候用，后面就不需要了</td>
</tr>
<tr>
<td style="text-align:left">git push origin --delete [branch-name]</td>
<td style="text-align:left">删除远程分支</td>
</tr>
</tbody>
</table>
<h2 id="分支管理">分支管理</h2>
<table>
<thead>
<tr>
<th style="text-align:left"><strong>指令</strong></th>
<th style="text-align:left"><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">git branch</td>
<td style="text-align:left">列出所有本地分支，加参数 <code>-v</code> 显示详细列表，下同</td>
</tr>
<tr>
<td style="text-align:left">git branch -r</td>
<td style="text-align:left">列出所有远程分支</td>
</tr>
<tr>
<td style="text-align:left">git branch -a</td>
<td style="text-align:left">列出所有本地分支和远程分支，用不同颜色区分</td>
</tr>
<tr>
<td style="text-align:left">git branch [branch-name]</td>
<td style="text-align:left">新建一个分支，但依然停留在当前分支</td>
</tr>
<tr>
<td style="text-align:left">git branch -d dev</td>
<td style="text-align:left">删除 <code>dev</code> 分支，-D（大写）强制删除</td>
</tr>
<tr>
<td style="text-align:left">git branch [branch] [commit]</td>
<td style="text-align:left">新建一个分支，指向指定 <code>commit id</code></td>
</tr>
<tr>
<td style="text-align:left">git branch --track [branch] [remote-branch]</td>
<td style="text-align:left">新建一个分支，与指定的远程分支建立关联</td>
</tr>
<tr>
<td style="text-align:left">git branch --set-upstream [branch] [remote-branch]</td>
<td style="text-align:left">在现有分支与指定的远程分支之间建立跟踪关联：</td>
</tr>
<tr>
<td style="text-align:left">git branch --set-upstream hotfix remote/hotfix</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">git checkout -b dev</td>
<td style="text-align:left">从当前分支创建并切换到 <code>dev</code> 分支</td>
</tr>
<tr>
<td style="text-align:left">git checkout -b feature1 dev</td>
<td style="text-align:left">从本地 <code>dev</code> 分支代码创建一个 <code>feature1</code> 分支，并切换到新分支</td>
</tr>
<tr>
<td style="text-align:left">git checkout -b hotfix remote hotfix</td>
<td style="text-align:left">从远端 <code>remote</code> 的 <code>hotfix</code> 分支创建本地 <code>hotfix</code> 分支</td>
</tr>
<tr>
<td style="text-align:left">git checkout [branch-name]</td>
<td style="text-align:left">切换到指定分支，并更新工作区</td>
</tr>
<tr>
<td style="text-align:left">git checkout .</td>
<td style="text-align:left">撤销工作区的（未暂存）修改，把暂存区恢复到工作区。</td>
</tr>
<tr>
<td style="text-align:left">git checkout HEAD .</td>
<td style="text-align:left">撤销工作区、暂存区的修改，用 <code>HEAD</code> 指向的当前分支最新版本替换</td>
</tr>
<tr>
<td style="text-align:left">git merge [branch]</td>
<td style="text-align:left">合并指定分支到当前分支</td>
</tr>
<tr>
<td style="text-align:left">git merge --no-ff dev</td>
<td style="text-align:left">合并 <code>dev</code> 分支到当前分支，参数 <code>--no-ff</code> 禁用快速合并模式</td>
</tr>
<tr>
<td style="text-align:left">git rebase master</td>
<td style="text-align:left">将当前分支变基合并到 <code>master</code> 分支</td>
</tr>
<tr>
<td style="text-align:left">git switch master</td>
<td style="text-align:left">切换到已有的 <code>master</code> 分支</td>
</tr>
<tr>
<td style="text-align:left">git switch -c dev</td>
<td style="text-align:left">创建并切换到新的 <code>dev</code> 分支</td>
</tr>
</tbody>
</table>
<h2 id="标签管理">标签管理</h2>
<table>
<thead>
<tr>
<th style="text-align:left"><strong>指令</strong></th>
<th style="text-align:left"><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">git tag</td>
<td style="text-align:left">查看标签列表</td>
</tr>
<tr>
<td style="text-align:left">git tag -l ‘a*’</td>
<td style="text-align:left">查看名称是“a”开头的标签列表，带查询参数</td>
</tr>
<tr>
<td style="text-align:left">git show [tagname]</td>
<td style="text-align:left">查看标签信息</td>
</tr>
<tr>
<td style="text-align:left">git tag [tagname]</td>
<td style="text-align:left">创建一个标签，默认标签是打在最新提交的 commit 上的</td>
</tr>
<tr>
<td style="text-align:left">git tag [tagname] [commit id]</td>
<td style="text-align:left">新建一个 tag 在指定 commit 上</td>
</tr>
<tr>
<td style="text-align:left">git tag -a v5.1 -m’v5.1 版本’</td>
<td style="text-align:left">创建标签 <code>v5.1.1039</code>，<code>-a</code> 指定标签名，<code>-m</code> 指定说明文字</td>
</tr>
<tr>
<td style="text-align:left">git tag -d [tagname]</td>
<td style="text-align:left">删除本地标签</td>
</tr>
<tr>
<td style="text-align:left">git checkout v5.1.1039</td>
<td style="text-align:left">切换标签，同切换分支</td>
</tr>
<tr>
<td style="text-align:left">git push [remote] v5.1</td>
<td style="text-align:left">推送标签，标签不会默认随代码推送推送到服务端</td>
</tr>
<tr>
<td style="text-align:left">git push [remote] --tags</td>
<td style="text-align:left">提交所有 tag</td>
</tr>
</tbody>
</table>
<h2 id="撤销变更">撤销变更</h2>
<table>
<thead>
<tr>
<th style="text-align:left"><strong>指令</strong></th>
<th style="text-align:left"><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">git checkout .</td>
<td style="text-align:left">撤销工作区的（未暂存）修改，把暂存区恢复到工作区。不影响暂存区，如果没暂存，则撤销所有工作区修改</td>
</tr>
<tr>
<td style="text-align:left">git checkout [file]</td>
<td style="text-align:left">同上，<code>file</code> 指定文件</td>
</tr>
<tr>
<td style="text-align:left">git checkout HEAD .</td>
<td style="text-align:left">撤销工作区、暂存区的修改，用 <code>HEAD</code> 指向的当前分支最新版本替换工作区、暂存区</td>
</tr>
<tr>
<td style="text-align:left">git checkout HEAD [file]</td>
<td style="text-align:left">同上，<code>file</code> 指定文件</td>
</tr>
<tr>
<td style="text-align:left">git reset</td>
<td style="text-align:left">撤销暂存区状态，同 <code>git reset HEAD</code>，不影响工作区</td>
</tr>
<tr>
<td style="text-align:left">git reset HEAD [file]</td>
<td style="text-align:left">同上，指定文件 <code>file</code>，<code>HEAD</code> 可省略</td>
</tr>
<tr>
<td style="text-align:left">git reset [commit]</td>
<td style="text-align:left">回退到指定版本，清空暂存区，不影响工作区。工作区需要手动 <code>git checkout</code> 签出</td>
</tr>
<tr>
<td style="text-align:left">git reset --soft [commit]</td>
<td style="text-align:left">移动分支 <code>master</code>、<code>HEAD</code> 到指定的版本，不影响暂存区、工作区，需手动 <code>git checkout</code> 签出更新</td>
</tr>
<tr>
<td style="text-align:left">git reset --hard HEAD</td>
<td style="text-align:left">撤销工作区、暂存区的修改，用当前最新版</td>
</tr>
<tr>
<td style="text-align:left">git reset --hard HEAD~</td>
<td style="text-align:left">回退到上一个版本，并重置工作区、暂存区内容。</td>
</tr>
<tr>
<td style="text-align:left">git reset --hard [commit]</td>
<td style="text-align:left">回退到指定版本，并重置工作区、暂存区内容。</td>
</tr>
<tr>
<td style="text-align:left">git revert [commit]</td>
<td style="text-align:left">撤销一个提交，会用一个新的提交（原提交的逆向操作）来完成撤销操作，如果已 <code>push</code> 则重新 <code>push</code> 即可</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Nacos（1-环境搭建）</title>
    <url>/blog/2025/03/15/Java/SpringCloud/%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/nacos/Nacos%EF%BC%881-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%EF%BC%89/</url>
    <content><![CDATA[<h2 id="环境配置">环境配置</h2>
<p>Nacos 有两种运行模式：standalone 和 cluster，启动前需要在配置文件上进行修改</p>
<ol>
<li>standalone：单机模式</li>
<li>cluster：集群模式</li>
</ol>
<p><img src="1.png" alt=""></p>
<p>启动成功后，访问 localhost: 8848/nacos，用户名：nacos，密码：nacos</p>
<p><img src="2.png" alt=""></p>
<h2 id="搭建集群">搭建集群</h2>
<p>Nacos 的集群需要 3 个或 3 个以上的节点，并且确保这三个节点之间是可以互相访问的</p>
<ol>
<li>搭建数据库，初始化数据库表结构</li>
</ol>
<p>在 conf 目录下，提供了 nacos-mysql.sql 语句，进行数据库的初始化</p>
<p>创建 nacos_config 数据库，导入 sql 文件</p>
<p><img src="3.png" alt=""></p>
<ol start="2">
<li>修改 cluster.config 文件</li>
</ol>
<p>修改 cluster.config.example 文件名为 cluster.config</p>
<p><img src="4.png" alt=""></p>
<p>打开 cluster.config 文件，将三个 nacos 服务端地址都添加到里面</p>
<p><img src="5.png" alt=""></p>
<ol start="3">
<li>修改 application.properties 文件</li>
</ol>
<p><img src="6.png" alt=""></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定数据源为 MySQL</span></span><br><span class="line"><span class="attr">spring.datasource.platform</span>=<span class="string">mysql</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### Count of DB:</span></span><br><span class="line"><span class="comment"># 数据库实例数量</span></span><br><span class="line"><span class="attr">db.num</span>=<span class="string">1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 数据库连接信息，如果是 MySQL 8.0+ 版本需要添加 serverTimezone=Asia/Shanghai</span></span><br><span class="line"><span class="comment">### Connect URL of DB:</span></span><br><span class="line"><span class="attr">db.url.0</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line"><span class="attr">db.user.0</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">db.password.0</span>=<span class="string">1234</span></span><br></pre></td></tr></table></figure>
<ol start="4">
<li>复制 nacos 文件，修改其端口号</li>
</ol>
<p><img src="7.png" alt=""></p>
<p>修改 3 个文件夹的 application.properties 文件，server.port 为你设置集群的端口号</p>
<ol start="5">
<li>修改 start.cmd 为 cluster 模式</li>
</ol>
<p><img src="8.png" alt=""></p>
<p>结果：启动 3 个 nacos 服务，成功后可以看到以下信息</p>
<p><img src="9.png" alt=""></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Nacos（1-环境搭建）</title>
    <url>/blog/2025/03/15/Java/SpringCloud/%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/eureka/Eureka/</url>
    <content><![CDATA[<h2 id="常用配置">常用配置</h2>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span> <span class="comment">#eureka客户端配置</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span> <span class="comment">#是否将自己注册到eureka服务端上去</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span> <span class="comment">#是否获取eureka服务端上注册的服务列表</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8001/eureka/</span> <span class="comment"># 指定注册中心地址</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 启用eureka客户端</span></span><br><span class="line">    <span class="attr">registry-fetch-interval-seconds:</span> <span class="number">30</span> <span class="comment">#定义去eureka服务端获取服务列表的时间间隔</span></span><br><span class="line">  <span class="attr">instance:</span> <span class="comment">#eureka客户端实例配置</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">30</span> <span class="comment">#定义服务多久去注册中心续约</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">90</span> <span class="comment">#定义服务多久不去续约认为服务失效</span></span><br><span class="line">    <span class="attr">metadata-map:</span></span><br><span class="line">      <span class="attr">zone:</span> <span class="string">jiangsu</span> <span class="comment">#所在区域</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span> <span class="comment">#服务主机名称</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">false</span> <span class="comment">#是否优先使用ip来作为主机名</span></span><br><span class="line">  <span class="attr">server:</span> <span class="comment">#eureka服务端配置</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span> <span class="comment">#关闭eureka服务端的保护机制</span></span><br></pre></td></tr></table></figure>
<h2 id="基本使用">基本使用</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-boot.version</span>&gt;</span>2.3.7.RELEASE<span class="tag">&lt;/<span class="name">spring-boot.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>Hoxton.SR9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="服务端">服务端</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ServerApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span> <span class="comment">#指定服务名称</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span> <span class="comment">#指定主机地址</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment">#指定是否从注册中心获取服务（注册中心不需要开启）</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment">#指定是否要注册到注册中心（注册中心不需要开启）</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">    	<span class="comment"># 指定注册中心地址，如果是集群，需要加上其它Server的地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8001/eureka/</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span> <span class="comment">#关闭保护模式</span></span><br></pre></td></tr></table></figure>
<p>访问localhost:8081</p>
<p><img src="1.png" alt=""></p>
<h3 id="客户端">客户端</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClientApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ClientApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8101</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-client</span> <span class="comment">#服务名称</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span>  <span class="comment">#注册到eureka的注册中心</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span>  <span class="comment">#获取注册实例列表</span></span><br><span class="line">    <span class="attr">service-url:</span> </span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8101/eureka</span> <span class="comment">#配置注册中心地址</span></span><br></pre></td></tr></table></figure>
<p><img src="2.png" alt=""></p>
<h2 id="注册中心集群">注册中心集群</h2>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8002</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span> </span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8003/eureka/</span> <span class="comment">#注册到另一个Eureka注册中心</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8003</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span> </span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8002/eureka/</span> <span class="comment">#注册到另一个Eureka注册中心</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p><font style="background-color:#FBDE28;">客户端yaml</font></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8101</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-client</span> <span class="comment">#服务名称</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span>  <span class="comment">#注册到eureka的注册中心</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span>  <span class="comment">#获取注册实例列表</span></span><br><span class="line">    <span class="attr">service-url:</span> </span><br><span class="line"><span class="comment">#      defaultZone: http://localhost:8001/eureka #配置注册中心地址</span></span><br><span class="line">			<span class="comment">#同时注册到两个注册中心</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8002/eureka,http://localhost:8003/eureka</span></span><br></pre></td></tr></table></figure>
<h2 id="注册中心添加认证SpringSecurity">注册中心添加认证SpringSecurity</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8004</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-security-server</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">user</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.csrf().ignoringAntMatchers(<span class="string">&quot;/eureka/**&quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.configure(http);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><font style="background-color:#FBDE28;">客户端yaml</font></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8101</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-client</span> <span class="comment">#服务名称</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span>  <span class="comment">#注册到eureka的注册中心</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span>  <span class="comment">#获取注册实例列表</span></span><br><span class="line">    <span class="attr">service-url:</span> </span><br><span class="line"><span class="comment">#      defaultZone: http://localhost:8001/eureka #配置注册中心地址</span></span><br><span class="line">    	<span class="comment">#同时注册到两个注册中心</span></span><br><span class="line"><span class="comment">#      defaultZone: http://localhost:8002/eureka,http://localhost:8003/eureka</span></span><br><span class="line">      <span class="comment"># 注册到有登录认证的注册中心：http://$&#123;username&#125;:$&#123;password&#125;@$&#123;hostname&#125;:$&#123;port&#125;/eureka/</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://user:123456@localhost:8004/eureka/</span></span><br></pre></td></tr></table></figure>
<h2 id="版本号和IP显示">版本号和IP显示</h2>
<ol>
<li><a href="http://xn--Applicationspring-oy50a684fkk6ah1cjtu4g8k.application.name">Application下的名字对应spring.application.name</a></li>
<li>status下的是状态+instanceID , instanceID默认值为主机名+服务名+端口（即：${spring.cloud.client.ipAddress}:${<a href="http://spring.application.name">spring.application.name</a>}:${spring.application.instance_id:${server.port}}）</li>
<li>鼠标移到status下的instanceID那里，左下角显示的是主机名:端口/actuaor/info</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">	<span class="attr">instance:</span></span><br><span class="line">  	<span class="comment"># 添加项目版本号</span></span><br><span class="line">  	<span class="attr">instance-id:</span> <span class="string">$&#123;spring.cloud.client.ipAddress&#125;:$&#123;spring.application.name&#125;:$&#123;server.port&#125;:@project.version@</span></span><br><span class="line">  	<span class="comment"># 主机名用ip表示</span></span><br><span class="line">  	<span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p><img src="3.png" alt=""></p>
<h2 id="工作流程">工作流程</h2>
<ol>
<li>Eureka Server 启动成功，等待服务端注册。在启动过程中如果配置了集群，集群之间定时通过 Replicate 同步注册表，每个 Eureka Server 都存在独立完整的服务注册表信息。</li>
<li>Eureka Client 启动时根据配置的 Eureka Server 地址去注册中心注册服务。</li>
<li>Eureka Client 会每 30s 向 Eureka Server 发送一次心跳请求，证明客户端服务正常。</li>
<li>当 Eureka Server 90s 内没有收到 Eureka Client 的心跳，注册中心则认为该节点失效，会注销该实例。</li>
<li>单位时间内 Eureka Server 统计到有大量的 Eureka Client 没有上送心跳，则认为可能为网络异常，进入自我保护机制，不再剔除没有上送心跳的客户端。</li>
<li>当 Eureka Client 心跳请求恢复正常之后，Eureka Server 自动退出自我保护模式。</li>
<li>Eureka Client 定时全量或者增量从注册中心获取服务注册表，并且将获取到的信息缓存到本地。</li>
<li>服务调用时，Eureka Client 会先从本地缓存找寻调取的服务。如果获取不到，先从注册中心刷新注册表，再同步到本地缓存。</li>
<li>Eureka Client 获取到目标服务器信息，发起服务调用。</li>
<li>Eureka Client 程序关闭时向 Eureka Server 发送取消请求，Eureka Server 将实例从注册表中删除。</li>
</ol>
<h2 id="自我保护机制">自我保护机制</h2>
<p>默认情况下，如果 Eureka Server 在一定的 90s 内没有接收到某个微服务实例的心跳，会注销该实例。但是在微服务架构下服务之间通常都是跨进程调用，网络通信往往会面临着各种问题，比如微服务状态正常，网络分区故障，导致此实例被注销。</p>
<p>固定时间内大量实例被注销，可能会严重威胁整个微服务架构的可用性。为了解决这个问题，Eureka 开发了自我保护机制，那么什么是自我保护机制呢？</p>
<ol>
<li>Eureka Server 在运行期间会去统计心跳失败比例在 15 分钟之内是否低于 85%，如果低于 85%，Eureka Server 即会进入自我保护机制。</li>
<li>Eureka Server 进入自我保护机制，会出现以下几种情况：</li>
</ol>
<ul>
<li>Eureka 不再从注册列表中移除因为长时间没收到心跳而应该过期的服务。</li>
<li>Eureka 仍然能够接受新服务的注册和查询请求，但是不会被同步到其它节点上(即保证当前节点依然可用)。</li>
<li>当网络稳定时，当前实例新的注册信息会被同步到其它节点中。</li>
</ul>
<ol start="3">
<li>Eureka 自我保护机制是为了防止误杀服务而提供的一个机制。当个别客户端出现心跳失联时，则认为是客户端的问题，剔除掉客户端；当 Eureka 捕获到大量的心跳失败时，则认为可能是网络问题，进入自我保护机制；当客户端心跳恢复时，Eureka 会自动退出自我保护机制。</li>
<li>如果在保护期内刚好这个服务提供者非正常下线了，此时服务消费者就会拿到一个无效的服务实例，即会调用失败。对于这个问题需要服务消费者端要有一些容错机制，如重试，断路器等。</li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka.server.enable-self-preservation</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>
<h2 id="缓存机制">缓存机制</h2>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Git（3-IDEA使用）</title>
    <url>/blog/2024/12/15/Java/%E5%B7%A5%E4%BD%9C%E6%8A%80%E5%B7%A7/Git/Git%EF%BC%883-IDEA%E4%BD%BF%E7%94%A8%EF%BC%89/</url>
    <content><![CDATA[<h2 id="从远程仓库克隆项目">从远程仓库克隆项目</h2>
<ol>
<li>如果上方显示的是VCS选项</li>
</ol>
<p><img src="1.png" alt=""></p>
<p><img src="2.png" alt=""></p>
<ol start="2">
<li>如果上方显示的是Git选项</li>
</ol>
<p><img src="3.png" alt=""></p>
<h2 id="添加文件到暂存区">添加文件到暂存区</h2>
<ol>
<li>在项目里每添加一个文件，IDEA就会询问我们是否将文件添加到Git，选择Add将文件添加添加进Git暂存区</li>
</ol>
<p><img src="5.png" alt=""></p>
<ol start="2">
<li>如果选中了Cancel，可以通过另一种方式添加到Git暂存区，右键点击项目</li>
</ol>
<p><img src="6.png" alt=""></p>
<h2 id="提交到本地仓库">提交到本地仓库</h2>
<p>选中Commit后代码会提交到本地仓库</p>
<p><img src="7.png" alt=""></p>
<h2 id="推送到远程仓库">推送到远程仓库</h2>
<p>选中Push后代码会提交到远程仓库</p>
<p><img src="8.png" alt=""></p>
<h2 id="选择分支">选择分支</h2>
<p>通过Branches可以选择对应的分支进行开发</p>
<p><img src="9.png" alt=""></p>
<h2 id="创建新分支">创建新分支</h2>
<p>通过New Branch可以在某个分支的基础上创建一个新的分支</p>
<p><img src="10.png" alt=""></p>
<p><img src="11.png" alt=""></p>
<h2 id="分支合并">分支合并</h2>
<p>通过Merge选择某个分支的内容合并到当前分支上</p>
<p><img src="D:%5Cblog%5Chexo%5Csource_posts%5CJava%5C%E5%B7%A5%E4%BD%9C%E6%8A%80%E5%B7%A7%5CGit%5CGit%EF%BC%883-Idea%E4%BD%BF%E7%94%A8%EF%BC%89%5C12-1734148431455-43.png" alt=""><img src="13.png" alt=""></p>
<h2 id="提交历史记录查看">提交历史记录查看</h2>
<p><img src="14.png" alt=""><img src="15.png" alt=""></p>
<h2 id="对比不同版本">对比不同版本</h2>
<ol>
<li>Compare with Revision：当前文件与该文件各次提交的版本做比较</li>
<li>Compare with Branch：当前文件与其他分支上该文件的版本进行比较</li>
</ol>
<p><img src="16.png" alt=""></p>
<h2 id="代码搁置">代码搁置</h2>
<p>当我们临时需要开发某个功能时，此时的代码修改后可能还不想进行提交，可以先搁置代码，当完成开发后再回来释放代码，继续之前的代码修改</p>
<ol>
<li>shelve changes（代码搁置和恢复）</li>
</ol>
<p><img src="17.png" alt=""></p>
<p><img src="18.png" alt=""></p>
<p><img src="19.png" alt=""></p>
<p><img src="20.png" alt=""></p>
<ol start="2">
<li>stash changes（搁置代码）和unstash changes（恢复代码）</li>
</ol>
<p><img src="21.png" alt=""></p>
<p><img src="22.png" alt=""></p>
<h2 id="回退版本">回退版本</h2>
<p>当我们想要回退某个分支的版本时，可以通过右键点击提交历史记录，选择reset current branch to here</p>
<p><img src="23.png" alt=""></p>
<p><img src="24.png" alt=""></p>
<ol>
<li>hard：回滚后，本地代码就是你回退版本的代码（彻底回退，所有改动的内容都不见了，慎用）</li>
</ol>
<ul>
<li>移动本地库HEAD指针</li>
<li>重置暂存区</li>
<li>重置工作区</li>
</ul>
<ol start="2">
<li>soft：回滚后，仅仅是把本地库的指针移动了，暂存区和本地的代码是没有做任何的改变，而你上次改动已提交committed到本地库的代码显示是绿色即未提交的状态</li>
</ol>
<ul>
<li>移动本地库HEAD指针</li>
</ul>
<ol start="3">
<li>mixed：回滚后，不仅移动了本地库的指针，同时暂存区的东西也没了，即上次添加到暂存区的文件没了</li>
</ol>
<ul>
<li>移动本地库HEAD指针</li>
<li>重置暂存区</li>
</ul>
<ol start="4">
<li>keep：回滚后，本地代码就是你回退版本的代码，而暂存区是没有做任何改变的</li>
</ol>
<ul>
<li>移动本地库HEAD指针</li>
<li>暂存区不变</li>
<li>重置工作区</li>
</ul>
<h2 id="撤销某个commit">撤销某个commit</h2>
<p>当我们想要撤销某个commit时，可以通过右键点击提交历史记录，选择revert commit</p>
<p><img src="23.png" alt=""></p>
<h2 id="合并某个commit">合并某个commit</h2>
<p>当我们想要合并某个分支的某个提交内容时，可以cherry-pick选定某个commit或某个commit的部分文件</p>
<p><img src="25.png" alt=""></p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Nacos（3-配置中心使用）</title>
    <url>/blog/2025/03/17/Java/SpringCloud/%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/nacos/Nacos%EF%BC%883-%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E4%BD%BF%E7%94%A8%EF%BC%89/</url>
    <content><![CDATA[<h2 id="读取配置文件顺序">读取配置文件顺序</h2>
<p>SpringBoot 读取配置文件顺序：bootstrap.yml &gt;  bootstrap.properties &gt; nacos 配置 &gt; application.yml &gt; application.properties</p>
<ol>
<li>加载顺序：若 application.yaml 和 bootstrap.yaml 在同一目录下，bootstrap.yaml 先加载，application.yaml 后加载。bootstrap.yaml 用于应用程序上下文的引导阶段，application.yaml 由父 Spring ApplicationContext 加载</li>
<li>配置区别：bootstrap.yaml 和 application.yaml 都可以用来配置参数。bootstrap.yaml 用来程序引导时执行，应用于更加早期配置信息读取，可以理解为系统级别的一些参数配置，这些参数配置是不会变动的，一旦 bootstrap.yaml 被加载，则内容不会被覆盖</li>
<li>属性覆盖问题：启动上下文时，Spring Cloud 会创建一个 Bootstrap Context 作为 Spring 应用的 Application Context 的父上下文，初始化的时候，Bootstrap Context 负责从外部源加载配置属性并解析配置，这两个上下文共享一个从外部获取的 Environment。Bootstrap 属性有高优先级，默认情况下，它们不会被本地配置覆盖，即如果加载的 application.yaml 的内容标签与 bootstrap 的标签一致，application 也不会覆盖 bootstrap，而 application.yaml 里面的内容可以动态替换</li>
</ol>
<h2 id="环境隔离">环境隔离</h2>
<ol>
<li>命名空间（namespace）</li>
</ol>
<p><img src="1.png" alt=""></p>
<p><img src="2.png" alt=""></p>
<p><img src="3.png" alt=""></p>
<ol start="2">
<li>组（group）</li>
</ol>
<p><img src="4.png" alt=""></p>
<p><img src="5.png" alt=""></p>
<ol start="3">
<li>唯一标识（dataId）</li>
</ol>
<p><img src="6.png" alt=""></p>
<h2 id="动态感知">动态感知</h2>
<p>在进行修改 yaml 或 properties 文件，每次都要重新启动项目，可以在 nacos 配置中心进行文件配置，使得项目可以动态感知，在 resources 创建的文件名必须是 bootstrap。在 nacos 中创建配置文件，配置文件名称要和项目中 bootstrap.properties 中配置的名称一致，注意：配置文件的名称建议为项目服务名且要带上具体环境，例如：configclient-prod.properties</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>config-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>application.yaml</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8050</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line"><span class="comment"># 在配置中心，可以通过profile进行设置，只有默认的配置文件才能结合profile进行使用</span></span><br><span class="line"><span class="comment"># 对应的Dataid:$&#123;spring.application.name&#125;-$&#123;profile&#125;.$&#123;file-extensive:properties&#125;</span></span><br><span class="line"><span class="comment"># profile的后缀必须跟随配置文件的格式来</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>bootstrap.yaml</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment"># 会自动根据服务名拉取dataid对应的配置，如果dataid跟服务名不一致，就需要手动指定dataid</span></span><br><span class="line">    <span class="comment"># 跟服务名相同的dataid的配置文件，称为默认配置文件</span></span><br><span class="line">    <span class="comment"># 除了默认的配置文件，其他配置文件必须写上后缀，例如：config-nacos-dev</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-nacos</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line">      <span class="comment"># 解决控制台循环打印ClientWorker日志，命名空间的问题</span></span><br><span class="line">      <span class="comment">#config:</span></span><br><span class="line">      <span class="comment">#  namespace: public</span></span><br><span class="line">      </span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">		<span class="comment"># nacos客户端默认是properties的文件扩展名</span></span><br><span class="line">      	<span class="comment"># 一旦修改成了非properties格式，则必须通过file-extension进行配置</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#refresh-enabled: false      nacos客户端无法感知配置的变化</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">dev</span>  	<span class="comment">#去哪个命名空间拉取</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">test</span>  		<span class="comment">#去哪个组拉取</span></span><br><span class="line"></span><br><span class="line">      	<span class="comment"># 用于共享的配置文件</span></span><br><span class="line">        <span class="attr">shared-configs:</span> </span><br><span class="line">          <span class="bullet">-</span> <span class="attr">data-id:</span> <span class="string">com.common.test1</span>     <span class="comment">#[0]</span></span><br><span class="line">            <span class="attr">refresh:</span> <span class="literal">true</span></span><br><span class="line">            <span class="comment">#group: 默认是DEFAULT-GROUP</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">data-id:</span> <span class="string">com.common.test2</span>     <span class="comment">#[1]</span></span><br><span class="line">            <span class="attr">refresh:</span> <span class="literal">true</span></span><br><span class="line">      	<span class="comment"># 扩展配置的文件</span></span><br><span class="line">        <span class="string">extension-configs[0]:</span></span><br><span class="line">          <span class="attr">data-id:</span> <span class="string">com.common.test3</span></span><br><span class="line">          <span class="attr">refresh:</span> <span class="literal">true</span></span><br><span class="line">          </span><br><span class="line"><span class="comment"># 配置文件的优先级（优先级大的会覆盖优先级小的，并且会形成互补）</span></span><br><span class="line"><span class="comment"># 服务名-profile.yaml &gt; 默认配置文件.yaml &gt; extension-configs(下标越大，优先级越大) &gt; share-configs(下标越大，优先级越大)</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> SpringApplication.run(ConfigApplication.class, args);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> applicationContext.getEnvironment().getProperty(<span class="string">&quot;user.name&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">userAge</span> <span class="operator">=</span> applicationContext.getEnvironment().getProperty(<span class="string">&quot;user.age&quot;</span>);</span><br><span class="line">            System.err.println(userName+<span class="string">&quot;,&quot;</span>+userAge);</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/config&quot;)</span></span><br><span class="line"><span class="meta">@RefreshScope</span><span class="comment">//动态感知配置变化</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;user.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String username;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/show&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Nacos（2-注册中心使用）</title>
    <url>/blog/2025/03/16/Java/SpringCloud/%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/nacos/Nacos%EF%BC%882-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E4%BD%BF%E7%94%A8%EF%BC%89/</url>
    <content><![CDATA[<h2 id="基本使用">基本使用</h2>
<p><img src="1.png" alt=""></p>
<ol>
<li>父模块 maven</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>order-nacos<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>stock-nacos<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>springcloud<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>springcloud<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-boot.version</span>&gt;</span>2.3.7.RELEASE<span class="tag">&lt;/<span class="name">spring-boot.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>Hoxton.SR8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.example.springcloud.SpringcloudApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>order-nacos 模块 maven</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>order-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--nacos服务注册发现--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>application.yaml（或 bootstrap.yaml）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8020</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用名称（nacos会将该名称当作服务名称）</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">order-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span> </span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#nacos服务地址</span></span><br><span class="line">      <span class="attr">discovery:</span> </span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span> <span class="comment">#用户名</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span> <span class="comment">#密码</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">public</span> <span class="comment">#命名空间</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OrderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 远程调用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> builder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">	<span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">(RestTemplateBuilder builder)</span>&#123;</span><br><span class="line">        <span class="type">RestTemplate</span> <span class="variable">restTemplate</span> <span class="operator">=</span> builder.build();</span><br><span class="line">        <span class="keyword">return</span> restTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;下单成功&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> restTemplate.getForObject(<span class="string">&quot;http://stock-service/stock/reduct&quot;</span>, String.class);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span> + msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>stock-nacos 模块 maven</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>stock-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>application.yaml（或 bootstrap.yaml）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8021</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">stock-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">public</span></span><br><span class="line">        <span class="comment">#ephemeral: false # 默认为true，false为永久实例，哪怕宕机了也不会删除实例</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">#service: 默认取$&#123;spring.application.name&#125;，也可以通过该选项配置</span></span><br><span class="line">        <span class="comment">#group: 默认DEFAULT_GROUP 更细的相同特征的服务进行归类分组管理</span></span><br><span class="line">        <span class="comment">#weight: 通常要结合安装权重的负载均衡策略，权重越高分配的流量就越大</span></span><br><span class="line">        <span class="comment">#metadata: version=1 可以结合元数据做扩展</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/stock&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StockController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    String port;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/reduct&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">reduct</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;扣减库存&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;扣减库存:&quot;</span>+port;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>查看服务情况</li>
</ol>
<p><img src="2.png" alt=""></p>
<h2 id="命名空间-ID">命名空间 ID</h2>
<p>注意：如果命名空间名称后面有对应的 ID，则 namespace 则要写 ID，否则会报错</p>
<p><img src="3.png" alt=""></p>
<p>nacos 新建命名空间默认不能填写 ID，数据库中导入 nacos/conf 下的 nacos-mysql 文件，然后修改 nacos/conf 下的 application.properties 文件，重启后即可填写 dataID</p>
<p><img src="4.png" alt=""></p>
<p><img src="5.png" alt=""></p>
<h2 id="权重配置">权重配置</h2>
<ol>
<li>Nacos 控制台可以设置实例的权重值，0~1 之间</li>
<li>同集群内的多个实例，权重越高被访问的频率越高</li>
<li>权重设置为 0 则完全不会被访问</li>
</ol>
<p><img src="6.png" alt=""></p>
<p><img src="7.png" alt=""></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
</search>
