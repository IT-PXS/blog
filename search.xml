<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SpringBoot Task</title>
    <url>/blog/2024/11/08/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/SpringBoot%20Task/</url>
    <content><![CDATA[<h2 id="参数详解">参数详解</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.ANNOTATION_TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Repeatable(Schedules.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Scheduled &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">CRON_DISABLED</span> <span class="operator">=</span> <span class="string">&quot;-&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    String <span class="title function_">cron</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    String <span class="title function_">zone</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">long</span> <span class="title function_">fixedDelay</span><span class="params">()</span> <span class="keyword">default</span> -<span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    String <span class="title function_">fixedDelayString</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">long</span> <span class="title function_">fixedRate</span><span class="params">()</span> <span class="keyword">default</span> -<span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    String <span class="title function_">fixedRateString</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">long</span> <span class="title function_">initialDelay</span><span class="params">()</span> <span class="keyword">default</span> -<span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    String <span class="title function_">initialDelayString</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="fixedDelay">fixedDelay</h3>
<p>它的间隔时间是根据上次任务结束的时候开始计时的，只要盯紧上一次任务执行结束的时间即可，跟任务逻辑的执行时间无关，两个任务的间隔时间是固定的</p>
<p><img src="1.png" alt=""></p>
<h3 id="fixedDelayString">fixedDelayString</h3>
<p>与fixedDalay一样，不同的是使用的是String字符串，支持占位符方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Scheduled(fixedDelayString = &quot;$&#123;time.fixedDelay&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Execute at &quot;</span> + System.currentTimeMillis());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="fixedRate">fixedRate</h3>
<p>在理想情况下，下一次开始和上一次开始之间的时间间隔是一定的，但是默认情况下SpringBoot定时任务是单线程执行的。当下一轮的任务满足时间策略后任务就会加入队列，即当本次任务开始执行时下一次任务的时间就已经确定了，由于本次任务的“超时”执行，下一次任务的等待时间就会被压缩甚至阻塞</p>
<p><img src="2.png" alt=""></p>
<h3 id="fixedRateString">fixedRateString</h3>
<p>与fixedRate一样，不同的是使用的是String字符串，支持占位符方式</p>
<h3 id="initialDelay">initialDelay</h3>
<p>这个参数只能配合fixedDelay或fixedRate使用。如：@Scheduled(initialDelay=10000,fixedRate=15000)，意思是在容器启动后，延迟10秒再执行一次定时器，以后每15秒再执行一次该定时器</p>
<h3 id="initialDelayString">initialDelayString</h3>
<p>与initialDelay一样，不同的是使用的是String字符串，支持占位符方式</p>
<h3 id="cron表达式">cron表达式</h3>
<p>语法格式：</p>
<ol>
<li>
<p>秒 分 小时 月份中的日期 月份 星期中的日期 年份</p>
</li>
<li>
<p>秒 分 小时 月份中的日期 月份 星期中的日期</p>
</li>
</ol>
<table>
<thead>
<tr>
<th>字段</th>
<th>值</th>
<th>特殊字符</th>
</tr>
</thead>
<tbody>
<tr>
<td>秒（Seconds）</td>
<td>0~59的整数</td>
<td>, - * /</td>
</tr>
<tr>
<td>分（Minutes）</td>
<td>0~59的整数</td>
<td>, - * /</td>
</tr>
<tr>
<td>小时（Hours）</td>
<td>0~23的整数</td>
<td>, - * /</td>
</tr>
<tr>
<td>日期（DayofMonth）</td>
<td>1~31的整数（需要看月的天数）</td>
<td>, - * ? / L W C</td>
</tr>
<tr>
<td>月份（Month）</td>
<td>1~12的整数</td>
<td>, - * /</td>
</tr>
<tr>
<td>星期（DayOfWeek）</td>
<td>1~7的整数</td>
<td>, - * ? / L W C</td>
</tr>
<tr>
<td>年（Year）（可选）</td>
<td>1970~2099</td>
<td>, - * /</td>
</tr>
</tbody>
</table>
<ol>
<li>
<p>*：表示匹配该域的任意值。</p>
<p>例如：在Minutes域使用*，即表示每分钟都会触发事件</p>
</li>
<li>
<p>?：只能用在DayofMonth和DayofWeek两个域，它也匹配域的任意值，但实际不会，因为DayofMonth和DayofWeek会相互影响。</p>
<p>例如：在每月的20日触发任务，不管20日是星期几，只能使用如下写法：13 13 15 20 * ?，其中最后一位只能用?，而不能使用*，如果使用*表示不管星期几都会触发</p>
</li>
<li>
<p>-：表示范围。</p>
<p>例如：在Minutes域使用5-20，表示从5到20分钟每分钟触发一次</p>
</li>
<li>
<p>/：表示起始时间开始触发，然后每隔固定时间触发一次。</p>
<p>例如：在Minutes域使用5/20，则意味着从第5分钟开始，每隔20分钟触发一次</p>
</li>
<li>
<p>,：表示列出枚举值。</p>
<p>例如：在Minutes域使用5,20，则意味着在5和20分都会触发一次</p>
</li>
<li>
<p>L：表示最后，只能出现在DayofWeek和DayofMonth域。</p>
<p>例如：在DayofWeek域使用5L，意味着在最后的一个星期四触发</p>
</li>
<li>
<p>W：表示有效工作日（周一到周五），只能出现在DayofMonth域，系统将在离指定日期的最近的有效工作日触发事件。</p>
<p>例如：在DayofMonth使用5W，如果5日是星期六，则将在最近的工作日（星期五，即4日触发）；如果5日是星期天，则在6日（星期一）触发；如果5日在星期一到星期五中的一天，则就在5日触发。注意：W的最近寻找不会跨过月份</p>
</li>
<li>
<p>LW：这两个字符可以连用，表示在某个月最后一个工作日，即最后一个星期五</p>
</li>
<li>
<p>#：用于确定每个月第n个星期x（x#n），只能出现在DayofMonth域。</p>
<p>例如：4#2表示第2个星期三</p>
</li>
</ol>
<p><strong>常用表达式参考</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;*/5 * * * * ?&quot;</span>       # 每隔<span class="number">5</span>秒执行一次</span><br><span class="line"><span class="string">&quot;0 */1 * * * ?&quot;</span>       # 每隔<span class="number">1</span>分钟执行一次</span><br><span class="line"><span class="string">&quot;0 0 23 * * ?&quot;</span>        # 每天<span class="number">23</span>点执行一次</span><br><span class="line"><span class="string">&quot;0 0 1 * * ?&quot;</span>         # 每天凌晨<span class="number">1</span>点执行一次</span><br><span class="line"><span class="string">&quot;0 0 1 1 * ?&quot;</span>         # 每月<span class="number">1</span>号凌晨<span class="number">1</span>点执行一次</span><br><span class="line"><span class="string">&quot;0 0 23 L * ?&quot;</span>        # 每月最后一天<span class="number">23</span>点执行一次</span><br><span class="line"><span class="string">&quot;0 0 1 ? * L&quot;</span>         # 每周星期天凌晨<span class="number">1</span>点实行一次：</span><br><span class="line"><span class="string">&quot;0 26,29,33 * * * ?&quot;</span>  # 在<span class="number">26</span>分、<span class="number">29</span>分、<span class="number">33</span>分执行一次</span><br><span class="line"><span class="string">&quot;0 0 0,3,8,21 * * ?&quot;</span>  # 每天的<span class="number">0</span>点、<span class="number">3</span>点、<span class="number">8</span>点、<span class="number">21</span>点执行一次</span><br><span class="line"><span class="string">&quot;0 0 10,14,16 * * ?&quot;</span>  # 每天上午<span class="number">10</span>点，下午<span class="number">2</span>点，<span class="number">4</span>点</span><br><span class="line"><span class="string">&quot;0 0/30 9-17 * * ?&quot;</span>   # 朝九晚五工作时间内每半小时</span><br><span class="line"><span class="string">&quot;0 0 12 ? * WED&quot;</span>      # 表示每个星期三中午<span class="number">12</span>点</span><br><span class="line"><span class="string">&quot;0 0 12 * * ?&quot;</span>        # 每天中午<span class="number">12</span>点触发</span><br><span class="line"><span class="string">&quot;0 15 10 ? * *&quot;</span>       # 每天上午<span class="number">10</span>:<span class="number">15</span>触发</span><br><span class="line"><span class="string">&quot;0 15 10 * * ?&quot;</span>       # 每天上午<span class="number">10</span>:<span class="number">15</span>触发</span><br><span class="line"><span class="string">&quot;0 15 10 * * ? *&quot;</span>     # 每天上午<span class="number">10</span>:<span class="number">15</span>触发</span><br><span class="line"><span class="string">&quot;0 15 10 * * ?&quot;</span>       # <span class="number">2005</span><span class="string">&quot; 2005年的每天上午10:15触发</span></span><br><span class="line"><span class="string">&quot;</span><span class="number">0</span> * <span class="number">14</span> * * ?<span class="string">&quot;        # 在每天下午2点到下午2:59期间的每1分钟触发</span></span><br><span class="line"><span class="string">&quot;</span><span class="number">0</span> <span class="number">0</span>/<span class="number">5</span> <span class="number">14</span> * * ?<span class="string">&quot;      # 在每天下午2点到下午2:55期间的每5分钟触发</span></span><br><span class="line"><span class="string">&quot;</span><span class="number">0</span> <span class="number">0</span>/<span class="number">5</span> <span class="number">14</span>,<span class="number">18</span> * * ?<span class="string">&quot;   # 在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发</span></span><br><span class="line"><span class="string">&quot;</span><span class="number">0</span> <span class="number">0</span>-<span class="number">5</span> <span class="number">14</span> * * ?<span class="string">&quot;      # 在每天下午2点到下午2:05期间的每1分钟触发</span></span><br><span class="line"><span class="string">&quot;</span><span class="number">0</span> <span class="number">10</span>,<span class="number">44</span> <span class="number">14</span> ? <span class="number">3</span> WED<span class="string">&quot;  # 每年三月的星期三的下午2:10和2:44触发</span></span><br><span class="line"><span class="string">&quot;</span><span class="number">0</span> <span class="number">15</span> <span class="number">10</span> ? * MON-FRI<span class="string">&quot; # 周一至周五的上午10:15触发</span></span><br><span class="line"><span class="string">&quot;</span><span class="number">0</span> <span class="number">15</span> <span class="number">10</span> <span class="number">15</span> * ?<span class="string">&quot;      # 每月15日上午10:15触发</span></span><br><span class="line"><span class="string">&quot;</span><span class="number">0</span> <span class="number">15</span> <span class="number">10</span> L * ?<span class="string">&quot;       # 每月最后一日的上午10:15触发</span></span><br><span class="line"><span class="string">&quot;</span><span class="number">0</span> <span class="number">15</span> <span class="number">10</span> ? * <span class="number">6L</span><span class="string">&quot;      # 每月的最后一个星期五上午10:15触发</span></span><br><span class="line"><span class="string">&quot;</span><span class="number">0</span> <span class="number">15</span> <span class="number">10</span> ? * <span class="number">6</span>#<span class="number">3</span><span class="string">&quot;     # 每月的第三个星期五上午10:15触发</span></span><br><span class="line"><span class="string">&quot;</span><span class="number">0</span> <span class="number">15</span> <span class="number">10</span> ? * <span class="number">6L</span> <span class="number">2002</span>-<span class="number">2005</span><span class="string">&quot; # 2002年至2005年的每月的最后一个星期五上午10:15触发</span></span><br></pre></td></tr></table></figure>
<h2 id="基本使用">基本使用</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// 开启定时任务开关</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringtaskApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringtaskApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskService01</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Scheduled(fixedDelay = 1000)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task01</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;fixedDelay....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Scheduled(fixedRate = 1000)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task02</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;fixedRate....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Scheduled(initialDelay = 10000,fixedDelay = 1000)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task03</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;initialDelay&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;1 * * * * *&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task04</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;cron&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="定时任务配置">定时任务配置</h2>
<p>@EnableScheduling 注解引入了 ScheduledAnnotationBeanPostProcessor 其 setScheduler(Object scheduler) 有以下的注释：</p>
<p>如果 TaskScheduler 或者 ScheduledExecutorService 没有定义为该方法的参数，该方法将在 Spring IoC 中寻找唯一的 TaskScheduler 或者 名称为 taskScheduler 的 Bean 作为参数，当然你按照查找 TaskScheduler 的方法找一个ScheduledExecutorService 也可以。要是都找不到那么只能使用本地单线程调度器了</p>
<p>![](SpringBoot Task/3.png)</p>
<h3 id="执行器">执行器</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 仅在类 ThreadPoolTaskExecutor 存在于 classpath 时才应用</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(ThreadPoolTaskExecutor.class)</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(TaskExecutionProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskExecutionAutoConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">APPLICATION_TASK_EXECUTOR_BEAN_NAME</span> <span class="operator">=</span> <span class="string">&quot;applicationTaskExecutor&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">	<span class="keyword">public</span> TaskExecutorBuilder <span class="title function_">taskExecutorBuilder</span><span class="params">(TaskExecutionProperties properties,</span></span><br><span class="line"><span class="params">			ObjectProvider&lt;TaskExecutorCustomizer&gt; taskExecutorCustomizers,</span></span><br><span class="line"><span class="params">			ObjectProvider&lt;TaskDecorator&gt; taskDecorator)</span> &#123;</span><br><span class="line">		TaskExecutionProperties.<span class="type">Pool</span> <span class="variable">pool</span> <span class="operator">=</span> properties.getPool();</span><br><span class="line">		<span class="type">TaskExecutorBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TaskExecutorBuilder</span>();</span><br><span class="line">		builder = builder.queueCapacity(pool.getQueueCapacity());</span><br><span class="line">		builder = builder.corePoolSize(pool.getCoreSize());</span><br><span class="line">		builder = builder.maxPoolSize(pool.getMaxSize());</span><br><span class="line">		builder = builder.allowCoreThreadTimeOut(pool.isAllowCoreThreadTimeout());</span><br><span class="line">		builder = builder.keepAlive(pool.getKeepAlive());</span><br><span class="line">		<span class="type">Shutdown</span> <span class="variable">shutdown</span> <span class="operator">=</span> properties.getShutdown();</span><br><span class="line">		builder = builder.awaitTermination(shutdown.isAwaitTermination());</span><br><span class="line">		builder = builder.awaitTerminationPeriod(shutdown.getAwaitTerminationPeriod());</span><br><span class="line">		builder = builder.threadNamePrefix(properties.getThreadNamePrefix());</span><br><span class="line">		builder = builder.customizers(taskExecutorCustomizers.orderedStream()::iterator);</span><br><span class="line">		builder = builder.taskDecorator(taskDecorator.getIfUnique());</span><br><span class="line">		<span class="keyword">return</span> builder;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Lazy</span></span><br><span class="line">	<span class="meta">@Bean(name = &#123; APPLICATION_TASK_EXECUTOR_BEAN_NAME,</span></span><br><span class="line"><span class="meta">			AsyncAnnotationBeanPostProcessor.DEFAULT_TASK_EXECUTOR_BEAN_NAME &#125;)</span></span><br><span class="line">	<span class="meta">@ConditionalOnMissingBean(Executor.class)</span></span><br><span class="line">	<span class="keyword">public</span> ThreadPoolTaskExecutor <span class="title function_">applicationTaskExecutor</span><span class="params">(TaskExecutorBuilder builder)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> builder.build();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="调度器">调度器</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnClass(ThreadPoolTaskScheduler.class)</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(TaskSchedulingProperties.class)</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(TaskExecutionAutoConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskSchedulingAutoConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="meta">@ConditionalOnBean(name = TaskManagementConfigUtils.SCHEDULED_ANNOTATION_PROCESSOR_BEAN_NAME)</span></span><br><span class="line">	<span class="meta">@ConditionalOnMissingBean(&#123; SchedulingConfigurer.class, TaskScheduler.class, ScheduledExecutorService.class &#125;)</span></span><br><span class="line">	<span class="keyword">public</span> ThreadPoolTaskScheduler <span class="title function_">taskScheduler</span><span class="params">(TaskSchedulerBuilder builder)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> builder.build();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">	<span class="keyword">public</span> TaskSchedulerBuilder <span class="title function_">taskSchedulerBuilder</span><span class="params">(TaskSchedulingProperties properties,</span></span><br><span class="line"><span class="params">			ObjectProvider&lt;TaskSchedulerCustomizer&gt; taskSchedulerCustomizers)</span> &#123;</span><br><span class="line">		<span class="type">TaskSchedulerBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TaskSchedulerBuilder</span>();</span><br><span class="line">		builder = builder.poolSize(properties.getPool().getSize());</span><br><span class="line">		<span class="type">Shutdown</span> <span class="variable">shutdown</span> <span class="operator">=</span> properties.getShutdown();</span><br><span class="line">		builder = builder.awaitTermination(shutdown.isAwaitTermination());</span><br><span class="line">		builder = builder.awaitTerminationPeriod(shutdown.getAwaitTerminationPeriod());</span><br><span class="line">		builder = builder.threadNamePrefix(properties.getThreadNamePrefix());</span><br><span class="line">		builder = builder.customizers(taskSchedulerCustomizers);</span><br><span class="line">		<span class="keyword">return</span> builder;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该配置的自定义配置以 spring.task.scheduling 开头。同时它需要在任务执行器配置 TaskExecutionAutoConfiguration 配置后才生效。我们只需要在中对其配置属性 spring.task.execution 相关属性配置即可。</p>
<p>注意：定义任务默认用的是TaskSchedulingAutoConfiguration实例化的Bean（taskScheduler）</p>
<h3 id="Properties配置">Properties配置</h3>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">######任务调度线程池######</span></span><br><span class="line"><span class="comment"># 任务调度线程池大小 默认 1 建议根据任务加大</span></span><br><span class="line"><span class="attr">spring.task.scheduling.pool.size</span>=<span class="string">1</span></span><br><span class="line"><span class="comment"># 调度线程名称前缀 默认 scheduling-</span></span><br><span class="line"><span class="attr">spring.task.scheduling.thread-name-prefix</span>=<span class="string">scheduling-</span></span><br><span class="line"><span class="comment"># 线程池关闭时等待所有任务完成</span></span><br><span class="line"><span class="attr">spring.task.scheduling.shutdown.await-termination</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 调度线程关闭前最大等待时间，确保最后一定关闭</span></span><br><span class="line"><span class="attr">spring.task.scheduling.shutdown.await-termination-period</span>=<span class="string">60</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">######任务执行线程池配置######</span></span><br><span class="line"><span class="comment"># 是否允许核心线程超时。这样可以动态增加和缩小线程池</span></span><br><span class="line"><span class="attr">spring.task.execution.pool.allow-core-thread-timeout</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#  核心线程池大小 默认 8</span></span><br><span class="line"><span class="attr">spring.task.execution.pool.core-size</span>=<span class="string">8</span></span><br><span class="line"><span class="comment"># 线程空闲等待时间 默认 60s</span></span><br><span class="line"><span class="attr">spring.task.execution.pool.keep-alive</span>=<span class="string">60s</span></span><br><span class="line"><span class="comment"># 线程池最大数  根据任务定制</span></span><br><span class="line"><span class="attr">spring.task.execution.pool.max-size</span>=<span class="string">16</span></span><br><span class="line"><span class="comment">#  线程池 队列容量大小</span></span><br><span class="line"><span class="attr">spring.task.execution.pool.queue-capacity</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># 线程池关闭时等待所有任务完成</span></span><br><span class="line"><span class="attr">spring.task.execution.shutdown.await-termination</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 执行线程关闭前最大等待时间，确保最后一定关闭</span></span><br><span class="line"><span class="attr">spring.task.execution.shutdown.await-termination-period</span>=<span class="string">60</span></span><br><span class="line"><span class="comment"># 线程名称前缀</span></span><br><span class="line"><span class="attr">spring.task.execution.thread-name-prefix</span>=<span class="string">task-</span></span><br></pre></td></tr></table></figure>
<p><strong>查看TaskSchedulingAutoConfiguration源码</strong></p>
<p>当Spring Boot应用程序中没有定义自定义的线程池bean时，Spring Boot应用程序会根据自动配置类注入一个名为applicationTaskExecutor 或 taskExecutor的线程池对象，它的配置是在TaskExecutionProperties类中完成的，这个类使用 spring.task.execution 前缀进行配置，包含了很多线程池相关细节的配置选项</p>
<p>当我们容器中存在自定义线程池时，applicationTaskExecutor 或 taskExecutor的线程池对象是不会被创建的。且我们使用@Async注解没有指定value属性时，项目启动的时候会有这样的提示：“在上下文中找到多个TaskExecutor bean，并且没有一个名为’ taskExecutor’。将其中一个标记为primary或将其命名为’taskExecutor’（可能作为别名），以便将其用于异步处理”</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 标记为Primary，即主要的线程</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="keyword">public</span> ThreadPoolTaskExecutor <span class="title function_">threadPoolTaskExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line">    executor.setThreadNamePrefix(<span class="string">&quot;my-free-style-&quot;</span>);</span><br><span class="line">    executor.setMaxPoolSize(maxPoolSize);</span><br><span class="line">    executor.setCorePoolSize(corePoolSize);</span><br><span class="line">    executor.setQueueCapacity(queueCapacity);</span><br><span class="line">    executor.setKeepAliveSeconds(keepAliveSeconds);</span><br><span class="line">    <span class="comment">// 线程池对拒绝任务(无线程可用)的处理策略</span></span><br><span class="line">    executor.setRejectedExecutionHandler(<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());</span><br><span class="line">    <span class="keyword">return</span> executor;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 直接起别名为taskExecutor</span></span><br><span class="line"><span class="meta">@Bean(name = &quot;taskExecutor&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ThreadPoolTaskExecutor <span class="title function_">threadPoolTaskExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line">    executor.setThreadNamePrefix(<span class="string">&quot;my-free-style-&quot;</span>);</span><br><span class="line">    executor.setMaxPoolSize(maxPoolSize);</span><br><span class="line">    executor.setCorePoolSize(corePoolSize);</span><br><span class="line">    executor.setQueueCapacity(queueCapacity);</span><br><span class="line">    executor.setKeepAliveSeconds(keepAliveSeconds);</span><br><span class="line">    <span class="comment">// 线程池对拒绝任务(无线程可用)的处理策略</span></span><br><span class="line">    executor.setRejectedExecutionHandler(<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());</span><br><span class="line">    <span class="keyword">return</span> executor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="任务阻塞">任务阻塞</h2>
<h3 id="出现原因">出现原因</h3>
<p>Spring中@EnableScheduling和@Scheduled标注的定时任务默认单线程同步执行，多个任务时，一个任务执行完毕以后才能执行下一个任务，可能会有阻塞现象发生（如果希望并发运行，需要配置线程池）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringbootTaskApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringbootTaskApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleTask1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;*/2 * * * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;我是task1，我需要执行 10s 钟的时间，我的线程的 id == &gt; &#123;&#125;，时间 == &gt;&#123;&#125;&quot;</span>, Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">        log.info(<span class="string">&quot;我是task1 ending ,我的线程的 id == &gt; &#123;&#125; , 时间 == &gt; &#123;&#125;&quot;</span>, Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;*/4 * * * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task2</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;我是task2，我需要执行 2s 钟的时间，我的线程的 id == &gt; &#123;&#125;，时间 == &gt;&#123;&#125;&quot;</span>, Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        log.info(<span class="string">&quot;我是task2 ending ,我的线程的 id == &gt; &#123;&#125; , 时间 == &gt; &#123;&#125;&quot;</span>,Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line">我是task1，我需要执行 10s 钟的时间，我的线程的 id == &gt; <span class="number">95</span>，时间 == &gt;Fri Feb <span class="number">01</span> <span class="number">15</span>:<span class="number">16</span>:<span class="number">52</span> CST <span class="number">2019</span></span><br><span class="line">我是task1 ending ,我的线程的 id == &gt; <span class="number">95</span> , 时间 == &gt; Fri Feb <span class="number">01</span> <span class="number">15</span>:<span class="number">17</span>:<span class="number">02</span> CST <span class="number">2019</span></span><br><span class="line">我是task2，我需要执行 2s 钟的时间，我的线程的 id == &gt; <span class="number">95</span>，时间 == &gt;Fri Feb <span class="number">01</span> <span class="number">15</span>:<span class="number">17</span>:<span class="number">02</span> CST <span class="number">2019</span></span><br><span class="line">task2 ending ,我的线程的 id == &gt; <span class="number">95</span> , 时间 == &gt; Fri Feb <span class="number">01</span> <span class="number">15</span>:<span class="number">17</span>:<span class="number">04</span> CST <span class="number">2019</span></span><br><span class="line">我是task1，我需要执行 10s 钟的时间，我的线程的 id == &gt; <span class="number">95</span>，时间 == &gt;Fri Feb <span class="number">01</span> <span class="number">15</span>:<span class="number">17</span>:<span class="number">04</span> CST <span class="number">2019</span></span><br><span class="line">task1 ending ,我的线程的 id == &gt; <span class="number">95</span> , 时间 == &gt; Fri Feb <span class="number">01</span> <span class="number">15</span>:<span class="number">17</span>:<span class="number">14</span> CST <span class="number">2019</span></span><br></pre></td></tr></table></figure>
<p>可以看出，从task1任务运行时，等到4s时，task2任务没有执行，而是等到task1任务执行结束后才执行</p>
<h3 id="解决方法">解决方法</h3>
<h4 id="使用-Async异步执行任务">使用@Async异步执行任务</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringbootTaskApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringbootTaskApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>使用默认线程池</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleTask2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;*/2 * * * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;我是task1，我需要执行 10s 钟的时间，我的线程的 id == &gt; &#123;&#125;，时间 == &gt;&#123;&#125;&quot;</span>, Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">        log.info(<span class="string">&quot;我是task1 ending ,我的线程的 id == &gt; &#123;&#125; , 时间 == &gt; &#123;&#125;&quot;</span>, Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;*/4 * * * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task2</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;我是task2，我需要执行 2s 钟的时间，我的线程的 id == &gt; &#123;&#125;，时间 == &gt;&#123;&#125;&quot;</span>, Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        log.info(<span class="string">&quot;我是task2 ending ,我的线程的 id == &gt; &#123;&#125; , 时间 == &gt; &#123;&#125;&quot;</span>,Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>自定义线程池</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleTask3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async(&quot;myPoolTaskExecutor&quot;)</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;*/2 * * * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;我是task1，我需要执行 10s 钟的时间，我的线程的 id == &gt; &#123;&#125;，时间 == &gt;&#123;&#125;&quot;</span>, Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">        log.info(<span class="string">&quot;我是task1 ending ,我的线程的 id == &gt; &#123;&#125; , 时间 == &gt; &#123;&#125;&quot;</span>, Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async(&quot;myPoolTaskExecutor&quot;)</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;*/4 * * * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task2</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;我是task2，我需要执行 2s 钟的时间，我的线程的 id == &gt; &#123;&#125;，时间 == &gt;&#123;&#125;&quot;</span>, Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        log.info(<span class="string">&quot;我是task2 ending ,我的线程的 id == &gt; &#123;&#125; , 时间 == &gt; &#123;&#125;&quot;</span>,Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 创建自定义线程池，提供异步调用时使用</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;myPoolTaskExecutor&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ThreadPoolTaskExecutor <span class="title function_">getMyPoolTaskExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">taskExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line">        <span class="comment">//核心线程数</span></span><br><span class="line">        taskExecutor.setCorePoolSize(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//线程池维护线程的最大数量,只有在缓冲队列满了之后才会申请超过核心线程数的线程</span></span><br><span class="line">        taskExecutor.setMaxPoolSize(<span class="number">100</span>);</span><br><span class="line">        <span class="comment">//缓存队列</span></span><br><span class="line">        taskExecutor.setQueueCapacity(<span class="number">50</span>);</span><br><span class="line">        <span class="comment">//许的空闲时间,当超过了核心线程出之外的线程在空闲时间到达之后会被销毁</span></span><br><span class="line">        taskExecutor.setKeepAliveSeconds(<span class="number">200</span>);</span><br><span class="line">        <span class="comment">//异步方法内部线程名称</span></span><br><span class="line">        taskExecutor.setThreadNamePrefix(<span class="string">&quot;poolTestThread-&quot;</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 当线程池的任务缓存队列已满并且线程池中的线程数目达到maximumPoolSize，如果还有任务到来就会采取任务拒绝策略</span></span><br><span class="line"><span class="comment">         * 通常有以下四种策略：</span></span><br><span class="line"><span class="comment">         * ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常。</span></span><br><span class="line"><span class="comment">         * ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常。</span></span><br><span class="line"><span class="comment">         * ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）</span></span><br><span class="line"><span class="comment">         * ThreadPoolExecutor.CallerRunsPolicy：重试添加当前的任务，自动重复调用 execute() 方法，直到成功</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 拒绝策略</span></span><br><span class="line">        taskExecutor.setRejectedExecutionHandler(<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());</span><br><span class="line">        taskExecutor.initialize();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;@Async 业务处理线程配置成功，核心线程池：[&#123;&#125;]，最大线程池：[&#123;&#125;]，队列容量：[&#123;&#125;]，线程名称前缀：[&#123;&#125;]&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> taskExecutor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>执行结果</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//运行结果：</span></span><br><span class="line">我是task2，我需要执行 2s 钟的时间，我的线程的 id == &gt; <span class="number">116</span>，时间 == &gt;Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">32</span> CST <span class="number">2019</span></span><br><span class="line">我是task1，我需要执行 10s 钟的时间，我的线程的 id == &gt; <span class="number">117</span>，时间 == &gt;Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">32</span> CST <span class="number">2019</span></span><br><span class="line">我是task1，我需要执行 10s 钟的时间，我的线程的 id == &gt; <span class="number">124</span>，时间 == &gt;Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">34</span> CST <span class="number">2019</span></span><br><span class="line">task2 ending ,我的线程的 id == &gt; <span class="number">116</span> , 时间 == &gt; Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">34</span> CST <span class="number">2019</span></span><br><span class="line">我是task1，我需要执行 10s 钟的时间，我的线程的 id == &gt; <span class="number">125</span>，时间 == &gt;Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">36</span> CST <span class="number">2019</span></span><br><span class="line">我是task2，我需要执行 2s 钟的时间，我的线程的 id == &gt; <span class="number">126</span>，时间 == &gt;Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">36</span> CST <span class="number">2019</span></span><br><span class="line">我是task1，我需要执行 10s 钟的时间，我的线程的 id == &gt; <span class="number">127</span>，时间 == &gt;Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">38</span> CST <span class="number">2019</span></span><br><span class="line">task2 ending ,我的线程的 id == &gt; <span class="number">126</span> , 时间 == &gt; Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">38</span> CST <span class="number">2019</span></span><br><span class="line">我是task2，我需要执行 2s 钟的时间，我的线程的 id == &gt; <span class="number">128</span>，时间 == &gt;Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">40</span> CST <span class="number">2019</span></span><br><span class="line">我是task1，我需要执行 10s 钟的时间，我的线程的 id == &gt; <span class="number">129</span>，时间 == &gt;Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">40</span> CST <span class="number">2019</span></span><br></pre></td></tr></table></figure>
<p>从日志可知：task1 和 task2 的确是并行执行的，因为开始的时间节点是一样的。</p>
<p>存在问题：当task1第一次任务执行时间过长时，此时task1又到了其第二次执行任务的调度时间，这时会并行执行两个任务</p>
<h4 id="实现SchedulingConfigurer接口">实现SchedulingConfigurer接口</h4>
<p>使用@Async会导致第一次任务执行时间过长，从而第二次任务和第一次任务并发执行</p>
<p>解决方法：实现SchedulingConfigurer接口，这样自动装配中TaskSchedulingAutoConfiguration的taskScheduler就不会被实例化，替换原来的线程池配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleConfig</span> <span class="keyword">implements</span> <span class="title class_">SchedulingConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureTasks</span><span class="params">(ScheduledTaskRegistrar taskRegistrar)</span> &#123;</span><br><span class="line">        taskRegistrar.setScheduler(taskExecutor());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@Bean</span></span><br><span class="line">     <span class="keyword">public</span> Executor <span class="title function_">taskExecutor</span><span class="params">()</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> Executors.newScheduledThreadPool(<span class="number">10</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleTask4</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;*/2 * * * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;我是task1，我需要执行 10s 钟的时间，我的线程的 id == &gt; &#123;&#125;，时间 == &gt;&#123;&#125;&quot;</span>, Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">        log.info(<span class="string">&quot;我是task1 ending ,我的线程的 id == &gt; &#123;&#125; , 时间 == &gt; &#123;&#125;&quot;</span>, Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;*/4 * * * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task2</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;我是task2，我需要执行 2s 钟的时间，我的线程的 id == &gt; &#123;&#125;，时间 == &gt;&#123;&#125;&quot;</span>, Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        log.info(<span class="string">&quot;我是task2 ending ,我的线程的 id == &gt; &#123;&#125; , 时间 == &gt; &#123;&#125;&quot;</span>,Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>执行结果</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//执行结果：</span></span><br><span class="line">我是task2，我需要执行 2s 钟的时间，我的线程的 id == &gt; <span class="number">95</span>，时间 == &gt;Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">28</span>:<span class="number">16</span> CST <span class="number">2019</span></span><br><span class="line">我是task1，我需要执行 10s 钟的时间，我的线程的 id == &gt; <span class="number">96</span>，时间 == &gt;Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">28</span>:<span class="number">16</span> CST <span class="number">2019</span></span><br><span class="line">task2 ending ,我的线程的 id == &gt; <span class="number">95</span> , 时间 == &gt; Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">28</span>:<span class="number">18</span> CST <span class="number">2019</span></span><br><span class="line">我是task2，我需要执行 2s 钟的时间，我的线程的 id == &gt; <span class="number">95</span>，时间 == &gt;Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">28</span>:<span class="number">20</span> CST <span class="number">2019</span></span><br><span class="line">task2 ending ,我的线程的 id == &gt; <span class="number">95</span> , 时间 == &gt; Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">28</span>:<span class="number">22</span> CST <span class="number">2019</span></span><br><span class="line">我是task2，我需要执行 2s 钟的时间，我的线程的 id == &gt; <span class="number">121</span>，时间 == &gt;Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">28</span>:<span class="number">24</span> CST <span class="number">2019</span></span><br><span class="line">task1 ending ,我的线程的 id == &gt; <span class="number">96</span> , 时间 == &gt; Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">28</span>:<span class="number">26</span> CST <span class="number">2019</span></span><br><span class="line">task2 ending ,我的线程的 id == &gt; <span class="number">121</span> , 时间 == &gt; Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">28</span>:<span class="number">26</span> CST <span class="number">2019</span></span><br><span class="line">我是task1，我需要执行 10s 钟的时间，我的线程的 id == &gt; <span class="number">95</span>，时间 == &gt;Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">28</span>:<span class="number">28</span> CST <span class="number">2019</span></span><br><span class="line">我是task2，我需要执行 2s 钟的时间，我的线程的 id == &gt; <span class="number">122</span>，时间 == &gt;Fri Feb <span class="number">01</span> <span class="number">16</span>:<span class="number">28</span>:<span class="number">28</span> CST <span class="number">2019</span></span><br></pre></td></tr></table></figure>
<p>注意：此时每次定时任务执行的traceId是一致的，无法很好地追踪每次定时任务的情况，修改如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleConfig</span> <span class="keyword">implements</span> <span class="title class_">SchedulingConfigurer</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureTasks</span><span class="params">(ScheduledTaskRegistrar taskRegistrar)</span> &#123;</span><br><span class="line">        <span class="comment">// taskRegistrar.setScheduler(taskExecutor());  </span></span><br><span class="line">        <span class="type">ThreadPoolTaskScheduler</span> <span class="variable">taskScheduler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskScheduler</span>();</span><br><span class="line">		taskScheduler.setPoolSize(<span class="number">10</span>);</span><br><span class="line">		taskScheduler.initialize();</span><br><span class="line">        taskRegistrar.setScheduler(taskScheduler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 缺点：可能每次定时任务产生的traceId是一致的</span></span><br><span class="line">    <span class="comment">// @Bean</span></span><br><span class="line">    <span class="comment">// public Executor taskExecutor()&#123;</span></span><br><span class="line">    <span class="comment">//     return Executors.newScheduledThreadPool(10);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Properties配置-2">Properties配置</h4>
<p>修改默认的线程池配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">######任务调度线程池######</span></span><br><span class="line"><span class="comment"># 任务调度线程池大小 默认 1 建议根据任务加大</span></span><br><span class="line"><span class="attr">spring.task.scheduling.pool.size</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># 调度线程名称前缀 默认 scheduling-</span></span><br><span class="line"><span class="attr">spring.task.scheduling.thread-name-prefix</span>=<span class="string">scheduling-</span></span><br><span class="line"><span class="comment"># 线程池关闭时等待所有任务完成</span></span><br><span class="line"><span class="attr">spring.task.scheduling.shutdown.await-termination</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 调度线程关闭前最大等待时间，确保最后一定关闭</span></span><br><span class="line"><span class="attr">spring.task.scheduling.shutdown.await-termination-period</span>=<span class="string">60</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">######任务执行线程池配置######</span></span><br><span class="line"><span class="comment"># 是否允许核心线程超时。这样可以动态增加和缩小线程池</span></span><br><span class="line"><span class="attr">spring.task.execution.pool.allow-core-thread-timeout</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 核心线程池大小 默认 8</span></span><br><span class="line"><span class="attr">spring.task.execution.pool.core-size</span>=<span class="string">8</span></span><br><span class="line"><span class="comment"># 线程空闲等待时间 默认 60s</span></span><br><span class="line"><span class="attr">spring.task.execution.pool.keep-alive</span>=<span class="string">60s</span></span><br><span class="line"><span class="comment"># 线程池最大数 根据任务定制</span></span><br><span class="line"><span class="attr">spring.task.execution.pool.max-size</span>=<span class="string">16</span></span><br><span class="line"><span class="comment"># 线程池队列容量大小</span></span><br><span class="line"><span class="attr">spring.task.execution.pool.queue-capacity</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># 线程池关闭时等待所有任务完成</span></span><br><span class="line"><span class="attr">spring.task.execution.shutdown.await-termination</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 执行线程关闭前最大等待时间，确保最后一定关闭</span></span><br><span class="line"><span class="attr">spring.task.execution.shutdown.await-termination-period</span>=<span class="string">60</span></span><br><span class="line"><span class="comment"># 线程名称前缀</span></span><br><span class="line"><span class="attr">spring.task.execution.thread-name-prefix</span>=<span class="string">task-</span></span><br></pre></td></tr></table></figure>
<h2 id="动态定时任务实现">动态定时任务实现</h2>
<p>用实现 SpringBoot + @Scheduled 实现了定时任务。但是也存在很多问题：</p>
<p>通常，@Scheduled 注解的所有属性只在 Spring Context 启动时解析和初始化一次。因此，当在 Spring 中使用 @Scheduled 注解时，无法在运行时更改 fixedDelay 或 fixedRate 值。</p>
<ol>
<li>在一个线程内执行，那么任务多了就可能被阻塞，导致任务延迟执行。</li>
<li>每次修改执行频率都要改代码，重启服务。</li>
<li>无法提供定时任务的启用、暂停、修改接口。</li>
</ol>
<p>实现方法：参考ScheduledTaskRegistrar源码</p>
<p><strong>简单案例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringUtil</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextAware</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">if</span>(SpringUtil.applicationContext == <span class="literal">null</span>) &#123;</span><br><span class="line">            SpringUtil.applicationContext = applicationContext;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;========ApplicationContext配置成功,在普通类可以通过调用SpringUtils.getAppContext()获取applicationContext对象,applicationContext=&#123;&#125;,&quot;</span>,SpringUtil.applicationContext+<span class="string">&quot;========&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取applicationContext</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext <span class="title function_">getApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过name获取 Bean.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getBean</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getApplicationContext().getBean(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过class获取Bean.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getBean</span><span class="params">(Class&lt;T&gt; clazz)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getApplicationContext().getBean(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过name,以及Clazz返回指定的Bean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getBean</span><span class="params">(String name,Class&lt;T&gt; clazz)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getApplicationContext().getBean(name, clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `sys_task` (</span><br><span class="line">  `id` bigint(21) NOT NULL AUTO_INCREMENT COMMENT &#x27;主键&#x27;,</span><br><span class="line">  `task_uuid` varchar(50) DEFAULT NULL COMMENT &#x27;任务UUID&#x27;,</span><br><span class="line">  `task_name` varchar(50) DEFAULT NULL COMMENT &#x27;任务名称&#x27;,</span><br><span class="line">  `task_cron` varchar(50) DEFAULT NULL COMMENT &#x27;任务定时表达式&#x27;,</span><br><span class="line">  `class_name` varchar(100) DEFAULT NULL COMMENT &#x27;任务类&#x27;,</span><br><span class="line">  `method_name` varchar(100) DEFAULT NULL COMMENT &#x27;任务方法&#x27;,</span><br><span class="line">  `task_type` int(1) DEFAULT NULL COMMENT &#x27;任务类型&#x27;,</span><br><span class="line">  `remark` varchar(250) DEFAULT NULL,</span><br><span class="line">  `del_flag` int(1) DEFAULT &#x27;1&#x27;,</span><br><span class="line">  `create_user` varchar(50) DEFAULT NULL,</span><br><span class="line">  `create_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP,</span><br><span class="line">  `update_user` varchar(50) DEFAULT NULL,</span><br><span class="line">  `update_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduledConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ScheduledTaskRegistrar <span class="title function_">taskRegistrar</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ScheduledTaskRegistrar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleTask5</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;我是task1，我的线程的 id == &gt; &#123;&#125;，时间 == &gt;&#123;&#125;&quot;</span>, Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">        log.info(<span class="string">&quot;我是task1 ending ,我的线程的 id == &gt; &#123;&#125; , 时间 == &gt; &#123;&#125;&quot;</span>, Thread.currentThread().getId(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysTask</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 主键</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 任务UUID</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String taskUuid;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 任务名称</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String taskName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 任务定时表达式</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String taskCron;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 任务类</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String className;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 任务方法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String methodName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 任务类型</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> Integer taskType;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 备注</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String remark;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer delFlag;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建人</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String createUser;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改人</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String updateUser;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CronServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">CronService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, ScheduledTask&gt; scheduledTaskMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ScheduledTaskRegistrar taskRegistrar;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(SysTask sysTask)</span> &#123;</span><br><span class="line">        <span class="type">CronTask</span> <span class="variable">cronTask</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CronTask</span>(getRunnable(sysTask), sysTask.getTaskCron());</span><br><span class="line">        <span class="type">ScheduledTask</span> <span class="variable">scheduledTask</span> <span class="operator">=</span> taskRegistrar.scheduleCronTask(cronTask);</span><br><span class="line">        <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">        scheduledTaskMap.put(uuid, scheduledTask);</span><br><span class="line">        log.info(<span class="string">&quot;添加任务成功, uuid == &gt; &#123;&#125;, 任务名称 == &gt; &#123;&#125;, 任务表达式 == &gt; &#123;&#125;&quot;</span>, uuid, sysTask.getTaskName(), sysTask.getTaskCron());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Runnable <span class="title function_">getRunnable</span><span class="params">(SysTask sysTask)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> () -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Class&lt;?&gt; aClass = Class.forName(sysTask.getClassName());</span><br><span class="line">                Constructor&lt;?&gt; constructor = aClass.getConstructor();</span><br><span class="line">                <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor.newInstance();</span><br><span class="line">                <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> aClass.getMethod(sysTask.getMethodName());</span><br><span class="line">                method.invoke(o);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String uuid)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ScheduledTask</span> <span class="variable">scheduledTask</span> <span class="operator">=</span> scheduledTaskMap.get(uuid);</span><br><span class="line">            scheduledTask.cancel();</span><br><span class="line">            scheduledTaskMap.remove(uuid);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(SysTask sysTask)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.delete(sysTask.getTaskUuid());</span><br><span class="line">        <span class="built_in">this</span>.add(sysTask);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/cron&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CronController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> CronService cronService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> SysTask sysTask)</span> &#123;</span><br><span class="line">        cronService.add(sysTask);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/delete&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">delete</span><span class="params">(String uuid)</span> &#123;</span><br><span class="line">        cronService.delete(uuid);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/update&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> SysTask sysTask)</span> &#123;</span><br><span class="line">        cronService.update(sysTask);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>定时任务</tag>
        <tag>SpringBoot Task</tag>
      </tags>
  </entry>
  <entry>
    <title>Easyexcel（1-注解使用）</title>
    <url>/blog/2024/10/26/excel/easyexcel/Easyexcel%EF%BC%881-%E6%B3%A8%E8%A7%A3%E4%BD%BF%E7%94%A8%EF%BC%89/</url>
    <content><![CDATA[<!-- EasyExcel 是阿里巴巴开源的一个轻量级 Excel 操作框架，专为 Java 开发者设计，支持读取和写入 Excel 文件。它使用注解来简化数据解析和导出工作，特别适用于复杂的 Excel 文件结构和大数据量处理。 -->
<span id="more"></span>
<h2 id="版本依赖">版本依赖</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easyexcel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="ExcelProperty">@ExcelProperty</h2>
<p>指定当前字段对应excel中的那一列，可以根据名字或者Index去匹配，当然也可以不写。</p>
<ol>
<li>value：指定写入的列头，如果不指定则使用成员变量的名字作为列头；如果要设置复杂的头，可以为value指定多个值</li>
<li>order：优先级高于value，会根据order的顺序来匹配实体和excel中数据的顺序</li>
<li>index：优先级高于value和order，指定写到第几列，如果不指定则根据成员变量位置排序；默认第一个字段就是index=0</li>
<li>converter：指定当前字段用什么转换器，默认会自动选择。可以用来设置类型转换器，需要实现Converter接口</li>
</ol>
<h3 id="value">value</h3>
<h4 id="指定属性名">指定属性名</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;test1&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">            response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">            user.setUserId(<span class="number">123</span>);</span><br><span class="line">            user.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">            user.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">            user.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">            user.setCreateTime(<span class="number">13213L</span>);</span><br><span class="line">            EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                    .sheet(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">                    .doWrite(Arrays.asList(user));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="1.png" alt=""></p>
<p>默认情况下，使用类的属性名作为Excel的列表，当然也可以使用@ExcelProperty 注解来重新指定属性名称。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="2.png" alt=""></p>
<h4 id="表头合并">表头合并</h4>
<p>value在写的时候，如果指定了多个值，会自动进行合并</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &#123;&quot;用户基本信息&quot;, &quot;姓名&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &#123;&quot;用户基本信息&quot;, &quot;手机&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &#123;&quot;用户基本信息&quot;, &quot;邮箱&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="3.png" alt=""></p>
<h3 id="index">index</h3>
<h4 id="指定位置">指定位置</h4>
<p>@ExcelProperty注解有两个属性index和order，如果不指定则按照属性在类中的排列顺序来。index是指定该属性在Excel中列的下标，下标从0开始</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;, index = 2)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;, index = 1)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="5.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;, index = 2)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;, index = 1)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;, index = 10)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;, index = 12)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="6.png" alt=""></p>
<h3 id="order">order</h3>
<h4 id="指定顺序">指定顺序</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;, order = 11)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;, order = 10)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="7.png" alt=""></p>
<p>order的默认值为Integer.MAX_VALUE，通过效果我们可以得出结论：order值越小，越排在前面</p>
<p>注意：</p>
<ol>
<li>优先级：index &gt; order &gt; 默认配置</li>
<li>index相当于绝对位置，下标从0开始</li>
<li>order相当于相对位置，值越小的排在越前面</li>
</ol>
<h3 id="convert">convert</h3>
<h4 id="自定义转换器">自定义转换器</h4>
<p>在读写EXCEL时，有时候需要我们进行数据类型转换，例如我们这里的创建时间，在实体对象中是Long类型，但是这样直接导出到Excel中不太直观。我们需要转换成yyyy-MM-dd HH:mm:ss 格式，此时我们就可以用到转换器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateTimeConverter</span> <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;Long&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">DateTimeFormatter</span> <span class="variable">dateTimeFormatter</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 支持导入的Java类型</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; supportJavaTypeKey() &#123;</span><br><span class="line">        <span class="keyword">return</span> Long.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 支持导出的Excel类型</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> CellDataTypeEnum <span class="title function_">supportExcelTypeKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> CellDataTypeEnum.STRING;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转换为Java</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">convertToJavaData</span><span class="params">(ReadCellData&lt;?&gt; cellData, ExcelContentProperty contentProperty, GlobalConfiguration globalConfiguration)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转换为Excel</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> WriteCellData&lt;?&gt; convertToExcelData(Long value, ExcelContentProperty contentProperty, GlobalConfiguration globalConfiguration) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WriteCellData</span>(CellDataTypeEnum.STRING, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> LocalDateTime.ofInstant(Instant.ofEpochMilli(value), ZoneId.systemDefault());</span><br><span class="line">        <span class="type">String</span> <span class="variable">dateStr</span> <span class="operator">=</span> localDateTime.format(dateTimeFormatter);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WriteCellData</span>(dateStr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;, order = 11)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;, order = 10)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;, converter = DateTimeConverter.class)</span></span><br><span class="line">    <span class="keyword">private</span> Long createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="8.png" alt=""></p>
<h4 id="枚举转换">枚举转换</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Excel 性别转换器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenderConverter</span> <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;Integer&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; supportJavaTypeKey() &#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> CellDataTypeEnum <span class="title function_">supportExcelTypeKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> CellDataTypeEnum.STRING;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">convertToJavaData</span><span class="params">(ReadConverterContext&lt;?&gt; context)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> GenderEnum.convert(context.getReadCellData().getStringValue()).getValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> WriteCellData&lt;?&gt; convertToExcelData(WriteConverterContext&lt;Integer&gt; context) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WriteCellData</span>&lt;&gt;(GenderEnum.convert(context.getValue()).getDescription());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 性别枚举</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">GenderEnum</span> &#123;</span><br><span class="line"></span><br><span class="line">    UNKNOWN(<span class="number">0</span>, <span class="string">&quot;未知&quot;</span>),</span><br><span class="line"></span><br><span class="line">    MALE(<span class="number">1</span>, <span class="string">&quot;男性&quot;</span>),</span><br><span class="line"></span><br><span class="line">    FEMALE(<span class="number">2</span>, <span class="string">&quot;女性&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Integer value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> GenderEnum <span class="title function_">convert</span><span class="params">(Integer value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Stream.of(values())</span><br><span class="line">                .filter(bean -&gt; bean.value.equals(value))</span><br><span class="line">                .findAny()</span><br><span class="line">                .orElse(UNKNOWN);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> GenderEnum <span class="title function_">convert</span><span class="params">(String description)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Stream.of(values())</span><br><span class="line">                .filter(bean -&gt; bean.description.equals(description))</span><br><span class="line">                .findAny()</span><br><span class="line">                .orElse(UNKNOWN);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ExcelIgnore">@ExcelIgnore</h2>
<p>默认所有字段都会和excel去匹配，加了这个注解会忽略该字段</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;)</span></span><br><span class="line">    <span class="meta">@ExcelIgnore</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;, converter = DateTimeConverter.class)</span></span><br><span class="line">    <span class="meta">@ExcelIgnore</span></span><br><span class="line">    <span class="keyword">private</span> Long createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="9.png" alt=""></p>
<h2 id="ExcelIgnoreUnannotated">@ExcelIgnoreUnannotated</h2>
<p>不标注该注解时，默认类中所有成员变量都会参与读写，无论是否在成员变量上加了@ExcelProperty 的注解。标注该注解后，类中的成员变量如果没有标注 @ExcelProperty 注解将不会参与读写。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExcelIgnoreUnannotated</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="10.png" alt=""></p>
<h2 id="ColumnWidth">@ColumnWidth</h2>
<p>用于设置表格列的宽度</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ColumnWidth(200)</span></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;, converter = DateTimeConverter.class)</span></span><br><span class="line">    <span class="keyword">private</span> Long createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="11.png" alt=""></p>
<h2 id="ContentRowHeight">@ContentRowHeight</h2>
<p>标注在类上，指定内容行高</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ContentRowHeight(value = 50)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;, converter = DateTimeConverter.class)</span></span><br><span class="line">    <span class="keyword">private</span> Long createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="12.png" alt=""></p>
<h2 id="HeadRowHeight">@HeadRowHeight</h2>
<p>标注在类上，指定列头行高</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@HeadRowHeight(80)</span></span><br><span class="line"><span class="meta">@ContentRowHeight(value = 50)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;, converter = DateTimeConverter.class)</span></span><br><span class="line">    <span class="keyword">private</span> Long createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="13.png" alt=""></p>
<h2 id="ContentStyle">@ContentStyle</h2>
<p>用于设置内容格式注解</p>
<ol>
<li>dataFormat：日期格式</li>
<li>hidden：设置单元格使用此样式隐藏</li>
<li>locked：设置单元格使用此样式锁定</li>
<li>quotePrefix：在单元格前面增加`符号，数字或公式将以字符串形式展示</li>
<li>horizontalAlignment：设置是否水平居中</li>
<li>wrapped：设置文本是否应换行。将此标志设置为true通过在多行上显示使单元格中的所有内容可见</li>
<li>verticalAlignment：设置是否垂直居中</li>
<li>rotation：设置单元格中文本旋转角度。03版本的Excel旋转角度区间为-90°90°，07版本的Excel旋转角度区间为0°180°</li>
<li>indent：设置单元格中缩进文本的空格数</li>
<li>borderLeft：设置左边框的样式</li>
<li>borderRight：设置右边框样式</li>
<li>borderTop：设置上边框样式</li>
<li>borderBottom：设置下边框样式</li>
<li>leftBorderColor：设置左边框颜色</li>
<li>rightBorderColor：设置右边框颜色</li>
<li>topBorderColor：设置上边框颜色</li>
<li>bottomBorderColor：设置下边框颜色</li>
<li>fillPatternType：设置填充类型</li>
<li>fillBackgroundColor：设置背景色</li>
<li>fillForegroundColor：设置前景色</li>
<li>shrinkToFit：设置自动单元格自动大小</li>
</ol>
<h2 id="ContentFontStyle">@ContentFontStyle</h2>
<p>用于设置单元格内容字体格式的注解</p>
<ol>
<li>fontName：字体名称</li>
<li>fontHeightInPoints：字体高度</li>
<li>italic：是否斜体</li>
<li>strikeout：是否设置删除水平线</li>
<li>color：字体颜色</li>
<li>typeOffset：偏移量</li>
<li>underline：下划线</li>
<li>bold：是否加粗</li>
<li>charset：编码格式</li>
</ol>
<h2 id="HeadStyle">@HeadStyle</h2>
<p>用于设置标题样式</p>
<ol>
<li>dataFormat：日期格式</li>
<li>hidden：设置单元格使用此样式隐藏</li>
<li>locked：设置单元格使用此样式锁定</li>
<li>quotePrefix：在单元格前面增加`符号，数字或公式将以字符串形式展示</li>
<li>horizontalAlignment：设置是否水平居中</li>
<li>wrapped：设置文本是否应换行。将此标志设置为true通过在多行上显示使单元格中的所有内容可见</li>
<li>verticalAlignment：设置是否垂直居中</li>
<li>rotation：设置单元格中文本旋转角度。03版本的Excel旋转角度区间为-90°90°，07版本的Excel旋转角度区间为0°180°</li>
<li>indent：设置单元格中缩进文本的空格数</li>
<li>borderLeft：设置左边框的样式</li>
<li>borderRight：设置右边框样式</li>
<li>borderTop：设置上边框样式</li>
<li>borderBottom：设置下边框样式</li>
<li>leftBorderColor：设置左边框颜色</li>
<li>rightBorderColor：设置右边框颜色</li>
<li>topBorderColor：设置上边框颜色</li>
<li>bottomBorderColor：设置下边框颜色</li>
<li>fillPatternType：设置填充类型</li>
<li>fillBackgroundColor：设置背景色</li>
<li>fillForegroundColor：设置前景色</li>
<li>shrinkToFit：设置自动单元格自动大小</li>
</ol>
<h2 id="HeadFontStyle">@HeadFontStyle</h2>
<p>用于定制标题字体格式</p>
<ol>
<li>fontName：设置字体名称</li>
<li>fontHeightInPoints：设置字体高度</li>
<li>italic：设置字体是否斜体</li>
<li>strikeout：是否设置删除线</li>
<li>color：设置字体颜色</li>
<li>typeOffset：设置偏移量</li>
<li>underline：设置下划线</li>
<li>charset：设置字体编码</li>
<li>bold：设置字体是否加粗</li>
</ol>
<h2 id="ContentLoopMerge">@ContentLoopMerge</h2>
<p>用于设置合并单元格的注解，作用于字段上</p>
<ol>
<li>eachRow：合并列</li>
<li>columnExtend：合并行</li>
</ol>
<h2 id="OnceAbsoluteMerge">@OnceAbsoluteMerge</h2>
<p>用于指定位置的单元格合并，作用于类上</p>
<ol>
<li>firstRowIndex：第一行下标</li>
<li>lastRowIndex：最后一行下标</li>
<li>firstColumnIndex：第一列下标</li>
<li>lastColumnIndex：最后一列下标</li>
</ol>
<h2 id="DateTimeFormat">@DateTimeFormat</h2>
<p>日期转换，读取Excel文件时用String去接收excel日期格式的数据会调用这个注解。里面的value参照java.text.SimpleDateFormat</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DateTimeFormat(&quot;yyyy-MM-dd&quot;)</span></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="NumberFormat">@NumberFormat</h2>
<p>数字转换，用String去接收excel数字格式的数据会调用这个注解。里面的value参照java.text.DecimalFormat</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>EasyExcel</tag>
      </tags>
  </entry>
  <entry>
    <title>Easyexcel（2-文件读取）</title>
    <url>/blog/2024/10/27/excel/easyexcel/Easyexcel%EF%BC%882-%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%EF%BC%89/</url>
    <content><![CDATA[<h2 id="同步读取">同步读取</h2>
<h3 id="读取单个Sheet">读取单个Sheet</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserExcel</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelIgnore</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(index = 0, value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(index = 1, value = &quot;年龄&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DateTimeFormat(value = &quot;yyyy-MM-dd&quot;)</span></span><br><span class="line">    <span class="meta">@ExcelProperty(index = 2, value = &quot;出生日期&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test02Controller</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传单个文件, 同步读取excel文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/uploadFile&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">uploadFile</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> file.getInputStream()) &#123;</span><br><span class="line">            List&lt;UserExcel&gt; userExcelList = EasyExcel.read(in)</span><br><span class="line">                    <span class="comment">// 读取第一个sheet</span></span><br><span class="line">                    .sheet(<span class="number">0</span>)</span><br><span class="line">                    <span class="comment">// 如果第一行才是标题，第二行是数据，从第二行开始读取</span></span><br><span class="line">                    .headRowNumber(<span class="number">1</span>)</span><br><span class="line">                    .head(UserExcel.class)</span><br><span class="line">                    .doReadSync();</span><br><span class="line">            <span class="keyword">for</span> (UserExcel userExcel : userExcelList) &#123;</span><br><span class="line">                System.out.println(userExcel);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="读取多个Sheet（同一个对象）">读取多个Sheet（同一个对象）</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/uploadFile2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">uploadFile2</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> file.getInputStream()) &#123;</span><br><span class="line">        List&lt;UserExcel&gt; userExcelList = EasyExcel.read(in)</span><br><span class="line">                <span class="comment">// 如果第一行才是标题，第二行是数据，从第二行开始读取</span></span><br><span class="line">                .headRowNumber(<span class="number">1</span>)</span><br><span class="line">                .head(UserExcel.class)</span><br><span class="line">                .doReadAllSync();</span><br><span class="line">        <span class="keyword">for</span> (UserExcel userExcel : userExcelList) &#123;</span><br><span class="line">            System.out.println(userExcel);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="读取多个Sheet（不同对象）">读取多个Sheet（不同对象）</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/uploadFile4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">uploadFile4</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        in = file.getInputStream();</span><br><span class="line">        List&lt;UserExcel&gt; userExcelList1 = EasyExcel.read(in)</span><br><span class="line">                <span class="comment">// 读取第一个sheet</span></span><br><span class="line">                .sheet(<span class="number">0</span>)</span><br><span class="line">                <span class="comment">// 如果第一行才是标题，第二行是数据，从第二行开始读取</span></span><br><span class="line">                .headRowNumber(<span class="number">1</span>)</span><br><span class="line">                .head(UserExcel.class)</span><br><span class="line">                .doReadSync();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取剩余的sheet</span></span><br><span class="line">        in = file.getInputStream();</span><br><span class="line">        List&lt;UserExcel&gt; userExcelList2 = EasyExcel.read(in)</span><br><span class="line">                .sheet(<span class="number">1</span>)</span><br><span class="line">                <span class="comment">// 如果第一行才是标题，第二行是数据，从第二行开始读取</span></span><br><span class="line">                .headRowNumber(<span class="number">1</span>)</span><br><span class="line">                .head(UserExcel.class)</span><br><span class="line">                .doReadSync();</span><br><span class="line"></span><br><span class="line">        List&lt;UserExcel&gt; userExcelList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        userExcelList.addAll(userExcelList1);</span><br><span class="line">        userExcelList.addAll(userExcelList2);</span><br><span class="line">        <span class="keyword">for</span> (UserExcel userExcel : userExcelList) &#123;</span><br><span class="line">            System.out.println(userExcel);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (in != <span class="literal">null</span>) &#123;</span><br><span class="line">                in.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：多sheet会重复读取流对象，而一个流对象只能读取一次，重复使用会导致异常</p>
<h2 id="异步读取">异步读取</h2>
<h3 id="监听器">监听器</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ReadListener</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">Listener</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在转换异常 获取其他异常下会调用本接口。抛出异常则停止读取。如果这里不抛出异常则继续读取下一行</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">onException</span><span class="params">(Exception exception, AnalysisContext context)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">throw</span> exception;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 获取表头数据</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">invokeHead</span><span class="params">(Map&lt;Integer, ReadCellData&lt;?&gt;&gt; headMap, AnalysisContext context)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 一行行读取表格内容</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(T data, AnalysisContext context)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 读取条额外信息:批注、超链接、合并单元格信息等</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">extra</span><span class="params">(CellExtra extra, AnalysisContext context)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">   	<span class="comment">// 读取完成后的操作</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">doAfterAllAnalysed</span><span class="params">(AnalysisContext context)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 是否还有数据</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">(AnalysisContext context)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AnalysisEventListener</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">ReadListener</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析表头数据</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invokeHead</span><span class="params">(Map&lt;Integer, ReadCellData&lt;?&gt;&gt; headMap, AnalysisContext context)</span> &#123;</span><br><span class="line">        invokeHeadMap(ConverterUtils.convertToStringMap(headMap, context), context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invokeHeadMap</span><span class="params">(Map&lt;Integer, String&gt; headMap, AnalysisContext context)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="异常处理">异常处理</h3>
<h4 id="ExcelDateConvertException">ExcelDateConvertException</h4>
<p>数据转换异常错误</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExcelDataConvertException</span> <span class="keyword">extends</span> <span class="title class_">ExcelRuntimeException</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer rowIndex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer columnIndex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CellData&lt;?&gt; cellData;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ExcelContentProperty excelContentProperty;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ExcelDataConvertException</span><span class="params">(Integer rowIndex, Integer columnIndex, CellData&lt;?&gt; cellData,</span></span><br><span class="line"><span class="params">        ExcelContentProperty excelContentProperty, String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">        <span class="built_in">this</span>.rowIndex = rowIndex;</span><br><span class="line">        <span class="built_in">this</span>.columnIndex = columnIndex;</span><br><span class="line">        <span class="built_in">this</span>.cellData = cellData;</span><br><span class="line">        <span class="built_in">this</span>.excelContentProperty = excelContentProperty;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ExcelDataConvertException</span><span class="params">(Integer rowIndex, Integer columnIndex, CellData&lt;?&gt; cellData,</span></span><br><span class="line"><span class="params">        ExcelContentProperty excelContentProperty, String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">        <span class="built_in">this</span>.rowIndex = rowIndex;</span><br><span class="line">        <span class="built_in">this</span>.columnIndex = columnIndex;</span><br><span class="line">        <span class="built_in">this</span>.cellData = cellData;</span><br><span class="line">        <span class="built_in">this</span>.excelContentProperty = excelContentProperty;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="ExcelAnalysisStopException">ExcelAnalysisStopException</h4>
<p>在onexcetpion中抛出该异常后停止解析</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExcelAnalysisStopException</span> <span class="keyword">extends</span> <span class="title class_">ExcelAnalysisException</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ExcelAnalysisStopException</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ExcelAnalysisStopException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ExcelAnalysisStopException</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ExcelAnalysisStopException</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="读取单个Sheet-2">读取单个Sheet</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserExcelListener</span> <span class="keyword">extends</span> <span class="title class_">AnalysisEventListener</span>&lt;UserExcel&gt; &#123;</span><br><span class="line">    <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;UserExcel&gt; userExcelList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(UserExcel userExcel, AnalysisContext analysisContext)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;解析到一条数据:&#123;&#125;&quot;</span>, JSON.toJSONString(userExcel));</span><br><span class="line">        userExcelList.add(userExcel);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfterAllAnalysed</span><span class="params">(AnalysisContext analysisContext)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;已解析完所有数据!&quot;</span>);</span><br><span class="line">        userExcelList.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onException</span><span class="params">(Exception exception, AnalysisContext context)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ExcelDataConvertException) &#123;</span><br><span class="line">            <span class="type">ExcelDataConvertException</span> <span class="variable">convertException</span> <span class="operator">=</span> (ExcelDataConvertException) exception;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">row</span> <span class="operator">=</span> convertException.getRowIndex();</span><br><span class="line">            log.error(<span class="string">&quot;第&#123;&#125;行数据转换失败，异常信息：&#123;&#125;&quot;</span>, row, exception.getMessage());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.error(<span class="string">&quot;导入其他异常信息：&#123;&#125;&quot;</span>, exception.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;UserExcel&gt; <span class="title function_">getUserExcelList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userExcelList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserExcelList</span><span class="params">(List&lt;UserExcel&gt; userExcelList)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userExcelList = userExcelList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/uploadFile5&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">uploadFile5</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> file.getInputStream()) &#123;</span><br><span class="line">        <span class="type">UserExcelListener</span> <span class="variable">listener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserExcelListener</span>();</span><br><span class="line">        EasyExcel.read(in, UserExcel.class, listener)</span><br><span class="line">                .sheet(<span class="number">0</span>)</span><br><span class="line">                .headRowNumber(<span class="number">1</span>) <span class="comment">// 第一行是标题, 从第二行开始读取</span></span><br><span class="line">                .doRead();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="读取多个Sheet">读取多个Sheet</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserExcelListener2</span> <span class="keyword">extends</span> <span class="title class_">AnalysisEventListener</span>&lt;UserExcel&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer sheetNo;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> List&lt;UserExcel&gt; userExcelList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserExcelListener2</span><span class="params">(Integer sheetNo)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sheetNo = sheetNo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(UserExcel userExcel, AnalysisContext analysisContext)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;解析到一条数据:&#123;&#125;&quot;</span>, JSON.toJSONString(userExcel));</span><br><span class="line">        userExcelList.add(userExcel);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfterAllAnalysed</span><span class="params">(AnalysisContext analysisContext)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;已解析完所有数据!&quot;</span>);</span><br><span class="line">        userExcelList.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onException</span><span class="params">(Exception exception, AnalysisContext context)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ExcelDataConvertException) &#123;</span><br><span class="line">            <span class="type">ExcelDataConvertException</span> <span class="variable">convertException</span> <span class="operator">=</span> (ExcelDataConvertException) exception;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">row</span> <span class="operator">=</span> convertException.getRowIndex();</span><br><span class="line">            log.error(<span class="string">&quot;sheetNo：&#123;&#125;，第&#123;&#125;行数据转换失败，异常信息：&#123;&#125;&quot;</span>, sheetNo, row, exception.getMessage());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.error(<span class="string">&quot;导入其他异常信息：&#123;&#125;&quot;</span>, exception.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;UserExcel&gt; <span class="title function_">getUserExcelList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userExcelList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserExcelList</span><span class="params">(List&lt;UserExcel&gt; userExcelList)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userExcelList = userExcelList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/uploadFile6&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">uploadFile6</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> file.getInputStream();</span><br><span class="line">         <span class="type">ExcelReader</span> <span class="variable">build</span> <span class="operator">=</span> EasyExcel.read(in).build();) &#123;</span><br><span class="line">        List&lt;ReadSheet&gt; readSheets = build.excelExecutor().sheetList();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, len = readSheets.size(); i &lt; len; i++) &#123;</span><br><span class="line">            <span class="type">UserExcelListener2</span> <span class="variable">listener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserExcelListener2</span>(i);</span><br><span class="line">            <span class="type">ReadSheet</span> <span class="variable">sheet</span> <span class="operator">=</span> EasyExcel.readSheet(readSheets.get(i).getSheetNo())</span><br><span class="line">                    .head(UserExcel.class)</span><br><span class="line">                    .headRowNumber(<span class="number">1</span>)</span><br><span class="line">                    .registerReadListener(listener)</span><br><span class="line">                    .build();</span><br><span class="line">            build.read(sheet);</span><br><span class="line">        &#125;</span><br><span class="line">        build.finish();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="分批读取（线程池操作）">分批读取（线程池操作）</h3>
<p>通常我们使用这种分批处理的方式，避免内存的消耗。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UserListener 不能被spring管理，要每次读取excel都要new，</span></span><br><span class="line"><span class="comment"> * 然后里面用到spring可以构造方法传进去</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserExcelListener3</span> <span class="keyword">extends</span> <span class="title class_">AnalysisEventListener</span>&lt;UserExcel&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">BATCH_SIZE</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer sheetNo;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Executor executor;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;UserExcel&gt; userExcelList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserExcelListener3</span><span class="params">(Integer sheetNo, Executor executor)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sheetNo = sheetNo;</span><br><span class="line">        <span class="built_in">this</span>.executor = executor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(UserExcel userExcel, AnalysisContext analysisContext)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;解析到一条数据:&#123;&#125;&quot;</span>, JSON.toJSONString(userExcel));</span><br><span class="line">        userExcelList.add(userExcel);</span><br><span class="line">        <span class="keyword">if</span> (userExcelList.size() &gt;= BATCH_SIZE) &#123;</span><br><span class="line">            List&lt;UserExcel&gt; userExcels = BeanUtil.copyToList(userExcelList, UserExcel.class);</span><br><span class="line">            CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">                <span class="comment">// 业务操作</span></span><br><span class="line">                <span class="comment">// saveToDB(userExcels);</span></span><br><span class="line">            &#125;, executor);</span><br><span class="line">            userExcelList.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfterAllAnalysed</span><span class="params">(AnalysisContext analysisContext)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;已解析完所有数据!&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!userExcelList.isEmpty()) &#123;</span><br><span class="line">            List&lt;UserExcel&gt; userExcels = BeanUtil.copyToList(userExcelList, UserExcel.class);</span><br><span class="line">            CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">                <span class="comment">// 业务操作</span></span><br><span class="line">                <span class="comment">// saveToDB(userExcels);</span></span><br><span class="line">            &#125;, executor);</span><br><span class="line">            userExcelList.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onException</span><span class="params">(Exception exception, AnalysisContext context)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ExcelDataConvertException) &#123;</span><br><span class="line">            <span class="type">ExcelDataConvertException</span> <span class="variable">convertException</span> <span class="operator">=</span> (ExcelDataConvertException) exception;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">row</span> <span class="operator">=</span> convertException.getRowIndex();</span><br><span class="line">            log.error(<span class="string">&quot;sheetNo：&#123;&#125;，第&#123;&#125;行数据转换失败，异常信息：&#123;&#125;&quot;</span>, sheetNo, row, exception.getMessage());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.error(<span class="string">&quot;导入其他异常信息：&#123;&#125;&quot;</span>, exception.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/uploadFile7&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">uploadFile77</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> file.getInputStream();</span><br><span class="line">         <span class="type">ExcelReader</span> <span class="variable">build</span> <span class="operator">=</span> EasyExcel.read(in).build();) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ThreadPoolExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">10</span>, <span class="number">20</span>, <span class="number">60L</span>,</span><br><span class="line">                TimeUnit.MILLISECONDS, <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">1000</span>), <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy());</span><br><span class="line">        List&lt;ReadSheet&gt; readSheets = build.excelExecutor().sheetList();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, len = readSheets.size(); i &lt; len; i++) &#123;</span><br><span class="line">            <span class="type">UserExcelListener3</span> <span class="variable">listener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserExcelListener3</span>(i, executor);</span><br><span class="line">            <span class="type">ReadSheet</span> <span class="variable">sheet</span> <span class="operator">=</span> EasyExcel.readSheet(readSheets.get(i).getSheetNo())</span><br><span class="line">                    .head(UserExcel.class)</span><br><span class="line">                    .headRowNumber(<span class="number">1</span>)</span><br><span class="line">                    .registerReadListener(listener)</span><br><span class="line">                    .build();</span><br><span class="line">            build.read(sheet);</span><br><span class="line">        &#125;</span><br><span class="line">        build.finish();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="事务操作">事务操作</h3>
<p>当使用监听器读取文件数据，使用分批插入数据的方法时，因为监听器不归Spring管理，所以无法使用Spring的事务注解进行事务的相关操作，怎么保证事务？</p>
<p>可以通过构造器的方式传入事务管理器，手动提交和回滚事务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDataListener</span> <span class="keyword">extends</span> <span class="title class_">AnalysisEventListener</span>&lt;Test&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//每隔5条存储数据库，实际使用中可以设置为2500条，然后清理list ，方便内存回收</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BATCH_COUNT</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Test&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//事务管理</span></span><br><span class="line">    <span class="keyword">private</span> DataSourceTransactionManager dataSourceTransactionManager;</span><br><span class="line">    <span class="comment">//事务定义</span></span><br><span class="line">    <span class="keyword">private</span> DefaultTransactionDefinition transactionDefinition;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">TransactionStatus</span> <span class="variable">transactionStatus</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TestService testService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestDataListener</span><span class="params">(TestService testService,</span></span><br><span class="line"><span class="params">                            DataSourceTransactionManager dataSourceTransactionManager,</span></span><br><span class="line"><span class="params">                            TransactionDefinition transactionDefinition)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.testService = testService;</span><br><span class="line">        <span class="built_in">this</span>.dataSourceTransactionManager = dataSourceTransactionManager;</span><br><span class="line">        <span class="built_in">this</span>.transactionDefinition = <span class="keyword">new</span> <span class="title class_">DefaultTransactionDefinition</span>(transactionDefinition);</span><br><span class="line">        <span class="comment">//设置事务的隔离级别 ：未提交读写</span></span><br><span class="line">        <span class="built_in">this</span>.transactionDefinition.setIsolationLevel(TransactionDefinition.ISOLATION_READ_UNCOMMITTED);</span><br><span class="line">        <span class="comment">// 手动开启事务</span></span><br><span class="line">        <span class="built_in">this</span>.transactionStatus = dataSourceTransactionManager.getTransaction(transactionDefinition);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Test data, AnalysisContext context)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;解析到一条数据:&#123;&#125;&quot;</span>, JSON.toJSONString(data));</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">hasCompleted</span> <span class="operator">=</span> transactionStatus.isCompleted();</span><br><span class="line">        <span class="comment">// 如果事务已经关闭，不执行业务代码</span></span><br><span class="line">        <span class="keyword">if</span> (hasCompleted)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        list.add(data);</span><br><span class="line">        <span class="keyword">if</span> (list.size() &gt;= BATCH_COUNT) &#123;</span><br><span class="line">            saveData();</span><br><span class="line">            list.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这个方法会在easyexcel读取完文件中所有数据后执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfterAllAnalysed</span><span class="params">(AnalysisContext context)</span> &#123;</span><br><span class="line">        <span class="comment">//判断事务是否已被处理，未处理则进行提交事务</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">hasCompleted</span> <span class="operator">=</span> transactionStatus.isCompleted();</span><br><span class="line">        <span class="keyword">if</span> (hasCompleted)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        saveData();</span><br><span class="line">        log.info(<span class="string">&quot;所有数据解析完成！&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!hasCompleted)&#123;</span><br><span class="line">            <span class="comment">//提交事务</span></span><br><span class="line">            dataSourceTransactionManager.commit(transactionStatus);</span><br><span class="line">            log.info(<span class="string">&quot;SensitiveWordListener doAfterAllAnalysed：当前事务已提交&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onException</span><span class="params">(Exception exception, AnalysisContext context)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        log.info(<span class="string">&quot;导入过程中出现异常会进入该方法，重写了父类方法&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;结束前事务状态：&quot;</span>+  transactionStatus.isCompleted());</span><br><span class="line">        dataSourceTransactionManager.rollback(transactionStatus);</span><br><span class="line">        log.info(<span class="string">&quot;结束后事务状态：&quot;</span>+  transactionStatus.isCompleted());</span><br><span class="line">        <span class="keyword">throw</span> exception;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加上存储数据库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">saveData</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125;条数据，开始存储数据库！&quot;</span>, list.size());</span><br><span class="line">        <span class="keyword">if</span> (!CollectionUtils.isEmpty(list)) &#123;</span><br><span class="line">            testService.saveBatch(list);</span><br><span class="line">            System.out.println(list);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//TODO 这里是测试事务，如有需要可以打开注释</span></span><br><span class="line">        <span class="comment">//int a = 1/0;</span></span><br><span class="line">        log.info(<span class="string">&quot;存储数据库成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>EasyExcel</tag>
      </tags>
  </entry>
  <entry>
    <title>Stream流</title>
    <url>/blog/2024/10/20/Stream%E6%B5%81/</url>
    <content><![CDATA[<span id="more"></span>
<h2 id="生成流">生成流</h2>
<h3 id="通过集合生成">通过集合生成</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// list 列表转换为 Stream</span></span><br><span class="line">List&lt;String&gt; strList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">strList.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">strList.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line"><span class="type">Stream</span> <span class="variable">stream3</span> <span class="operator">=</span> list.stream();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set 集合转换为 Stream</span></span><br><span class="line">Set&lt;String&gt; strSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">strSet.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">strSet.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line"><span class="type">Stream</span> <span class="variable">stream4</span> <span class="operator">=</span> strSet.stream();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Map 集合转换为 Stream</span></span><br><span class="line">Map&lt;String,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;a&quot;</span>, <span class="number">100</span>);</span><br><span class="line">map.put(<span class="string">&quot;b&quot;</span>, <span class="number">200</span>);</span><br><span class="line"><span class="type">Stream</span> <span class="variable">stream5</span> <span class="operator">=</span> map.entrySet().stream();</span><br></pre></td></tr></table></figure>
<h3 id="通过数组生成">通过数组生成</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] intArr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="type">IntStream</span> <span class="variable">stream</span> <span class="operator">=</span> Arrays.stream(intArr);</span><br></pre></td></tr></table></figure>
<p>该方法生成的流是数值流（IntStream）而不是Stream，使用数值流可以避免计算过程中拆箱装箱，提高性能</p>
<h3 id="通过值生成">通过值生成</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure>
<p>通过Stream的of方法生成流，通过Stream的empty方法可以生成一个空流</p>
<h3 id="通过文件生成">通过文件生成</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; lines = Files.lines(Paths.get(<span class="string">&quot;data.txt&quot;</span>), Charset.defaultCharset());</span><br></pre></td></tr></table></figure>
<p>通过Files.line方法得到一个流，并且得到的每个流是给定文件中的一行</p>
<h3 id="通过函数生成">通过函数生成</h3>
<ol>
<li>iterate</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream = Stream.iterate(<span class="number">0</span>, n -&gt; n + <span class="number">2</span>).limit(<span class="number">5</span>);</span><br></pre></td></tr></table></figure>
<p>iterate方法接受两个参数，第一个为初始值，第二个为进行的函数操作，因为iterate生成的流为无限流，通过limit方法对流进行了截断，只生成5个偶数</p>
<ol start="2">
<li>generate</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Double&gt; stream = Stream.generate(Math::random).limit(<span class="number">5</span>);</span><br></pre></td></tr></table></figure>
<p>generate方法接受一个参数，方法参数类型为Supplier，由他为流提供值，generate生成的流也是无限流，因此通过limit对流进行了截断</p>
<h2 id="中间操作">中间操作</h2>
<h3 id="filter条件筛选">filter条件筛选</h3>
<p>返回结果生成新的流中只包含满足筛选条件的数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">Stream&lt;Integer&gt; stream = integerList.stream().filter(i -&gt; i &gt; <span class="number">3</span>);</span><br></pre></td></tr></table></figure>
<h3 id="distinct去除重复元素">distinct去除重复元素</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">Stream&lt;Integer&gt; stream = integerList.stream().distinct();</span><br></pre></td></tr></table></figure>
<h3 id="limit返回指定流个数">limit返回指定流个数</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>); </span><br><span class="line">Stream&lt;Integer&gt; stream = integerList.stream().limit(<span class="number">3</span>);</span><br></pre></td></tr></table></figure>
<p>通过limit方法指定返回流的个数，limit的参数值必须&gt;=0，否则将会抛出异常</p>
<h3 id="skip跳过流中的元素">skip跳过流中的元素</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">Stream&lt;Integer&gt; stream = integerList.stream().skip(<span class="number">2</span>);</span><br></pre></td></tr></table></figure>
<p>通过skip方法跳过流中的元素，skip的参数值必须&gt;=0，否则将会抛出异常</p>
<h3 id="map流映射">map流映射</h3>
<p>流映射就是将接受的元素映射成另外一个元素，通过map方法可以完成映射</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; stringList = Arrays.asList(<span class="string">&quot;Java 8&quot;</span>, <span class="string">&quot;Lambdas&quot;</span>,  <span class="string">&quot;In&quot;</span>, <span class="string">&quot;Action&quot;</span>);</span><br><span class="line">Stream&lt;Integer&gt; stream = stringList.stream().map(String::length);</span><br></pre></td></tr></table></figure>
<ol>
<li>当出现相同的key时，解决方法：取前面value的值，或者取后面放入的value值，则覆盖先前的value值</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Long, String&gt; map = userList.stream()</span><br><span class="line">        .collect(Collectors.toMap(User::getId, User::getUsername, (v1, v2) -&gt; v1));</span><br><span class="line">Map&lt;Long, String&gt; map = userList.stream()</span><br><span class="line">        .collect(Collectors.toMap(User::getId, User::getUsername, (v1, v2) -&gt; v2));</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>对相同key值的数据进行合并</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 处理itemList 合并相同物料累加数量</span></span><br><span class="line">Map&lt;Long, Integer&gt; map = itemList.stream().collect(Collectors.toMap(StocksComponentsItem::getStocksId, StocksComponentsItem::getCount, (e1, e2) -&gt; e1 + e2));       </span><br></pre></td></tr></table></figure>
<ol start="3">
<li>获取treeMap，根据key值进行排序</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Long, String&gt; treeMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">TreeMap&lt;Long, String&gt; map = treeMap.entrySet().stream()</span><br><span class="line">.collect(Collectors.toMap(entry -&gt; entry.getKey(), entry -&gt; entry.getValue(), </span><br><span class="line">                          (v1, v2) -&gt; v1, TreeMap::<span class="keyword">new</span>));</span><br></pre></td></tr></table></figure>
<p><strong>常用方法</strong></p>
<ul>
<li>mapToDouble</li>
<li>mapToInt</li>
<li>mapToLong</li>
</ul>
<h3 id="flatMap流转换">flatMap流转换</h3>
<p>扁平化映射，将多个stream连接成一个stream，这个操作是针对类似多维数组的，比如集合里面包含集合，相当于降维作用</p>
<p>例如：如果想要从List<StdCls>中取出学生列表，需要取出每个班级的学生List，再for循环调用List.addAll()方法把所有班级的学生List到一个新的总和List中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StdCls</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String clsNo;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; studentList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用map映射后会变成List&lt;List<Student>&gt;，若使用flatMap会进行扁平化处理，从而将List嵌套List用stream合并成一个List</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; nameList = stdClsList.stream()</span><br><span class="line">                        .map(StdCls::getStudentList)</span><br><span class="line">                        .flatMap(Collection::stream) <span class="comment">// 多个集合List合并</span></span><br><span class="line">                        .map(Student::getName).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>
<h3 id="sorted排序">sorted排序</h3>
<p>将流中的元素按照自然排序方式进行排序。</p>
<ol>
<li>sorted()：自然排序，流中元素需实现Comparable接口</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;ff&quot;</span>, <span class="string">&quot;dd&quot;</span>);</span><br><span class="line"><span class="comment">//String 类自身已实现Compareable接口</span></span><br><span class="line">list.stream().sorted().forEach(System.out::println);<span class="comment">// aa dd ff</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>sorted(Comparator com)：定制排序，自定义Comparator排序器</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;aa&quot;</span>, <span class="number">10</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;bb&quot;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;aa&quot;</span>, <span class="number">30</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;dd&quot;</span>, <span class="number">40</span>);</span><br><span class="line">List&lt;Student&gt; studentList = Arrays.asList(s1, s2, s3, s4);</span><br><span class="line">  </span><br><span class="line"><span class="comment">//自定义排序：先按姓名升序，姓名相同则按年龄升序</span></span><br><span class="line">studentList.stream().sorted(</span><br><span class="line">    (o1, o2) -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (o1.getName().equals(o2.getName())) &#123;</span><br><span class="line">        	<span class="keyword">return</span> o1.getAge() - o2.getAge();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        	<span class="keyword">return</span> o1.getName().compareTo(o2.getName());</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">).forEach(System.out::println);　</span><br></pre></td></tr></table></figure>
<h3 id="peek消费">peek消费</h3>
<p>对流中每个元素执行操作，并返回一个新的流，返回的流还是包含原来流中的元素。</p>
<p>如同于map，能得到流中的每一个元素，但map接收的是一个Function表达式，有返回值；而peek接收的是Consumer表达式，没有返回值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;aa&quot;</span>, <span class="number">10</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;bb&quot;</span>, <span class="number">20</span>);</span><br><span class="line">List&lt;Student&gt; studentList = Arrays.asList(s1, s2);</span><br><span class="line">  </span><br><span class="line">studentList.stream().peek(o -&gt; o.setAge(<span class="number">100</span>)).forEach(System.out::println);</span><br><span class="line">  </span><br><span class="line"><span class="comment">//结果：</span></span><br><span class="line">Student&#123;name=<span class="string">&#x27;aa&#x27;</span>, age=<span class="number">100</span>&#125;</span><br><span class="line">Student&#123;name=<span class="string">&#x27;bb&#x27;</span>, age=<span class="number">100</span>&#125;</span><br></pre></td></tr></table></figure>
<h3 id="concat流合并">concat流合并</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//创建一个集合，存储多个字符串元素 </span></span><br><span class="line">    ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    list.add(<span class="string">&quot;心如音&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;流老蛋&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;王值&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;李尔&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;张新敏&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;张天坤&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需求1：取前4个数据组成一个流 </span></span><br><span class="line">    Stream&lt;String&gt; s1 = list.stream().limit(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需求2：跳过2个数据组成一个流 </span></span><br><span class="line">    Stream&lt;String&gt; s2 = list.stream().skip(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需求3：合并需求1和需求2得到的流，并把结果在控制台输出 </span></span><br><span class="line">    Stream.concat(s1,s2).forEach(System.out::println); </span><br><span class="line"></span><br><span class="line">    <span class="comment">//需求4：合并需求1和需求2得到的流，并把结果在控制台输出，要求字符串元素不能重复 </span></span><br><span class="line">    Stream.concat(s1,s2).distinct().forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="终端操作">终端操作</h2>
<h3 id="match元素匹配">match元素匹配</h3>
<ol>
<li>allMatch匹配所有</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">if</span> (integerList.stream().allMatch(i -&gt; i &gt; <span class="number">3</span>)) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;值都大于3&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>anyMatch匹配其中一个</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">if</span> (integerList.stream().anyMatch(i -&gt; i &gt; <span class="number">3</span>)) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;存在大于3的值&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>noneMatch全部不匹配</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">if</span> (integerList.stream().noneMatch(i -&gt; i &gt; <span class="number">3</span>)) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;值都小于3&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="count统计流中元素个数">count统计流中元素个数</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="type">Long</span> <span class="variable">result</span> <span class="operator">=</span> integerList.stream().count();</span><br></pre></td></tr></table></figure>
<h3 id="find查找">find查找</h3>
<ol>
<li>findFirst：查找第一个</li>
<li>findAny：随机查找一个</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">Optional&lt;Integer&gt; result = integerList.stream().filter(i -&gt; i &gt; <span class="number">3</span>).findFirst();</span><br><span class="line">Optional&lt;Integer&gt; result = integerList.stream().filter(i -&gt; i &gt; <span class="number">3</span>).findAny();</span><br></pre></td></tr></table></figure>
<h3 id="min、max获取流中最小最大值">min、max获取流中最小最大值</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;Integer&gt; min = menu.stream().map(Dish::getCalories).min(Integer::compareTo);</span><br><span class="line">Optional&lt;Integer&gt; max = menu.stream().map(Dish::getCalories).max(Integer::compareTo);</span><br><span class="line"></span><br><span class="line"><span class="type">OptionalInt</span> <span class="variable">min</span> <span class="operator">=</span> menu.stream().mapToInt(Dish::getCalories).min();</span><br><span class="line"><span class="type">OptionalInt</span> <span class="variable">max</span> <span class="operator">=</span> menu.stream().mapToInt(Dish::getCalories).max();</span><br></pre></td></tr></table></figure>
<h3 id="reduce元素组合">reduce元素组合</h3>
<p>把 Stream 元素组合起来。它提供一个起始值（种子），然后依照运算规则（BinaryOperator），和前面 Stream 的第一个、第二个、第 n 个元素组合。从这个意义上说，字符串拼接、数值的 sum、min、max、average 都是特殊的 reduce</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// reduce()：字符串拼接</span></span><br><span class="line"><span class="type">String</span> <span class="variable">reduceStr1</span> <span class="operator">=</span> Stream.of(<span class="string">&quot;ma&quot;</span>, <span class="string">&quot;zhi&quot;</span>, <span class="string">&quot;chu&quot;</span>).reduce(<span class="string">&quot;&quot;</span>, String::concat);</span><br><span class="line"><span class="type">String</span> <span class="variable">reduceStr2</span> <span class="operator">=</span> Stream.of(<span class="string">&quot;ma&quot;</span>, <span class="string">&quot;zhi&quot;</span>, <span class="string">&quot;chu&quot;</span>).reduce(<span class="string">&quot;&quot;</span>, (x,y)-&gt;x+y);</span><br><span class="line">System.out.println(reduceStr1);</span><br><span class="line">System.out.println(reduceStr2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// reduce()：求和，identity(起始值)为0</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">total1</span> <span class="operator">=</span> Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>).reduce(<span class="number">0</span>, Integer::sum);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">total2</span> <span class="operator">=</span> Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>).reduce(<span class="number">0</span>, (x, y) -&gt; x +y);</span><br><span class="line">System.out.println(total1);</span><br><span class="line">System.out.println(total2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求和，sumValue = 10, 无起始值</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">total3</span> <span class="operator">=</span> Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>).reduce(Integer::sum).get();</span><br><span class="line">System.out.println(total3);</span><br><span class="line"></span><br><span class="line"><span class="comment">// reduce()：求最小值</span></span><br><span class="line"><span class="type">double</span> <span class="variable">minValue</span> <span class="operator">=</span> Stream.of(-<span class="number">1.1</span>, <span class="number">8.8</span>, -<span class="number">2.2</span>, -<span class="number">6.6</span>).reduce(Double.MAX_VALUE, Double::min);</span><br><span class="line">System.out.println(minValue);</span><br><span class="line"></span><br><span class="line">Optional&lt;Integer&gt; min = menu.stream().map(Dish::getCalories).reduce(Integer::min);</span><br><span class="line">Optional&lt;Integer&gt; max = menu.stream().map(Dish::getCalories).reduce(Integer::max);</span><br></pre></td></tr></table></figure>
<h3 id="求值">求值</h3>
<ol>
<li>summingInt：求和</li>
<li>sum：求和</li>
<li>averagingInt：求平均值</li>
<li>summarizingInt：同时求总和、平均值、最大值、最小值</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> menu.stream().collect(Collectors.summingInt(Dish::getCalories));</span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> menu.stream().map(Dish::getCalories).reduce(<span class="number">0</span>, Integer::sum);</span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> menu.stream().mapToInt(Dish::getCalories).sum();</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="variable">average</span> <span class="operator">=</span> menu.stream().collect(Collectors.averagingInt(Dish::getCalories));</span><br><span class="line"></span><br><span class="line"><span class="type">IntSummaryStatistics</span> <span class="variable">intSummaryStatistics</span> <span class="operator">=</span> menu.stream().collect(Collectors.summarizingInt(Dish::getCalories));</span><br><span class="line"><span class="type">double</span> <span class="variable">average</span> <span class="operator">=</span> intSummaryStatistics.getAverage();  <span class="comment">//获取平均值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> intSummaryStatistics.getMin();  <span class="comment">//获取最小值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> intSummaryStatistics.getMax();  <span class="comment">//获取最大值</span></span><br><span class="line"><span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> intSummaryStatistics.getSum();  <span class="comment">//获取总和</span></span><br></pre></td></tr></table></figure>
<h3 id="foreach元素遍历">foreach元素遍历</h3>
<p>遍历流中的每一个元素，按照指定的方法执行，执行顺序不一定按照流的顺序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">integerList.stream().forEach(System.out::println);</span><br><span class="line"><span class="comment">// foreach:遍历流中每一个元素,执行顺序不一定按照流的顺序，.parallel()表示创建一个并行流</span></span><br><span class="line">Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>).parallel().forEach(System.out::println);</span><br></pre></td></tr></table></figure>
<h3 id="toArray返回数组">toArray返回数组</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// toArray()：将流中的元素放入到一个数组中</span></span><br><span class="line">String[] strings = Stream.of(<span class="string">&quot;ma&quot;</span>, <span class="string">&quot;zhi&quot;</span>, <span class="string">&quot;chu&quot;</span>).toArray(String[]::<span class="keyword">new</span>);</span><br><span class="line">System.out.println(Arrays.toString(strings));</span><br></pre></td></tr></table></figure>
<h3 id="collect返回集合">collect返回集合</h3>
<h4 id="minBy-maxBy获取最小、最大值">minBy/maxBy获取最小、最大值</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;Integer&gt; min = menu.stream().map(Dish::getCalories).collect(Collectors.minBy(Integer::compareTo));</span><br><span class="line">Optional&lt;Integer&gt; max = menu.stream().map(Dish::getCalories).collect(Collectors.maxBy(Integer::compareTo));</span><br></pre></td></tr></table></figure>
<h4 id="toMap获取属性映射">toMap获取属性映射</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; strings = menu.stream().map(Dish::getName).collect(Collectors.toList());</span><br><span class="line">Set&lt;String&gt; sets = menu.stream().map(Dish::getName).collect(Collectors.toSet());</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取属性和对象本身</span></span><br><span class="line">Map&lt;Integer, House&gt; houseMap = houses.stream().collect(Collectors.toMap(House::getOwnerid, o -&gt; o));</span><br><span class="line">Map&lt;Integer, House&gt; houseMap1 = houses.stream().collect(Collectors.toMap(House::getOwnerid,  Function.identity()));</span><br><span class="line"><span class="comment">//出现重复id时，取前面value的值，获取取后面放入的value值，则覆盖先前的value值</span></span><br><span class="line">houses.stream().collect(Collectors.toMap(House::getOwnerid, House::getHousename,(v1,v2)-&gt;v2));</span><br><span class="line">houses.stream().collect(Collectors.toMap(House::getOwnerid, House::getHousename,(v1,v2)-&gt;v1));</span><br></pre></td></tr></table></figure>
<h4 id="counting统计元素个数">counting统计元素个数</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="type">Long</span> <span class="variable">result</span> <span class="operator">=</span> integerList.stream().count();</span><br><span class="line"><span class="type">Long</span> <span class="variable">result</span> <span class="operator">=</span> integerList.stream().collect(Collectors.counting());</span><br></pre></td></tr></table></figure>
<h4 id="joining拼接流中的元素">joining拼接流中的元素</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> menu.stream().map(Dish::getName).collect(Collectors.joining(<span class="string">&quot;, &quot;</span>));</span><br></pre></td></tr></table></figure>
<p>默认如果不通过map方法进行映射处理拼接的toString方法返回的字符串，joining的方法参数为元素的分界符，如果不指定生成的字符串将是一串的</p>
<h4 id="groupingBy元素分组">groupingBy元素分组</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Type, List&lt;Dish&gt;&gt; result = dishList.stream().collect(Collectors.groupingBy(Dish::getType));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分组再分组</span></span><br><span class="line">Map&lt;String, Map&lt;Integer, List&lt;Dish&gt;&gt;&gt; result = menu.stream().collect(Collectors.groupingBy(Dish::getName,</span><br><span class="line">                Collectors.groupingBy(Dish::getCalories)));</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 源数据</span></span><br><span class="line">ArrayList&lt;GateScanCodeRecord&gt; objects = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">objects.add(<span class="keyword">new</span> <span class="title class_">GateScanCodeRecord</span>().setMonth(<span class="string">&quot;2020-07&quot;</span>).setDay(<span class="string">&quot;2020-07-12&quot;</span>));</span><br><span class="line">objects.add(<span class="keyword">new</span> <span class="title class_">GateScanCodeRecord</span>().setMonth(<span class="string">&quot;2020-06&quot;</span>).setDay(<span class="string">&quot;2020-06-14&quot;</span>));</span><br><span class="line">objects.add(<span class="keyword">new</span> <span class="title class_">GateScanCodeRecord</span>().setMonth(<span class="string">&quot;2020-06&quot;</span>).setDay(<span class="string">&quot;2020-06-12&quot;</span>));</span><br><span class="line">objects.add(<span class="keyword">new</span> <span class="title class_">GateScanCodeRecord</span>().setMonth(<span class="string">&quot;2020-05&quot;</span>).setDay(<span class="string">&quot;2020-05-17&quot;</span>));</span><br><span class="line">objects.add(<span class="keyword">new</span> <span class="title class_">GateScanCodeRecord</span>().setMonth(<span class="string">&quot;2020-05&quot;</span>).setDay(<span class="string">&quot;2020-05-12&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分组有序</span></span><br><span class="line">TreeMap&lt;String, List&lt;GateScanCodeRecord&gt;&gt; collect2 = objects.parallelStream().collect(Collectors.groupingBy(GateScanCodeRecord::getMonth, TreeMap::<span class="keyword">new</span>, Collectors.toList()));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义分组有序</span></span><br><span class="line">TreeMap&lt;String, List&lt;GateScanCodeRecord&gt;&gt; collect3 =</span><br><span class="line">            objects.parallelStream().collect(Collectors.groupingBy(GateScanCodeRecord::getMonth,</span><br><span class="line">            () -&gt; <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;((o1, o2) -&gt; Math.toIntExact(Long.parseLong(o2.replaceAll(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>)) - Long.parseLong(o1.replaceAll(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>)))),</span><br><span class="line">            Collectors.toList()));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两层排序(按月分组排序,月下的数据按天分组并排序)</span></span><br><span class="line">TreeMap&lt;String, TreeMap&lt;String, List&lt;GateScanCodeRecord&gt;&gt;&gt; collect = objects.stream()</span><br><span class="line">            .collect(Collectors.groupingBy(GateScanCodeRecord::getMonth,</span><br><span class="line">             () -&gt; <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;((o1, o2) -&gt; Math.toIntExact(Long.parseLong(o2.replaceAll(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>)) - Long.parseLong(o1.replaceAll(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>)))),</span><br><span class="line">             Collectors.groupingBy(GateScanCodeRecord::getDay,</span><br><span class="line">             () -&gt; <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;((o1, o2) -&gt; Math.toIntExact(Long.parseLong(o2.replaceAll(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>)) - Long.parseLong(o1.replaceAll(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>)))),</span><br><span class="line">             Collectors.toList()))</span><br><span class="line">            );</span><br></pre></td></tr></table></figure>
<h4 id="partitioningBy元素分区">partitioningBy元素分区</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Boolean, List&lt;Dish&gt;&gt; result = menu.stream().collect(Collectors.partitioningBy(Dish::isVegetarian));</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line">Map&lt;Boolean, List&lt;Dish&gt;&gt; result = menu.stream().collect(Collectors.groupingBy(Dish::isVegetarian));</span><br><span class="line"></span><br><span class="line">List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">Map&lt;Boolean, List&lt;Integer&gt;&gt; result = integerList.stream().collect(Collectors.partitioningBy(i -&gt; i &lt; <span class="number">3</span>));</span><br></pre></td></tr></table></figure>
<h4 id="mapping获取属性映射集合">mapping获取属性映射集合</h4>
<p>对分组之后的对象集合转换为对象的某个属性的集合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    List&lt;Person&gt; personList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 四个参与测试的小伙伴</span></span><br><span class="line">    <span class="type">Person</span> <span class="variable">tom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;tom&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">11</span>);</span><br><span class="line">    <span class="type">Person</span> <span class="variable">amy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;amy&quot;</span>, <span class="string">&quot;女&quot;</span>, <span class="number">13</span>);</span><br><span class="line">    <span class="type">Person</span> <span class="variable">ali</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;ali&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">12</span>);</span><br><span class="line">    <span class="type">Person</span> <span class="variable">daming</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;daming&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">13</span>);</span><br><span class="line">    personList.add(tom);</span><br><span class="line">    personList.add(amy);</span><br><span class="line">    personList.add(ali);</span><br><span class="line">    personList.add(daming);</span><br><span class="line">    <span class="comment">// 对小伙伴按照性别age进行分组</span></span><br><span class="line">    Map&lt;String, Set&lt;String&gt;&gt; resultMap = personList.stream().collect(Collectors.groupingBy(Person::getSex, Collectors.mapping(Person::getName, Collectors.toSet())));</span><br><span class="line">    System.out.println(resultMap.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Optional">Optional</h2>
<ol>
<li>Optional.of(T value)：通过一个非null的value来构造一个Optional，返回的Optional包含了value这个值，对于该方法，传入的参数一定不能为null，否则会抛出NullPointerException</li>
<li>Optional.ofNullable(T value)：与of的区别在于，传入的参数可以为null，进行三目运算，判断传入的参数是否为null，如果为null的话，返回的就是Optional.empty()</li>
<li>Optional.empty()：用来构造一个空的Optional，即该Optional中不包含值</li>
</ol>
<h3 id="ifPresent">ifPresent</h3>
<p>如果Optional中有值，则对该值调用consumer.accept，否则什么也不做</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;User&gt; user = Optional.ofNullable(getUserById(id));</span><br><span class="line">user.ifPresent(u -&gt; System.out.println(<span class="string">&quot;Username is: &quot;</span> + u.getUsername()));</span><br></pre></td></tr></table></figure>
<h3 id="orElse">orElse</h3>
<p>如果Optional中有值则将其返回，否则返回orElse方法传入的参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> T <span class="title function_">orElse</span><span class="params">(T other)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value != <span class="literal">null</span> ? value : other;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> Optional</span><br><span class="line">        .ofNullable(getUserById(id))</span><br><span class="line">        .orElse(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">0</span>, <span class="string">&quot;Unknown&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;Username is: &quot;</span> + user.getUsername());</span><br></pre></td></tr></table></figure>
<h3 id="orElseGet">orElseGet</h3>
<p>与orElse方法的区别在于：orElseGet方法传入的参数为一个Supplier接口的实现，当Optional中有值的时候，返回值；当Optional中没有值的时候，返回从该Supplier获得的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> T <span class="title function_">orElseGet</span><span class="params">(Supplier&lt;? extends T&gt; ither)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value != <span class="literal">null</span> ? value : other.get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> Optional.ofNullable(getUserById(id))</span><br><span class="line">                    .orElseGet(() -&gt; <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">0</span>, <span class="string">&quot;Unknown&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;Username is: &quot;</span> + user.getUsername());</span><br></pre></td></tr></table></figure>
<h3 id="orElseThrow">orElseThrow</h3>
<p>与orElse方法的区别在于：orElseThrow方法当Optional中有值的时候，返回值；没有值的时候会抛出异常，抛出的异常由传入的exceptionSupplier提供</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;X <span class="keyword">extends</span> <span class="title class_">Throwable</span>&gt; T <span class="title function_">orElseThrow</span><span class="params">(Supplier&lt;? extends X&gt; exceptionSupplier)</span> <span class="keyword">throws</span> X &#123;</span><br><span class="line">    <span class="keyword">if</span> (value != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> exceptionSupplier.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> Optional.ofNullable(getUserById(id))</span><br><span class="line">        .orElseThrow(() -&gt; <span class="keyword">new</span> <span class="title class_">EntityNotFoundException</span>(<span class="string">&quot;id 为 &quot;</span> + id + <span class="string">&quot; 的用户没有找到&quot;</span>));</span><br></pre></td></tr></table></figure>
<h3 id="map">map</h3>
<p>如果当前Optional为Optional.empty，则依旧返回Optional.empty；否则返回一个新的Optional，该Optional包含的是：函数mapper在以value作为输入时的输出值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;U&gt; Optional&lt;U&gt; <span class="title function_">map</span><span class="params">(Function&lt;? <span class="built_in">super</span> T, ? extends U&gt; mapper)</span> &#123;</span><br><span class="line">    Objects.requireNonNull(mapper);</span><br><span class="line">    <span class="keyword">if</span> (!isPresent())&#123;</span><br><span class="line">        <span class="keyword">return</span> empty();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(mapper.apply(value));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;String&gt; username = Optional</span><br><span class="line">        .ofNullable(getUserById(id))</span><br><span class="line">        .map(user -&gt; user.getUsername())</span><br><span class="line">        .map(name -&gt; name.toLowerCase())</span><br><span class="line">        .map(name -&gt; name.replace(<span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27; &#x27;</span>));</span><br><span class="line">        </span><br><span class="line">System.out.println(<span class="string">&quot;Username is: &quot;</span> + username.orElse(<span class="string">&quot;Unknown&quot;</span>));</span><br></pre></td></tr></table></figure>
<h3 id="flatMap">flatMap</h3>
<p>与map方法的区别在于，map方法参数中的函数mapper输出的是值，然后map方法会使用Optional.ofNullable将其包装为Optional，而flatMap要求参数中的函数mapper输出的就是Optional</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;U&gt; Optional&lt;U&gt; <span class="title function_">flatMap</span><span class="params">(Function&lt;? <span class="built_in">super</span> T, Optional&lt;U&gt;&gt; mapper)</span> &#123;</span><br><span class="line">    Objects.requireNonNull(mapper);</span><br><span class="line">    <span class="keyword">if</span> (!isPresent())&#123;</span><br><span class="line">        <span class="keyword">return</span> empty();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.requireNonNull(mapper.apply(value));</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;String&gt; username = Optional</span><br><span class="line">        .ofNullable(getUserById(id))</span><br><span class="line">        .flatMap(user -&gt; Optional.of(user.getUsername()))</span><br><span class="line">        .flatMap(name -&gt; Optional.of(name.toLowerCase()));</span><br><span class="line">        </span><br><span class="line">System.out.println(<span class="string">&quot;Username is: &quot;</span> + username.orElse(<span class="string">&quot;Unknown&quot;</span>));</span><br></pre></td></tr></table></figure>
<h3 id="filter">filter</h3>
<p>filter方法接受一个Predicate来对Optional中包含的值进行过滤，如果包含的值满足条件，那么还是返回这个Optional，否则返回Optional.empty</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Optional&lt;T&gt; <span class="title function_">filter</span><span class="params">(Predicate&lt;? <span class="built_in">super</span> T&gt; predicate)</span> &#123;</span><br><span class="line">    Objects.requireNonNull(predicate);</span><br><span class="line">    <span class="keyword">if</span>(!isPresent()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> predicate.test(value) ? <span class="built_in">this</span> : empty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;String&gt; username = Optional</span><br><span class="line">        .ofNullable(getUserById(id))</span><br><span class="line">        .filter(user -&gt; user.getId() &lt; <span class="number">10</span>)</span><br><span class="line">        .map(user -&gt; user.getUsername());</span><br><span class="line">        </span><br><span class="line">System.out.println(<span class="string">&quot;Username is: &quot;</span> + username.orElse(<span class="string">&quot;Unknown&quot;</span>));</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Stream流</tag>
      </tags>
  </entry>
  <entry>
    <title>Easyexcel（3-文件导出）</title>
    <url>/blog/2024/10/27/excel/easyexcel/Easyexcel%EF%BC%883-%E6%96%87%E4%BB%B6%E5%AF%BC%E5%87%BA%EF%BC%89/</url>
    <content><![CDATA[<h2 id="请求头设置">请求头设置</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//编码格式为UTF-8</span></span><br><span class="line">response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//让服务器告诉浏览器它发送的数据属于excel文件类型</span></span><br><span class="line">response.setContentType(<span class="string">&quot;application/vnd.ms-excel;charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//描述内容在传输过程中的编码格式，BINARY可能不止包含非ASCII字符，还可能不是一个短行（超过1000字符）。</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Content-Transfer-Encoding&quot;</span>, <span class="string">&quot;binary&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//must-revalidate：强制页面不缓存，post-check=0, pre-check=0：0秒后，在显示给用户之前，该对象被选中进行更新过</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Cache-Control&quot;</span>, <span class="string">&quot;must-revalidate, post-check=0, pre-check=0&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//表示响应可能是任何缓存的，即使它只是通常是非缓存或可缓存的仅在非共享缓存中</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Pragma&quot;</span>, <span class="string">&quot;public&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//告诉浏览器这个文件的名字和类型，attachment：作为附件下载；inline：直接打开</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="写入单个Sheet">写入单个Sheet</h2>
<h3 id="一次性写入数据">一次性写入数据</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download1</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUserId(<span class="number">123</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                .doWrite(Arrays.asList(user));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="分批写入数据">分批写入数据</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download2</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="type">ExcelWriter</span> <span class="variable">excelWriter</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUserId(<span class="number">123</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        excelWriter = EasyExcel.write(response.getOutputStream(), User.class).build();</span><br><span class="line">        <span class="type">WriteSheet</span> <span class="variable">writeSheet</span> <span class="operator">=</span> EasyExcel.writerSheet(<span class="string">&quot;测试&quot;</span>).build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 业务逻辑处理，分页查询</span></span><br><span class="line">        excelWriter.write(Arrays.asList(user), writeSheet);</span><br><span class="line">        excelWriter.write(Arrays.asList(user), writeSheet);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (excelWriter != <span class="literal">null</span>) &#123;</span><br><span class="line">            excelWriter.finish();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面方式我们可以手工控制流的关闭，这样我们就可以实现多次写。</p>
<p>基于上面的方式，我们来实现分页获取数据，然后将数据写入Excel中，避免加载的数据过多，导致内存溢出</p>
<p>在使用excelWriter.write方式时务必保证至少执行一次write，这样是为了将sheet和表头写入excel，否则打开excel时会报错。write的第一个参数可以为null</p>
<h3 id="导出表头自定义">导出表头自定义</h3>
<p>注意：内容结构必须是List&lt;List<T>&gt;，如果使用List<T>会出现问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download3</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="type">ExcelWriter</span> <span class="variable">excelWriter</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUserId(<span class="number">123</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        List&lt;List&lt;String&gt;&gt; heads = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        heads.add(Arrays.asList(<span class="string">&quot;姓名&quot;</span>));</span><br><span class="line">        heads.add(Arrays.asList(<span class="string">&quot;年龄&quot;</span>));</span><br><span class="line">        heads.add(Arrays.asList(<span class="string">&quot;地址&quot;</span>));</span><br><span class="line">        excelWriter = EasyExcel.write(response.getOutputStream()).head(heads).build();</span><br><span class="line">        <span class="type">WriteSheet</span> <span class="variable">writeSheet</span> <span class="operator">=</span> EasyExcel.writerSheet(<span class="string">&quot;测试&quot;</span>).build();</span><br><span class="line">        excelWriter.write(Arrays.asList(user), writeSheet);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (excelWriter != <span class="literal">null</span>) &#123;</span><br><span class="line">            excelWriter.finish();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="1.png" alt=""></p>
<h3 id="导出内容自定义">导出内容自定义</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download5&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download5</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="type">ExcelWriter</span> <span class="variable">excelWriter</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;List&lt;String&gt;&gt; heads = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        heads.add(Arrays.asList(<span class="string">&quot;姓名&quot;</span>));</span><br><span class="line">        heads.add(Arrays.asList(<span class="string">&quot;年龄&quot;</span>));</span><br><span class="line">        heads.add(Arrays.asList(<span class="string">&quot;地址&quot;</span>));</span><br><span class="line">        excelWriter = EasyExcel.write(response.getOutputStream()).head(heads).build();</span><br><span class="line">        <span class="type">WriteSheet</span> <span class="variable">writeSheet</span> <span class="operator">=</span> EasyExcel.writerSheet(<span class="string">&quot;测试&quot;</span>).build();</span><br><span class="line"></span><br><span class="line">        List&lt;List&lt;String&gt;&gt; dataList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        dataList.add(Arrays.asList(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;18&quot;</span>, <span class="string">&quot;上海&quot;</span>));</span><br><span class="line">        dataList.add(Arrays.asList(<span class="string">&quot;李四&quot;</span>, <span class="string">&quot;28&quot;</span>));</span><br><span class="line">        excelWriter.write(dataList, writeSheet);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (excelWriter != <span class="literal">null</span>) &#123;</span><br><span class="line">            excelWriter.finish();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="2.png" alt=""></p>
<h3 id="写入多个表头">写入多个表头</h3>
<p>若业务需求要求在同一个sheet中写多个表，就需要用到WriteTable了。只定义一个WriteSheet，有几个表就定义几个WriteTable</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download4</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="type">ExcelWriter</span> <span class="variable">excelWriter</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUserId(<span class="number">123</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        excelWriter = EasyExcel.write(response.getOutputStream()).build();</span><br><span class="line">        <span class="type">WriteSheet</span> <span class="variable">writeSheet</span> <span class="operator">=</span> EasyExcel.writerSheet(<span class="string">&quot;测试&quot;</span>).build();</span><br><span class="line"></span><br><span class="line">        List&lt;List&lt;String&gt;&gt; heads1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        heads1.add(Arrays.asList(<span class="string">&quot;姓名&quot;</span>));</span><br><span class="line">        heads1.add(Arrays.asList(<span class="string">&quot;年龄&quot;</span>));</span><br><span class="line">        heads1.add(Arrays.asList(<span class="string">&quot;地址&quot;</span>));</span><br><span class="line">        <span class="type">WriteTable</span> <span class="variable">writeTable1</span> <span class="operator">=</span> EasyExcel.writerTable(<span class="number">1</span>).head(heads1).needHead(<span class="literal">true</span>).build();</span><br><span class="line"></span><br><span class="line">        List&lt;List&lt;String&gt;&gt; heads2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        heads2.add(Arrays.asList(<span class="string">&quot;姓名&quot;</span>));</span><br><span class="line">        heads2.add(Arrays.asList(<span class="string">&quot;年龄&quot;</span>));</span><br><span class="line">        heads2.add(Arrays.asList(<span class="string">&quot;地址&quot;</span>));</span><br><span class="line">        heads2.add(Arrays.asList(<span class="string">&quot;出生日期&quot;</span>));</span><br><span class="line">        <span class="type">WriteTable</span> <span class="variable">writeTable2</span> <span class="operator">=</span> EasyExcel.writerTable(<span class="number">2</span>).head(heads2).needHead(<span class="literal">true</span>).build();</span><br><span class="line"></span><br><span class="line">        excelWriter.write(Arrays.asList(user), writeSheet, writeTable1);</span><br><span class="line">        excelWriter.write(Arrays.asList(user), writeSheet, writeTable2);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (excelWriter != <span class="literal">null</span>) &#123;</span><br><span class="line">            excelWriter.finish();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="3.png" alt=""></p>
<h2 id="写入多个Sheet">写入多个Sheet</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download6&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download6</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="type">ExcelWriter</span> <span class="variable">excelWriter</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;List&lt;String&gt;&gt; heads = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        heads.add(Arrays.asList(<span class="string">&quot;姓名&quot;</span>));</span><br><span class="line">        heads.add(Arrays.asList(<span class="string">&quot;年龄&quot;</span>));</span><br><span class="line">        heads.add(Arrays.asList(<span class="string">&quot;地址&quot;</span>));</span><br><span class="line">        excelWriter = EasyExcel.write(response.getOutputStream()).head(heads).build();</span><br><span class="line"></span><br><span class="line">        <span class="type">WriteSheet</span> <span class="variable">writeSheet1</span> <span class="operator">=</span> EasyExcel.writerSheet(<span class="number">0</span>, <span class="string">&quot;测试1&quot;</span>).build();</span><br><span class="line">        <span class="type">WriteSheet</span> <span class="variable">writeSheet2</span> <span class="operator">=</span> EasyExcel.writerSheet(<span class="number">1</span>, <span class="string">&quot;测试2&quot;</span>).build();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUserId(<span class="number">123</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        excelWriter.write(Arrays.asList(user), writeSheet1);</span><br><span class="line">        excelWriter.write(Arrays.asList(user), writeSheet2);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (excelWriter != <span class="literal">null</span>) &#123;</span><br><span class="line">            excelWriter.finish();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="4.png" alt=""></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>EasyExcel</tag>
      </tags>
  </entry>
  <entry>
    <title>Easyexcel（4-模板文件）</title>
    <url>/blog/2024/10/28/excel/easyexcel/Easyexcel%EF%BC%884-%E6%A8%A1%E6%9D%BF%E6%96%87%E4%BB%B6%EF%BC%89/</url>
    <content><![CDATA[<h2 id="文件导出">文件导出</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download1</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;测试.xls&quot;</span>).getInputStream()) &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        EasyExcel.write(response.getOutputStream())</span><br><span class="line">                .withTemplate(in)</span><br><span class="line">                .sheet(<span class="string">&quot;sheet1&quot;</span>)</span><br><span class="line">                .doWrite(Collections.emptyList());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="List填充导出">List填充导出</h2>
<h3 id="对象导出">对象导出</h3>
<p><img src="1.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download2</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;测试.xls&quot;</span>).getInputStream()) &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; userList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        userList.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>, <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;12345678901&quot;</span>, <span class="string">&quot;zhangsan@qq.com&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">        userList.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;12345678902&quot;</span>, <span class="string">&quot;lisi@qq.com&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                .withTemplate(in)</span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                .doFill(userList);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="2.png" alt=""></p>
<h3 id="对象嵌套对象（不支持）">对象嵌套对象（不支持）</h3>
<p><img src="3.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;学生&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Student stu;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NoArgsConstructor</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@ExcelProperty(&quot;姓名&quot;)</span></span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@ExcelProperty(&quot;年龄&quot;)</span></span><br><span class="line">        <span class="keyword">private</span> Integer age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download3</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;测试2.xls&quot;</span>).getInputStream()) &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试2&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; userList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        userList.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>, <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;12345678901&quot;</span>, <span class="string">&quot;zhangsan@qq.com&quot;</span>, <span class="keyword">new</span> <span class="title class_">User</span>.Student(<span class="string">&quot;张三&quot;</span>, <span class="number">12</span>)));</span><br><span class="line">        userList.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;12345678902&quot;</span>, <span class="string">&quot;lisi@qq.com&quot;</span>, <span class="keyword">new</span> <span class="title class_">User</span>.Student(<span class="string">&quot;李四&quot;</span>, <span class="number">13</span>)));</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                .withTemplate(in)</span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                .doFill(userList);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="4.png" alt=""></p>
<p><strong>查看ExcelWriterFillExecutor源码</strong></p>
<p><img src="5.png" alt=""></p>
<p><img src="6.png" alt=""></p>
<h3 id="对象嵌套List（不支持）">对象嵌套List（不支持）</h3>
<h2 id="Map填充导出">Map填充导出</h2>
<p><img src="7.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download4</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;测试3.xls&quot;</span>).getInputStream()) &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;userId&quot;</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;phone&quot;</span>, <span class="string">&quot;12345678901&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;email&quot;</span>, <span class="string">&quot;zhangsan@qq.com&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;createTime&quot;</span>, <span class="string">&quot;2021-01-01&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;student.name&quot;</span>, <span class="string">&quot;小张&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;student.age&quot;</span>, <span class="string">&quot;23&quot;</span>);</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                .withTemplate(in)</span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                .doFill(map);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：不支持嵌套的方式导出数据</p>
<p><img src="8.png" alt=""></p>
<h2 id="对象填充导出">对象填充导出</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download5&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download5</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;测试3.xls&quot;</span>).getInputStream()) &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试3&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>, <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;12345678901&quot;</span>, <span class="string">&quot;zhangsan@qq.com&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                .withTemplate(in)</span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                .doFill(user);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="9.png" alt=""></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>EasyExcel</tag>
      </tags>
  </entry>
  <entry>
    <title>Easyexcel（5-自定义列宽）</title>
    <url>/blog/2024/11/02/excel/easyexcel/Easyexcel%EF%BC%885-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%97%E5%AE%BD%EF%BC%89/</url>
    <content><![CDATA[<h2 id="注解">注解</h2>
<h3 id="ColumnWidth">@ColumnWidth</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WidthAndHeightData</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(&quot;字符串标题&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String string;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(&quot;日期标题&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date date;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ColumnWidth(50)</span></span><br><span class="line">    <span class="meta">@ExcelProperty(&quot;数字标题&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Double doubleData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注解使用时表头长度无法做到动态调整，只能固定设置</p>
<h2 id="类方法">类方法</h2>
<h3 id="SimpleColumnWidthStyleStrategy">SimpleColumnWidthStyleStrategy</h3>
<p>设置每列的固定宽度</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download2</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUserId(<span class="number">123</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;asplplplplpplplplplpl&quot;</span>);</span><br><span class="line">        user.setPhone(<span class="string">&quot;15245413&quot;</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;54565454@qq.com&quot;</span>);</span><br><span class="line">        user.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                .registerWriteHandler(<span class="keyword">new</span> <span class="title class_">SimpleColumnWidthStyleStrategy</span>(<span class="number">20</span>))</span><br><span class="line">                .doWrite(Arrays.asList(user));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="1.png" alt=""></p>
<h3 id="LongestMatchColumnWidthStyleStrategy">LongestMatchColumnWidthStyleStrategy</h3>
<p>LongestMatchColumnWidthStyleStrategy是一个列宽自适应策略。当我们在写入Excel数据时，如果希望根据数据的实际长度来自适应调整列宽，就可以使用这个策略。它会遍历指定列的所有数据，找出最长的数据，然后根据这个最长数据的长度来设定该列的宽度，确保数据在单元格内不会被截断。</p>
<p>这个目前不是很好用，比如有数字就会导致换行。而且长度也不是刚好和实际长度一致。 所以需要精确到刚好列宽的慎用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download1</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUserId(<span class="number">123</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;asplplplplpplplplplpl&quot;</span>);</span><br><span class="line">        user.setPhone(<span class="string">&quot;15245413&quot;</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;54565454@qq.com&quot;</span>);</span><br><span class="line">        user.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                .registerWriteHandler(<span class="keyword">new</span> <span class="title class_">LongestMatchColumnWidthStyleStrategy</span>())</span><br><span class="line">                .doWrite(Arrays.asList(user));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="2.png" alt=""></p>
<h2 id="表头宽度工具类">表头宽度工具类</h2>
<p>仿照LongestMatchColumnWidthStyleStrategy源码自定义工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 表头宽度根据表头或数据内容自适应</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomWidthStyleStrategy</span> <span class="keyword">extends</span> <span class="title class_">AbstractColumnWidthStyleStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1-根据表头宽度，2-根据单元格内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer type;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, Map&lt;Integer, Integer&gt;&gt; cache = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomWidthStyleStrategy</span><span class="params">(Integer type)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置列宽</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> writeSheetHolder 写入Sheet的持有者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cellDataList 当前列的单元格数据列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cell 当前单元格</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head 表头</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> relativeRowIndex 当前行的相对索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isHead 是否为表头</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">setColumnWidth</span><span class="params">(WriteSheetHolder writeSheetHolder, List&lt;WriteCellData&lt;?&gt;&gt; cellDataList, Cell cell, Head head, Integer relativeRowIndex, Boolean isHead)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isHead) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">columnWidth</span> <span class="operator">=</span> cell.getStringCellValue().length();</span><br><span class="line">                columnWidth = Math.max(columnWidth * <span class="number">2</span>, <span class="number">20</span>);</span><br><span class="line">                <span class="keyword">if</span> (columnWidth &gt; <span class="number">255</span>) &#123;</span><br><span class="line">                    columnWidth = <span class="number">255</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                writeSheetHolder.getSheet().setColumnWidth(cell.getColumnIndex(), columnWidth * <span class="number">256</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//不把标头计算在内</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">needSetWidth</span> <span class="operator">=</span> isHead || !CollectionUtils.isEmpty(cellDataList);</span><br><span class="line">        <span class="keyword">if</span> (needSetWidth) &#123;</span><br><span class="line">            Map&lt;Integer, Integer&gt; maxColumnWidthMap = cache.get(writeSheetHolder.getSheetNo());</span><br><span class="line">            <span class="keyword">if</span> (maxColumnWidthMap == <span class="literal">null</span>) &#123;</span><br><span class="line">                maxColumnWidthMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">                cache.put(writeSheetHolder.getSheetNo(), maxColumnWidthMap);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">Integer</span> <span class="variable">columnWidth</span> <span class="operator">=</span> <span class="built_in">this</span>.dataLength(cellDataList, cell, isHead);</span><br><span class="line">            <span class="keyword">if</span> (columnWidth &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (columnWidth &gt; <span class="number">255</span>) &#123;</span><br><span class="line">                    columnWidth = <span class="number">255</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">maxColumnWidth</span> <span class="operator">=</span> maxColumnWidthMap.get(cell.getColumnIndex());</span><br><span class="line">                <span class="keyword">if</span> (maxColumnWidth == <span class="literal">null</span> || columnWidth &gt; maxColumnWidth) &#123;</span><br><span class="line">                    maxColumnWidthMap.put(cell.getColumnIndex(), columnWidth);</span><br><span class="line">                    writeSheetHolder.getSheet().setColumnWidth(cell.getColumnIndex(), columnWidth * <span class="number">256</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cellDataList</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cell</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isHead</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer <span class="title function_">dataLength</span><span class="params">(List&lt;WriteCellData&lt;?&gt;&gt; cellDataList, Cell cell, Boolean isHead)</span> &#123;</span><br><span class="line">        <span class="comment">//头直接返回原始长度</span></span><br><span class="line">        <span class="keyword">if</span> (isHead) &#123;</span><br><span class="line">            <span class="keyword">return</span> cell.getStringCellValue().getBytes().length;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//不是头的话  看是什么类型  用数字加就可以了</span></span><br><span class="line">            <span class="type">WriteCellData</span> <span class="variable">cellData</span> <span class="operator">=</span> cellDataList.get(<span class="number">0</span>);</span><br><span class="line">            <span class="type">CellDataTypeEnum</span> <span class="variable">type</span> <span class="operator">=</span> cellData.getType();</span><br><span class="line">            <span class="keyword">if</span> (type == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">                    <span class="keyword">case</span> STRING:</span><br><span class="line">                        <span class="keyword">return</span> cellData.getStringValue().getBytes().length + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">case</span> BOOLEAN:</span><br><span class="line">                        <span class="keyword">return</span> cellData.getBooleanValue().toString().getBytes().length;</span><br><span class="line">                    <span class="keyword">case</span> NUMBER:</span><br><span class="line">                        <span class="keyword">return</span> cellData.getNumberValue().toString().getBytes().length * <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">case</span> DATE:</span><br><span class="line">                        <span class="keyword">return</span> cellData.getDateValue().toString().length() + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download3</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUserId(<span class="number">123</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;asplplplplpplplplplpl&quot;</span>);</span><br><span class="line">        user.setPhone(<span class="string">&quot;15245413&quot;</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;54565454@qq.com&quot;</span>);</span><br><span class="line">        user.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                .registerWriteHandler(<span class="keyword">new</span> <span class="title class_">CustomWidthStyleStrategy</span>(<span class="number">1</span>))</span><br><span class="line">                .doWrite(Arrays.asList(user));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/download4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download4</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUserId(<span class="number">123</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;asplplplplpplplplplpl&quot;</span>);</span><br><span class="line">        user.setPhone(<span class="string">&quot;15245413&quot;</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;54565454@qq.com&quot;</span>);</span><br><span class="line">        user.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                .registerWriteHandler(<span class="keyword">new</span> <span class="title class_">CustomWidthStyleStrategy</span>(<span class="number">2</span>))</span><br><span class="line">                .doWrite(Arrays.asList(user));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="3.png" alt=""></p>
<p><img src="4.png" alt=""></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>EasyExcel</tag>
      </tags>
  </entry>
  <entry>
    <title>Easyexcel（6-单元格合并）</title>
    <url>/blog/2024/11/03/excel/easyexcel/Easyexcel%EF%BC%886-%E5%8D%95%E5%85%83%E6%A0%BC%E5%90%88%E5%B9%B6%EF%BC%89/</url>
    <content><![CDATA[<h2 id="注解">注解</h2>
<h3 id="ContentLoopMerge">@ContentLoopMerge</h3>
<p>用于设置合并单元格的注解，作用于字段上</p>
<ol>
<li>eachRow：合并列</li>
<li>columnExtend：合并行</li>
</ol>
<h3 id="OnceAbsoluteMerge">@OnceAbsoluteMerge</h3>
<p>用于指定位置的单元格合并，作用于类上</p>
<ol>
<li>firstRowIndex：第一行下标</li>
<li>lastRowIndex：最后一行下标</li>
<li>firstColumnIndex：第一列下标</li>
<li>lastColumnIndex：最后一列下标</li>
</ol>
<h2 id="类方法">类方法</h2>
<h3 id="LoopMergeStrategy">LoopMergeStrategy</h3>
<p>用于指定某几列每相差几行进行单元格合并</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download1</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user1.setUserId(<span class="number">123</span>);</span><br><span class="line">        user1.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user1.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user1.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user1.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user2.setUserId(<span class="number">123</span>);</span><br><span class="line">        user2.setName(<span class="string">&quot;asbnm&quot;</span>);</span><br><span class="line">        user2.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user2.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user2.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user3.setUserId(<span class="number">123</span>);</span><br><span class="line">        user3.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user3.setPhone(<span class="string">&quot;46543213&quot;</span>);</span><br><span class="line">        user3.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user3.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 第1列每隔2行合并一次</span></span><br><span class="line">        <span class="type">LoopMergeStrategy</span> <span class="variable">loopMergeStrategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoopMergeStrategy</span>(<span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                .registerWriteHandler(loopMergeStrategy)</span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                .doWrite(Arrays.asList(user1, user2, user3));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="1.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download1</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user1.setUserId(<span class="number">123</span>);</span><br><span class="line">        user1.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user1.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user1.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user1.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user2.setUserId(<span class="number">123</span>);</span><br><span class="line">        user2.setName(<span class="string">&quot;asbnm&quot;</span>);</span><br><span class="line">        user2.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user2.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user2.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user3.setUserId(<span class="number">123</span>);</span><br><span class="line">        user3.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user3.setPhone(<span class="string">&quot;46543213&quot;</span>);</span><br><span class="line">        user3.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user3.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="comment">// 第2列开始每隔2行合并一次，从第2列开始的两列进行合并</span></span><br><span class="line">        <span class="type">LoopMergeStrategy</span> <span class="variable">loopMergeStrategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoopMergeStrategy</span>(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                .registerWriteHandler(loopMergeStrategy)</span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                .doWrite(Arrays.asList(user1, user2, user3));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="2.png" alt=""></p>
<h3 id="OnceAbsoluteMergeStrategy">OnceAbsoluteMergeStrategy</h3>
<p>用于指定一个区域内的单元格进行合并</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download2</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user1.setUserId(<span class="number">123</span>);</span><br><span class="line">        user1.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user1.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user1.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user1.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user2.setUserId(<span class="number">123</span>);</span><br><span class="line">        user2.setName(<span class="string">&quot;asbnm&quot;</span>);</span><br><span class="line">        user2.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user2.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user2.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user3.setUserId(<span class="number">123</span>);</span><br><span class="line">        user3.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user3.setPhone(<span class="string">&quot;46543213&quot;</span>);</span><br><span class="line">        user3.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user3.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="comment">// 从第1行第3列合并到第3行第3列</span></span><br><span class="line">        <span class="type">OnceAbsoluteMergeStrategy</span> <span class="variable">onceAbsoluteMergeStrategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OnceAbsoluteMergeStrategy</span>(<span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                .registerWriteHandler(onceAbsoluteMergeStrategy)</span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                .doWrite(Arrays.asList(user1, user2, user3));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="3.png" alt=""></p>
<h2 id="合并单元格工具类">合并单元格工具类</h2>
<h3 id="纵向合并">纵向合并</h3>
<h4 id="AbstractMergeStrategy">AbstractMergeStrategy</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义合并策略 该类继承了AbstractMergeStrategy抽象合并策略，需要重写merge()方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomMergeStrategy</span> <span class="keyword">extends</span> <span class="title class_">AbstractMergeStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分组，每几行合并一次</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; exportFieldGroupCountList;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 目标合并列index</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer targetColumnIndex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要开始合并单元格的首行index</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer rowIndex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomMergeStrategy</span><span class="params">(List&lt;String&gt; exportDataList, Integer targetColumnIndex, Integer rowIndex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.exportFieldGroupCountList = getGroupCountList(exportDataList, rowIndex);</span><br><span class="line">        <span class="built_in">this</span>.targetColumnIndex = targetColumnIndex;</span><br><span class="line">        <span class="built_in">this</span>.rowIndex = rowIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 该方法将目标列根据值是否相同连续可合并，存储可合并的行数</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; <span class="title function_">getGroupCountList</span><span class="params">(List&lt;String&gt; exportDataList, Integer rowIndex)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(exportDataList)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; groupCountList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> rowIndex + <span class="number">1</span>, len = exportDataList.size(); i &lt; len; i++) &#123;</span><br><span class="line">            <span class="comment">// 判断上一列和当前列的值是否相同</span></span><br><span class="line">            <span class="keyword">if</span> (exportDataList.get(i).equals(exportDataList.get(i - <span class="number">1</span>))) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                groupCountList.add(count);</span><br><span class="line">                count = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 处理完最后一条后</span></span><br><span class="line">        groupCountList.add(count);</span><br><span class="line">        <span class="keyword">return</span> groupCountList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(Sheet sheet, Cell cell, Head head, Integer relativeRowIndex)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == rowIndex) &#123;</span><br><span class="line">            rowIndex = cell.getRowIndex();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 仅从首行以及目标列的单元格开始合并，忽略其他</span></span><br><span class="line">        <span class="keyword">if</span> (cell.getRowIndex() == rowIndex + <span class="number">1</span> &amp;&amp; cell.getColumnIndex() == targetColumnIndex) &#123;</span><br><span class="line">            mergeGroupColumn(sheet);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">mergeGroupColumn</span><span class="params">(Sheet sheet)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rowCount</span> <span class="operator">=</span> rowIndex + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (Integer count : exportFieldGroupCountList) &#123;</span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">1</span>) &#123;</span><br><span class="line">                rowCount += count;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 合并单元格</span></span><br><span class="line">            <span class="type">CellRangeAddress</span> <span class="variable">cellRangeAddress</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CellRangeAddress</span>(rowCount, rowCount + count - <span class="number">1</span>, targetColumnIndex, targetColumnIndex);</span><br><span class="line">            sheet.addMergedRegionUnsafe(cellRangeAddress);</span><br><span class="line">            rowCount += count;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download3</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user1.setUserId(<span class="number">123</span>);</span><br><span class="line">        user1.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user1.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user1.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user1.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user2.setUserId(<span class="number">123</span>);</span><br><span class="line">        user2.setName(<span class="string">&quot;asbnm&quot;</span>);</span><br><span class="line">        user2.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user2.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user2.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user3.setUserId(<span class="number">123</span>);</span><br><span class="line">        user3.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user3.setPhone(<span class="string">&quot;46543213&quot;</span>);</span><br><span class="line">        user3.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user3.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; userList = Arrays.asList(user1, user2, user3);</span><br><span class="line">        <span class="type">CustomMergeStrategy</span> <span class="variable">customMergeStrategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustomMergeStrategy</span>(userList.stream().map(e -&gt;</span><br><span class="line">                String.valueOf(e.getUserId())).collect(Collectors.toList()), <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                .registerWriteHandler(customMergeStrategy)</span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                .doWrite(userList);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="4.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download3</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user1.setUserId(<span class="number">123</span>);</span><br><span class="line">        user1.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user1.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user1.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user1.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user2.setUserId(<span class="number">123</span>);</span><br><span class="line">        user2.setName(<span class="string">&quot;asbnm&quot;</span>);</span><br><span class="line">        user2.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user2.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user2.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user3.setUserId(<span class="number">123</span>);</span><br><span class="line">        user3.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user3.setPhone(<span class="string">&quot;46543213&quot;</span>);</span><br><span class="line">        user3.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user3.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; userList = Arrays.asList(user1, user2, user3);</span><br><span class="line">        <span class="type">CustomMergeStrategy</span> <span class="variable">customMergeStrategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustomMergeStrategy</span>(userList.stream().map(e -&gt;</span><br><span class="line">                String.valueOf(e.getUserId())).collect(Collectors.toList()), <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                .registerWriteHandler(customMergeStrategy)</span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                .doWrite(userList);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="5.png" alt=""></p>
<h4 id="CellWriteHandler">CellWriteHandler</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * excel合并单元格导出工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EasyExcelUtil</span> <span class="keyword">implements</span> <span class="title class_">CellWriteHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要合并的列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] mergeColumnIndex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从哪一行开始合并</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> mergeRowIndex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EasyExcelUtil</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EasyExcelUtil</span><span class="params">(<span class="type">int</span> mergeRowIndex, <span class="type">int</span>[] mergeColumnIndex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mergeRowIndex = mergeRowIndex;</span><br><span class="line">        <span class="built_in">this</span>.mergeColumnIndex = mergeColumnIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建每个单元格之前执行</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> writeSheetHolder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> writeTableHolder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> row</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> columnIndex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> relativeRowIndex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isHead</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeCellCreate</span><span class="params">(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Row row,</span></span><br><span class="line"><span class="params">                                 Head head, Integer columnIndex, Integer relativeRowIndex, Boolean isHead)</span> &#123;</span><br><span class="line">        CellWriteHandler.<span class="built_in">super</span>.beforeCellCreate(writeSheetHolder, writeTableHolder, row, head, columnIndex, relativeRowIndex, isHead);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每个单元格数据内容渲染之后执行</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> writeSheetHolder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> writeTableHolder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cellData</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cell</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> relativeRowIndex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isHead</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCellDataConverted</span><span class="params">(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, WriteCellData&lt;?&gt; cellData,</span></span><br><span class="line"><span class="params">                                       Cell cell, Head head, Integer relativeRowIndex, Boolean isHead)</span> &#123;</span><br><span class="line">        CellWriteHandler.<span class="built_in">super</span>.afterCellDataConverted(writeSheetHolder, writeTableHolder, cellData, cell, head, relativeRowIndex, isHead);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每个单元格完全创建完之后执行</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> writeSheetHolder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> writeTableHolder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cellDataList</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cell</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> relativeRowIndex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isHead</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCellDispose</span><span class="params">(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, List&lt;WriteCellData&lt;?&gt;&gt; cellDataList,</span></span><br><span class="line"><span class="params">                                 Cell cell, Head head, Integer relativeRowIndex, Boolean isHead)</span> &#123;</span><br><span class="line">        <span class="comment">//当前行</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">curRowIndex</span> <span class="operator">=</span> cell.getRowIndex();</span><br><span class="line">        <span class="comment">//当前列</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">curColIndex</span> <span class="operator">=</span> cell.getColumnIndex();</span><br><span class="line">        <span class="comment">//判断当前行是否已经到达要合并的行数</span></span><br><span class="line">        <span class="keyword">if</span> (curRowIndex &gt; mergeRowIndex) &#123;</span><br><span class="line">            <span class="comment">//判断是否是合并列</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> columnIndex : mergeColumnIndex) &#123;</span><br><span class="line">                <span class="keyword">if</span> (curColIndex == columnIndex) &#123;</span><br><span class="line">                    mergeWithPrevRow(writeSheetHolder, cell, curRowIndex, curColIndex);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前单元格向上合并</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> writeSheetHolder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cell             当前单元格</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> curRowIndex      当前行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> curColIndex      当前列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">mergeWithPrevRow</span><span class="params">(WriteSheetHolder writeSheetHolder, Cell cell, <span class="type">int</span> curRowIndex, <span class="type">int</span> curColIndex)</span> &#123;</span><br><span class="line">        <span class="type">Cell</span> <span class="variable">cell1</span> <span class="operator">=</span> cell.getSheet().getRow(curRowIndex).getCell(<span class="number">0</span>);</span><br><span class="line">        <span class="type">Cell</span> <span class="variable">cell2</span> <span class="operator">=</span> cell.getSheet().getRow(curRowIndex - <span class="number">1</span>).getCell(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (cell1 == <span class="literal">null</span> || cell2 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取当前单元格的数据</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">curData</span> <span class="operator">=</span> cell.getCellType() == CellType.STRING ? cell.getStringCellValue() : cell.getNumericCellValue();</span><br><span class="line">        <span class="comment">// 获取上一行单元格的数据</span></span><br><span class="line">        <span class="type">Cell</span> <span class="variable">preCell</span> <span class="operator">=</span> cell.getSheet().getRow(curRowIndex - <span class="number">1</span>).getCell(curColIndex);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">preData</span> <span class="operator">=</span> preCell.getCellType() == CellType.STRING ? preCell.getStringCellValue() : preCell.getNumericCellValue();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将当前单元格数据与上一个单元格数据比较，然后判断其序号是否相同</span></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">dataBool</span> <span class="operator">=</span> preData.equals(curData);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">val1</span> <span class="operator">=</span> cell1.getCellType() == CellType.STRING ? cell1.getStringCellValue() : cell1.getNumericCellValue();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">val2</span> <span class="operator">=</span> cell2.getCellType() == CellType.STRING ? cell2.getStringCellValue() : cell2.getNumericCellValue();</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">bool</span> <span class="operator">=</span> Objects.equals(val1, val2);</span><br><span class="line">        <span class="keyword">if</span> (dataBool &amp;&amp; bool) &#123;</span><br><span class="line">            <span class="type">Sheet</span> <span class="variable">sheet</span> <span class="operator">=</span> writeSheetHolder.getSheet();</span><br><span class="line">            List&lt;CellRangeAddress&gt; mergeRegions = sheet.getMergedRegions();</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isMerged</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, len = mergeRegions.size(); i &lt; len &amp;&amp; !isMerged; ++i) &#123;</span><br><span class="line">                <span class="type">CellRangeAddress</span> <span class="variable">cellRangeAddr</span> <span class="operator">=</span> mergeRegions.get(i);</span><br><span class="line">                <span class="comment">// 若上一个单元格已经被合并，则先移出原有的合并单元，再重新添加合并单元</span></span><br><span class="line">                <span class="keyword">if</span> (cellRangeAddr.isInRange(curRowIndex - <span class="number">1</span>, curColIndex)) &#123;</span><br><span class="line">                    sheet.removeMergedRegion(i);</span><br><span class="line">                    cellRangeAddr.setLastRow(curRowIndex);</span><br><span class="line">                    sheet.addMergedRegion(cellRangeAddr);</span><br><span class="line">                    isMerged = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 若上一个单元格未被合并，则新增合并单元</span></span><br><span class="line">            <span class="keyword">if</span> (!isMerged) &#123;</span><br><span class="line">                <span class="type">CellRangeAddress</span> <span class="variable">cellRangeAddress</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CellRangeAddress</span>(curRowIndex - <span class="number">1</span>, curRowIndex, curColIndex, curColIndex);</span><br><span class="line">                sheet.addMergedRegion(cellRangeAddress);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download4</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user1.setUserId(<span class="number">123</span>);</span><br><span class="line">        user1.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user1.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user1.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user1.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user2.setUserId(<span class="number">123</span>);</span><br><span class="line">        user2.setName(<span class="string">&quot;asbnm&quot;</span>);</span><br><span class="line">        user2.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user2.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user2.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user3.setUserId(<span class="number">123</span>);</span><br><span class="line">        user3.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user3.setPhone(<span class="string">&quot;46543213&quot;</span>);</span><br><span class="line">        user3.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user3.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; userList = Arrays.asList(user1, user2, user3);</span><br><span class="line"></span><br><span class="line"><span class="comment">//            EasyExcel.write(response.getOutputStream(), User.class)</span></span><br><span class="line"><span class="comment">//                    .registerWriteHandler(new EasyExcelUtil(0, new int[]&#123;0, 2&#125;))</span></span><br><span class="line"><span class="comment">//                    .sheet(&quot;模板&quot;)</span></span><br><span class="line"><span class="comment">//                    .doWrite(userList);</span></span><br><span class="line">        EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                .registerWriteHandler(<span class="keyword">new</span> <span class="title class_">EasyExcelUtil</span>(<span class="number">0</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>&#125;))</span><br><span class="line">                .registerWriteHandler(<span class="keyword">new</span> <span class="title class_">EasyExcelUtil</span>(<span class="number">0</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">2</span>&#125;))</span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                .doWrite(userList);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="6.png" alt=""></p>
<h3 id="横向合并">横向合并</h3>
<p>可以使用类方法进行列的合并</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>EasyExcel</tag>
      </tags>
  </entry>
  <entry>
    <title>Easyexcel（7-自定义样式）</title>
    <url>/blog/2024/11/05/excel/easyexcel/Easyexcel%EF%BC%887-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%B7%E5%BC%8F%EF%BC%89/</url>
    <content><![CDATA[<h2 id="注解">注解</h2>
<h3 id="ContentStyle">@ContentStyle</h3>
<p>用于设置内容格式注解</p>
<ol>
<li>dataFormat：日期格式</li>
<li>hidden：设置单元格使用此样式隐藏</li>
<li>locked：设置单元格使用此样式锁定</li>
<li>quotePrefix：在单元格前面增加`符号，数字或公式将以字符串形式展示</li>
<li>horizontalAlignment：设置是否水平居中</li>
<li>wrapped：设置文本是否应换行。将此标志设置为true通过在多行上显示使单元格中的所有内容可见</li>
<li>verticalAlignment：设置是否垂直居中</li>
<li>rotation：设置单元格中文本旋转角度。03版本的Excel旋转角度区间为-90°90°，07版本的Excel旋转角度区间为0°180°</li>
<li>indent：设置单元格中缩进文本的空格数</li>
<li>borderLeft：设置左边框的样式</li>
<li>borderRight：设置右边框样式</li>
<li>borderTop：设置上边框样式</li>
<li>borderBottom：设置下边框样式</li>
<li>leftBorderColor：设置左边框颜色</li>
<li>rightBorderColor：设置右边框颜色</li>
<li>topBorderColor：设置上边框颜色</li>
<li>bottomBorderColor：设置下边框颜色</li>
<li>fillPatternType：设置填充类型</li>
<li>fillBackgroundColor：设置背景色</li>
<li>fillForegroundColor：设置前景色</li>
<li>shrinkToFit：设置自动单元格自动大小</li>
</ol>
<h3 id="ContentFontStyle">@ContentFontStyle</h3>
<p>用于设置单元格内容字体格式的注解</p>
<ol>
<li>fontName：字体名称</li>
<li>fontHeightInPoints：字体高度</li>
<li>italic：是否斜体</li>
<li>strikeout：是否设置删除水平线</li>
<li>color：字体颜色</li>
<li>typeOffset：偏移量</li>
<li>underline：下划线</li>
<li>bold：是否加粗</li>
<li>charset：编码格式</li>
</ol>
<h3 id="HeadStyle">@HeadStyle</h3>
<p>用于设置标题样式</p>
<ol>
<li>dataFormat：日期格式</li>
<li>hidden：设置单元格使用此样式隐藏</li>
<li>locked：设置单元格使用此样式锁定</li>
<li>quotePrefix：在单元格前面增加`符号，数字或公式将以字符串形式展示</li>
<li>horizontalAlignment：设置是否水平居中</li>
<li>wrapped：设置文本是否应换行。将此标志设置为true通过在多行上显示使单元格中的所有内容可见</li>
<li>verticalAlignment：设置是否垂直居中</li>
<li>rotation：设置单元格中文本旋转角度。03版本的Excel旋转角度区间为-90°90°，07版本的Excel旋转角度区间为0°180°</li>
<li>indent：设置单元格中缩进文本的空格数</li>
<li>borderLeft：设置左边框的样式</li>
<li>borderRight：设置右边框样式</li>
<li>borderTop：设置上边框样式</li>
<li>borderBottom：设置下边框样式</li>
<li>leftBorderColor：设置左边框颜色</li>
<li>rightBorderColor：设置右边框颜色</li>
<li>topBorderColor：设置上边框颜色</li>
<li>bottomBorderColor：设置下边框颜色</li>
<li>fillPatternType：设置填充类型</li>
<li>fillBackgroundColor：设置背景色</li>
<li>fillForegroundColor：设置前景色</li>
<li>shrinkToFit：设置自动单元格自动大小</li>
</ol>
<h3 id="HeadFontStyle">@HeadFontStyle</h3>
<p>用于定制标题字体格式</p>
<ol>
<li>fontName：设置字体名称</li>
<li>fontHeightInPoints：设置字体高度</li>
<li>italic：设置字体是否斜体</li>
<li>strikeout：是否设置删除线</li>
<li>color：设置字体颜色</li>
<li>typeOffset：设置偏移量</li>
<li>underline：设置下划线</li>
<li>charset：设置字体编码</li>
<li>bold：设置字体是否加粗</li>
</ol>
<h2 id="类方法">类方法</h2>
<h3 id="HorizontalCellStyleStrategy">HorizontalCellStyleStrategy</h3>
<p>HorizontalCellStyleStrategy 是提供的一个水平样式策略，通过设置构建这个策略对象基本上可以满足一般的要求了，比如：设置表头和内容的边框、底色、对齐方式、文字字体、文字颜色、文字大小等。设置完之后，需要创建 HorizontalCellStyleStrategy 对象，然后在导出文件时注册这个策略的 handler 即可。</p>
<h3 id="DefaultStyle">DefaultStyle</h3>
<p>Easyexcel的默认风格是，对于表头会显示灰色背景，但是如果取消使用默认风格之后，表头的背景颜色就会恢复白色</p>
<p>控制是否开启默认风格的属性方法是：<code>useDefaultStyle(false)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line">    EasyExcel.write(<span class="string">&quot;test01.xlsx&quot;</span>, DemoData.class)</span><br><span class="line">			<span class="comment">//禁用默认风格</span></span><br><span class="line">            .useDefaultStyle(<span class="literal">false</span>)</span><br><span class="line">            .sheet(<span class="string">&quot;testSheet01&quot;</span>)</span><br><span class="line">            .doWrite(demoData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="1.png" alt=""></p>
<h2 id="样式工具类">样式工具类</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * EasyExcel 样式工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomExcelStyleUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 标题样式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> WriteCellStyle <span class="title function_">getHeadStyle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 头的策略</span></span><br><span class="line">        <span class="type">WriteCellStyle</span> <span class="variable">headWriteCellStyle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WriteCellStyle</span>();</span><br><span class="line">        <span class="comment">// 背景颜色</span></span><br><span class="line">        <span class="comment">//headWriteCellStyle.setFillForegroundColor(IndexedColors.LIGHT_TURQUOISE1.getIndex());</span></span><br><span class="line">        <span class="comment">//headWriteCellStyle.setFillPatternType(FillPatternType.SOLID_FOREGROUND);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 字体</span></span><br><span class="line">        <span class="type">WriteFont</span> <span class="variable">headWriteFont</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WriteFont</span>();</span><br><span class="line">        headWriteFont.setFontName(<span class="string">&quot;宋体&quot;</span>);<span class="comment">//设置字体名字</span></span><br><span class="line">        headWriteFont.setFontHeightInPoints((<span class="type">short</span>) <span class="number">14</span>);<span class="comment">//设置字体大小</span></span><br><span class="line">        headWriteFont.setBold(<span class="literal">true</span>);<span class="comment">//字体加粗</span></span><br><span class="line">        headWriteCellStyle.setWriteFont(headWriteFont); <span class="comment">//在样式用应用设置的字体;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 样式</span></span><br><span class="line">        headWriteCellStyle.setBorderBottom(BorderStyle.THIN);<span class="comment">//设置底边框;</span></span><br><span class="line">        headWriteCellStyle.setBottomBorderColor((<span class="type">short</span>) <span class="number">0</span>);<span class="comment">//设置底边框颜色;</span></span><br><span class="line">        headWriteCellStyle.setBorderLeft(BorderStyle.THIN);  <span class="comment">//设置左边框;</span></span><br><span class="line">        headWriteCellStyle.setLeftBorderColor((<span class="type">short</span>) <span class="number">0</span>);<span class="comment">//设置左边框颜色;</span></span><br><span class="line">        headWriteCellStyle.setBorderRight(BorderStyle.THIN);<span class="comment">//设置右边框;</span></span><br><span class="line">        headWriteCellStyle.setRightBorderColor((<span class="type">short</span>) <span class="number">0</span>);<span class="comment">//设置右边框颜色;</span></span><br><span class="line">        headWriteCellStyle.setBorderTop(BorderStyle.THIN);<span class="comment">//设置顶边框;</span></span><br><span class="line">        headWriteCellStyle.setTopBorderColor((<span class="type">short</span>) <span class="number">0</span>); <span class="comment">//设置顶边框颜色;</span></span><br><span class="line"></span><br><span class="line">        headWriteCellStyle.setWrapped(<span class="literal">true</span>);  <span class="comment">//设置自动换行;</span></span><br><span class="line"></span><br><span class="line">        headWriteCellStyle.setHorizontalAlignment(HorizontalAlignment.CENTER);<span class="comment">//设置水平对齐的样式为居中对齐;</span></span><br><span class="line">        headWriteCellStyle.setVerticalAlignment(VerticalAlignment.CENTER);  <span class="comment">//设置垂直对齐的样式为居中对齐;</span></span><br><span class="line">        headWriteCellStyle.setShrinkToFit(<span class="literal">true</span>);<span class="comment">//设置文本收缩至合适</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> headWriteCellStyle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 内容样式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> WriteCellStyle <span class="title function_">getContentStyle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 内容的策略</span></span><br><span class="line">        <span class="type">WriteCellStyle</span> <span class="variable">contentWriteCellStyle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WriteCellStyle</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 背景颜色</span></span><br><span class="line">        <span class="comment">// 这里需要指定 FillPatternType 为FillPatternType.SOLID_FOREGROUND 不然无法显示背景颜色.头默认了 FillPatternType所以可以不指定</span></span><br><span class="line">        <span class="comment">//contentWriteCellStyle.setFillForegroundColor(IndexedColors.PALE_BLUE.getIndex());</span></span><br><span class="line">        <span class="comment">//contentWriteCellStyle.setFillPatternType(FillPatternType.SOLID_FOREGROUND);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置字体</span></span><br><span class="line">        <span class="type">WriteFont</span> <span class="variable">contentWriteFont</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WriteFont</span>();</span><br><span class="line">        contentWriteFont.setFontHeightInPoints((<span class="type">short</span>) <span class="number">12</span>);<span class="comment">//设置字体大小</span></span><br><span class="line">        contentWriteFont.setFontName(<span class="string">&quot;宋体&quot;</span>); <span class="comment">//设置字体名字</span></span><br><span class="line">        contentWriteCellStyle.setWriteFont(contentWriteFont);<span class="comment">//在样式用应用设置的字体;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置样式;</span></span><br><span class="line">        contentWriteCellStyle.setBorderBottom(BorderStyle.THIN);<span class="comment">//设置底边框;</span></span><br><span class="line">        contentWriteCellStyle.setBottomBorderColor((<span class="type">short</span>) <span class="number">0</span>);<span class="comment">//设置底边框颜色;</span></span><br><span class="line">        contentWriteCellStyle.setBorderLeft(BorderStyle.THIN);  <span class="comment">//设置左边框;</span></span><br><span class="line">        contentWriteCellStyle.setLeftBorderColor((<span class="type">short</span>) <span class="number">0</span>);<span class="comment">//设置左边框颜色;</span></span><br><span class="line">        contentWriteCellStyle.setBorderRight(BorderStyle.THIN);<span class="comment">//设置右边框;</span></span><br><span class="line">        contentWriteCellStyle.setRightBorderColor((<span class="type">short</span>) <span class="number">0</span>);<span class="comment">//设置右边框颜色;</span></span><br><span class="line">        contentWriteCellStyle.setBorderTop(BorderStyle.THIN);<span class="comment">//设置顶边框;</span></span><br><span class="line">        contentWriteCellStyle.setTopBorderColor((<span class="type">short</span>) <span class="number">0</span>); <span class="comment">///设置顶边框颜色;</span></span><br><span class="line"></span><br><span class="line">        contentWriteCellStyle.setHorizontalAlignment(HorizontalAlignment.CENTER);<span class="comment">// 水平居中</span></span><br><span class="line">        contentWriteCellStyle.setVerticalAlignment(VerticalAlignment.CENTER);<span class="comment">// 垂直居中</span></span><br><span class="line">        contentWriteCellStyle.setWrapped(<span class="literal">true</span>); <span class="comment">//设置自动换行;</span></span><br><span class="line">        contentWriteCellStyle.setShrinkToFit(<span class="literal">true</span>);<span class="comment">//设置文本收缩至合适</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> contentWriteCellStyle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setCellStyle</span><span class="params">(HSSFCell cell)</span> &#123;</span><br><span class="line">        <span class="type">HSSFCellStyle</span> <span class="variable">style</span> <span class="operator">=</span> cell.getCellStyle();</span><br><span class="line">        style.setAlignment(HorizontalAlignment.CENTER);</span><br><span class="line">        style.setVerticalAlignment(VerticalAlignment.CENTER);</span><br><span class="line">        style.setBorderBottom(BorderStyle.THIN);</span><br><span class="line">        style.setBottomBorderColor(IndexedColors.BLACK.getIndex());</span><br><span class="line">        style.setBorderLeft(BorderStyle.THIN);</span><br><span class="line">        style.setLeftBorderColor(IndexedColors.BLACK.getIndex());</span><br><span class="line">        style.setBorderRight(BorderStyle.THIN);</span><br><span class="line">        style.setRightBorderColor(IndexedColors.BLACK.getIndex());</span><br><span class="line">        style.setBorderTop(BorderStyle.THIN);</span><br><span class="line">        style.setTopBorderColor(IndexedColors.BLACK.getIndex());</span><br><span class="line">        cell.setCellStyle(style);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setCellStyle</span><span class="params">(XSSFCell cell)</span> &#123;</span><br><span class="line">        <span class="type">XSSFCellStyle</span> <span class="variable">style</span> <span class="operator">=</span> cell.getCellStyle();</span><br><span class="line">        style.setAlignment(HorizontalAlignment.CENTER);</span><br><span class="line">        style.setVerticalAlignment(VerticalAlignment.CENTER);</span><br><span class="line">        style.setBorderBottom(BorderStyle.THIN);</span><br><span class="line">        style.setBottomBorderColor(IndexedColors.BLACK.getIndex());</span><br><span class="line">        style.setBorderLeft(BorderStyle.THIN);</span><br><span class="line">        style.setLeftBorderColor(IndexedColors.BLACK.getIndex());</span><br><span class="line">        style.setBorderRight(BorderStyle.THIN);</span><br><span class="line">        style.setRightBorderColor(IndexedColors.BLACK.getIndex());</span><br><span class="line">        style.setBorderTop(BorderStyle.THIN);</span><br><span class="line">        style.setTopBorderColor(IndexedColors.BLACK.getIndex());</span><br><span class="line">        cell.setCellStyle(style);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用户Id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;邮箱&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;创建时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download1</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUserId(<span class="number">123</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), User.class)</span><br><span class="line">                .sheet(<span class="string">&quot;模板&quot;</span>)</span><br><span class="line">                .registerWriteHandler(<span class="keyword">new</span> <span class="title class_">HorizontalCellStyleStrategy</span>(CustomExcelStyleUtil.getHeadStyle(), CustomExcelStyleUtil.getContentStyle()))</span><br><span class="line">                .doWrite(Arrays.asList(user));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="2.png" alt=""></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>EasyExcel</tag>
      </tags>
  </entry>
  <entry>
    <title>Easyexcel（8-通用工具类）</title>
    <url>/blog/2024/11/06/excel/easyexcel/Easyexcel%EF%BC%888-%E9%80%9A%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB%EF%BC%89/</url>
    <content><![CDATA[<h2 id="EasyExcelUtils">EasyExcelUtils</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EasyExcelUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步无模型读（默认读取sheet0,从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath excel文件的绝对路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Map&lt;Integer, String&gt;&gt; <span class="title function_">syncRead</span><span class="params">(String filePath)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(filePath).sheet().doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步无模型读（默认读取sheet0,从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream excel文件的输入流</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Map&lt;Integer, String&gt;&gt; <span class="title function_">syncRead</span><span class="params">(InputStream inputStream)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(inputStream).sheet().doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步无模型读（默认读取sheet0,从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file excel文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Map&lt;Integer, String&gt;&gt; <span class="title function_">syncRead</span><span class="params">(File file)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(file).sheet().doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步无模型读（自定义读取sheetX，从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath excel文件的绝对路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo  sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Map&lt;Integer, String&gt;&gt; <span class="title function_">syncRead</span><span class="params">(String filePath, Integer sheetNo)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(filePath).sheet(sheetNo).doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步无模型读（自定义读取sheetX，从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream excel文件的输入流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo  sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Map&lt;Integer, String&gt;&gt; <span class="title function_">syncRead</span><span class="params">(InputStream inputStream, Integer sheetNo)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(inputStream).sheet(sheetNo).doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步无模型读（自定义读取sheetX，从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file excel文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo  sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Map&lt;Integer, String&gt;&gt; <span class="title function_">syncRead</span><span class="params">(File file, Integer sheetNo)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(file).sheet(sheetNo).doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步无模型读（指定sheet和表头占的行数）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo    sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headRowNum 表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Map&lt;Integer, String&gt;&gt; <span class="title function_">syncRead</span><span class="params">(String filePath, Integer sheetNo, Integer headRowNum)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(filePath).sheet(sheetNo).headRowNumber(headRowNum).doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步无模型读（指定sheet和表头占的行数）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo     sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headRowNum  表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Map&lt;Integer, String&gt;&gt; <span class="title function_">syncRead</span><span class="params">(InputStream inputStream, Integer sheetNo, Integer headRowNum)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(inputStream).sheet(sheetNo).headRowNumber(headRowNum).doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步无模型读（指定sheet和表头占的行数）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo    sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headRowNum 表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Map&lt;Integer, String&gt;&gt; <span class="title function_">syncRead</span><span class="params">(File file, Integer sheetNo, Integer headRowNum)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(file).sheet(sheetNo).headRowNumber(headRowNum).doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步按模型读（默认读取sheet0,从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz    模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">syncReadModel</span><span class="params">(String filePath, Class clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(filePath).sheet().head(clazz).doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步按模型读（默认读取sheet0,从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz    模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">syncReadModel</span><span class="params">(InputStream inputStream, Class clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(inputStream).sheet().head(clazz).doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步按模型读（默认读取sheet0,从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz    模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">syncReadModel</span><span class="params">(File file, Class clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(file).sheet().head(clazz).doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步按模型读（默认表头占一行，从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz    模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo  sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">syncReadModel</span><span class="params">(String filePath, Class clazz, Integer sheetNo)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(filePath).sheet(sheetNo).head(clazz).doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步按模型读（默认表头占一行，从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz    模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo  sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">syncReadModel</span><span class="params">(InputStream inputStream, Class clazz, Integer sheetNo)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(inputStream).sheet(sheetNo).head(clazz).doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步按模型读（默认表头占一行，从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz    模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo  sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">syncReadModel</span><span class="params">(File file, Class clazz, Integer sheetNo)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(file).sheet(sheetNo).head(clazz).doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步按模型读（指定sheet和表头占的行数）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz      模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo    sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headRowNum 表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">syncReadModel</span><span class="params">(String filePath, Class clazz, Integer sheetNo, Integer headRowNum)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(filePath).sheet(sheetNo).headRowNumber(headRowNum).head(clazz).doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步按模型读（指定sheet和表头占的行数）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz       模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo     sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headRowNum  表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">syncReadModel</span><span class="params">(InputStream inputStream, Class clazz, Integer sheetNo, Integer headRowNum)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(inputStream).sheet(sheetNo).headRowNumber(headRowNum).head(clazz).doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步按模型读（指定sheet和表头占的行数）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz      模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo    sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headRowNum 表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">syncReadModel</span><span class="params">(File file, Class clazz, Integer sheetNo, Integer headRowNum)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EasyExcelFactory.read(file).sheet(sheetNo).headRowNumber(headRowNum).head(clazz).doReadSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步无模型读（默认读取sheet0,从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath      表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncRead</span><span class="params">(String filePath, AnalysisEventListener&lt;T&gt; excelListener)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(filePath, excelListener).sheet().doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步无模型读（默认读取sheet0,从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream      表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncRead</span><span class="params">(InputStream inputStream, AnalysisEventListener&lt;T&gt; excelListener)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(inputStream, excelListener).sheet().doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步无模型读（默认读取sheet0,从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file      表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncRead</span><span class="params">(File file, AnalysisEventListener&lt;T&gt; excelListener)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(file, excelListener).sheet().doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步无模型读（默认表头占一行，从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath      表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo       sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncRead</span><span class="params">(String filePath, AnalysisEventListener&lt;T&gt; excelListener, Integer sheetNo)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(filePath, excelListener).sheet(sheetNo).doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步无模型读（默认表头占一行，从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream      表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo       sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncRead</span><span class="params">(InputStream inputStream, AnalysisEventListener&lt;T&gt; excelListener, Integer sheetNo)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(inputStream, excelListener).sheet(sheetNo).doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步无模型读（默认表头占一行，从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file      表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo       sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncRead</span><span class="params">(File file, AnalysisEventListener&lt;T&gt; excelListener, Integer sheetNo)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(file, excelListener).sheet(sheetNo).doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步无模型读（指定sheet和表头占的行数）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo       sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headRowNum    表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncRead</span><span class="params">(String filePath, AnalysisEventListener&lt;T&gt; excelListener, Integer sheetNo, Integer headRowNum)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(filePath, excelListener).sheet(sheetNo).headRowNumber(headRowNum).doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步无模型读（指定sheet和表头占的行数）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo       sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headRowNum    表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncRead</span><span class="params">(InputStream inputStream, AnalysisEventListener&lt;T&gt; excelListener, Integer sheetNo, Integer headRowNum)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(inputStream, excelListener).sheet(sheetNo).headRowNumber(headRowNum).doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步无模型读（指定sheet和表头占的行数）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo       sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headRowNum    表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncRead</span><span class="params">(File file, AnalysisEventListener&lt;T&gt; excelListener, Integer sheetNo, Integer headRowNum)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(file, excelListener).sheet(sheetNo).headRowNumber(headRowNum).doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步按模型读取（默认读取sheet0,从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz         模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncReadModel</span><span class="params">(String filePath, AnalysisEventListener&lt;T&gt; excelListener, Class clazz)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(filePath, clazz, excelListener).sheet().doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步按模型读取（默认读取sheet0,从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz         模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncReadModel</span><span class="params">(InputStream inputStream, AnalysisEventListener&lt;T&gt; excelListener, Class clazz)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(inputStream, clazz, excelListener).sheet().doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步按模型读取（默认读取sheet0,从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz         模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncReadModel</span><span class="params">(File file, AnalysisEventListener&lt;T&gt; excelListener, Class clazz)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(file, clazz, excelListener).sheet().doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步按模型读取（默认表头占一行，从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz         模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo       sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncReadModel</span><span class="params">(String filePath, AnalysisEventListener&lt;T&gt; excelListener, Class clazz, Integer sheetNo)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(filePath, clazz, excelListener).sheet(sheetNo).doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步按模型读取（默认表头占一行，从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz         模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo       sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncReadModel</span><span class="params">(InputStream inputStream, AnalysisEventListener&lt;T&gt; excelListener, Class clazz, Integer sheetNo)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(inputStream, clazz, excelListener).sheet(sheetNo).doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步按模型读取（默认表头占一行，从第2行开始读）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz         模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo       sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncReadModel</span><span class="params">(File file, AnalysisEventListener&lt;T&gt; excelListener, Class clazz, Integer sheetNo)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(file, clazz, excelListener).sheet(sheetNo).doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步按模型读取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz         模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo       sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headRowNum    表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncReadModel</span><span class="params">(String filePath, AnalysisEventListener&lt;T&gt; excelListener, Class clazz, Integer sheetNo, Integer headRowNum)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(filePath, clazz, excelListener).sheet(sheetNo).headRowNumber(headRowNum).doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步按模型读取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz         模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo       sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headRowNum    表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncReadModel</span><span class="params">(InputStream inputStream, AnalysisEventListener&lt;T&gt; excelListener, Class clazz, Integer sheetNo, Integer headRowNum)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(inputStream, clazz, excelListener).sheet(sheetNo).headRowNumber(headRowNum).doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步按模型读取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelListener 监听器，在监听器中可以处理行数据LinkedHashMap，表头数据，异常处理等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz         模型的类类型（excel数据会按该类型转换成对象）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo       sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headRowNum    表头占的行数，从0开始（如果要连表头一起读出来则传0）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">asyncReadModel</span><span class="params">(File file, AnalysisEventListener&lt;T&gt; excelListener, Class clazz, Integer sheetNo, Integer headRowNum)</span> &#123;</span><br><span class="line">        EasyExcelFactory.read(file, clazz, excelListener).sheet(sheetNo).headRowNumber(headRowNum).doRead();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无模板写文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head     表头数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data     表内容数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String filePath, List&lt;List&lt;String&gt;&gt; head, List&lt;List&lt;Object&gt;&gt; data)</span> &#123;</span><br><span class="line">        EasyExcel.write(filePath).head(head).sheet().doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无模板写文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head     表头数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data     表内容数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(OutputStream outputStream, List&lt;List&lt;String&gt;&gt; head, List&lt;List&lt;Object&gt;&gt; data)</span> &#123;</span><br><span class="line">        EasyExcel.write(outputStream).head(head).sheet().doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无模板写文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head      表头数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data      表内容数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo   sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String filePath, List&lt;List&lt;String&gt;&gt; head, List&lt;List&lt;Object&gt;&gt; data, Integer sheetNo)</span> &#123;</span><br><span class="line">        EasyExcel.write(filePath).head(head).sheet(sheetNo).doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无模板写文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head      表头数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data      表内容数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo   sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(OutputStream outputStream, List&lt;List&lt;String&gt;&gt; head, List&lt;List&lt;Object&gt;&gt; data, Integer sheetNo)</span> &#123;</span><br><span class="line">        EasyExcel.write(outputStream).head(head).sheet(sheetNo).doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无模板写文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head      表头数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data      表内容数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo   sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetName sheet名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String filePath, List&lt;List&lt;String&gt;&gt; head, List&lt;List&lt;Object&gt;&gt; data, Integer sheetNo, String sheetName)</span> &#123;</span><br><span class="line">        EasyExcel.write(filePath).head(head).sheet(sheetNo, sheetName).doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无模板写文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head      表头数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data      表内容数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo   sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetName sheet名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(OutputStream outputStream, List&lt;List&lt;String&gt;&gt; head, List&lt;List&lt;Object&gt;&gt; data, Integer sheetNo, String sheetName)</span> &#123;</span><br><span class="line">        EasyExcel.write(outputStream).head(head).sheet(sheetNo, sheetName).doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据excel模板文件写入文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> templateFileName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeTemplate</span><span class="params">(String filePath, String templateFileName, List data)</span> &#123;</span><br><span class="line">        EasyExcel.write(filePath).withTemplate(templateFileName).sheet().doFill(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据excel模板文件写入文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> templateFileName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeTemplate</span><span class="params">(OutputStream outputStream, String templateFileName, List data)</span> &#123;</span><br><span class="line">        EasyExcel.write(outputStream).withTemplate(templateFileName).sheet().doFill(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据excel模板文件写入文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> templateFileName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headClazz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeTemplate</span><span class="params">(String filePath, String templateFileName, Class headClazz, List data)</span> &#123;</span><br><span class="line">        EasyExcel.write(filePath, headClazz).withTemplate(templateFileName).sheet().doFill(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据excel模板文件写入文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> templateFileName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headClazz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeTemplate</span><span class="params">(OutputStream outputStream, String templateFileName, Class headClazz, List data)</span> &#123;</span><br><span class="line">        EasyExcel.write(outputStream, headClazz).withTemplate(templateFileName).sheet().doFill(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按模板写文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headClazz 表头模板</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data      数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String filePath, Class headClazz, List data)</span> &#123;</span><br><span class="line">        EasyExcel.write(filePath, headClazz).sheet().doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按模板写文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headClazz 表头模板</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data      数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(OutputStream outputStream, Class headClazz, List data)</span> &#123;</span><br><span class="line">        EasyExcel.write(outputStream, headClazz).sheet().doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按模板写文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headClazz 表头模板</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data      数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo   sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String filePath, Class headClazz, List data, Integer sheetNo)</span> &#123;</span><br><span class="line">        EasyExcel.write(filePath, headClazz).sheet(sheetNo).doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按模板写文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headClazz 表头模板</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data      数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo   sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(OutputStream outputStream, Class headClazz, List data, Integer sheetNo)</span> &#123;</span><br><span class="line">        EasyExcel.write(outputStream, headClazz).sheet(sheetNo).doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按模板写文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headClazz 表头模板</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data      数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo   sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetName sheet名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String filePath, Class headClazz, List data, Integer sheetNo, String sheetName)</span> &#123;</span><br><span class="line">        EasyExcel.write(filePath, headClazz).sheet(sheetNo, sheetName).doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按模板写文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headClazz 表头模板</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data      数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo   sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetName sheet名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(OutputStream outputStream, Class headClazz, List data, Integer sheetNo, String sheetName)</span> &#123;</span><br><span class="line">        EasyExcel.write(outputStream, headClazz).sheet(sheetNo, sheetName).doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按模板写文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headClazz    表头模板</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data         数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> writeHandler 自定义的处理器，比如设置table样式，设置超链接、单元格下拉框等等功能都可以通过这个实现（需要注册多个则自己通过链式去调用）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo      sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetName    sheet名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String filePath, Class headClazz, List data, WriteHandler writeHandler, Integer sheetNo, String sheetName)</span> &#123;</span><br><span class="line">        EasyExcel.write(filePath, headClazz).registerWriteHandler(writeHandler).sheet(sheetNo, sheetName).doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按模板写文件（包含某些字段）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headClazz   表头模板</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data        数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> includeCols 包含字段集合，根据字段名称显示</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo     sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetName   sheet名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeInclude</span><span class="params">(String filePath, Class headClazz, List data, Set&lt;String&gt; includeCols, Integer sheetNo, String sheetName)</span> &#123;</span><br><span class="line">        EasyExcel.write(filePath, headClazz).includeColumnFieldNames(includeCols).sheet(sheetNo, sheetName).doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按模板写文件（排除某些字段）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headClazz   表头模板</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data        数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excludeCols 过滤排除的字段，根据字段名称过滤</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetNo     sheet页号，从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetName   sheet名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeExclude</span><span class="params">(String filePath, Class headClazz, List data, Set&lt;String&gt; excludeCols, Integer sheetNo, String sheetName)</span> &#123;</span><br><span class="line">        EasyExcel.write(filePath, headClazz).excludeColumnFieldNames(excludeCols).sheet(sheetNo, sheetName).doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 多个sheet页的数据链式写入</span></span><br><span class="line"><span class="comment">     * ExcelUtil.writeWithSheets(outputStream)</span></span><br><span class="line"><span class="comment">     * .writeModel(ExcelModel.class, excelModelList, &quot;sheetName1&quot;)</span></span><br><span class="line"><span class="comment">     * .write(headData, data,&quot;sheetName2&quot;)</span></span><br><span class="line"><span class="comment">     * .finish();</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputStream</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> EasyExcelWriterFactory <span class="title function_">writeWithSheets</span><span class="params">(OutputStream outputStream)</span> &#123;</span><br><span class="line">        <span class="type">EasyExcelWriterFactory</span> <span class="variable">excelWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EasyExcelWriterFactory</span>(outputStream);</span><br><span class="line">        <span class="keyword">return</span> excelWriter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 多个sheet页的数据链式写入</span></span><br><span class="line"><span class="comment">     * ExcelUtil.writeWithSheets(file)</span></span><br><span class="line"><span class="comment">     * .writeModel(ExcelModel.class, excelModelList, &quot;sheetName1&quot;)</span></span><br><span class="line"><span class="comment">     * .write(headData, data,&quot;sheetName2&quot;)</span></span><br><span class="line"><span class="comment">     * .finish();</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> EasyExcelWriterFactory <span class="title function_">writeWithSheets</span><span class="params">(File file)</span> &#123;</span><br><span class="line">        <span class="type">EasyExcelWriterFactory</span> <span class="variable">excelWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EasyExcelWriterFactory</span>(file);</span><br><span class="line">        <span class="keyword">return</span> excelWriter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 多个sheet页的数据链式写入</span></span><br><span class="line"><span class="comment">     * ExcelUtil.writeWithSheets(filePath)</span></span><br><span class="line"><span class="comment">     * .writeModel(ExcelModel.class, excelModelList, &quot;sheetName1&quot;)</span></span><br><span class="line"><span class="comment">     * .write(headData, data,&quot;sheetName2&quot;)</span></span><br><span class="line"><span class="comment">     * .finish();</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> EasyExcelWriterFactory <span class="title function_">writeWithSheets</span><span class="params">(String filePath)</span> &#123;</span><br><span class="line">        <span class="type">EasyExcelWriterFactory</span> <span class="variable">excelWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EasyExcelWriterFactory</span>(filePath);</span><br><span class="line">        <span class="keyword">return</span> excelWriter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 多个sheet页的数据链式写入（失败了会返回一个有部分数据的Excel）</span></span><br><span class="line"><span class="comment">     * ExcelUtil.writeWithSheets(response, exportFileName)</span></span><br><span class="line"><span class="comment">     * .writeModel(ExcelModel.class, excelModelList, &quot;sheetName1&quot;)</span></span><br><span class="line"><span class="comment">     * .write(headData, data,&quot;sheetName2&quot;)</span></span><br><span class="line"><span class="comment">     * .finish();</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exportFileName 导出的文件名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> EasyExcelWriterFactory <span class="title function_">writeWithSheetsWeb</span><span class="params">(HttpServletResponse response, String exportFileName)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(exportFileName, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xlsx&quot;</span>);</span><br><span class="line">        <span class="type">EasyExcelWriterFactory</span> <span class="variable">excelWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EasyExcelWriterFactory</span>(response.getOutputStream());</span><br><span class="line">        <span class="keyword">return</span> excelWriter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="EasyExcelWriterFactory">EasyExcelWriterFactory</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EasyExcelWriterFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">sheetNo</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">ExcelWriter</span> <span class="variable">excelWriter</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EasyExcelWriterFactory</span><span class="params">(OutputStream outputStream)</span> &#123;</span><br><span class="line">        excelWriter = EasyExcel.write(outputStream).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EasyExcelWriterFactory</span><span class="params">(File file)</span> &#123;</span><br><span class="line">        excelWriter = EasyExcel.write(file).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EasyExcelWriterFactory</span><span class="params">(String filePath)</span> &#123;</span><br><span class="line">        excelWriter = EasyExcel.write(filePath).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链式模板表头写入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headClazz 表头格式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data      数据 List&lt;ExcelModel&gt; 或者List&lt;List&lt;Object&gt;&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> EasyExcelWriterFactory <span class="title function_">writeModel</span><span class="params">(Class headClazz, List data)</span> &#123;</span><br><span class="line">        excelWriter.write(data, EasyExcel.writerSheet(<span class="built_in">this</span>.sheetNo++).head(headClazz).build());</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链式模板表头写入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headClazz 表头格式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data      数据 List&lt;ExcelModel&gt; 或者List&lt;List&lt;Object&gt;&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> EasyExcelWriterFactory <span class="title function_">writeModel</span><span class="params">(Class headClazz, List data, String sheetName)</span> &#123;</span><br><span class="line">        excelWriter.write(data, EasyExcel.writerSheet(<span class="built_in">this</span>.sheetNo++, sheetName).head(headClazz).build());</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链式自定义表头写入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data      数据 List&lt;ExcelModel&gt; 或者List&lt;List&lt;Object&gt;&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> EasyExcelWriterFactory <span class="title function_">write</span><span class="params">(List&lt;List&lt;String&gt;&gt; head, List data, String sheetName)</span> &#123;</span><br><span class="line">        excelWriter.write(data, EasyExcel.writerSheet(<span class="built_in">this</span>.sheetNo++, sheetName).head(head).build());</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用此类结束后，一定要关闭流</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">finish</span><span class="params">()</span> &#123;</span><br><span class="line">        excelWriter.finish();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用案例">使用案例</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download1</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUserId(<span class="number">123</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        EasyExcelUtils.write(response.getOutputStream(), User.class, Arrays.asList(user));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/download2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download2</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUserId(<span class="number">123</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        EasyExcelUtils.write(response.getOutputStream(), User.class, Arrays.asList(user),<span class="number">2</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/download3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download3</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUserId(<span class="number">123</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;as&quot;</span>);</span><br><span class="line">        user.setPhone(<span class="string">&quot;15213&quot;</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;5456&quot;</span>);</span><br><span class="line">        user.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        EasyExcelUtils.writeWithSheets(response.getOutputStream())</span><br><span class="line">                .writeModel(User.class, Arrays.asList(user))</span><br><span class="line">                .writeModel(User.class, Arrays.asList(user))</span><br><span class="line">                .finish();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>EasyExcel</tag>
      </tags>
  </entry>
  <entry>
    <title>Quartz（1-Job）</title>
    <url>/blog/2024/11/12/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/Quartz/Quartz%EF%BC%881-Job%EF%BC%89/</url>
    <content><![CDATA[<h2 id="依赖">依赖</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.quartz-scheduler<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="基本使用">基本使用</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloJob</span> <span class="keyword">implements</span> <span class="title class_">Job</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line">        <span class="comment">//实际触发时间。例如，计划时间可能是 10:00:00，但如果调度程序太忙，实际触发时间可能是 10:00:03。</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">fireTime</span> <span class="operator">=</span> jobExecutionContext.getFireTime();</span><br><span class="line">        System.out.println(<span class="string">&quot;fireTime:&quot;</span> + fireTime);</span><br><span class="line">        <span class="comment">//上次触发时间</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">previousFireTime</span> <span class="operator">=</span> jobExecutionContext.getPreviousFireTime();</span><br><span class="line">        System.out.println(<span class="string">&quot;previousFireTime:&quot;</span> + previousFireTime);</span><br><span class="line">        <span class="comment">//下次触发时间</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">nextFireTime</span> <span class="operator">=</span> jobExecutionContext.getNextFireTime();</span><br><span class="line">        System.out.println(<span class="string">&quot;nextFireTime:&quot;</span> + nextFireTime);</span><br><span class="line">        <span class="comment">//触发器触发的预定时间。</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">scheduledFireTime</span> <span class="operator">=</span> jobExecutionContext.getScheduledFireTime();</span><br><span class="line">        System.out.println(<span class="string">&quot;scheduledFireTime:&quot;</span> + scheduledFireTime);</span><br><span class="line"></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> jobExecutionContext.getJobDetail();</span><br><span class="line">        System.out.println(<span class="string">&quot;jobDataMap:&quot;</span> + JSON.toJSONString(jobDetail.getJobDataMap()));</span><br><span class="line">        System.out.println(<span class="string">&quot;jobKey:&quot;</span> + JSON.toJSONString(jobDetail.getKey()));</span><br><span class="line">        System.out.println(<span class="string">&quot;jobDescription:&quot;</span> + jobDetail.getDescription());</span><br><span class="line">        System.out.println(<span class="string">&quot;==================================&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SchedulerException &#123;</span><br><span class="line">        <span class="comment">//1.创建一个jobDetail的实例，将该实例与HelloJob Class绑定</span></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder</span><br><span class="line">                .newJob(HelloJob.class) <span class="comment">//定义Job类为HelloJob类，真正的执行逻辑所在</span></span><br><span class="line">                .withIdentity(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;group1&quot;</span>)</span><br><span class="line">                .withDescription(<span class="string">&quot;Quartz测试&quot;</span>)</span><br><span class="line">                .usingJobData(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;小米&quot;</span>)</span><br><span class="line">                .usingJobData(<span class="string">&quot;age&quot;</span>, <span class="number">15</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建一个Trigger触发器的实例，定义该job立即执行，并且每2秒执行一次，一直执行</span></span><br><span class="line">        <span class="type">SimpleTrigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .withIdentity(<span class="string">&quot;myTrigger&quot;</span>, <span class="string">&quot;group1&quot;</span>)</span><br><span class="line">                .startNow() <span class="comment">//立即生效</span></span><br><span class="line">                .withSchedule(SimpleScheduleBuilder.simpleSchedule()</span><br><span class="line">                        .withIntervalInSeconds(<span class="number">2</span>) <span class="comment">//每2秒执行一次</span></span><br><span class="line">                        .repeatForever()) <span class="comment">//一直执行</span></span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//3.创建schedule实例</span></span><br><span class="line">        <span class="type">StdSchedulerFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StdSchedulerFactory</span>();</span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> factory.getScheduler();</span><br><span class="line">        scheduler.start(); <span class="comment">//启动</span></span><br><span class="line">        scheduler.scheduleJob(jobDetail, trigger); <span class="comment">// jobDetail和trigger加入调度</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="JobExecutionContext">JobExecutionContext</h2>
<p>当Scheduler调用一个Job就会将JobExecutionContext传递给Job的execute()方法，Job能通过JobExecutionContext对象访问到Quartz运行时候的环境和Job本身的明细数据</p>
<h2 id="JobDetail、JobBuilder">JobDetail、JobBuilder</h2>
<h3 id="方法">方法</h3>
<h4 id="storeDurably">storeDurably</h4>
<p>JobDetails信息持久化到数据库的时候有一个属性storeDurably，如果设置为true则无论与其关联的Trigger是否存在其都会一直存在，否则只要相关联的trigger删除掉了其会自动删除掉</p>
<h4 id="requestRecovery">requestRecovery</h4>
<p>请求恢复，也就是说当应用发生故障的时候，是否重新执行默认是false。如果一个job是可恢复的，并且在其执行的时候，scheduler发生硬关闭（hard shutdown)（比如运行的进程崩溃了，或者关机了），则当scheduler重新启动的时候，该job会被重新执行。此时，该job的JobExecutionContext.isRecovering() 返回true</p>
<h4 id="usingJobData、setJobData">usingJobData、setJobData</h4>
<p>添加Job数据，每个JobDetail内都有一个JobDataMap，包含了关联到这个Job的数据，在Job类中，可以通过context取出该数据，进行业务流程处理。</p>
<h4 id="withIdentity">withIdentity</h4>
<p>给JobDetail起一个Id，方便后面检索</p>
<h4 id="withDescription">withDescription</h4>
<p>用来对job进行描述，并没有什么实际作用</p>
<h3 id="JobKey">JobKey</h3>
<p>JobKey是表明Job身份的一个对象，里面封装了Job的name和group，TriggerKey同理。当不指定group时，Quartz会用默认的组名DEFAULT</p>
<h3 id="JobDataMap">JobDataMap</h3>
<p>JobDetail是任务的定义，而Job是任务的执行逻辑，每一个JobDetail都会有一个JobDataMap，JobDataMap本质就是一个Map的扩展类，可以存储一些任务信息</p>
<h4 id="JobDataMap获取任务信息">JobDataMap获取任务信息</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloJob</span> <span class="keyword">implements</span> <span class="title class_">Job</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> jobExecutionContext.getJobDetail();</span><br><span class="line">        <span class="type">JobDataMap</span> <span class="variable">jobDataMap</span> <span class="operator">=</span> jobDetail.getJobDataMap();</span><br><span class="line">        System.out.println(<span class="string">&quot;name:&quot;</span> + jobDataMap.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;age:&quot;</span> + jobDataMap.getInt(<span class="string">&quot;age&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;jobKey:&quot;</span> + JSON.toJSONString(jobDetail.getKey()));</span><br><span class="line">        System.out.println(<span class="string">&quot;jobDescription:&quot;</span> + jobDetail.getDescription());</span><br><span class="line">        System.out.println(<span class="string">&quot;==================================&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SchedulerException &#123;</span><br><span class="line">        <span class="comment">//1.创建一个jobDetail的实例，将该实例与HelloJob Class绑定</span></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder</span><br><span class="line">                .newJob(HelloJob.class) <span class="comment">//定义Job类为HelloJob类，真正的执行逻辑所在</span></span><br><span class="line">                .withIdentity(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;group1&quot;</span>)</span><br><span class="line">                .withDescription(<span class="string">&quot;Quartz测试&quot;</span>)</span><br><span class="line">                .usingJobData(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;小米&quot;</span>)</span><br><span class="line">                .usingJobData(<span class="string">&quot;age&quot;</span>, <span class="number">15</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建一个Trigger触发器的实例，定义该job立即执行，并且每2秒执行一次，一直执行</span></span><br><span class="line">        <span class="type">SimpleTrigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .withIdentity(<span class="string">&quot;myTrigger&quot;</span>, <span class="string">&quot;group1&quot;</span>)</span><br><span class="line">                .startNow() <span class="comment">//立即生效</span></span><br><span class="line">                .withSchedule(SimpleScheduleBuilder.simpleSchedule()</span><br><span class="line">                        .withIntervalInSeconds(<span class="number">2</span>) <span class="comment">//每2秒执行一次</span></span><br><span class="line">                        .repeatForever()) <span class="comment">//一直执行</span></span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//3.创建schedule实例</span></span><br><span class="line">        <span class="type">StdSchedulerFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StdSchedulerFactory</span>();</span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> factory.getScheduler();</span><br><span class="line">        scheduler.start(); <span class="comment">//启动</span></span><br><span class="line">        scheduler.scheduleJob(jobDetail, trigger); <span class="comment">// jobDetail和trigger加入调度</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="实体类获取任务信息">实体类获取任务信息</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloJob3</span> <span class="keyword">implements</span> <span class="title class_">Job</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> Float floatJobValue;</span><br><span class="line">    <span class="keyword">private</span> Double doubleTriggerValue;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Float <span class="title function_">getFloatJobValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> floatJobValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFloatJobValue</span><span class="params">(Float floatJobValue)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.floatJobValue = floatJobValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getDoubleTriggerValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> doubleTriggerValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDoubleTriggerValue</span><span class="params">(Double doubleTriggerValue)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.doubleTriggerValue = doubleTriggerValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line">        <span class="comment">//打印当前的执行时间 例如 2017-11-22 00:00:00</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;现在的时间是：&quot;</span> + sf.format(date));</span><br><span class="line">        System.out.println(<span class="string">&quot;jobDataMap定义的message的值 : &quot;</span> + message);  <span class="comment">//打印jobDataMap定义的message的值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;jobDataMap定义的floatJobValue的值 : &quot;</span> + floatJobValue);   <span class="comment">//jobDataMap定义的floatJobValue的值</span></span><br><span class="line">		System.out.println(<span class="string">&quot;==================================&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SchedulerException &#123;</span><br><span class="line">        <span class="comment">//1.创建一个jobDetail的实例，将该实例与HelloJob Class绑定</span></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder</span><br><span class="line">                .newJob(HelloJob3.class) <span class="comment">//定义Job类为HelloJob类，真正的执行逻辑所在</span></span><br><span class="line">                .withIdentity(<span class="string">&quot;myJob&quot;</span>, <span class="string">&quot;group1&quot;</span>) <span class="comment">//定义name 和 group</span></span><br><span class="line">                .usingJobData(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;hello myJob1&quot;</span>) <span class="comment">//加入属性到jobDataMap</span></span><br><span class="line">                .usingJobData(<span class="string">&quot;FloatJobValue&quot;</span>,<span class="number">8.88f</span>) <span class="comment">//加入属性到jobDataMap</span></span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建一个Trigger触发器的实例，定义该job立即执行，并且每2秒执行一次，一直执行</span></span><br><span class="line">        <span class="type">SimpleTrigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .withIdentity(<span class="string">&quot;myTrigger&quot;</span>, <span class="string">&quot;group1&quot;</span>)</span><br><span class="line">                .startNow() <span class="comment">//立即生效</span></span><br><span class="line">                .withSchedule(SimpleScheduleBuilder.simpleSchedule()</span><br><span class="line">                        .withIntervalInSeconds(<span class="number">2</span>) <span class="comment">//每2秒执行一次</span></span><br><span class="line">                        .repeatForever()) <span class="comment">//一直执行</span></span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//3.创建schedule实例</span></span><br><span class="line">        <span class="type">StdSchedulerFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StdSchedulerFactory</span>();</span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> factory.getScheduler();</span><br><span class="line">        scheduler.start(); <span class="comment">//启动</span></span><br><span class="line">        scheduler.scheduleJob(jobDetail,trigger); <span class="comment">// jobDetail和trigger加入调度</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="注解">注解</h2>
<h3 id="PersistJobDataAfterExecution">@PersistJobDataAfterExecution</h3>
<p>有状态的Job可以理解为多次Job调用期间可以持有一些状态信息，这些状态信息存储在JobDataMap中，而默认的无状态Job每次调用时都会创建一个新的JobDataMap</p>
<p>注意：没有添加@PersistJobDataAfterExecution注解，每次调用时都会创建一个新的JobDataMap，不会累加；添加该注解后，多次调用期间可以持有一些状态信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PersistJobDataAfterExecution</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloJob4</span> <span class="keyword">implements</span> <span class="title class_">Job</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer count;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCount</span><span class="params">(Integer count)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line">        System.out.println(++count);</span><br><span class="line">        jobExecutionContext.getJobDetail().getJobDataMap().put(<span class="string">&quot;count&quot;</span>, count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SchedulerException &#123;</span><br><span class="line">        <span class="comment">//1.创建一个jobDetail的实例，将该实例与HelloJob Class绑定</span></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder</span><br><span class="line">                .newJob(HelloJob4.class) <span class="comment">//定义Job类为HelloJob类，真正的执行逻辑所在</span></span><br><span class="line">                .withIdentity(<span class="string">&quot;myJob&quot;</span>, <span class="string">&quot;group1&quot;</span>) <span class="comment">//定义name 和 group</span></span><br><span class="line">                .usingJobData(<span class="string">&quot;count&quot;</span>,<span class="number">0</span>) <span class="comment">//加入属性到jobDataMap</span></span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建一个Trigger触发器的实例，定义该job立即执行，并且每2秒执行一次，一直执行</span></span><br><span class="line">        <span class="type">SimpleTrigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .withIdentity(<span class="string">&quot;myTrigger&quot;</span>, <span class="string">&quot;group1&quot;</span>)</span><br><span class="line">                .startNow() <span class="comment">//立即生效</span></span><br><span class="line">                .withSchedule(SimpleScheduleBuilder.simpleSchedule()</span><br><span class="line">                        .withIntervalInSeconds(<span class="number">2</span>) <span class="comment">//每2秒执行一次</span></span><br><span class="line">                        .repeatForever()) <span class="comment">//一直执行</span></span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//3.创建schedule实例</span></span><br><span class="line">        <span class="type">StdSchedulerFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StdSchedulerFactory</span>();</span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> factory.getScheduler();</span><br><span class="line">        scheduler.start(); <span class="comment">//启动</span></span><br><span class="line">        scheduler.scheduleJob(jobDetail,trigger); <span class="comment">// jobDetail和trigger加入调度</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="DisallowConcurrentExecution">@DisallowConcurrentExecution</h3>
<p>禁止并发执行多个相同定义的JobDetail，这个注解是加在Job类上的，但意思并不是不能同时执行多个Job，而是不能并发执行同一个Job</p>
<p>例如：同一个Job实现类DemoJob的两个JobDetail实例A和B，设置A的定时执行频率为每1分钟执行一次，A的实际运行耗时为3分钟，B的定时执行频率也是每1分钟执行一次，B的实际运行耗时为30秒。假如在07:00分00秒时A和B同时第一次运行，则到07:00分30秒时B运行结束，此时A还在运行中，到07:01分00秒时A和B又该执行了，但是由于注解@DisallowConcurrentExecution的缘故，此时A不会再次运行，A只能在其上一次运行结束后才能再次被调用执行。但是B会正常运行（B不受A的影响，注解@DisallowConcurrentExecution是作用于JobDetail实例而不是Job实现类）</p>
<p>注意：如果你使用了@PersistJobDataAfterExecution注解，则强烈建议你同时使用@DisallowConcurrentExecution注解，因为当同一个job（JobDetail）的两个实例被并发执行时，由于竞争，JobDataMap中存储的数据很可能是不确定的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DisallowConcurrentExecution</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloJob5</span> <span class="keyword">implements</span> <span class="title class_">Job</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;现在的时间是：&quot;</span> + sf.format(date));</span><br><span class="line">        <span class="type">JobKey</span> <span class="variable">key</span> <span class="operator">=</span> jobExecutionContext.getJobDetail().getKey();</span><br><span class="line">        <span class="comment">//打印jobDetail 的name</span></span><br><span class="line">        System.out.println(<span class="string">&quot;jobDetail 的name ： &quot;</span> + key.getName());</span><br><span class="line">        <span class="comment">//打印jobDetail 的group</span></span><br><span class="line">        System.out.println(<span class="string">&quot;jobDetail 的group ： &quot;</span> + key.getGroup());</span><br><span class="line">        System.out.println(<span class="string">&quot;==============================&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SchedulerException &#123;</span><br><span class="line">        <span class="comment">//1.创建一个jobDetail的实例，将该实例与HelloJob Class绑定</span></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail1</span> <span class="operator">=</span> JobBuilder</span><br><span class="line">                .newJob(HelloJob5.class) <span class="comment">//定义Job类为HelloJob类，真正的执行逻辑所在</span></span><br><span class="line">                .withIdentity(<span class="string">&quot;group1&quot;</span>, <span class="string">&quot;group1&quot;</span>) <span class="comment">//定义name 和 group</span></span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建一个Trigger触发器的实例，定义该job立即执行，并且每2秒执行一次，一直执行</span></span><br><span class="line">        <span class="type">SimpleTrigger</span> <span class="variable">trigger1</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .withIdentity(<span class="string">&quot;myTrigger1&quot;</span>, <span class="string">&quot;group1&quot;</span>)</span><br><span class="line">                .startNow() <span class="comment">//立即生效</span></span><br><span class="line">                .withSchedule(SimpleScheduleBuilder.simpleSchedule()</span><br><span class="line">                        .withIntervalInSeconds(<span class="number">2</span>) <span class="comment">//每2秒执行一次</span></span><br><span class="line">                        .repeatForever()) <span class="comment">//一直执行</span></span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//3.创建schedule实例</span></span><br><span class="line">        <span class="type">StdSchedulerFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StdSchedulerFactory</span>();</span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> factory.getScheduler();</span><br><span class="line">        scheduler.start(); <span class="comment">//启动</span></span><br><span class="line">        scheduler.scheduleJob(jobDetail1, trigger1); <span class="comment">// jobDetail和trigger加入调度</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 运行结果：</span></span><br><span class="line">现在的时间是：<span class="number">2024</span>-<span class="number">11</span>-<span class="number">12</span> <span class="number">00</span>:<span class="number">59</span>:<span class="number">49</span></span><br><span class="line">jobDetail 的name ： group1</span><br><span class="line">jobDetail 的group ： group1</span><br><span class="line">==============================</span><br><span class="line">现在的时间是：<span class="number">2024</span>-<span class="number">11</span>-<span class="number">12</span> <span class="number">00</span>:<span class="number">59</span>:<span class="number">52</span></span><br><span class="line">jobDetail 的name ： group1</span><br><span class="line">jobDetail 的group ： group1</span><br><span class="line">==============================</span><br><span class="line">现在的时间是：<span class="number">2024</span>-<span class="number">11</span>-<span class="number">12</span> <span class="number">00</span>:<span class="number">59</span>:<span class="number">55</span></span><br><span class="line">jobDetail 的name ： group1</span><br><span class="line">jobDetail 的group ： group1</span><br><span class="line">==============================</span><br></pre></td></tr></table></figure>
<p><strong>注释@DisallowConcurrentExecution后</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 运行结果：</span></span><br><span class="line">现在的时间是：<span class="number">2024</span>-<span class="number">11</span>-<span class="number">12</span> <span class="number">01</span>:<span class="number">00</span>:<span class="number">48</span></span><br><span class="line">jobDetail 的name ： group1</span><br><span class="line">jobDetail 的group ： group1</span><br><span class="line">==============================</span><br><span class="line">现在的时间是：<span class="number">2024</span>-<span class="number">11</span>-<span class="number">12</span> <span class="number">01</span>:<span class="number">00</span>:<span class="number">50</span></span><br><span class="line">jobDetail 的name ： group1</span><br><span class="line">jobDetail 的group ： group1</span><br><span class="line">==============================</span><br><span class="line">现在的时间是：<span class="number">2024</span>-<span class="number">11</span>-<span class="number">12</span> <span class="number">01</span>:<span class="number">00</span>:<span class="number">52</span></span><br><span class="line">jobDetail 的name ： group1</span><br><span class="line">jobDetail 的group ： group1</span><br><span class="line">==============================</span><br></pre></td></tr></table></figure>
<p><strong>创建两个Job对象</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DisallowConcurrentExecution</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloJob5</span> <span class="keyword">implements</span> <span class="title class_">Job</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;现在的时间是：&quot;</span> + sf.format(date));</span><br><span class="line">        <span class="type">JobKey</span> <span class="variable">key</span> <span class="operator">=</span> jobExecutionContext.getJobDetail().getKey();</span><br><span class="line">        <span class="comment">//打印jobDetail 的name</span></span><br><span class="line">        System.out.println(<span class="string">&quot;jobDetail 的name ： &quot;</span> + key.getName());  </span><br><span class="line">        <span class="comment">//打印jobDetail 的group</span></span><br><span class="line">        System.out.println(<span class="string">&quot;jobDetail 的group ： &quot;</span> + key.getGroup());    </span><br><span class="line">        System.out.println(<span class="string">&quot;==============================&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SchedulerException &#123;</span><br><span class="line">        <span class="comment">//1.创建一个jobDetail的实例，将该实例与HelloJob Class绑定</span></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail1</span> <span class="operator">=</span> JobBuilder</span><br><span class="line">                .newJob(HelloJob5.class) <span class="comment">//定义Job类为HelloJob类，真正的执行逻辑所在</span></span><br><span class="line">                .withIdentity(<span class="string">&quot;group1&quot;</span>, <span class="string">&quot;group1&quot;</span>) <span class="comment">//定义name 和 group</span></span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建一个Trigger触发器的实例，定义该job立即执行，并且每2秒执行一次，一直执行</span></span><br><span class="line">        <span class="type">SimpleTrigger</span> <span class="variable">trigger1</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .withIdentity(<span class="string">&quot;myTrigger1&quot;</span>, <span class="string">&quot;group1&quot;</span>)</span><br><span class="line">                .startNow() <span class="comment">//立即生效</span></span><br><span class="line">                .withSchedule(SimpleScheduleBuilder.simpleSchedule()</span><br><span class="line">                        .withIntervalInSeconds(<span class="number">2</span>) <span class="comment">//每2秒执行一次</span></span><br><span class="line">                        .repeatForever()) <span class="comment">//一直执行</span></span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//3.创建schedule实例</span></span><br><span class="line">        <span class="type">StdSchedulerFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StdSchedulerFactory</span>();</span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> factory.getScheduler();</span><br><span class="line">        scheduler.start(); <span class="comment">//启动</span></span><br><span class="line">        scheduler.scheduleJob(jobDetail1, trigger1); <span class="comment">// jobDetail和trigger加入调度</span></span><br><span class="line"></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail2</span> <span class="operator">=</span> JobBuilder</span><br><span class="line">                .newJob(HelloJob5.class) <span class="comment">//定义Job类为HelloJob类，真正的执行逻辑所在</span></span><br><span class="line">                .withIdentity(<span class="string">&quot;group2&quot;</span>, <span class="string">&quot;group2&quot;</span>) <span class="comment">//定义name 和 group</span></span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建一个Trigger触发器的实例，定义该job立即执行，并且每2秒执行一次，一直执行</span></span><br><span class="line">        <span class="type">SimpleTrigger</span> <span class="variable">trigger2</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .withIdentity(<span class="string">&quot;myTrigger2&quot;</span>, <span class="string">&quot;group2&quot;</span>)</span><br><span class="line">                .startNow() <span class="comment">//立即生效</span></span><br><span class="line">                .withSchedule(SimpleScheduleBuilder.simpleSchedule()</span><br><span class="line">                        .withIntervalInSeconds(<span class="number">3</span>) <span class="comment">//每3秒执行一次</span></span><br><span class="line">                        .repeatForever()) <span class="comment">//一直执行</span></span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//3.创建schedule实例</span></span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler2</span> <span class="operator">=</span> factory.getScheduler();</span><br><span class="line">        scheduler2.start(); <span class="comment">//启动</span></span><br><span class="line">        scheduler2.scheduleJob(jobDetail2, trigger2); <span class="comment">// jobDetail和trigger加入调度</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line">现在的时间是：<span class="number">2024</span>-<span class="number">11</span>-<span class="number">12</span> <span class="number">01</span>:08:<span class="number">37</span></span><br><span class="line">现在的时间是：<span class="number">2024</span>-<span class="number">11</span>-<span class="number">12</span> <span class="number">01</span>:08:<span class="number">37</span></span><br><span class="line">jobDetail 的name ： group2</span><br><span class="line">jobDetail 的name ： group1</span><br><span class="line">jobDetail 的group ： group1</span><br><span class="line">jobDetail 的group ： group2</span><br><span class="line">==============================</span><br><span class="line">==============================</span><br><span class="line">现在的时间是：<span class="number">2024</span>-<span class="number">11</span>-<span class="number">12</span> <span class="number">01</span>:08:<span class="number">40</span></span><br><span class="line">jobDetail 的name ： group2</span><br><span class="line">jobDetail 的group ： group2</span><br><span class="line">==============================</span><br><span class="line">现在的时间是：<span class="number">2024</span>-<span class="number">11</span>-<span class="number">12</span> <span class="number">01</span>:08:<span class="number">40</span></span><br><span class="line">jobDetail 的name ： group1</span><br><span class="line">jobDetail 的group ： group1</span><br><span class="line">==============================</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>定时任务</tag>
        <tag>Quartz</tag>
      </tags>
  </entry>
  <entry>
    <title>Quartz（2-Trigger）</title>
    <url>/blog/2024/11/13/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/Quartz/Quartz%EF%BC%882-Trigger%EF%BC%89/</url>
    <content><![CDATA[<h2 id="Trigger">Trigger</h2>
<h3 id="方法">方法</h3>
<h4 id="优先级（priority）">优先级（priority）</h4>
<p>如果你的trigger很多（或者Quartz线程池的工作线程太少），Quartz可能没有足够的资源同时触发所有的trigger；这种情况下，你可能希望控制哪些trigger优先使用Quartz的工作线程，要达到该目的，可以在trigger上设置priority属性。</p>
<p>比如，你有N个trigger需要同时触发，但只有Z个工作线程，优先级最高的Z个trigger会被首先触发</p>
<h4 id="错过触发（misfire-instructions）">错过触发（misfire instructions）</h4>
<p>如果scheduler关闭了，或者Quartz线程池中没有可用的线程来执行job，此时持久性的trigger就会错过(miss)其触发时间，即错过触发(misfire)。当下次调度器启动或者有可以线程时，会检查处于misfire状态的Trigger。而misfire的状态值决定了调度器如何处理这个Trigger。</p>
<p>不同类型的trigger，有不同的misfire机制。它们默认都使用“智能机制（smart policy）”，即根据trigger的类型和配置动态调整行为</p>
<h3 id="分类">分类</h3>
<p><img src="1.png" alt=""></p>
<h2 id="SimpleTrigger">SimpleTrigger</h2>
<p>为需要在特定的日期/时间启动，且以一个可能的间隔时间重复执行n次的job所设计的</p>
<ol>
<li>startNow()：Scheduler开始执行时，触发器也即执行</li>
<li>startAt()：在指定的时间开始执行</li>
<li>endAt()：结束时间</li>
</ol>
<p>执行间隔：</p>
<ol>
<li>withInterval(TimeSpan timeSpan)：通用的间隔执行方法</li>
<li>withIntervalInHours(int hours)：以小时为间隔单位进行执行</li>
<li>withIntervalInMinutes(int minutes)：以分钟为间隔单位进行执行</li>
<li>withIntervalInSeconds(int seconds)：以秒为间隔单位进行执行</li>
</ol>
<p>执行时间：</p>
<ol>
<li>withRepeatCount(int repeatCount)：执行多少次以后结束</li>
<li>repeatForever()：永远执行</li>
<li>repeatMinutelyForever()：一分钟执行一次(永远执行)</li>
<li>repeatMinutelyForever(int minutes)：每隔几分钟执行一次(永远执行)</li>
<li>repeatMinutelyForTotalCount(int count, int minutes)：每隔几分钟执行一次(执行次数为count)类似的还有秒、小时。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Trigger1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SchedulerException &#123;</span><br><span class="line">        <span class="comment">//创建一个JobDetail的实例，将该实例与HelloJob绑定</span></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder.newJob(HelloJob.class)</span><br><span class="line">                .withIdentity(<span class="string">&quot;testJob&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//开始时间 3秒钟之后 （具体时间按实际业务编写）</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">sData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        sData.setTime(sData.getTime() + <span class="number">3000</span>);</span><br><span class="line">        <span class="comment">//结束时间 20秒钟之后 （具体时间按实际业务编写）</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">eData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        eData.setTime(eData.getTime() + <span class="number">20000</span>);</span><br><span class="line">        <span class="comment">//创建一个Trigger实例，定义该job3秒之后执行，在6秒之后结束</span></span><br><span class="line">        <span class="type">SimpleTrigger</span> <span class="variable">zhlTrigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                    .withIdentity(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">                    .startAt(sData) <span class="comment">//设定开始时间</span></span><br><span class="line">                    .endAt(eData)   <span class="comment">//设定结束时间</span></span><br><span class="line">                    .withSchedule(SimpleScheduleBuilder.simpleSchedule()</span><br><span class="line">                            .withIntervalInSeconds(<span class="number">2</span>) <span class="comment">//每两秒打印一次</span></span><br><span class="line">                            .withRepeatCount(<span class="number">2</span>)) <span class="comment">// 重复2次</span></span><br><span class="line">                    .build();</span><br><span class="line">        <span class="comment">//创建Scheduler实例</span></span><br><span class="line">        <span class="type">StdSchedulerFactory</span> <span class="variable">stdSchedulerFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StdSchedulerFactory</span>();</span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> stdSchedulerFactory.getScheduler();</span><br><span class="line">        scheduler.start();</span><br><span class="line">        scheduler.scheduleJob(jobDetail, zhlTrigger);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloJob</span> <span class="keyword">implements</span> <span class="title class_">Job</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line">        <span class="comment">//打印当前的执行时间 例如 2017-11-22 00:00:00</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;现在的时间是：&quot;</span>+ sf.format(date));</span><br><span class="line">        <span class="comment">//具体的业务逻辑</span></span><br><span class="line">        System.out.println(<span class="string">&quot;具体执行的业务...&quot;</span>);</span><br><span class="line">        <span class="type">JobKey</span> <span class="variable">key</span> <span class="operator">=</span> jobExecutionContext.getJobDetail().getKey();</span><br><span class="line">        <span class="type">Trigger</span> <span class="variable">trigger</span> <span class="operator">=</span> jobExecutionContext.getTrigger();</span><br><span class="line">        System.out.println(<span class="string">&quot;开始的时间：&quot;</span>+sf.format(trigger.getStartTime()));</span><br><span class="line">        System.out.println(<span class="string">&quot;结束的事件：&quot;</span>+sf.format(trigger.getEndTime()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="CronTrigger">CronTrigger</h2>
<p>指定对应的cron表达式执行任务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Trigger2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SchedulerException &#123;</span><br><span class="line">        <span class="comment">//创建一个JobDetail的实例，将该实例与HelloJob绑定</span></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder.newJob(HelloJob.class)</span><br><span class="line">                .withIdentity(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//开始时间 3秒钟之后 （具体时间按实际业务编写）</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">sData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        sData.setTime(sData.getTime() + <span class="number">3000</span>);</span><br><span class="line">        <span class="comment">//结束时间 20秒钟之后 （具体时间按实际业务编写）</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">eData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        eData.setTime(eData.getTime() + <span class="number">20000</span>);</span><br><span class="line">        <span class="comment">//创建一个Trigger实例，定义该job3秒之后执行，在6秒之后结束</span></span><br><span class="line">        <span class="type">CronTrigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .withIdentity(<span class="string">&quot;testTrigger&quot;</span>)</span><br><span class="line">                .startAt(sData) <span class="comment">//设定开始时间</span></span><br><span class="line">                .endAt(eData)   <span class="comment">//设定结束时间</span></span><br><span class="line">                .withSchedule(CronScheduleBuilder.cronSchedule(<span class="string">&quot;0/3 * * * * ?&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//创建Scheduler实例</span></span><br><span class="line">        <span class="type">StdSchedulerFactory</span> <span class="variable">stdSchedulerFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StdSchedulerFactory</span>();</span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> stdSchedulerFactory.getScheduler();</span><br><span class="line">        scheduler.start();</span><br><span class="line">        scheduler.scheduleJob(jobDetail, trigger);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="CalendarIntervalTrigger">CalendarIntervalTrigger</h2>
<p>用来触发基于定时重复的JobDetail，Trigger将会每隔N个Calendar在Trigger中定义的时间单元触发一次，这个Trigger不适合使用SimpleTrigger完成（例如由于每一个月的时间不是固定的描述），也不适用于CronTrigger（例如每5个月）</p>
<p>相较于SimpleTrigger有两个优势：</p>
<ol>
<li>更方便，比如：每隔1小时执行，你不用自己去计算1小时等于多少毫秒。</li>
<li>支持不是固定长度的间隔，比如：间隔为月和年。但劣势是精度只能到秒。</li>
</ol>
<p>参数：</p>
<ol>
<li>interval：执行间隔</li>
<li>intervalUnit：执行间隔的单位（秒、分钟、小时、天、月、年、星期）</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Trigger4</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SchedulerException &#123;</span><br><span class="line">        <span class="comment">//创建一个JobDetail的实例，将该实例与HelloJob绑定</span></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder.newJob(HelloJob.class)</span><br><span class="line">                .withIdentity(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//开始时间 3秒钟之后 （具体时间按实际业务编写）</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">sData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        sData.setTime(sData.getTime() + <span class="number">3000</span>);</span><br><span class="line">        <span class="comment">//结束时间 20秒钟之后 （具体时间按实际业务编写）</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">eData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        eData.setTime(eData.getTime() + <span class="number">20000</span>);</span><br><span class="line">        <span class="comment">//创建一个Trigger实例，定义该job3秒之后执行，在20秒之后结束</span></span><br><span class="line">        <span class="type">CalendarIntervalTrigger</span> <span class="variable">intervalTrigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .withIdentity(<span class="string">&quot;testTrigger&quot;</span>)</span><br><span class="line">                .startAt(sData) <span class="comment">//设定开始时间</span></span><br><span class="line">                .endAt(eData)   <span class="comment">//设定结束时间</span></span><br><span class="line">                .withSchedule(CalendarIntervalScheduleBuilder.calendarIntervalSchedule()</span><br><span class="line">                        .withIntervalInSeconds(<span class="number">5</span>))	<span class="comment">// 每隔5秒执行一次</span></span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//创建Scheduler实例</span></span><br><span class="line">        <span class="type">StdSchedulerFactory</span> <span class="variable">stdSchedulerFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StdSchedulerFactory</span>();</span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> stdSchedulerFactory.getScheduler();</span><br><span class="line">        scheduler.start();</span><br><span class="line">        scheduler.scheduleJob(jobDetail, intervalTrigger);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="DailyTimeIntervalTrigger">DailyTimeIntervalTrigger</h2>
<p>指定每天的某个时间段内，以一定的时间间隔执行任务，并且可以支持星期的设置</p>
<p>适合的任务类似于：指定每天9：00至18：00，每隔10秒执行一次，并且只要周一至周五执行</p>
<p>参数：</p>
<ol>
<li>onEveryDay：每天</li>
<li>onMondayThroughFriday：周一至周五，即工作日</li>
<li>onSaturdayAndSunday：周六至周天，即休息日</li>
<li>onDaysOfTheWeek：用数组的形式单独来指定一周中的哪几天</li>
<li>startingDailyAt：表示开始于几点 （区别于前面的StartAt）</li>
<li>sndingDailyAt：表示结束于几点 （区别于前面的EndAt）</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Trigger3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SchedulerException &#123;</span><br><span class="line">        <span class="comment">//创建一个JobDetail的实例，将该实例与HelloJob绑定</span></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder.newJob(HelloJob.class)</span><br><span class="line">                .withIdentity(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//开始时间 3秒钟之后 （具体时间按实际业务编写）</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">sData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        sData.setTime(sData.getTime() + <span class="number">3000</span>);</span><br><span class="line">        <span class="comment">//结束时间 20秒钟之后 （具体时间按实际业务编写）</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">eData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        eData.setTime(eData.getTime() + <span class="number">20000</span>);</span><br><span class="line">        <span class="comment">//创建一个Trigger实例，定义该job3秒之后执行，在20秒之后结束</span></span><br><span class="line">        <span class="type">DailyTimeIntervalTrigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .withIdentity(<span class="string">&quot;testTrigger&quot;</span>)</span><br><span class="line">                .startAt(sData) <span class="comment">//设定开始时间</span></span><br><span class="line">                .endAt(eData)   <span class="comment">//设定结束时间</span></span><br><span class="line">                .withSchedule(DailyTimeIntervalScheduleBuilder.dailyTimeIntervalSchedule()</span><br><span class="line">                        .withIntervalInSeconds(<span class="number">3</span>)</span><br><span class="line">                        .onEveryDay()) <span class="comment">//每天每隔3秒执行一次</span></span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//创建Scheduler实例</span></span><br><span class="line">        <span class="type">StdSchedulerFactory</span> <span class="variable">stdSchedulerFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StdSchedulerFactory</span>();</span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> stdSchedulerFactory.getScheduler();</span><br><span class="line">        scheduler.start();</span><br><span class="line">        scheduler.scheduleJob(jobDetail, trigger);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>定时任务</tag>
        <tag>Quartz</tag>
      </tags>
  </entry>
</search>
